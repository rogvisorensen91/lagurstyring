// @bun
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __require = import.meta.require;

// ../../crates/node/npm/win32-x64-msvc/tailwindcss-oxide.win32-x64-msvc.node
var require_tailwindcss_oxide_win32_x64_msvc = __commonJS((exports, module) => {
  module.exports = __require("./tailwindcss-oxide.win32-x64-msvc-xr5qjnyt.node");
});

// ../../crates/node/npm/darwin-x64/tailwindcss-oxide.darwin-x64.node
var require_tailwindcss_oxide_darwin_x64 = __commonJS((exports, module) => {
  module.exports = __require("./tailwindcss-oxide.darwin-x64-5v42ky5b.node");
});

// ../../crates/node/npm/darwin-arm64/tailwindcss-oxide.darwin-arm64.node
var require_tailwindcss_oxide_darwin_arm64 = __commonJS((exports, module) => {
  module.exports = __require("./tailwindcss-oxide.darwin-arm64-kj7ccfpw.node");
});

// ../../crates/node/npm/linux-x64-musl/tailwindcss-oxide.linux-x64-musl.node
var require_tailwindcss_oxide_linux_x64_musl = __commonJS((exports, module) => {
  module.exports = __require("./tailwindcss-oxide.linux-x64-musl-bwcz811j.node");
});

// ../../crates/node/npm/linux-x64-gnu/tailwindcss-oxide.linux-x64-gnu.node
var require_tailwindcss_oxide_linux_x64_gnu = __commonJS((exports, module) => {
  module.exports = __require("./tailwindcss-oxide.linux-x64-gnu-mq811hp9.node");
});

// ../../crates/node/npm/linux-arm64-musl/tailwindcss-oxide.linux-arm64-musl.node
var require_tailwindcss_oxide_linux_arm64_musl = __commonJS((exports, module) => {
  module.exports = __require("./tailwindcss-oxide.linux-arm64-musl-ezpnffz8.node");
});

// ../../crates/node/npm/linux-arm64-gnu/tailwindcss-oxide.linux-arm64-gnu.node
var require_tailwindcss_oxide_linux_arm64_gnu = __commonJS((exports, module) => {
  module.exports = __require("./tailwindcss-oxide.linux-arm64-gnu-p118yphy.node");
});

// ../@tailwindcss-node/dist/index.js
import { createRequire } from "module";
import * as Module from "module";
import { pathToFileURL as pathToFileURL2 } from "url";
import { createRequire as createRequire22 } from "module";
import fs2 from "fs";
import fsPromises from "fs/promises";
import path3, { dirname } from "path";
import { pathToFileURL } from "url";
import fs from "fs/promises";
import path from "path";
import * as path2 from "path";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS2 = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __require2 = /* @__PURE__ */ createRequire(import.meta.url);
var require_polyfills = __commonJS2((exports, module) => {
  var constants = __require2("constants");
  var origCwd = process.cwd;
  var cwd = null;
  var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd;
  };
  try {
    process.cwd();
  } catch (er) {
  }
  if (typeof process.chdir === "function") {
    chdir = process.chdir;
    process.chdir = function(d) {
      cwd = null;
      chdir.call(process, d);
    };
    if (Object.setPrototypeOf)
      Object.setPrototypeOf(process.chdir, chdir);
  }
  var chdir;
  module.exports = patch;
  function patch(fs3) {
    if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs3);
    }
    if (!fs3.lutimes) {
      patchLutimes(fs3);
    }
    fs3.chown = chownFix(fs3.chown);
    fs3.fchown = chownFix(fs3.fchown);
    fs3.lchown = chownFix(fs3.lchown);
    fs3.chmod = chmodFix(fs3.chmod);
    fs3.fchmod = chmodFix(fs3.fchmod);
    fs3.lchmod = chmodFix(fs3.lchmod);
    fs3.chownSync = chownFixSync(fs3.chownSync);
    fs3.fchownSync = chownFixSync(fs3.fchownSync);
    fs3.lchownSync = chownFixSync(fs3.lchownSync);
    fs3.chmodSync = chmodFixSync(fs3.chmodSync);
    fs3.fchmodSync = chmodFixSync(fs3.fchmodSync);
    fs3.lchmodSync = chmodFixSync(fs3.lchmodSync);
    fs3.stat = statFix(fs3.stat);
    fs3.fstat = statFix(fs3.fstat);
    fs3.lstat = statFix(fs3.lstat);
    fs3.statSync = statFixSync(fs3.statSync);
    fs3.fstatSync = statFixSync(fs3.fstatSync);
    fs3.lstatSync = statFixSync(fs3.lstatSync);
    if (fs3.chmod && !fs3.lchmod) {
      fs3.lchmod = function(path4, mode, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs3.lchmodSync = function() {
      };
    }
    if (fs3.chown && !fs3.lchown) {
      fs3.lchown = function(path4, uid, gid, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs3.lchownSync = function() {
      };
    }
    if (platform === "win32") {
      fs3.rename = typeof fs3.rename !== "function" ? fs3.rename : function(fs$rename) {
        function rename(from, to, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to, function CB(er) {
            if (er && (er.code === "EACCES" || er.code === "EPERM" || er.code === "EBUSY") && Date.now() - start < 60000) {
              setTimeout(function() {
                fs3.stat(to, function(stater, st) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to, CB);
                  else
                    cb(er);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb)
              cb(er);
          });
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(rename, fs$rename);
        return rename;
      }(fs3.rename);
    }
    fs3.read = typeof fs3.read !== "function" ? fs3.read : function(fs$read) {
      function read(fd, buffer, offset, length, position, callback_) {
        var callback;
        if (callback_ && typeof callback_ === "function") {
          var eagCounter = 0;
          callback = function(er, _, __) {
            if (er && er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs3, fd, buffer, offset, length, position, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs3, fd, buffer, offset, length, position, callback);
      }
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(read, fs$read);
      return read;
    }(fs3.read);
    fs3.readSync = typeof fs3.readSync !== "function" ? fs3.readSync : function(fs$readSync) {
      return function(fd, buffer, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs3, fd, buffer, offset, length, position);
          } catch (er) {
            if (er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er;
          }
        }
      };
    }(fs3.readSync);
    function patchLchmod(fs22) {
      fs22.lchmod = function(path4, mode, callback) {
        fs22.open(path4, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
          if (err) {
            if (callback)
              callback(err);
            return;
          }
          fs22.fchmod(fd, mode, function(err2) {
            fs22.close(fd, function(err22) {
              if (callback)
                callback(err2 || err22);
            });
          });
        });
      };
      fs22.lchmodSync = function(path4, mode) {
        var fd = fs22.openSync(path4, constants.O_WRONLY | constants.O_SYMLINK, mode);
        var threw = true;
        var ret;
        try {
          ret = fs22.fchmodSync(fd, mode);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs22.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs22.closeSync(fd);
          }
        }
        return ret;
      };
    }
    function patchLutimes(fs22) {
      if (constants.hasOwnProperty("O_SYMLINK") && fs22.futimes) {
        fs22.lutimes = function(path4, at, mt, cb) {
          fs22.open(path4, constants.O_SYMLINK, function(er, fd) {
            if (er) {
              if (cb)
                cb(er);
              return;
            }
            fs22.futimes(fd, at, mt, function(er2) {
              fs22.close(fd, function(er22) {
                if (cb)
                  cb(er2 || er22);
              });
            });
          });
        };
        fs22.lutimesSync = function(path4, at, mt) {
          var fd = fs22.openSync(path4, constants.O_SYMLINK);
          var ret;
          var threw = true;
          try {
            ret = fs22.futimesSync(fd, at, mt);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs22.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs22.closeSync(fd);
            }
          }
          return ret;
        };
      } else if (fs22.futimes) {
        fs22.lutimes = function(_a, _b, _c, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs22.lutimesSync = function() {
        };
      }
    }
    function chmodFix(orig) {
      if (!orig)
        return orig;
      return function(target, mode, cb) {
        return orig.call(fs3, target, mode, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chmodFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, mode) {
        try {
          return orig.call(fs3, target, mode);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function chownFix(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid, cb) {
        return orig.call(fs3, target, uid, gid, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chownFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid) {
        try {
          return orig.call(fs3, target, uid, gid);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function statFix(orig) {
      if (!orig)
        return orig;
      return function(target, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = null;
        }
        function callback(er, stats) {
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          if (cb)
            cb.apply(this, arguments);
        }
        return options ? orig.call(fs3, target, options, callback) : orig.call(fs3, target, callback);
      };
    }
    function statFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, options) {
        var stats = options ? orig.call(fs3, target, options) : orig.call(fs3, target);
        if (stats) {
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
        }
        return stats;
      };
    }
    function chownErOk(er) {
      if (!er)
        return true;
      if (er.code === "ENOSYS")
        return true;
      var nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (er.code === "EINVAL" || er.code === "EPERM")
          return true;
      }
      return false;
    }
  }
});
var require_legacy_streams = __commonJS2((exports, module) => {
  var Stream = __require2("stream").Stream;
  module.exports = legacy;
  function legacy(fs3) {
    return {
      ReadStream,
      WriteStream
    };
    function ReadStream(path4, options) {
      if (!(this instanceof ReadStream))
        return new ReadStream(path4, options);
      Stream.call(this);
      var self = this;
      this.path = path4;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = "r";
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length;index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.encoding)
        this.setEncoding(this.encoding);
      if (this.start !== undefined) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.end === undefined) {
          this.end = Infinity;
        } else if (typeof this.end !== "number") {
          throw TypeError("end must be a Number");
        }
        if (this.start > this.end) {
          throw new Error("start must be <= end");
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self._read();
        });
        return;
      }
      fs3.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self.emit("error", err);
          self.readable = false;
          return;
        }
        self.fd = fd;
        self.emit("open", fd);
        self._read();
      });
    }
    function WriteStream(path4, options) {
      if (!(this instanceof WriteStream))
        return new WriteStream(path4, options);
      Stream.call(this);
      this.path = path4;
      this.fd = null;
      this.writable = true;
      this.flags = "w";
      this.encoding = "binary";
      this.mode = 438;
      this.bytesWritten = 0;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length;index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.start !== undefined) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.start < 0) {
          throw new Error("start must be >= zero");
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs3.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
        this.flush();
      }
    }
  }
});
var require_clone = __commonJS2((exports, module) => {
  module.exports = clone;
  var getPrototypeOf = Object.getPrototypeOf || function(obj) {
    return obj.__proto__;
  };
  function clone(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (obj instanceof Object)
      var copy = { __proto__: getPrototypeOf(obj) };
    else
      var copy = Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy;
  }
});
var require_graceful_fs = __commonJS2((exports, module) => {
  var fs3 = __require2("fs");
  var polyfills = require_polyfills();
  var legacy = require_legacy_streams();
  var clone = require_clone();
  var util = __require2("util");
  var gracefulQueue;
  var previousSymbol;
  if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    previousSymbol = Symbol.for("graceful-fs.previous");
  } else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
  }
  function noop() {
  }
  function publishQueue(context, queue2) {
    Object.defineProperty(context, gracefulQueue, {
      get: function() {
        return queue2;
      }
    });
  }
  var debug = noop;
  if (util.debuglog)
    debug = util.debuglog("gfs4");
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
    debug = function() {
      var m = util.format.apply(util, arguments);
      m = "GFS4: " + m.split(/\n/).join(`
GFS4: `);
      console.error(m);
    };
  if (!fs3[gracefulQueue]) {
    queue = global[gracefulQueue] || [];
    publishQueue(fs3, queue);
    fs3.close = function(fs$close) {
      function close(fd, cb) {
        return fs$close.call(fs3, fd, function(err) {
          if (!err) {
            resetQueue();
          }
          if (typeof cb === "function")
            cb.apply(this, arguments);
        });
      }
      Object.defineProperty(close, previousSymbol, {
        value: fs$close
      });
      return close;
    }(fs3.close);
    fs3.closeSync = function(fs$closeSync) {
      function closeSync(fd) {
        fs$closeSync.apply(fs3, arguments);
        resetQueue();
      }
      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync
      });
      return closeSync;
    }(fs3.closeSync);
    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
      process.on("exit", function() {
        debug(fs3[gracefulQueue]);
        __require2("assert").equal(fs3[gracefulQueue].length, 0);
      });
    }
  }
  var queue;
  if (!global[gracefulQueue]) {
    publishQueue(global, fs3[gracefulQueue]);
  }
  module.exports = patch(clone(fs3));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs3.__patched) {
    module.exports = patch(fs3);
    fs3.__patched = true;
  }
  function patch(fs22) {
    polyfills(fs22);
    fs22.gracefulify = patch;
    fs22.createReadStream = createReadStream;
    fs22.createWriteStream = createWriteStream;
    var fs$readFile = fs22.readFile;
    fs22.readFile = readFile;
    function readFile(path4, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$readFile(path4, options, cb);
      function go$readFile(path22, options2, cb2, startTime) {
        return fs$readFile(path22, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readFile, [path22, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$writeFile = fs22.writeFile;
    fs22.writeFile = writeFile;
    function writeFile(path4, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$writeFile(path4, data, options, cb);
      function go$writeFile(path22, data2, options2, cb2, startTime) {
        return fs$writeFile(path22, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$writeFile, [path22, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$appendFile = fs22.appendFile;
    if (fs$appendFile)
      fs22.appendFile = appendFile;
    function appendFile(path4, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$appendFile(path4, data, options, cb);
      function go$appendFile(path22, data2, options2, cb2, startTime) {
        return fs$appendFile(path22, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$appendFile, [path22, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$copyFile = fs22.copyFile;
    if (fs$copyFile)
      fs22.copyFile = copyFile;
    function copyFile(src, dest, flags, cb) {
      if (typeof flags === "function") {
        cb = flags;
        flags = 0;
      }
      return go$copyFile(src, dest, flags, cb);
      function go$copyFile(src2, dest2, flags2, cb2, startTime) {
        return fs$copyFile(src2, dest2, flags2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    var fs$readdir = fs22.readdir;
    fs22.readdir = readdir;
    var noReaddirOptionVersions = /^v[0-5]\./;
    function readdir(path4, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir(path22, options2, cb2, startTime) {
        return fs$readdir(path22, fs$readdirCallback(path22, options2, cb2, startTime));
      } : function go$readdir(path22, options2, cb2, startTime) {
        return fs$readdir(path22, options2, fs$readdirCallback(path22, options2, cb2, startTime));
      };
      return go$readdir(path4, options, cb);
      function fs$readdirCallback(path22, options2, cb2, startTime) {
        return function(err, files) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([
              go$readdir,
              [path22, options2, cb2],
              err,
              startTime || Date.now(),
              Date.now()
            ]);
          else {
            if (files && files.sort)
              files.sort();
            if (typeof cb2 === "function")
              cb2.call(this, err, files);
          }
        };
      }
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var legStreams = legacy(fs22);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs22.ReadStream;
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype);
      ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs22.WriteStream;
    if (fs$WriteStream) {
      WriteStream.prototype = Object.create(fs$WriteStream.prototype);
      WriteStream.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs22, "ReadStream", {
      get: function() {
        return ReadStream;
      },
      set: function(val) {
        ReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(fs22, "WriteStream", {
      get: function() {
        return WriteStream;
      },
      set: function(val) {
        WriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileReadStream = ReadStream;
    Object.defineProperty(fs22, "FileReadStream", {
      get: function() {
        return FileReadStream;
      },
      set: function(val) {
        FileReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileWriteStream = WriteStream;
    Object.defineProperty(fs22, "FileWriteStream", {
      get: function() {
        return FileWriteStream;
      },
      set: function(val) {
        FileWriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    function ReadStream(path4, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
          that.read();
        }
      });
    }
    function WriteStream(path4, options) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
        }
      });
    }
    function createReadStream(path4, options) {
      return new fs22.ReadStream(path4, options);
    }
    function createWriteStream(path4, options) {
      return new fs22.WriteStream(path4, options);
    }
    var fs$open = fs22.open;
    fs22.open = open;
    function open(path4, flags, mode, cb) {
      if (typeof mode === "function")
        cb = mode, mode = null;
      return go$open(path4, flags, mode, cb);
      function go$open(path22, flags2, mode2, cb2, startTime) {
        return fs$open(path22, flags2, mode2, function(err, fd) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$open, [path22, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          }
        });
      }
    }
    return fs22;
  }
  function enqueue(elem) {
    debug("ENQUEUE", elem[0].name, elem[1]);
    fs3[gracefulQueue].push(elem);
    retry();
  }
  var retryTimer;
  function resetQueue() {
    var now = Date.now();
    for (var i = 0;i < fs3[gracefulQueue].length; ++i) {
      if (fs3[gracefulQueue][i].length > 2) {
        fs3[gracefulQueue][i][3] = now;
        fs3[gracefulQueue][i][4] = now;
      }
    }
    retry();
  }
  function retry() {
    clearTimeout(retryTimer);
    retryTimer = undefined;
    if (fs3[gracefulQueue].length === 0)
      return;
    var elem = fs3[gracefulQueue].shift();
    var fn = elem[0];
    var args = elem[1];
    var err = elem[2];
    var startTime = elem[3];
    var lastTime = elem[4];
    if (startTime === undefined) {
      debug("RETRY", fn.name, args);
      fn.apply(null, args);
    } else if (Date.now() - startTime >= 60000) {
      debug("TIMEOUT", fn.name, args);
      var cb = args.pop();
      if (typeof cb === "function")
        cb.call(null, err);
    } else {
      var sinceAttempt = Date.now() - lastTime;
      var sinceStart = Math.max(lastTime - startTime, 1);
      var desiredDelay = Math.min(sinceStart * 1.2, 100);
      if (sinceAttempt >= desiredDelay) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args.concat([startTime]));
      } else {
        fs3[gracefulQueue].push(elem);
      }
    }
    if (retryTimer === undefined) {
      retryTimer = setTimeout(retry, 0);
    }
  }
});
var require_CachedInputFileSystem = __commonJS2((exports, module) => {
  var nextTick = __require2("process").nextTick;
  var dirname2 = (path4) => {
    let idx = path4.length - 1;
    while (idx >= 0) {
      const c = path4.charCodeAt(idx);
      if (c === 47 || c === 92)
        break;
      idx--;
    }
    if (idx < 0)
      return "";
    return path4.slice(0, idx);
  };
  var runCallbacks = (callbacks, err, result) => {
    if (callbacks.length === 1) {
      callbacks[0](err, result);
      callbacks.length = 0;
      return;
    }
    let error;
    for (const callback of callbacks) {
      try {
        callback(err, result);
      } catch (e) {
        if (!error)
          error = e;
      }
    }
    callbacks.length = 0;
    if (error)
      throw error;
  };

  class OperationMergerBackend {
    constructor(provider, syncProvider, providerContext) {
      this._provider = provider;
      this._syncProvider = syncProvider;
      this._providerContext = providerContext;
      this._activeAsyncOperations = new Map;
      this.provide = this._provider ? (path4, options, callback) => {
        if (typeof options === "function") {
          callback = options;
          options = undefined;
        }
        if (typeof path4 !== "string" && !Buffer.isBuffer(path4) && !(path4 instanceof URL) && typeof path4 !== "number") {
          callback(new TypeError("path must be a string, Buffer, URL or number"));
          return;
        }
        if (options) {
          return this._provider.call(this._providerContext, path4, options, callback);
        }
        let callbacks = this._activeAsyncOperations.get(path4);
        if (callbacks) {
          callbacks.push(callback);
          return;
        }
        this._activeAsyncOperations.set(path4, callbacks = [callback]);
        provider(path4, (err, result) => {
          this._activeAsyncOperations.delete(path4);
          runCallbacks(callbacks, err, result);
        });
      } : null;
      this.provideSync = this._syncProvider ? (path4, options) => {
        return this._syncProvider.call(this._providerContext, path4, options);
      } : null;
    }
    purge() {
    }
    purgeParent() {
    }
  }
  var STORAGE_MODE_IDLE = 0;
  var STORAGE_MODE_SYNC = 1;
  var STORAGE_MODE_ASYNC = 2;

  class CacheBackend {
    constructor(duration, provider, syncProvider, providerContext) {
      this._duration = duration;
      this._provider = provider;
      this._syncProvider = syncProvider;
      this._providerContext = providerContext;
      this._activeAsyncOperations = new Map;
      this._data = new Map;
      this._levels = [];
      for (let i = 0;i < 10; i++)
        this._levels.push(new Set);
      for (let i = 5000;i < duration; i += 500)
        this._levels.push(new Set);
      this._currentLevel = 0;
      this._tickInterval = Math.floor(duration / this._levels.length);
      this._mode = STORAGE_MODE_IDLE;
      this._timeout = undefined;
      this._nextDecay = undefined;
      this.provide = provider ? this.provide.bind(this) : null;
      this.provideSync = syncProvider ? this.provideSync.bind(this) : null;
    }
    provide(path4, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = undefined;
      }
      if (typeof path4 !== "string" && !Buffer.isBuffer(path4) && !(path4 instanceof URL) && typeof path4 !== "number") {
        callback(new TypeError("path must be a string, Buffer, URL or number"));
        return;
      }
      const strPath = typeof path4 !== "string" ? path4.toString() : path4;
      if (options) {
        return this._provider.call(this._providerContext, path4, options, callback);
      }
      if (this._mode === STORAGE_MODE_SYNC) {
        this._enterAsyncMode();
      }
      let cacheEntry = this._data.get(strPath);
      if (cacheEntry !== undefined) {
        if (cacheEntry.err)
          return nextTick(callback, cacheEntry.err);
        return nextTick(callback, null, cacheEntry.result);
      }
      let callbacks = this._activeAsyncOperations.get(strPath);
      if (callbacks !== undefined) {
        callbacks.push(callback);
        return;
      }
      this._activeAsyncOperations.set(strPath, callbacks = [callback]);
      this._provider.call(this._providerContext, path4, (err, result) => {
        this._activeAsyncOperations.delete(strPath);
        this._storeResult(strPath, err, result);
        this._enterAsyncMode();
        runCallbacks(callbacks, err, result);
      });
    }
    provideSync(path4, options) {
      if (typeof path4 !== "string" && !Buffer.isBuffer(path4) && !(path4 instanceof URL) && typeof path4 !== "number") {
        throw new TypeError("path must be a string");
      }
      const strPath = typeof path4 !== "string" ? path4.toString() : path4;
      if (options) {
        return this._syncProvider.call(this._providerContext, path4, options);
      }
      if (this._mode === STORAGE_MODE_SYNC) {
        this._runDecays();
      }
      let cacheEntry = this._data.get(strPath);
      if (cacheEntry !== undefined) {
        if (cacheEntry.err)
          throw cacheEntry.err;
        return cacheEntry.result;
      }
      const callbacks = this._activeAsyncOperations.get(strPath);
      this._activeAsyncOperations.delete(strPath);
      let result;
      try {
        result = this._syncProvider.call(this._providerContext, path4);
      } catch (err) {
        this._storeResult(strPath, err, undefined);
        this._enterSyncModeWhenIdle();
        if (callbacks) {
          runCallbacks(callbacks, err, undefined);
        }
        throw err;
      }
      this._storeResult(strPath, null, result);
      this._enterSyncModeWhenIdle();
      if (callbacks) {
        runCallbacks(callbacks, null, result);
      }
      return result;
    }
    purge(what) {
      if (!what) {
        if (this._mode !== STORAGE_MODE_IDLE) {
          this._data.clear();
          for (const level of this._levels) {
            level.clear();
          }
          this._enterIdleMode();
        }
      } else if (typeof what === "string" || Buffer.isBuffer(what) || what instanceof URL || typeof what === "number") {
        const strWhat = typeof what !== "string" ? what.toString() : what;
        for (let [key, data] of this._data) {
          if (key.startsWith(strWhat)) {
            this._data.delete(key);
            data.level.delete(key);
          }
        }
        if (this._data.size === 0) {
          this._enterIdleMode();
        }
      } else {
        for (let [key, data] of this._data) {
          for (const item of what) {
            const strItem = typeof item !== "string" ? item.toString() : item;
            if (key.startsWith(strItem)) {
              this._data.delete(key);
              data.level.delete(key);
              break;
            }
          }
        }
        if (this._data.size === 0) {
          this._enterIdleMode();
        }
      }
    }
    purgeParent(what) {
      if (!what) {
        this.purge();
      } else if (typeof what === "string" || Buffer.isBuffer(what) || what instanceof URL || typeof what === "number") {
        const strWhat = typeof what !== "string" ? what.toString() : what;
        this.purge(dirname2(strWhat));
      } else {
        const set = new Set;
        for (const item of what) {
          const strItem = typeof item !== "string" ? item.toString() : item;
          set.add(dirname2(strItem));
        }
        this.purge(set);
      }
    }
    _storeResult(path4, err, result) {
      if (this._data.has(path4))
        return;
      const level = this._levels[this._currentLevel];
      this._data.set(path4, { err, result, level });
      level.add(path4);
    }
    _decayLevel() {
      const nextLevel = (this._currentLevel + 1) % this._levels.length;
      const decay = this._levels[nextLevel];
      this._currentLevel = nextLevel;
      for (let item of decay) {
        this._data.delete(item);
      }
      decay.clear();
      if (this._data.size === 0) {
        this._enterIdleMode();
      } else {
        this._nextDecay += this._tickInterval;
      }
    }
    _runDecays() {
      while (this._nextDecay <= Date.now() && this._mode !== STORAGE_MODE_IDLE) {
        this._decayLevel();
      }
    }
    _enterAsyncMode() {
      let timeout = 0;
      switch (this._mode) {
        case STORAGE_MODE_ASYNC:
          return;
        case STORAGE_MODE_IDLE:
          this._nextDecay = Date.now() + this._tickInterval;
          timeout = this._tickInterval;
          break;
        case STORAGE_MODE_SYNC:
          this._runDecays();
          if (this._mode === STORAGE_MODE_IDLE)
            return;
          timeout = Math.max(0, this._nextDecay - Date.now());
          break;
      }
      this._mode = STORAGE_MODE_ASYNC;
      const ref = setTimeout(() => {
        this._mode = STORAGE_MODE_SYNC;
        this._runDecays();
      }, timeout);
      if (ref.unref)
        ref.unref();
      this._timeout = ref;
    }
    _enterSyncModeWhenIdle() {
      if (this._mode === STORAGE_MODE_IDLE) {
        this._mode = STORAGE_MODE_SYNC;
        this._nextDecay = Date.now() + this._tickInterval;
      }
    }
    _enterIdleMode() {
      this._mode = STORAGE_MODE_IDLE;
      this._nextDecay = undefined;
      if (this._timeout)
        clearTimeout(this._timeout);
    }
  }
  var createBackend = (duration, provider, syncProvider, providerContext) => {
    if (duration > 0) {
      return new CacheBackend(duration, provider, syncProvider, providerContext);
    }
    return new OperationMergerBackend(provider, syncProvider, providerContext);
  };
  module.exports = class CachedInputFileSystem {
    constructor(fileSystem, duration) {
      this.fileSystem = fileSystem;
      this._lstatBackend = createBackend(duration, this.fileSystem.lstat, this.fileSystem.lstatSync, this.fileSystem);
      const lstat = this._lstatBackend.provide;
      this.lstat = lstat;
      const lstatSync = this._lstatBackend.provideSync;
      this.lstatSync = lstatSync;
      this._statBackend = createBackend(duration, this.fileSystem.stat, this.fileSystem.statSync, this.fileSystem);
      const stat = this._statBackend.provide;
      this.stat = stat;
      const statSync = this._statBackend.provideSync;
      this.statSync = statSync;
      this._readdirBackend = createBackend(duration, this.fileSystem.readdir, this.fileSystem.readdirSync, this.fileSystem);
      const readdir = this._readdirBackend.provide;
      this.readdir = readdir;
      const readdirSync = this._readdirBackend.provideSync;
      this.readdirSync = readdirSync;
      this._readFileBackend = createBackend(duration, this.fileSystem.readFile, this.fileSystem.readFileSync, this.fileSystem);
      const readFile = this._readFileBackend.provide;
      this.readFile = readFile;
      const readFileSync = this._readFileBackend.provideSync;
      this.readFileSync = readFileSync;
      this._readJsonBackend = createBackend(duration, this.fileSystem.readJson || this.readFile && ((path4, callback) => {
        this.readFile(path4, (err, buffer) => {
          if (err)
            return callback(err);
          if (!buffer || buffer.length === 0)
            return callback(new Error("No file content"));
          let data;
          try {
            data = JSON.parse(buffer.toString("utf-8"));
          } catch (e) {
            return callback(e);
          }
          callback(null, data);
        });
      }), this.fileSystem.readJsonSync || this.readFileSync && ((path4) => {
        const buffer = this.readFileSync(path4);
        const data = JSON.parse(buffer.toString("utf-8"));
        return data;
      }), this.fileSystem);
      const readJson = this._readJsonBackend.provide;
      this.readJson = readJson;
      const readJsonSync = this._readJsonBackend.provideSync;
      this.readJsonSync = readJsonSync;
      this._readlinkBackend = createBackend(duration, this.fileSystem.readlink, this.fileSystem.readlinkSync, this.fileSystem);
      const readlink = this._readlinkBackend.provide;
      this.readlink = readlink;
      const readlinkSync = this._readlinkBackend.provideSync;
      this.readlinkSync = readlinkSync;
      this._realpathBackend = createBackend(duration, this.fileSystem.realpath, this.fileSystem.realpathSync, this.fileSystem);
      const realpath = this._realpathBackend.provide;
      this.realpath = realpath;
      const realpathSync = this._realpathBackend.provideSync;
      this.realpathSync = realpathSync;
    }
    purge(what) {
      this._statBackend.purge(what);
      this._lstatBackend.purge(what);
      this._readdirBackend.purgeParent(what);
      this._readFileBackend.purge(what);
      this._readlinkBackend.purge(what);
      this._readJsonBackend.purge(what);
      this._realpathBackend.purge(what);
    }
  };
});
var require_Hook = __commonJS2((exports, module) => {
  var util = __require2("util");
  var deprecateContext = util.deprecate(() => {
  }, "Hook.context is deprecated and will be removed");
  var CALL_DELEGATE = function(...args) {
    this.call = this._createCall("sync");
    return this.call(...args);
  };
  var CALL_ASYNC_DELEGATE = function(...args) {
    this.callAsync = this._createCall("async");
    return this.callAsync(...args);
  };
  var PROMISE_DELEGATE = function(...args) {
    this.promise = this._createCall("promise");
    return this.promise(...args);
  };

  class Hook {
    constructor(args = [], name = undefined) {
      this._args = args;
      this.name = name;
      this.taps = [];
      this.interceptors = [];
      this._call = CALL_DELEGATE;
      this.call = CALL_DELEGATE;
      this._callAsync = CALL_ASYNC_DELEGATE;
      this.callAsync = CALL_ASYNC_DELEGATE;
      this._promise = PROMISE_DELEGATE;
      this.promise = PROMISE_DELEGATE;
      this._x = undefined;
      this.compile = this.compile;
      this.tap = this.tap;
      this.tapAsync = this.tapAsync;
      this.tapPromise = this.tapPromise;
    }
    compile(options) {
      throw new Error("Abstract: should be overridden");
    }
    _createCall(type) {
      return this.compile({
        taps: this.taps,
        interceptors: this.interceptors,
        args: this._args,
        type
      });
    }
    _tap(type, options, fn) {
      if (typeof options === "string") {
        options = {
          name: options.trim()
        };
      } else if (typeof options !== "object" || options === null) {
        throw new Error("Invalid tap options");
      }
      if (typeof options.name !== "string" || options.name === "") {
        throw new Error("Missing name for tap");
      }
      if (typeof options.context !== "undefined") {
        deprecateContext();
      }
      options = Object.assign({ type, fn }, options);
      options = this._runRegisterInterceptors(options);
      this._insert(options);
    }
    tap(options, fn) {
      this._tap("sync", options, fn);
    }
    tapAsync(options, fn) {
      this._tap("async", options, fn);
    }
    tapPromise(options, fn) {
      this._tap("promise", options, fn);
    }
    _runRegisterInterceptors(options) {
      for (const interceptor of this.interceptors) {
        if (interceptor.register) {
          const newOptions = interceptor.register(options);
          if (newOptions !== undefined) {
            options = newOptions;
          }
        }
      }
      return options;
    }
    withOptions(options) {
      const mergeOptions = (opt) => Object.assign({}, options, typeof opt === "string" ? { name: opt } : opt);
      return {
        name: this.name,
        tap: (opt, fn) => this.tap(mergeOptions(opt), fn),
        tapAsync: (opt, fn) => this.tapAsync(mergeOptions(opt), fn),
        tapPromise: (opt, fn) => this.tapPromise(mergeOptions(opt), fn),
        intercept: (interceptor) => this.intercept(interceptor),
        isUsed: () => this.isUsed(),
        withOptions: (opt) => this.withOptions(mergeOptions(opt))
      };
    }
    isUsed() {
      return this.taps.length > 0 || this.interceptors.length > 0;
    }
    intercept(interceptor) {
      this._resetCompilation();
      this.interceptors.push(Object.assign({}, interceptor));
      if (interceptor.register) {
        for (let i = 0;i < this.taps.length; i++) {
          this.taps[i] = interceptor.register(this.taps[i]);
        }
      }
    }
    _resetCompilation() {
      this.call = this._call;
      this.callAsync = this._callAsync;
      this.promise = this._promise;
    }
    _insert(item) {
      this._resetCompilation();
      let before;
      if (typeof item.before === "string") {
        before = new Set([item.before]);
      } else if (Array.isArray(item.before)) {
        before = new Set(item.before);
      }
      let stage = 0;
      if (typeof item.stage === "number") {
        stage = item.stage;
      }
      let i = this.taps.length;
      while (i > 0) {
        i--;
        const x = this.taps[i];
        this.taps[i + 1] = x;
        const xStage = x.stage || 0;
        if (before) {
          if (before.has(x.name)) {
            before.delete(x.name);
            continue;
          }
          if (before.size > 0) {
            continue;
          }
        }
        if (xStage > stage) {
          continue;
        }
        i++;
        break;
      }
      this.taps[i] = item;
    }
  }
  Object.setPrototypeOf(Hook.prototype, null);
  module.exports = Hook;
});
var require_HookCodeFactory = __commonJS2((exports, module) => {

  class HookCodeFactory {
    constructor(config) {
      this.config = config;
      this.options = undefined;
      this._args = undefined;
    }
    create(options) {
      this.init(options);
      let fn;
      switch (this.options.type) {
        case "sync":
          fn = new Function(this.args(), `"use strict";
` + this.header() + this.contentWithInterceptors({
            onError: (err) => `throw ${err};
`,
            onResult: (result) => `return ${result};
`,
            resultReturns: true,
            onDone: () => "",
            rethrowIfPossible: true
          }));
          break;
        case "async":
          fn = new Function(this.args({
            after: "_callback"
          }), `"use strict";
` + this.header() + this.contentWithInterceptors({
            onError: (err) => `_callback(${err});
`,
            onResult: (result) => `_callback(null, ${result});
`,
            onDone: () => `_callback();
`
          }));
          break;
        case "promise":
          let errorHelperUsed = false;
          const content = this.contentWithInterceptors({
            onError: (err) => {
              errorHelperUsed = true;
              return `_error(${err});
`;
            },
            onResult: (result) => `_resolve(${result});
`,
            onDone: () => `_resolve();
`
          });
          let code = "";
          code += `"use strict";
`;
          code += this.header();
          code += `return new Promise((function(_resolve, _reject) {
`;
          if (errorHelperUsed) {
            code += `var _sync = true;
`;
            code += `function _error(_err) {
`;
            code += `if(_sync)
`;
            code += `_resolve(Promise.resolve().then((function() { throw _err; })));
`;
            code += `else
`;
            code += `_reject(_err);
`;
            code += `};
`;
          }
          code += content;
          if (errorHelperUsed) {
            code += `_sync = false;
`;
          }
          code += `}));
`;
          fn = new Function(this.args(), code);
          break;
      }
      this.deinit();
      return fn;
    }
    setup(instance, options) {
      instance._x = options.taps.map((t) => t.fn);
    }
    init(options) {
      this.options = options;
      this._args = options.args.slice();
    }
    deinit() {
      this.options = undefined;
      this._args = undefined;
    }
    contentWithInterceptors(options) {
      if (this.options.interceptors.length > 0) {
        const onError = options.onError;
        const onResult = options.onResult;
        const onDone = options.onDone;
        let code = "";
        for (let i = 0;i < this.options.interceptors.length; i++) {
          const interceptor = this.options.interceptors[i];
          if (interceptor.call) {
            code += `${this.getInterceptor(i)}.call(${this.args({
              before: interceptor.context ? "_context" : undefined
            })});
`;
          }
        }
        code += this.content(Object.assign(options, {
          onError: onError && ((err) => {
            let code2 = "";
            for (let i = 0;i < this.options.interceptors.length; i++) {
              const interceptor = this.options.interceptors[i];
              if (interceptor.error) {
                code2 += `${this.getInterceptor(i)}.error(${err});
`;
              }
            }
            code2 += onError(err);
            return code2;
          }),
          onResult: onResult && ((result) => {
            let code2 = "";
            for (let i = 0;i < this.options.interceptors.length; i++) {
              const interceptor = this.options.interceptors[i];
              if (interceptor.result) {
                code2 += `${this.getInterceptor(i)}.result(${result});
`;
              }
            }
            code2 += onResult(result);
            return code2;
          }),
          onDone: onDone && (() => {
            let code2 = "";
            for (let i = 0;i < this.options.interceptors.length; i++) {
              const interceptor = this.options.interceptors[i];
              if (interceptor.done) {
                code2 += `${this.getInterceptor(i)}.done();
`;
              }
            }
            code2 += onDone();
            return code2;
          })
        }));
        return code;
      } else {
        return this.content(options);
      }
    }
    header() {
      let code = "";
      if (this.needContext()) {
        code += `var _context = {};
`;
      } else {
        code += `var _context;
`;
      }
      code += `var _x = this._x;
`;
      if (this.options.interceptors.length > 0) {
        code += `var _taps = this.taps;
`;
        code += `var _interceptors = this.interceptors;
`;
      }
      return code;
    }
    needContext() {
      for (const tap of this.options.taps)
        if (tap.context)
          return true;
      return false;
    }
    callTap(tapIndex, { onError, onResult, onDone, rethrowIfPossible }) {
      let code = "";
      let hasTapCached = false;
      for (let i = 0;i < this.options.interceptors.length; i++) {
        const interceptor = this.options.interceptors[i];
        if (interceptor.tap) {
          if (!hasTapCached) {
            code += `var _tap${tapIndex} = ${this.getTap(tapIndex)};
`;
            hasTapCached = true;
          }
          code += `${this.getInterceptor(i)}.tap(${interceptor.context ? "_context, " : ""}_tap${tapIndex});
`;
        }
      }
      code += `var _fn${tapIndex} = ${this.getTapFn(tapIndex)};
`;
      const tap = this.options.taps[tapIndex];
      switch (tap.type) {
        case "sync":
          if (!rethrowIfPossible) {
            code += `var _hasError${tapIndex} = false;
`;
            code += `try {
`;
          }
          if (onResult) {
            code += `var _result${tapIndex} = _fn${tapIndex}(${this.args({
              before: tap.context ? "_context" : undefined
            })});
`;
          } else {
            code += `_fn${tapIndex}(${this.args({
              before: tap.context ? "_context" : undefined
            })});
`;
          }
          if (!rethrowIfPossible) {
            code += `} catch(_err) {
`;
            code += `_hasError${tapIndex} = true;
`;
            code += onError("_err");
            code += `}
`;
            code += `if(!_hasError${tapIndex}) {
`;
          }
          if (onResult) {
            code += onResult(`_result${tapIndex}`);
          }
          if (onDone) {
            code += onDone();
          }
          if (!rethrowIfPossible) {
            code += `}
`;
          }
          break;
        case "async":
          let cbCode = "";
          if (onResult)
            cbCode += `(function(_err${tapIndex}, _result${tapIndex}) {
`;
          else
            cbCode += `(function(_err${tapIndex}) {
`;
          cbCode += `if(_err${tapIndex}) {
`;
          cbCode += onError(`_err${tapIndex}`);
          cbCode += `} else {
`;
          if (onResult) {
            cbCode += onResult(`_result${tapIndex}`);
          }
          if (onDone) {
            cbCode += onDone();
          }
          cbCode += `}
`;
          cbCode += "})";
          code += `_fn${tapIndex}(${this.args({
            before: tap.context ? "_context" : undefined,
            after: cbCode
          })});
`;
          break;
        case "promise":
          code += `var _hasResult${tapIndex} = false;
`;
          code += `var _promise${tapIndex} = _fn${tapIndex}(${this.args({
            before: tap.context ? "_context" : undefined
          })});
`;
          code += `if (!_promise${tapIndex} || !_promise${tapIndex}.then)
`;
          code += `  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise${tapIndex} + ')');
`;
          code += `_promise${tapIndex}.then((function(_result${tapIndex}) {
`;
          code += `_hasResult${tapIndex} = true;
`;
          if (onResult) {
            code += onResult(`_result${tapIndex}`);
          }
          if (onDone) {
            code += onDone();
          }
          code += `}), function(_err${tapIndex}) {
`;
          code += `if(_hasResult${tapIndex}) throw _err${tapIndex};
`;
          code += onError(`_err${tapIndex}`);
          code += `});
`;
          break;
      }
      return code;
    }
    callTapsSeries({
      onError,
      onResult,
      resultReturns,
      onDone,
      doneReturns,
      rethrowIfPossible
    }) {
      if (this.options.taps.length === 0)
        return onDone();
      const firstAsync = this.options.taps.findIndex((t) => t.type !== "sync");
      const somethingReturns = resultReturns || doneReturns;
      let code = "";
      let current = onDone;
      let unrollCounter = 0;
      for (let j = this.options.taps.length - 1;j >= 0; j--) {
        const i = j;
        const unroll = current !== onDone && (this.options.taps[i].type !== "sync" || unrollCounter++ > 20);
        if (unroll) {
          unrollCounter = 0;
          code += `function _next${i}() {
`;
          code += current();
          code += `}
`;
          current = () => `${somethingReturns ? "return " : ""}_next${i}();
`;
        }
        const done = current;
        const doneBreak = (skipDone) => {
          if (skipDone)
            return "";
          return onDone();
        };
        const content = this.callTap(i, {
          onError: (error) => onError(i, error, done, doneBreak),
          onResult: onResult && ((result) => {
            return onResult(i, result, done, doneBreak);
          }),
          onDone: !onResult && done,
          rethrowIfPossible: rethrowIfPossible && (firstAsync < 0 || i < firstAsync)
        });
        current = () => content;
      }
      code += current();
      return code;
    }
    callTapsLooping({ onError, onDone, rethrowIfPossible }) {
      if (this.options.taps.length === 0)
        return onDone();
      const syncOnly = this.options.taps.every((t) => t.type === "sync");
      let code = "";
      if (!syncOnly) {
        code += `var _looper = (function() {
`;
        code += `var _loopAsync = false;
`;
      }
      code += `var _loop;
`;
      code += `do {
`;
      code += `_loop = false;
`;
      for (let i = 0;i < this.options.interceptors.length; i++) {
        const interceptor = this.options.interceptors[i];
        if (interceptor.loop) {
          code += `${this.getInterceptor(i)}.loop(${this.args({
            before: interceptor.context ? "_context" : undefined
          })});
`;
        }
      }
      code += this.callTapsSeries({
        onError,
        onResult: (i, result, next, doneBreak) => {
          let code2 = "";
          code2 += `if(${result} !== undefined) {
`;
          code2 += `_loop = true;
`;
          if (!syncOnly)
            code2 += `if(_loopAsync) _looper();
`;
          code2 += doneBreak(true);
          code2 += `} else {
`;
          code2 += next();
          code2 += `}
`;
          return code2;
        },
        onDone: onDone && (() => {
          let code2 = "";
          code2 += `if(!_loop) {
`;
          code2 += onDone();
          code2 += `}
`;
          return code2;
        }),
        rethrowIfPossible: rethrowIfPossible && syncOnly
      });
      code += `} while(_loop);
`;
      if (!syncOnly) {
        code += `_loopAsync = true;
`;
        code += `});
`;
        code += `_looper();
`;
      }
      return code;
    }
    callTapsParallel({
      onError,
      onResult,
      onDone,
      rethrowIfPossible,
      onTap = (i, run) => run()
    }) {
      if (this.options.taps.length <= 1) {
        return this.callTapsSeries({
          onError,
          onResult,
          onDone,
          rethrowIfPossible
        });
      }
      let code = "";
      code += `do {
`;
      code += `var _counter = ${this.options.taps.length};
`;
      if (onDone) {
        code += `var _done = (function() {
`;
        code += onDone();
        code += `});
`;
      }
      for (let i = 0;i < this.options.taps.length; i++) {
        const done = () => {
          if (onDone)
            return `if(--_counter === 0) _done();
`;
          else
            return "--_counter;";
        };
        const doneBreak = (skipDone) => {
          if (skipDone || !onDone)
            return `_counter = 0;
`;
          else
            return `_counter = 0;
_done();
`;
        };
        code += `if(_counter <= 0) break;
`;
        code += onTap(i, () => this.callTap(i, {
          onError: (error) => {
            let code2 = "";
            code2 += `if(_counter > 0) {
`;
            code2 += onError(i, error, done, doneBreak);
            code2 += `}
`;
            return code2;
          },
          onResult: onResult && ((result) => {
            let code2 = "";
            code2 += `if(_counter > 0) {
`;
            code2 += onResult(i, result, done, doneBreak);
            code2 += `}
`;
            return code2;
          }),
          onDone: !onResult && (() => {
            return done();
          }),
          rethrowIfPossible
        }), done, doneBreak);
      }
      code += `} while(false);
`;
      return code;
    }
    args({ before, after } = {}) {
      let allArgs = this._args;
      if (before)
        allArgs = [before].concat(allArgs);
      if (after)
        allArgs = allArgs.concat(after);
      if (allArgs.length === 0) {
        return "";
      } else {
        return allArgs.join(", ");
      }
    }
    getTapFn(idx) {
      return `_x[${idx}]`;
    }
    getTap(idx) {
      return `_taps[${idx}]`;
    }
    getInterceptor(idx) {
      return `_interceptors[${idx}]`;
    }
  }
  module.exports = HookCodeFactory;
});
var require_SyncHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class SyncHookCodeFactory extends HookCodeFactory {
    content({ onError, onDone, rethrowIfPossible }) {
      return this.callTapsSeries({
        onError: (i, err) => onError(err),
        onDone,
        rethrowIfPossible
      });
    }
  }
  var factory = new SyncHookCodeFactory;
  var TAP_ASYNC = () => {
    throw new Error("tapAsync is not supported on a SyncHook");
  };
  var TAP_PROMISE = () => {
    throw new Error("tapPromise is not supported on a SyncHook");
  };
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function SyncHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = SyncHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
  }
  SyncHook.prototype = null;
  module.exports = SyncHook;
});
var require_SyncBailHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class SyncBailHookCodeFactory extends HookCodeFactory {
    content({ onError, onResult, resultReturns, onDone, rethrowIfPossible }) {
      return this.callTapsSeries({
        onError: (i, err) => onError(err),
        onResult: (i, result, next) => `if(${result} !== undefined) {
${onResult(result)};
} else {
${next()}}
`,
        resultReturns,
        onDone,
        rethrowIfPossible
      });
    }
  }
  var factory = new SyncBailHookCodeFactory;
  var TAP_ASYNC = () => {
    throw new Error("tapAsync is not supported on a SyncBailHook");
  };
  var TAP_PROMISE = () => {
    throw new Error("tapPromise is not supported on a SyncBailHook");
  };
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function SyncBailHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = SyncBailHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
  }
  SyncBailHook.prototype = null;
  module.exports = SyncBailHook;
});
var require_SyncWaterfallHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class SyncWaterfallHookCodeFactory extends HookCodeFactory {
    content({ onError, onResult, resultReturns, rethrowIfPossible }) {
      return this.callTapsSeries({
        onError: (i, err) => onError(err),
        onResult: (i, result, next) => {
          let code = "";
          code += `if(${result} !== undefined) {
`;
          code += `${this._args[0]} = ${result};
`;
          code += `}
`;
          code += next();
          return code;
        },
        onDone: () => onResult(this._args[0]),
        doneReturns: resultReturns,
        rethrowIfPossible
      });
    }
  }
  var factory = new SyncWaterfallHookCodeFactory;
  var TAP_ASYNC = () => {
    throw new Error("tapAsync is not supported on a SyncWaterfallHook");
  };
  var TAP_PROMISE = () => {
    throw new Error("tapPromise is not supported on a SyncWaterfallHook");
  };
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function SyncWaterfallHook(args = [], name = undefined) {
    if (args.length < 1)
      throw new Error("Waterfall hooks must have at least one argument");
    const hook = new Hook(args, name);
    hook.constructor = SyncWaterfallHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
  }
  SyncWaterfallHook.prototype = null;
  module.exports = SyncWaterfallHook;
});
var require_SyncLoopHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class SyncLoopHookCodeFactory extends HookCodeFactory {
    content({ onError, onDone, rethrowIfPossible }) {
      return this.callTapsLooping({
        onError: (i, err) => onError(err),
        onDone,
        rethrowIfPossible
      });
    }
  }
  var factory = new SyncLoopHookCodeFactory;
  var TAP_ASYNC = () => {
    throw new Error("tapAsync is not supported on a SyncLoopHook");
  };
  var TAP_PROMISE = () => {
    throw new Error("tapPromise is not supported on a SyncLoopHook");
  };
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function SyncLoopHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = SyncLoopHook;
    hook.tapAsync = TAP_ASYNC;
    hook.tapPromise = TAP_PROMISE;
    hook.compile = COMPILE;
    return hook;
  }
  SyncLoopHook.prototype = null;
  module.exports = SyncLoopHook;
});
var require_AsyncParallelHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class AsyncParallelHookCodeFactory extends HookCodeFactory {
    content({ onError, onDone }) {
      return this.callTapsParallel({
        onError: (i, err, done, doneBreak) => onError(err) + doneBreak(true),
        onDone
      });
    }
  }
  var factory = new AsyncParallelHookCodeFactory;
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function AsyncParallelHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = AsyncParallelHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
  }
  AsyncParallelHook.prototype = null;
  module.exports = AsyncParallelHook;
});
var require_AsyncParallelBailHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class AsyncParallelBailHookCodeFactory extends HookCodeFactory {
    content({ onError, onResult, onDone }) {
      let code = "";
      code += `var _results = new Array(${this.options.taps.length});
`;
      code += `var _checkDone = function() {
`;
      code += `for(var i = 0; i < _results.length; i++) {
`;
      code += `var item = _results[i];
`;
      code += `if(item === undefined) return false;
`;
      code += `if(item.result !== undefined) {
`;
      code += onResult("item.result");
      code += `return true;
`;
      code += `}
`;
      code += `if(item.error) {
`;
      code += onError("item.error");
      code += `return true;
`;
      code += `}
`;
      code += `}
`;
      code += `return false;
`;
      code += `}
`;
      code += this.callTapsParallel({
        onError: (i, err, done, doneBreak) => {
          let code2 = "";
          code2 += `if(${i} < _results.length && ((_results.length = ${i + 1}), (_results[${i}] = { error: ${err} }), _checkDone())) {
`;
          code2 += doneBreak(true);
          code2 += `} else {
`;
          code2 += done();
          code2 += `}
`;
          return code2;
        },
        onResult: (i, result, done, doneBreak) => {
          let code2 = "";
          code2 += `if(${i} < _results.length && (${result} !== undefined && (_results.length = ${i + 1}), (_results[${i}] = { result: ${result} }), _checkDone())) {
`;
          code2 += doneBreak(true);
          code2 += `} else {
`;
          code2 += done();
          code2 += `}
`;
          return code2;
        },
        onTap: (i, run, done, doneBreak) => {
          let code2 = "";
          if (i > 0) {
            code2 += `if(${i} >= _results.length) {
`;
            code2 += done();
            code2 += `} else {
`;
          }
          code2 += run();
          if (i > 0)
            code2 += `}
`;
          return code2;
        },
        onDone
      });
      return code;
    }
  }
  var factory = new AsyncParallelBailHookCodeFactory;
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function AsyncParallelBailHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = AsyncParallelBailHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
  }
  AsyncParallelBailHook.prototype = null;
  module.exports = AsyncParallelBailHook;
});
var require_AsyncSeriesHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class AsyncSeriesHookCodeFactory extends HookCodeFactory {
    content({ onError, onDone }) {
      return this.callTapsSeries({
        onError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),
        onDone
      });
    }
  }
  var factory = new AsyncSeriesHookCodeFactory;
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function AsyncSeriesHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = AsyncSeriesHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
  }
  AsyncSeriesHook.prototype = null;
  module.exports = AsyncSeriesHook;
});
var require_AsyncSeriesBailHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class AsyncSeriesBailHookCodeFactory extends HookCodeFactory {
    content({ onError, onResult, resultReturns, onDone }) {
      return this.callTapsSeries({
        onError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),
        onResult: (i, result, next) => `if(${result} !== undefined) {
${onResult(result)}
} else {
${next()}}
`,
        resultReturns,
        onDone
      });
    }
  }
  var factory = new AsyncSeriesBailHookCodeFactory;
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function AsyncSeriesBailHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = AsyncSeriesBailHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
  }
  AsyncSeriesBailHook.prototype = null;
  module.exports = AsyncSeriesBailHook;
});
var require_AsyncSeriesLoopHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class AsyncSeriesLoopHookCodeFactory extends HookCodeFactory {
    content({ onError, onDone }) {
      return this.callTapsLooping({
        onError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),
        onDone
      });
    }
  }
  var factory = new AsyncSeriesLoopHookCodeFactory;
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function AsyncSeriesLoopHook(args = [], name = undefined) {
    const hook = new Hook(args, name);
    hook.constructor = AsyncSeriesLoopHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
  }
  AsyncSeriesLoopHook.prototype = null;
  module.exports = AsyncSeriesLoopHook;
});
var require_AsyncSeriesWaterfallHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();
  var HookCodeFactory = require_HookCodeFactory();

  class AsyncSeriesWaterfallHookCodeFactory extends HookCodeFactory {
    content({ onError, onResult, onDone }) {
      return this.callTapsSeries({
        onError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),
        onResult: (i, result, next) => {
          let code = "";
          code += `if(${result} !== undefined) {
`;
          code += `${this._args[0]} = ${result};
`;
          code += `}
`;
          code += next();
          return code;
        },
        onDone: () => onResult(this._args[0])
      });
    }
  }
  var factory = new AsyncSeriesWaterfallHookCodeFactory;
  var COMPILE = function(options) {
    factory.setup(this, options);
    return factory.create(options);
  };
  function AsyncSeriesWaterfallHook(args = [], name = undefined) {
    if (args.length < 1)
      throw new Error("Waterfall hooks must have at least one argument");
    const hook = new Hook(args, name);
    hook.constructor = AsyncSeriesWaterfallHook;
    hook.compile = COMPILE;
    hook._call = undefined;
    hook.call = undefined;
    return hook;
  }
  AsyncSeriesWaterfallHook.prototype = null;
  module.exports = AsyncSeriesWaterfallHook;
});
var require_HookMap = __commonJS2((exports, module) => {
  var util = __require2("util");
  var defaultFactory = (key, hook) => hook;

  class HookMap {
    constructor(factory, name = undefined) {
      this._map = new Map;
      this.name = name;
      this._factory = factory;
      this._interceptors = [];
    }
    get(key) {
      return this._map.get(key);
    }
    for(key) {
      const hook = this.get(key);
      if (hook !== undefined) {
        return hook;
      }
      let newHook = this._factory(key);
      const interceptors = this._interceptors;
      for (let i = 0;i < interceptors.length; i++) {
        newHook = interceptors[i].factory(key, newHook);
      }
      this._map.set(key, newHook);
      return newHook;
    }
    intercept(interceptor) {
      this._interceptors.push(Object.assign({
        factory: defaultFactory
      }, interceptor));
    }
  }
  HookMap.prototype.tap = util.deprecate(function(key, options, fn) {
    return this.for(key).tap(options, fn);
  }, "HookMap#tap(key,\u2026) is deprecated. Use HookMap#for(key).tap(\u2026) instead.");
  HookMap.prototype.tapAsync = util.deprecate(function(key, options, fn) {
    return this.for(key).tapAsync(options, fn);
  }, "HookMap#tapAsync(key,\u2026) is deprecated. Use HookMap#for(key).tapAsync(\u2026) instead.");
  HookMap.prototype.tapPromise = util.deprecate(function(key, options, fn) {
    return this.for(key).tapPromise(options, fn);
  }, "HookMap#tapPromise(key,\u2026) is deprecated. Use HookMap#for(key).tapPromise(\u2026) instead.");
  module.exports = HookMap;
});
var require_MultiHook = __commonJS2((exports, module) => {
  var Hook = require_Hook();

  class MultiHook {
    constructor(hooks, name = undefined) {
      this.hooks = hooks;
      this.name = name;
    }
    tap(options, fn) {
      for (const hook of this.hooks) {
        hook.tap(options, fn);
      }
    }
    tapAsync(options, fn) {
      for (const hook of this.hooks) {
        hook.tapAsync(options, fn);
      }
    }
    tapPromise(options, fn) {
      for (const hook of this.hooks) {
        hook.tapPromise(options, fn);
      }
    }
    isUsed() {
      for (const hook of this.hooks) {
        if (hook.isUsed())
          return true;
      }
      return false;
    }
    intercept(interceptor) {
      for (const hook of this.hooks) {
        hook.intercept(interceptor);
      }
    }
    withOptions(options) {
      return new MultiHook(this.hooks.map((h) => h.withOptions(options)), this.name);
    }
  }
  module.exports = MultiHook;
});
var require_lib = __commonJS2((exports) => {
  exports.__esModule = true;
  exports.SyncHook = require_SyncHook();
  exports.SyncBailHook = require_SyncBailHook();
  exports.SyncWaterfallHook = require_SyncWaterfallHook();
  exports.SyncLoopHook = require_SyncLoopHook();
  exports.AsyncParallelHook = require_AsyncParallelHook();
  exports.AsyncParallelBailHook = require_AsyncParallelBailHook();
  exports.AsyncSeriesHook = require_AsyncSeriesHook();
  exports.AsyncSeriesBailHook = require_AsyncSeriesBailHook();
  exports.AsyncSeriesLoopHook = require_AsyncSeriesLoopHook();
  exports.AsyncSeriesWaterfallHook = require_AsyncSeriesWaterfallHook();
  exports.HookMap = require_HookMap();
  exports.MultiHook = require_MultiHook();
});
var require_createInnerContext = __commonJS2((exports, module) => {
  module.exports = function createInnerContext(options, message) {
    let messageReported = false;
    let innerLog = undefined;
    if (options.log) {
      if (message) {
        innerLog = (msg) => {
          if (!messageReported) {
            options.log(message);
            messageReported = true;
          }
          options.log("  " + msg);
        };
      } else {
        innerLog = options.log;
      }
    }
    return {
      log: innerLog,
      yield: options.yield,
      fileDependencies: options.fileDependencies,
      contextDependencies: options.contextDependencies,
      missingDependencies: options.missingDependencies,
      stack: options.stack
    };
  };
});
var require_identifier = __commonJS2((exports, module) => {
  var PATH_QUERY_FRAGMENT_REGEXP = /^(#?(?:\0.|[^?#\0])*)(\?(?:\0.|[^#\0])*)?(#.*)?$/;
  function parseIdentifier(identifier) {
    const match = PATH_QUERY_FRAGMENT_REGEXP.exec(identifier);
    if (!match)
      return null;
    return [
      match[1].replace(/\0(.)/g, "$1"),
      match[2] ? match[2].replace(/\0(.)/g, "$1") : "",
      match[3] || ""
    ];
  }
  exports.parseIdentifier = parseIdentifier;
});
var require_path = __commonJS2((exports) => {
  var path4 = __require2("path");
  var CHAR_HASH = 35;
  var CHAR_SLASH = 47;
  var CHAR_BACKSLASH = 92;
  var CHAR_A = 65;
  var CHAR_Z = 90;
  var CHAR_LOWER_A = 97;
  var CHAR_LOWER_Z = 122;
  var CHAR_DOT = 46;
  var CHAR_COLON = 58;
  var posixNormalize = path4.posix.normalize;
  var winNormalize = path4.win32.normalize;
  var PathType = Object.freeze({
    Empty: 0,
    Normal: 1,
    Relative: 2,
    AbsoluteWin: 3,
    AbsolutePosix: 4,
    Internal: 5
  });
  exports.PathType = PathType;
  var invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i;
  exports.invalidSegmentRegEx = invalidSegmentRegEx;
  var deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i;
  exports.deprecatedInvalidSegmentRegEx = deprecatedInvalidSegmentRegEx;
  var getType = (p) => {
    switch (p.length) {
      case 0:
        return PathType.Empty;
      case 1: {
        const c02 = p.charCodeAt(0);
        switch (c02) {
          case CHAR_DOT:
            return PathType.Relative;
          case CHAR_SLASH:
            return PathType.AbsolutePosix;
          case CHAR_HASH:
            return PathType.Internal;
        }
        return PathType.Normal;
      }
      case 2: {
        const c02 = p.charCodeAt(0);
        switch (c02) {
          case CHAR_DOT: {
            const c13 = p.charCodeAt(1);
            switch (c13) {
              case CHAR_DOT:
              case CHAR_SLASH:
                return PathType.Relative;
            }
            return PathType.Normal;
          }
          case CHAR_SLASH:
            return PathType.AbsolutePosix;
          case CHAR_HASH:
            return PathType.Internal;
        }
        const c12 = p.charCodeAt(1);
        if (c12 === CHAR_COLON) {
          if (c02 >= CHAR_A && c02 <= CHAR_Z || c02 >= CHAR_LOWER_A && c02 <= CHAR_LOWER_Z) {
            return PathType.AbsoluteWin;
          }
        }
        return PathType.Normal;
      }
    }
    const c0 = p.charCodeAt(0);
    switch (c0) {
      case CHAR_DOT: {
        const c12 = p.charCodeAt(1);
        switch (c12) {
          case CHAR_SLASH:
            return PathType.Relative;
          case CHAR_DOT: {
            const c2 = p.charCodeAt(2);
            if (c2 === CHAR_SLASH)
              return PathType.Relative;
            return PathType.Normal;
          }
        }
        return PathType.Normal;
      }
      case CHAR_SLASH:
        return PathType.AbsolutePosix;
      case CHAR_HASH:
        return PathType.Internal;
    }
    const c1 = p.charCodeAt(1);
    if (c1 === CHAR_COLON) {
      const c2 = p.charCodeAt(2);
      if ((c2 === CHAR_BACKSLASH || c2 === CHAR_SLASH) && (c0 >= CHAR_A && c0 <= CHAR_Z || c0 >= CHAR_LOWER_A && c0 <= CHAR_LOWER_Z)) {
        return PathType.AbsoluteWin;
      }
    }
    return PathType.Normal;
  };
  exports.getType = getType;
  var normalize = (p) => {
    switch (getType(p)) {
      case PathType.Empty:
        return p;
      case PathType.AbsoluteWin:
        return winNormalize(p);
      case PathType.Relative: {
        const r = posixNormalize(p);
        return getType(r) === PathType.Relative ? r : `./${r}`;
      }
    }
    return posixNormalize(p);
  };
  exports.normalize = normalize;
  var join = (rootPath, request) => {
    if (!request)
      return normalize(rootPath);
    const requestType = getType(request);
    switch (requestType) {
      case PathType.AbsolutePosix:
        return posixNormalize(request);
      case PathType.AbsoluteWin:
        return winNormalize(request);
    }
    switch (getType(rootPath)) {
      case PathType.Normal:
      case PathType.Relative:
      case PathType.AbsolutePosix:
        return posixNormalize(`${rootPath}/${request}`);
      case PathType.AbsoluteWin:
        return winNormalize(`${rootPath}\\${request}`);
    }
    switch (requestType) {
      case PathType.Empty:
        return rootPath;
      case PathType.Relative: {
        const r = posixNormalize(rootPath);
        return getType(r) === PathType.Relative ? r : `./${r}`;
      }
    }
    return posixNormalize(rootPath);
  };
  exports.join = join;
  var joinCache = new Map;
  var cachedJoin = (rootPath, request) => {
    let cacheEntry;
    let cache = joinCache.get(rootPath);
    if (cache === undefined) {
      joinCache.set(rootPath, cache = new Map);
    } else {
      cacheEntry = cache.get(request);
      if (cacheEntry !== undefined)
        return cacheEntry;
    }
    cacheEntry = join(rootPath, request);
    cache.set(request, cacheEntry);
    return cacheEntry;
  };
  exports.cachedJoin = cachedJoin;
});
var require_Resolver = __commonJS2((exports, module) => {
  var { AsyncSeriesBailHook, AsyncSeriesHook, SyncHook } = require_lib();
  var createInnerContext = require_createInnerContext();
  var { parseIdentifier } = require_identifier();
  var {
    normalize,
    cachedJoin: join,
    getType,
    PathType
  } = require_path();
  function toCamelCase(str) {
    return str.replace(/-([a-z])/g, (str2) => str2.slice(1).toUpperCase());
  }

  class Resolver {
    static createStackEntry(hook, request) {
      return hook.name + ": (" + request.path + ") " + (request.request || "") + (request.query || "") + (request.fragment || "") + (request.directory ? " directory" : "") + (request.module ? " module" : "");
    }
    constructor(fileSystem, options) {
      this.fileSystem = fileSystem;
      this.options = options;
      this.hooks = {
        resolveStep: new SyncHook(["hook", "request"], "resolveStep"),
        noResolve: new SyncHook(["request", "error"], "noResolve"),
        resolve: new AsyncSeriesBailHook(["request", "resolveContext"], "resolve"),
        result: new AsyncSeriesHook(["result", "resolveContext"], "result")
      };
    }
    ensureHook(name) {
      if (typeof name !== "string") {
        return name;
      }
      name = toCamelCase(name);
      if (/^before/.test(name)) {
        return this.ensureHook(name[6].toLowerCase() + name.slice(7)).withOptions({
          stage: -10
        });
      }
      if (/^after/.test(name)) {
        return this.ensureHook(name[5].toLowerCase() + name.slice(6)).withOptions({
          stage: 10
        });
      }
      const hook = this.hooks[name];
      if (!hook) {
        this.hooks[name] = new AsyncSeriesBailHook(["request", "resolveContext"], name);
        return this.hooks[name];
      }
      return hook;
    }
    getHook(name) {
      if (typeof name !== "string") {
        return name;
      }
      name = toCamelCase(name);
      if (/^before/.test(name)) {
        return this.getHook(name[6].toLowerCase() + name.slice(7)).withOptions({
          stage: -10
        });
      }
      if (/^after/.test(name)) {
        return this.getHook(name[5].toLowerCase() + name.slice(6)).withOptions({
          stage: 10
        });
      }
      const hook = this.hooks[name];
      if (!hook) {
        throw new Error(`Hook ${name} doesn't exist`);
      }
      return hook;
    }
    resolveSync(context, path4, request) {
      let err = undefined;
      let result = undefined;
      let sync = false;
      this.resolve(context, path4, request, {}, (e, r) => {
        err = e;
        result = r;
        sync = true;
      });
      if (!sync) {
        throw new Error("Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!");
      }
      if (err)
        throw err;
      if (result === undefined)
        throw new Error("No result");
      return result;
    }
    resolve(context, path4, request, resolveContext, callback) {
      if (!context || typeof context !== "object")
        return callback(new Error("context argument is not an object"));
      if (typeof path4 !== "string")
        return callback(new Error("path argument is not a string"));
      if (typeof request !== "string")
        return callback(new Error("request argument is not a string"));
      if (!resolveContext)
        return callback(new Error("resolveContext argument is not set"));
      const obj = {
        context,
        path: path4,
        request
      };
      let yield_;
      let yieldCalled = false;
      let finishYield;
      if (typeof resolveContext.yield === "function") {
        const old = resolveContext.yield;
        yield_ = (obj2) => {
          old(obj2);
          yieldCalled = true;
        };
        finishYield = (result) => {
          if (result) {
            yield_(result);
          }
          callback(null);
        };
      }
      const message = `resolve '${request}' in '${path4}'`;
      const finishResolved = (result) => {
        return callback(null, result.path === false ? false : `${result.path.replace(/#/g, "\x00#")}${result.query ? result.query.replace(/#/g, "\x00#") : ""}${result.fragment || ""}`, result);
      };
      const finishWithoutResolve = (log) => {
        const error = new Error("Can't " + message);
        error.details = log.join(`
`);
        this.hooks.noResolve.call(obj, error);
        return callback(error);
      };
      if (resolveContext.log) {
        const parentLog = resolveContext.log;
        const log = [];
        return this.doResolve(this.hooks.resolve, obj, message, {
          log: (msg) => {
            parentLog(msg);
            log.push(msg);
          },
          yield: yield_,
          fileDependencies: resolveContext.fileDependencies,
          contextDependencies: resolveContext.contextDependencies,
          missingDependencies: resolveContext.missingDependencies,
          stack: resolveContext.stack
        }, (err, result) => {
          if (err)
            return callback(err);
          if (yieldCalled || result && yield_) {
            return finishYield(result);
          }
          if (result)
            return finishResolved(result);
          return finishWithoutResolve(log);
        });
      } else {
        return this.doResolve(this.hooks.resolve, obj, message, {
          log: undefined,
          yield: yield_,
          fileDependencies: resolveContext.fileDependencies,
          contextDependencies: resolveContext.contextDependencies,
          missingDependencies: resolveContext.missingDependencies,
          stack: resolveContext.stack
        }, (err, result) => {
          if (err)
            return callback(err);
          if (yieldCalled || result && yield_) {
            return finishYield(result);
          }
          if (result)
            return finishResolved(result);
          const log = [];
          return this.doResolve(this.hooks.resolve, obj, message, {
            log: (msg) => log.push(msg),
            yield: yield_,
            stack: resolveContext.stack
          }, (err2, result2) => {
            if (err2)
              return callback(err2);
            if (yieldCalled || result2 && yield_) {
              return finishYield(result2);
            }
            return finishWithoutResolve(log);
          });
        });
      }
    }
    doResolve(hook, request, message, resolveContext, callback) {
      const stackEntry = Resolver.createStackEntry(hook, request);
      let newStack;
      if (resolveContext.stack) {
        newStack = new Set(resolveContext.stack);
        if (resolveContext.stack.has(stackEntry)) {
          const recursionError = new Error(`Recursion in resolving
Stack:
  ` + Array.from(newStack).join(`
  `));
          recursionError.recursion = true;
          if (resolveContext.log)
            resolveContext.log("abort resolving because of recursion");
          return callback(recursionError);
        }
        newStack.add(stackEntry);
      } else {
        newStack = new Set;
        newStack.add(stackEntry);
      }
      this.hooks.resolveStep.call(hook, request);
      if (hook.isUsed()) {
        const innerContext = createInnerContext({
          log: resolveContext.log,
          yield: resolveContext.yield,
          fileDependencies: resolveContext.fileDependencies,
          contextDependencies: resolveContext.contextDependencies,
          missingDependencies: resolveContext.missingDependencies,
          stack: newStack
        }, message);
        return hook.callAsync(request, innerContext, (err, result) => {
          if (err)
            return callback(err);
          if (result)
            return callback(null, result);
          callback();
        });
      } else {
        callback();
      }
    }
    parse(identifier) {
      const part = {
        request: "",
        query: "",
        fragment: "",
        module: false,
        directory: false,
        file: false,
        internal: false
      };
      const parsedIdentifier = parseIdentifier(identifier);
      if (!parsedIdentifier)
        return part;
      [part.request, part.query, part.fragment] = parsedIdentifier;
      if (part.request.length > 0) {
        part.internal = this.isPrivate(identifier);
        part.module = this.isModule(part.request);
        part.directory = this.isDirectory(part.request);
        if (part.directory) {
          part.request = part.request.slice(0, -1);
        }
      }
      return part;
    }
    isModule(path4) {
      return getType(path4) === PathType.Normal;
    }
    isPrivate(path4) {
      return getType(path4) === PathType.Internal;
    }
    isDirectory(path4) {
      return path4.endsWith("/");
    }
    join(path4, request) {
      return join(path4, request);
    }
    normalize(path4) {
      return normalize(path4);
    }
  }
  module.exports = Resolver;
});
var require_SyncAsyncFileSystemDecorator = __commonJS2((exports, module) => {
  function SyncAsyncFileSystemDecorator(fs3) {
    this.fs = fs3;
    this.lstat = undefined;
    this.lstatSync = undefined;
    const lstatSync = fs3.lstatSync;
    if (lstatSync) {
      this.lstat = (arg, options, callback) => {
        let result;
        try {
          result = callback ? lstatSync.call(fs3, arg, options) : lstatSync.call(fs3, arg);
        } catch (e) {
          return (callback || options)(e);
        }
        (callback || options)(null, result);
      };
      this.lstatSync = (arg, options) => lstatSync.call(fs3, arg, options);
    }
    this.stat = (arg, options, callback) => {
      let result;
      try {
        result = callback ? fs3.statSync(arg, options) : fs3.statSync(arg);
      } catch (e) {
        return (callback || options)(e);
      }
      (callback || options)(null, result);
    };
    this.statSync = (arg, options) => fs3.statSync(arg, options);
    this.readdir = (arg, options, callback) => {
      let result;
      try {
        result = callback ? fs3.readdirSync(arg, options) : fs3.readdirSync(arg);
      } catch (e) {
        return (callback || options)(e);
      }
      (callback || options)(null, result);
    };
    this.readdirSync = (arg, options) => fs3.readdirSync(arg, options);
    this.readFile = (arg, options, callback) => {
      let result;
      try {
        result = callback ? fs3.readFileSync(arg, options) : fs3.readFileSync(arg);
      } catch (e) {
        return (callback || options)(e);
      }
      (callback || options)(null, result);
    };
    this.readFileSync = (arg, options) => fs3.readFileSync(arg, options);
    this.readlink = (arg, options, callback) => {
      let result;
      try {
        result = callback ? fs3.readlinkSync(arg, options) : fs3.readlinkSync(arg);
      } catch (e) {
        return (callback || options)(e);
      }
      (callback || options)(null, result);
    };
    this.readlinkSync = (arg, options) => fs3.readlinkSync(arg, options);
    this.readJson = undefined;
    this.readJsonSync = undefined;
    const readJsonSync = fs3.readJsonSync;
    if (readJsonSync) {
      this.readJson = (arg, callback) => {
        let result;
        try {
          result = readJsonSync.call(fs3, arg);
        } catch (e) {
          return callback(e);
        }
        callback(null, result);
      };
      this.readJsonSync = (arg) => readJsonSync.call(fs3, arg);
    }
    this.realpath = undefined;
    this.realpathSync = undefined;
    const realpathSync = fs3.realpathSync;
    if (realpathSync) {
      this.realpath = (arg, options, callback) => {
        let result;
        try {
          result = callback ? realpathSync.call(fs3, arg, options) : realpathSync.call(fs3, arg);
        } catch (e) {
          return (callback || options)(e);
        }
        (callback || options)(null, result);
      };
      this.realpathSync = (arg, options) => realpathSync.call(fs3, arg, options);
    }
  }
  module.exports = SyncAsyncFileSystemDecorator;
});
var require_forEachBail = __commonJS2((exports, module) => {
  module.exports = function forEachBail(array, iterator, callback) {
    if (array.length === 0)
      return callback();
    let i = 0;
    const next = () => {
      let loop = undefined;
      iterator(array[i++], (err, result) => {
        if (err || result !== undefined || i >= array.length) {
          return callback(err, result, i);
        }
        if (loop === false)
          while (next())
            ;
        loop = true;
      }, i);
      if (!loop)
        loop = false;
      return loop;
    };
    while (next())
      ;
  };
});
var require_DescriptionFileUtils = __commonJS2((exports) => {
  var forEachBail = require_forEachBail();
  function loadDescriptionFile(resolver, directory, filenames, oldInfo, resolveContext, callback) {
    (function findDescriptionFile() {
      if (oldInfo && oldInfo.directory === directory) {
        return callback(null, oldInfo);
      }
      forEachBail(filenames, (filename, callback2) => {
        const descriptionFilePath = resolver.join(directory, filename);
        if (resolver.fileSystem.readJson) {
          resolver.fileSystem.readJson(descriptionFilePath, (err, content) => {
            if (err) {
              if (typeof err.code !== "undefined") {
                if (resolveContext.missingDependencies) {
                  resolveContext.missingDependencies.add(descriptionFilePath);
                }
                return callback2();
              }
              if (resolveContext.fileDependencies) {
                resolveContext.fileDependencies.add(descriptionFilePath);
              }
              return onJson(err);
            }
            if (resolveContext.fileDependencies) {
              resolveContext.fileDependencies.add(descriptionFilePath);
            }
            onJson(null, content);
          });
        } else {
          resolver.fileSystem.readFile(descriptionFilePath, (err, content) => {
            if (err) {
              if (resolveContext.missingDependencies) {
                resolveContext.missingDependencies.add(descriptionFilePath);
              }
              return callback2();
            }
            if (resolveContext.fileDependencies) {
              resolveContext.fileDependencies.add(descriptionFilePath);
            }
            let json;
            if (content) {
              try {
                json = JSON.parse(content.toString());
              } catch (e) {
                return onJson(e);
              }
            } else {
              return onJson(new Error("No content in file"));
            }
            onJson(null, json);
          });
        }
        function onJson(err, content) {
          if (err) {
            if (resolveContext.log)
              resolveContext.log(descriptionFilePath + " (directory description file): " + err);
            else
              err.message = descriptionFilePath + " (directory description file): " + err;
            return callback2(err);
          }
          callback2(null, {
            content,
            directory,
            path: descriptionFilePath
          });
        }
      }, (err, result) => {
        if (err)
          return callback(err);
        if (result) {
          return callback(null, result);
        } else {
          const dir = cdUp(directory);
          if (!dir) {
            return callback();
          } else {
            directory = dir;
            return findDescriptionFile();
          }
        }
      });
    })();
  }
  function getField(content, field) {
    if (!content)
      return;
    if (Array.isArray(field)) {
      let current = content;
      for (let j = 0;j < field.length; j++) {
        if (current === null || typeof current !== "object") {
          current = null;
          break;
        }
        current = current[field[j]];
      }
      return current;
    } else {
      return content[field];
    }
  }
  function cdUp(directory) {
    if (directory === "/")
      return null;
    const i = directory.lastIndexOf("/"), j = directory.lastIndexOf("\\");
    const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
    if (p < 0)
      return null;
    return directory.slice(0, p || 1);
  }
  exports.loadDescriptionFile = loadDescriptionFile;
  exports.getField = getField;
  exports.cdUp = cdUp;
});
var require_getInnerRequest = __commonJS2((exports, module) => {
  module.exports = function getInnerRequest(resolver, request) {
    if (typeof request.__innerRequest === "string" && request.__innerRequest_request === request.request && request.__innerRequest_relativePath === request.relativePath)
      return request.__innerRequest;
    let innerRequest;
    if (request.request) {
      innerRequest = request.request;
      if (/^\.\.?(?:\/|$)/.test(innerRequest) && request.relativePath) {
        innerRequest = resolver.join(request.relativePath, innerRequest);
      }
    } else {
      innerRequest = request.relativePath;
    }
    request.__innerRequest_request = request.request;
    request.__innerRequest_relativePath = request.relativePath;
    return request.__innerRequest = innerRequest;
  };
});
var require_AliasFieldPlugin = __commonJS2((exports, module) => {
  var DescriptionFileUtils = require_DescriptionFileUtils();
  var getInnerRequest = require_getInnerRequest();
  module.exports = class AliasFieldPlugin {
    constructor(source, field, target) {
      this.source = source;
      this.field = field;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("AliasFieldPlugin", (request, resolveContext, callback) => {
        if (!request.descriptionFileData)
          return callback();
        const innerRequest = getInnerRequest(resolver, request);
        if (!innerRequest)
          return callback();
        const fieldData = DescriptionFileUtils.getField(request.descriptionFileData, this.field);
        if (fieldData === null || typeof fieldData !== "object") {
          if (resolveContext.log)
            resolveContext.log("Field '" + this.field + "' doesn't contain a valid alias configuration");
          return callback();
        }
        const data = Object.prototype.hasOwnProperty.call(fieldData, innerRequest) ? fieldData[innerRequest] : innerRequest.startsWith("./") ? fieldData[innerRequest.slice(2)] : undefined;
        if (data === innerRequest)
          return callback();
        if (data === undefined)
          return callback();
        if (data === false) {
          const ignoreObj = {
            ...request,
            path: false
          };
          if (typeof resolveContext.yield === "function") {
            resolveContext.yield(ignoreObj);
            return callback(null, null);
          }
          return callback(null, ignoreObj);
        }
        const obj = {
          ...request,
          path: request.descriptionFileRoot,
          request: data,
          fullySpecified: false
        };
        resolver.doResolve(target, obj, "aliased from description file " + request.descriptionFilePath + " with mapping '" + innerRequest + "' to '" + data + "'", resolveContext, (err, result) => {
          if (err)
            return callback(err);
          if (result === undefined)
            return callback(null, null);
          callback(null, result);
        });
      });
    }
  };
});
var require_AliasPlugin = __commonJS2((exports, module) => {
  var forEachBail = require_forEachBail();
  var { PathType, getType } = require_path();
  module.exports = class AliasPlugin {
    constructor(source, options, target) {
      this.source = source;
      this.options = Array.isArray(options) ? options : [options];
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      const getAbsolutePathWithSlashEnding = (maybeAbsolutePath) => {
        const type = getType(maybeAbsolutePath);
        if (type === PathType.AbsolutePosix || type === PathType.AbsoluteWin) {
          return resolver.join(maybeAbsolutePath, "_").slice(0, -1);
        }
        return null;
      };
      const isSubPath = (path4, maybeSubPath) => {
        const absolutePath = getAbsolutePathWithSlashEnding(maybeSubPath);
        if (!absolutePath)
          return false;
        return path4.startsWith(absolutePath);
      };
      resolver.getHook(this.source).tapAsync("AliasPlugin", (request, resolveContext, callback) => {
        const innerRequest = request.request || request.path;
        if (!innerRequest)
          return callback();
        forEachBail(this.options, (item, callback2) => {
          let shouldStop = false;
          const matchRequest = innerRequest === item.name || !item.onlyModule && (request.request ? innerRequest.startsWith(`${item.name}/`) : isSubPath(innerRequest, item.name));
          const splitName = item.name.split("*");
          const matchWildcard = !item.onlyModule && splitName.length === 2;
          if (matchRequest || matchWildcard) {
            const resolveWithAlias = (alias, callback3) => {
              if (alias === false) {
                const ignoreObj = {
                  ...request,
                  path: false
                };
                if (typeof resolveContext.yield === "function") {
                  resolveContext.yield(ignoreObj);
                  return callback3(null, null);
                }
                return callback3(null, ignoreObj);
              }
              let newRequestStr;
              const [prefix, suffix] = splitName;
              if (matchWildcard && innerRequest.startsWith(prefix) && innerRequest.endsWith(suffix)) {
                const match = innerRequest.slice(prefix.length, innerRequest.length - suffix.length);
                newRequestStr = item.alias.toString().replace("*", match);
              }
              if (matchRequest && innerRequest !== alias && !innerRequest.startsWith(alias + "/")) {
                const remainingRequest = innerRequest.slice(item.name.length);
                newRequestStr = alias + remainingRequest;
              }
              if (newRequestStr !== undefined) {
                shouldStop = true;
                const obj = {
                  ...request,
                  request: newRequestStr,
                  fullySpecified: false
                };
                return resolver.doResolve(target, obj, "aliased with mapping '" + item.name + "': '" + alias + "' to '" + newRequestStr + "'", resolveContext, (err, result) => {
                  if (err)
                    return callback3(err);
                  if (result)
                    return callback3(null, result);
                  return callback3();
                });
              }
              return callback3();
            };
            const stoppingCallback = (err, result) => {
              if (err)
                return callback2(err);
              if (result)
                return callback2(null, result);
              if (shouldStop)
                return callback2(null, null);
              return callback2();
            };
            if (Array.isArray(item.alias)) {
              return forEachBail(item.alias, resolveWithAlias, stoppingCallback);
            } else {
              return resolveWithAlias(item.alias, stoppingCallback);
            }
          }
          return callback2();
        }, callback);
      });
    }
  };
});
var require_AppendPlugin = __commonJS2((exports, module) => {
  module.exports = class AppendPlugin {
    constructor(source, appending, target) {
      this.source = source;
      this.appending = appending;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("AppendPlugin", (request, resolveContext, callback) => {
        const obj = {
          ...request,
          path: request.path + this.appending,
          relativePath: request.relativePath && request.relativePath + this.appending
        };
        resolver.doResolve(target, obj, this.appending, resolveContext, callback);
      });
    }
  };
});
var require_ConditionalPlugin = __commonJS2((exports, module) => {
  module.exports = class ConditionalPlugin {
    constructor(source, test, message, allowAlternatives, target) {
      this.source = source;
      this.test = test;
      this.message = message;
      this.allowAlternatives = allowAlternatives;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      const { test, message, allowAlternatives } = this;
      const keys = Object.keys(test);
      resolver.getHook(this.source).tapAsync("ConditionalPlugin", (request, resolveContext, callback) => {
        for (const prop of keys) {
          if (request[prop] !== test[prop])
            return callback();
        }
        resolver.doResolve(target, request, message, resolveContext, allowAlternatives ? callback : (err, result) => {
          if (err)
            return callback(err);
          if (result === undefined)
            return callback(null, null);
          callback(null, result);
        });
      });
    }
  };
});
var require_DescriptionFilePlugin = __commonJS2((exports, module) => {
  var DescriptionFileUtils = require_DescriptionFileUtils();
  module.exports = class DescriptionFilePlugin {
    constructor(source, filenames, pathIsFile, target) {
      this.source = source;
      this.filenames = filenames;
      this.pathIsFile = pathIsFile;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("DescriptionFilePlugin", (request, resolveContext, callback) => {
        const path4 = request.path;
        if (!path4)
          return callback();
        const directory = this.pathIsFile ? DescriptionFileUtils.cdUp(path4) : path4;
        if (!directory)
          return callback();
        DescriptionFileUtils.loadDescriptionFile(resolver, directory, this.filenames, request.descriptionFilePath ? {
          path: request.descriptionFilePath,
          content: request.descriptionFileData,
          directory: request.descriptionFileRoot
        } : undefined, resolveContext, (err, result) => {
          if (err)
            return callback(err);
          if (!result) {
            if (resolveContext.log)
              resolveContext.log(`No description file found in ${directory} or above`);
            return callback();
          }
          const relativePath = "." + path4.slice(result.directory.length).replace(/\\/g, "/");
          const obj = {
            ...request,
            descriptionFilePath: result.path,
            descriptionFileData: result.content,
            descriptionFileRoot: result.directory,
            relativePath
          };
          resolver.doResolve(target, obj, "using description file: " + result.path + " (relative path: " + relativePath + ")", resolveContext, (err2, result2) => {
            if (err2)
              return callback(err2);
            if (result2 === undefined)
              return callback(null, null);
            callback(null, result2);
          });
        });
      });
    }
  };
});
var require_DirectoryExistsPlugin = __commonJS2((exports, module) => {
  module.exports = class DirectoryExistsPlugin {
    constructor(source, target) {
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("DirectoryExistsPlugin", (request, resolveContext, callback) => {
        const fs3 = resolver.fileSystem;
        const directory = request.path;
        if (!directory)
          return callback();
        fs3.stat(directory, (err, stat) => {
          if (err || !stat) {
            if (resolveContext.missingDependencies)
              resolveContext.missingDependencies.add(directory);
            if (resolveContext.log)
              resolveContext.log(directory + " doesn't exist");
            return callback();
          }
          if (!stat.isDirectory()) {
            if (resolveContext.missingDependencies)
              resolveContext.missingDependencies.add(directory);
            if (resolveContext.log)
              resolveContext.log(directory + " is not a directory");
            return callback();
          }
          if (resolveContext.fileDependencies)
            resolveContext.fileDependencies.add(directory);
          resolver.doResolve(target, request, `existing directory ${directory}`, resolveContext, callback);
        });
      });
    }
  };
});
var require_entrypoints = __commonJS2((exports, module) => {
  var { parseIdentifier } = require_identifier();
  var slashCode = 47;
  var dotCode = 46;
  var hashCode = 35;
  var patternRegEx = /\*/g;
  exports.processExportsField = function processExportsField(exportsField) {
    return createFieldProcessor(buildExportsField(exportsField), (request) => request.length === 0 ? "." : "./" + request, assertExportsFieldRequest, assertExportTarget);
  };
  exports.processImportsField = function processImportsField(importsField) {
    return createFieldProcessor(importsField, (request) => "#" + request, assertImportsFieldRequest, assertImportTarget);
  };
  function createFieldProcessor(field, normalizeRequest, assertRequest, assertTarget) {
    return function fieldProcessor(request, conditionNames) {
      request = assertRequest(request);
      const match = findMatch(normalizeRequest(request), field);
      if (match === null)
        return [[], null];
      const [mapping, remainingRequest, isSubpathMapping, isPattern, usedField] = match;
      let direct = null;
      if (isConditionalMapping(mapping)) {
        direct = conditionalMapping(mapping, conditionNames);
        if (direct === null)
          return [[], null];
      } else {
        direct = mapping;
      }
      return [
        directMapping(remainingRequest, isPattern, isSubpathMapping, direct, conditionNames, assertTarget),
        usedField
      ];
    };
  }
  function assertExportsFieldRequest(request) {
    if (request.charCodeAt(0) !== dotCode) {
      throw new Error('Request should be relative path and start with "."');
    }
    if (request.length === 1)
      return "";
    if (request.charCodeAt(1) !== slashCode) {
      throw new Error('Request should be relative path and start with "./"');
    }
    if (request.charCodeAt(request.length - 1) === slashCode) {
      throw new Error("Only requesting file allowed");
    }
    return request.slice(2);
  }
  function assertImportsFieldRequest(request) {
    if (request.charCodeAt(0) !== hashCode) {
      throw new Error('Request should start with "#"');
    }
    if (request.length === 1) {
      throw new Error("Request should have at least 2 characters");
    }
    if (request.charCodeAt(1) === slashCode) {
      throw new Error('Request should not start with "#/"');
    }
    if (request.charCodeAt(request.length - 1) === slashCode) {
      throw new Error("Only requesting file allowed");
    }
    return request.slice(1);
  }
  function assertExportTarget(exp, expectFolder) {
    const parsedIdentifier = parseIdentifier(exp);
    if (!parsedIdentifier) {
      return;
    }
    const [relativePath] = parsedIdentifier;
    const isFolder = relativePath.charCodeAt(relativePath.length - 1) === slashCode;
    if (isFolder !== expectFolder) {
      throw new Error(expectFolder ? `Expecting folder to folder mapping. ${JSON.stringify(exp)} should end with "/"` : `Expecting file to file mapping. ${JSON.stringify(exp)} should not end with "/"`);
    }
  }
  function assertImportTarget(imp, expectFolder) {
    const parsedIdentifier = parseIdentifier(imp);
    if (!parsedIdentifier) {
      return;
    }
    const [relativePath] = parsedIdentifier;
    const isFolder = relativePath.charCodeAt(relativePath.length - 1) === slashCode;
    if (isFolder !== expectFolder) {
      throw new Error(expectFolder ? `Expecting folder to folder mapping. ${JSON.stringify(imp)} should end with "/"` : `Expecting file to file mapping. ${JSON.stringify(imp)} should not end with "/"`);
    }
  }
  function patternKeyCompare(a, b) {
    const aPatternIndex = a.indexOf("*");
    const bPatternIndex = b.indexOf("*");
    const baseLenA = aPatternIndex === -1 ? a.length : aPatternIndex + 1;
    const baseLenB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;
    if (baseLenA > baseLenB)
      return -1;
    if (baseLenB > baseLenA)
      return 1;
    if (aPatternIndex === -1)
      return 1;
    if (bPatternIndex === -1)
      return -1;
    if (a.length > b.length)
      return -1;
    if (b.length > a.length)
      return 1;
    return 0;
  }
  function findMatch(request, field) {
    if (Object.prototype.hasOwnProperty.call(field, request) && !request.includes("*") && !request.endsWith("/")) {
      const target2 = field[request];
      return [target2, "", false, false, request];
    }
    let bestMatch = "";
    let bestMatchSubpath;
    const keys = Object.getOwnPropertyNames(field);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      const patternIndex = key.indexOf("*");
      if (patternIndex !== -1 && request.startsWith(key.slice(0, patternIndex))) {
        const patternTrailer = key.slice(patternIndex + 1);
        if (request.length >= key.length && request.endsWith(patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && key.lastIndexOf("*") === patternIndex) {
          bestMatch = key;
          bestMatchSubpath = request.slice(patternIndex, request.length - patternTrailer.length);
        }
      } else if (key[key.length - 1] === "/" && request.startsWith(key) && patternKeyCompare(bestMatch, key) === 1) {
        bestMatch = key;
        bestMatchSubpath = request.slice(key.length);
      }
    }
    if (bestMatch === "")
      return null;
    const target = field[bestMatch];
    const isSubpathMapping = bestMatch.endsWith("/");
    const isPattern = bestMatch.includes("*");
    return [
      target,
      bestMatchSubpath,
      isSubpathMapping,
      isPattern,
      bestMatch
    ];
  }
  function isConditionalMapping(mapping) {
    return mapping !== null && typeof mapping === "object" && !Array.isArray(mapping);
  }
  function directMapping(remainingRequest, isPattern, isSubpathMapping, mappingTarget, conditionNames, assert) {
    if (mappingTarget === null)
      return [];
    if (typeof mappingTarget === "string") {
      return [
        targetMapping(remainingRequest, isPattern, isSubpathMapping, mappingTarget, assert)
      ];
    }
    const targets = [];
    for (const exp of mappingTarget) {
      if (typeof exp === "string") {
        targets.push(targetMapping(remainingRequest, isPattern, isSubpathMapping, exp, assert));
        continue;
      }
      const mapping = conditionalMapping(exp, conditionNames);
      if (!mapping)
        continue;
      const innerExports = directMapping(remainingRequest, isPattern, isSubpathMapping, mapping, conditionNames, assert);
      for (const innerExport of innerExports) {
        targets.push(innerExport);
      }
    }
    return targets;
  }
  function targetMapping(remainingRequest, isPattern, isSubpathMapping, mappingTarget, assert) {
    if (remainingRequest === undefined) {
      assert(mappingTarget, false);
      return mappingTarget;
    }
    if (isSubpathMapping) {
      assert(mappingTarget, true);
      return mappingTarget + remainingRequest;
    }
    assert(mappingTarget, false);
    let result = mappingTarget;
    if (isPattern) {
      result = result.replace(patternRegEx, remainingRequest.replace(/\$/g, "$$"));
    }
    return result;
  }
  function conditionalMapping(conditionalMapping_, conditionNames) {
    let lookup = [[conditionalMapping_, Object.keys(conditionalMapping_), 0]];
    loop:
      while (lookup.length > 0) {
        const [mapping, conditions, j] = lookup[lookup.length - 1];
        for (let i = j;i < conditions.length; i++) {
          const condition = conditions[i];
          if (condition === "default") {
            const innerMapping = mapping[condition];
            if (isConditionalMapping(innerMapping)) {
              const conditionalMapping2 = innerMapping;
              lookup[lookup.length - 1][2] = i + 1;
              lookup.push([conditionalMapping2, Object.keys(conditionalMapping2), 0]);
              continue loop;
            }
            return innerMapping;
          }
          if (conditionNames.has(condition)) {
            const innerMapping = mapping[condition];
            if (isConditionalMapping(innerMapping)) {
              const conditionalMapping2 = innerMapping;
              lookup[lookup.length - 1][2] = i + 1;
              lookup.push([conditionalMapping2, Object.keys(conditionalMapping2), 0]);
              continue loop;
            }
            return innerMapping;
          }
        }
        lookup.pop();
      }
    return null;
  }
  function buildExportsField(field) {
    if (typeof field === "string" || Array.isArray(field)) {
      return { ".": field };
    }
    const keys = Object.keys(field);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      if (key.charCodeAt(0) !== dotCode) {
        if (i === 0) {
          while (i < keys.length) {
            const charCode = keys[i].charCodeAt(0);
            if (charCode === dotCode || charCode === slashCode) {
              throw new Error(`Exports field key should be relative path and start with "." (key: ${JSON.stringify(key)})`);
            }
            i++;
          }
          return { ".": field };
        }
        throw new Error(`Exports field key should be relative path and start with "." (key: ${JSON.stringify(key)})`);
      }
      if (key.length === 1) {
        continue;
      }
      if (key.charCodeAt(1) !== slashCode) {
        throw new Error(`Exports field key should be relative path and start with "./" (key: ${JSON.stringify(key)})`);
      }
    }
    return field;
  }
});
var require_ExportsFieldPlugin = __commonJS2((exports, module) => {
  var DescriptionFileUtils = require_DescriptionFileUtils();
  var forEachBail = require_forEachBail();
  var { processExportsField } = require_entrypoints();
  var { parseIdentifier } = require_identifier();
  var {
    invalidSegmentRegEx,
    deprecatedInvalidSegmentRegEx
  } = require_path();
  module.exports = class ExportsFieldPlugin {
    constructor(source, conditionNames, fieldNamePath, target) {
      this.source = source;
      this.target = target;
      this.conditionNames = conditionNames;
      this.fieldName = fieldNamePath;
      this.fieldProcessorCache = new WeakMap;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ExportsFieldPlugin", (request, resolveContext, callback) => {
        if (!request.descriptionFilePath)
          return callback();
        if (request.relativePath !== "." || request.request === undefined)
          return callback();
        const remainingRequest = request.query || request.fragment ? (request.request === "." ? "./" : request.request) + request.query + request.fragment : request.request;
        const exportsField = DescriptionFileUtils.getField(request.descriptionFileData, this.fieldName);
        if (!exportsField)
          return callback();
        if (request.directory) {
          return callback(new Error(`Resolving to directories is not possible with the exports field (request was ${remainingRequest}/)`));
        }
        let paths;
        let usedField;
        try {
          let fieldProcessor = this.fieldProcessorCache.get(request.descriptionFileData);
          if (fieldProcessor === undefined) {
            fieldProcessor = processExportsField(exportsField);
            this.fieldProcessorCache.set(request.descriptionFileData, fieldProcessor);
          }
          [paths, usedField] = fieldProcessor(remainingRequest, this.conditionNames);
        } catch (err) {
          if (resolveContext.log) {
            resolveContext.log(`Exports field in ${request.descriptionFilePath} can't be processed: ${err}`);
          }
          return callback(err);
        }
        if (paths.length === 0) {
          return callback(new Error(`Package path ${remainingRequest} is not exported from package ${request.descriptionFileRoot} (see exports field in ${request.descriptionFilePath})`));
        }
        forEachBail(paths, (p, callback2, i) => {
          const parsedIdentifier = parseIdentifier(p);
          if (!parsedIdentifier)
            return callback2();
          const [relativePath, query, fragment] = parsedIdentifier;
          if (relativePath.length === 0 || !relativePath.startsWith("./")) {
            if (paths.length === i) {
              return callback2(new Error(`Invalid "exports" target "${p}" defined for "${usedField}" in the package config ${request.descriptionFilePath}, targets must start with "./"`));
            }
            return callback2();
          }
          if (invalidSegmentRegEx.exec(relativePath.slice(2)) !== null && deprecatedInvalidSegmentRegEx.test(relativePath.slice(2)) !== null) {
            if (paths.length === i) {
              return callback2(new Error(`Invalid "exports" target "${p}" defined for "${usedField}" in the package config ${request.descriptionFilePath}, targets must start with "./"`));
            }
            return callback2();
          }
          const obj = {
            ...request,
            request: undefined,
            path: resolver.join(request.descriptionFileRoot, relativePath),
            relativePath,
            query,
            fragment
          };
          resolver.doResolve(target, obj, "using exports field: " + p, resolveContext, (err, result) => {
            if (err)
              return callback2(err);
            if (result === undefined)
              return callback2(null, null);
            callback2(null, result);
          });
        }, (err, result) => callback(err, result || null));
      });
    }
  };
});
var require_ExtensionAliasPlugin = __commonJS2((exports, module) => {
  var forEachBail = require_forEachBail();
  module.exports = class ExtensionAliasPlugin {
    constructor(source, options, target) {
      this.source = source;
      this.options = options;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      const { extension, alias } = this.options;
      resolver.getHook(this.source).tapAsync("ExtensionAliasPlugin", (request, resolveContext, callback) => {
        const requestPath = request.request;
        if (!requestPath || !requestPath.endsWith(extension))
          return callback();
        const isAliasString = typeof alias === "string";
        const resolve = (alias2, callback2, index) => {
          const newRequest = `${requestPath.slice(0, -extension.length)}${alias2}`;
          return resolver.doResolve(target, {
            ...request,
            request: newRequest,
            fullySpecified: true
          }, `aliased from extension alias with mapping '${extension}' to '${alias2}'`, resolveContext, (err, result) => {
            if (!isAliasString && index) {
              if (index !== this.options.alias.length) {
                if (resolveContext.log) {
                  resolveContext.log(`Failed to alias from extension alias with mapping '${extension}' to '${alias2}' for '${newRequest}': ${err}`);
                }
                return callback2(null, result);
              }
              return callback2(err, result);
            } else {
              callback2(err, result);
            }
          });
        };
        const stoppingCallback = (err, result) => {
          if (err)
            return callback(err);
          if (result)
            return callback(null, result);
          return callback(null, null);
        };
        if (isAliasString) {
          resolve(alias, stoppingCallback);
        } else if (alias.length > 1) {
          forEachBail(alias, resolve, stoppingCallback);
        } else {
          resolve(alias[0], stoppingCallback);
        }
      });
    }
  };
});
var require_FileExistsPlugin = __commonJS2((exports, module) => {
  module.exports = class FileExistsPlugin {
    constructor(source, target) {
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      const fs3 = resolver.fileSystem;
      resolver.getHook(this.source).tapAsync("FileExistsPlugin", (request, resolveContext, callback) => {
        const file = request.path;
        if (!file)
          return callback();
        fs3.stat(file, (err, stat) => {
          if (err || !stat) {
            if (resolveContext.missingDependencies)
              resolveContext.missingDependencies.add(file);
            if (resolveContext.log)
              resolveContext.log(file + " doesn't exist");
            return callback();
          }
          if (!stat.isFile()) {
            if (resolveContext.missingDependencies)
              resolveContext.missingDependencies.add(file);
            if (resolveContext.log)
              resolveContext.log(file + " is not a file");
            return callback();
          }
          if (resolveContext.fileDependencies)
            resolveContext.fileDependencies.add(file);
          resolver.doResolve(target, request, "existing file: " + file, resolveContext, callback);
        });
      });
    }
  };
});
var require_ImportsFieldPlugin = __commonJS2((exports, module) => {
  var DescriptionFileUtils = require_DescriptionFileUtils();
  var forEachBail = require_forEachBail();
  var { processImportsField } = require_entrypoints();
  var { parseIdentifier } = require_identifier();
  var {
    invalidSegmentRegEx,
    deprecatedInvalidSegmentRegEx
  } = require_path();
  var dotCode = 46;
  module.exports = class ImportsFieldPlugin {
    constructor(source, conditionNames, fieldNamePath, targetFile, targetPackage) {
      this.source = source;
      this.targetFile = targetFile;
      this.targetPackage = targetPackage;
      this.conditionNames = conditionNames;
      this.fieldName = fieldNamePath;
      this.fieldProcessorCache = new WeakMap;
    }
    apply(resolver) {
      const targetFile = resolver.ensureHook(this.targetFile);
      const targetPackage = resolver.ensureHook(this.targetPackage);
      resolver.getHook(this.source).tapAsync("ImportsFieldPlugin", (request, resolveContext, callback) => {
        if (!request.descriptionFilePath || request.request === undefined) {
          return callback();
        }
        const remainingRequest = request.request + request.query + request.fragment;
        const importsField = DescriptionFileUtils.getField(request.descriptionFileData, this.fieldName);
        if (!importsField)
          return callback();
        if (request.directory) {
          return callback(new Error(`Resolving to directories is not possible with the imports field (request was ${remainingRequest}/)`));
        }
        let paths;
        let usedField;
        try {
          let fieldProcessor = this.fieldProcessorCache.get(request.descriptionFileData);
          if (fieldProcessor === undefined) {
            fieldProcessor = processImportsField(importsField);
            this.fieldProcessorCache.set(request.descriptionFileData, fieldProcessor);
          }
          [paths, usedField] = fieldProcessor(remainingRequest, this.conditionNames);
        } catch (err) {
          if (resolveContext.log) {
            resolveContext.log(`Imports field in ${request.descriptionFilePath} can't be processed: ${err}`);
          }
          return callback(err);
        }
        if (paths.length === 0) {
          return callback(new Error(`Package import ${remainingRequest} is not imported from package ${request.descriptionFileRoot} (see imports field in ${request.descriptionFilePath})`));
        }
        forEachBail(paths, (p, callback2, i) => {
          const parsedIdentifier = parseIdentifier(p);
          if (!parsedIdentifier)
            return callback2();
          const [path_, query, fragment] = parsedIdentifier;
          switch (path_.charCodeAt(0)) {
            case dotCode: {
              if (invalidSegmentRegEx.exec(path_.slice(2)) !== null && deprecatedInvalidSegmentRegEx.test(path_.slice(2)) !== null) {
                if (paths.length === i) {
                  return callback2(new Error(`Invalid "imports" target "${p}" defined for "${usedField}" in the package config ${request.descriptionFilePath}, targets must start with "./"`));
                }
                return callback2();
              }
              const obj = {
                ...request,
                request: undefined,
                path: resolver.join(request.descriptionFileRoot, path_),
                relativePath: path_,
                query,
                fragment
              };
              resolver.doResolve(targetFile, obj, "using imports field: " + p, resolveContext, (err, result) => {
                if (err)
                  return callback2(err);
                if (result === undefined)
                  return callback2(null, null);
                callback2(null, result);
              });
              break;
            }
            default: {
              const obj = {
                ...request,
                request: path_,
                relativePath: path_,
                fullySpecified: true,
                query,
                fragment
              };
              resolver.doResolve(targetPackage, obj, "using imports field: " + p, resolveContext, (err, result) => {
                if (err)
                  return callback2(err);
                if (result === undefined)
                  return callback2(null, null);
                callback2(null, result);
              });
            }
          }
        }, (err, result) => callback(err, result || null));
      });
    }
  };
});
var require_JoinRequestPartPlugin = __commonJS2((exports, module) => {
  var namespaceStartCharCode = 64;
  module.exports = class JoinRequestPartPlugin {
    constructor(source, target) {
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("JoinRequestPartPlugin", (request, resolveContext, callback) => {
        const req = request.request || "";
        let i = req.indexOf("/", 3);
        if (i >= 0 && req.charCodeAt(2) === namespaceStartCharCode) {
          i = req.indexOf("/", i + 1);
        }
        let moduleName;
        let remainingRequest;
        let fullySpecified;
        if (i < 0) {
          moduleName = req;
          remainingRequest = ".";
          fullySpecified = false;
        } else {
          moduleName = req.slice(0, i);
          remainingRequest = "." + req.slice(i);
          fullySpecified = request.fullySpecified;
        }
        const obj = {
          ...request,
          path: resolver.join(request.path, moduleName),
          relativePath: request.relativePath && resolver.join(request.relativePath, moduleName),
          request: remainingRequest,
          fullySpecified
        };
        resolver.doResolve(target, obj, null, resolveContext, callback);
      });
    }
  };
});
var require_JoinRequestPlugin = __commonJS2((exports, module) => {
  module.exports = class JoinRequestPlugin {
    constructor(source, target) {
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("JoinRequestPlugin", (request, resolveContext, callback) => {
        const requestPath = request.path;
        const requestRequest = request.request;
        const obj = {
          ...request,
          path: resolver.join(requestPath, requestRequest),
          relativePath: request.relativePath && resolver.join(request.relativePath, requestRequest),
          request: undefined
        };
        resolver.doResolve(target, obj, null, resolveContext, callback);
      });
    }
  };
});
var require_MainFieldPlugin = __commonJS2((exports, module) => {
  var path4 = __require2("path");
  var DescriptionFileUtils = require_DescriptionFileUtils();
  var alreadyTriedMainField = Symbol("alreadyTriedMainField");
  module.exports = class MainFieldPlugin {
    constructor(source, options, target) {
      this.source = source;
      this.options = options;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("MainFieldPlugin", (request, resolveContext, callback) => {
        if (request.path !== request.descriptionFileRoot || request[alreadyTriedMainField] === request.descriptionFilePath || !request.descriptionFilePath)
          return callback();
        const filename = path4.basename(request.descriptionFilePath);
        let mainModule = DescriptionFileUtils.getField(request.descriptionFileData, this.options.name);
        if (!mainModule || typeof mainModule !== "string" || mainModule === "." || mainModule === "./") {
          return callback();
        }
        if (this.options.forceRelative && !/^\.\.?\//.test(mainModule))
          mainModule = "./" + mainModule;
        const obj = {
          ...request,
          request: mainModule,
          module: false,
          directory: mainModule.endsWith("/"),
          [alreadyTriedMainField]: request.descriptionFilePath
        };
        return resolver.doResolve(target, obj, "use " + mainModule + " from " + this.options.name + " in " + filename, resolveContext, callback);
      });
    }
  };
});
var require_getPaths = __commonJS2((exports, module) => {
  module.exports = function getPaths(path4) {
    if (path4 === "/")
      return { paths: ["/"], segments: [""] };
    const parts = path4.split(/(.*?[\\/]+)/);
    const paths = [path4];
    const segments = [parts[parts.length - 1]];
    let part = parts[parts.length - 1];
    path4 = path4.substring(0, path4.length - part.length - 1);
    for (let i = parts.length - 2;i > 2; i -= 2) {
      paths.push(path4);
      part = parts[i];
      path4 = path4.substring(0, path4.length - part.length) || "/";
      segments.push(part.slice(0, -1));
    }
    part = parts[1];
    segments.push(part);
    paths.push(part);
    return {
      paths,
      segments
    };
  };
  module.exports.basename = function basename(path4) {
    const i = path4.lastIndexOf("/"), j = path4.lastIndexOf("\\");
    const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
    if (p < 0)
      return null;
    const s = path4.slice(p + 1);
    return s;
  };
});
var require_ModulesInHierarchicalDirectoriesPlugin = __commonJS2((exports, module) => {
  var forEachBail = require_forEachBail();
  var getPaths = require_getPaths();
  module.exports = class ModulesInHierarchicalDirectoriesPlugin {
    constructor(source, directories, target) {
      this.source = source;
      this.directories = [].concat(directories);
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ModulesInHierarchicalDirectoriesPlugin", (request, resolveContext, callback) => {
        const fs3 = resolver.fileSystem;
        const addrs = getPaths(request.path).paths.map((p) => {
          return this.directories.map((d) => resolver.join(p, d));
        }).reduce((array, p) => {
          array.push.apply(array, p);
          return array;
        }, []);
        forEachBail(addrs, (addr, callback2) => {
          fs3.stat(addr, (err, stat) => {
            if (!err && stat && stat.isDirectory()) {
              const obj = {
                ...request,
                path: addr,
                request: "./" + request.request,
                module: false
              };
              const message = "looking for modules in " + addr;
              return resolver.doResolve(target, obj, message, resolveContext, callback2);
            }
            if (resolveContext.log)
              resolveContext.log(addr + " doesn't exist or is not a directory");
            if (resolveContext.missingDependencies)
              resolveContext.missingDependencies.add(addr);
            return callback2();
          });
        }, callback);
      });
    }
  };
});
var require_ModulesInRootPlugin = __commonJS2((exports, module) => {
  module.exports = class ModulesInRootPlugin {
    constructor(source, path4, target) {
      this.source = source;
      this.path = path4;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ModulesInRootPlugin", (request, resolveContext, callback) => {
        const obj = {
          ...request,
          path: this.path,
          request: "./" + request.request,
          module: false
        };
        resolver.doResolve(target, obj, "looking for modules in " + this.path, resolveContext, callback);
      });
    }
  };
});
var require_NextPlugin = __commonJS2((exports, module) => {
  module.exports = class NextPlugin {
    constructor(source, target) {
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("NextPlugin", (request, resolveContext, callback) => {
        resolver.doResolve(target, request, null, resolveContext, callback);
      });
    }
  };
});
var require_ParsePlugin = __commonJS2((exports, module) => {
  module.exports = class ParsePlugin {
    constructor(source, requestOptions, target) {
      this.source = source;
      this.requestOptions = requestOptions;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("ParsePlugin", (request, resolveContext, callback) => {
        const parsed = resolver.parse(request.request);
        const obj = { ...request, ...parsed, ...this.requestOptions };
        if (request.query && !parsed.query) {
          obj.query = request.query;
        }
        if (request.fragment && !parsed.fragment) {
          obj.fragment = request.fragment;
        }
        if (parsed && resolveContext.log) {
          if (parsed.module)
            resolveContext.log("Parsed request is a module");
          if (parsed.directory)
            resolveContext.log("Parsed request is a directory");
        }
        if (obj.request && !obj.query && obj.fragment) {
          const directory = obj.fragment.endsWith("/");
          const alternative = {
            ...obj,
            directory,
            request: obj.request + (obj.directory ? "/" : "") + (directory ? obj.fragment.slice(0, -1) : obj.fragment),
            fragment: ""
          };
          resolver.doResolve(target, alternative, null, resolveContext, (err, result) => {
            if (err)
              return callback(err);
            if (result)
              return callback(null, result);
            resolver.doResolve(target, obj, null, resolveContext, callback);
          });
          return;
        }
        resolver.doResolve(target, obj, null, resolveContext, callback);
      });
    }
  };
});
var require_PnpPlugin = __commonJS2((exports, module) => {
  module.exports = class PnpPlugin {
    constructor(source, pnpApi, target, alternateTarget) {
      this.source = source;
      this.pnpApi = pnpApi;
      this.target = target;
      this.alternateTarget = alternateTarget;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      const alternateTarget = resolver.ensureHook(this.alternateTarget);
      resolver.getHook(this.source).tapAsync("PnpPlugin", (request, resolveContext, callback) => {
        const req = request.request;
        if (!req)
          return callback();
        const issuer = `${request.path}/`;
        const packageMatch = /^(@[^/]+\/)?[^/]+/.exec(req);
        if (!packageMatch)
          return callback();
        const packageName = packageMatch[0];
        const innerRequest = `.${req.slice(packageName.length)}`;
        let resolution;
        let apiResolution;
        try {
          resolution = this.pnpApi.resolveToUnqualified(packageName, issuer, {
            considerBuiltins: false
          });
          if (resolution === null) {
            resolver.doResolve(alternateTarget, request, "issuer is not managed by a pnpapi", resolveContext, (err, result) => {
              if (err)
                return callback(err);
              if (result)
                return callback(null, result);
              return callback(null, null);
            });
            return;
          }
          if (resolveContext.fileDependencies) {
            apiResolution = this.pnpApi.resolveToUnqualified("pnpapi", issuer, {
              considerBuiltins: false
            });
          }
        } catch (error) {
          if (error.code === "MODULE_NOT_FOUND" && error.pnpCode === "UNDECLARED_DEPENDENCY") {
            if (resolveContext.log) {
              resolveContext.log(`request is not managed by the pnpapi`);
              for (const line of error.message.split(`
`).filter(Boolean))
                resolveContext.log(`  ${line}`);
            }
            return callback();
          }
          return callback(error);
        }
        if (resolution === packageName)
          return callback();
        if (apiResolution && resolveContext.fileDependencies) {
          resolveContext.fileDependencies.add(apiResolution);
        }
        const obj = {
          ...request,
          path: resolution,
          request: innerRequest,
          ignoreSymlinks: true,
          fullySpecified: request.fullySpecified && innerRequest !== "."
        };
        resolver.doResolve(target, obj, `resolved by pnp to ${resolution}`, resolveContext, (err, result) => {
          if (err)
            return callback(err);
          if (result)
            return callback(null, result);
          return callback(null, null);
        });
      });
    }
  };
});
var require_RestrictionsPlugin = __commonJS2((exports, module) => {
  var slashCode = 47;
  var backslashCode = 92;
  var isInside = (path4, parent) => {
    if (!path4.startsWith(parent))
      return false;
    if (path4.length === parent.length)
      return true;
    const charCode = path4.charCodeAt(parent.length);
    return charCode === slashCode || charCode === backslashCode;
  };
  module.exports = class RestrictionsPlugin {
    constructor(source, restrictions) {
      this.source = source;
      this.restrictions = restrictions;
    }
    apply(resolver) {
      resolver.getHook(this.source).tapAsync("RestrictionsPlugin", (request, resolveContext, callback) => {
        if (typeof request.path === "string") {
          const path4 = request.path;
          for (const rule of this.restrictions) {
            if (typeof rule === "string") {
              if (!isInside(path4, rule)) {
                if (resolveContext.log) {
                  resolveContext.log(`${path4} is not inside of the restriction ${rule}`);
                }
                return callback(null, null);
              }
            } else if (!rule.test(path4)) {
              if (resolveContext.log) {
                resolveContext.log(`${path4} doesn't match the restriction ${rule}`);
              }
              return callback(null, null);
            }
          }
        }
        callback();
      });
    }
  };
});
var require_ResultPlugin = __commonJS2((exports, module) => {
  module.exports = class ResultPlugin {
    constructor(source) {
      this.source = source;
    }
    apply(resolver) {
      this.source.tapAsync("ResultPlugin", (request, resolverContext, callback) => {
        const obj = { ...request };
        if (resolverContext.log)
          resolverContext.log("reporting result " + obj.path);
        resolver.hooks.result.callAsync(obj, resolverContext, (err) => {
          if (err)
            return callback(err);
          if (typeof resolverContext.yield === "function") {
            resolverContext.yield(obj);
            callback(null, null);
          } else {
            callback(null, obj);
          }
        });
      });
    }
  };
});
var require_RootsPlugin = __commonJS2((exports, module) => {
  var forEachBail = require_forEachBail();

  class RootsPlugin {
    constructor(source, roots, target) {
      this.roots = Array.from(roots);
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("RootsPlugin", (request, resolveContext, callback) => {
        const req = request.request;
        if (!req)
          return callback();
        if (!req.startsWith("/"))
          return callback();
        forEachBail(this.roots, (root, callback2) => {
          const path4 = resolver.join(root, req.slice(1));
          const obj = {
            ...request,
            path: path4,
            relativePath: request.relativePath && path4
          };
          resolver.doResolve(target, obj, `root path ${root}`, resolveContext, callback2);
        }, callback);
      });
    }
  }
  module.exports = RootsPlugin;
});
var require_SelfReferencePlugin = __commonJS2((exports, module) => {
  var DescriptionFileUtils = require_DescriptionFileUtils();
  var slashCode = 47;
  module.exports = class SelfReferencePlugin {
    constructor(source, fieldNamePath, target) {
      this.source = source;
      this.target = target;
      this.fieldName = fieldNamePath;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("SelfReferencePlugin", (request, resolveContext, callback) => {
        if (!request.descriptionFilePath)
          return callback();
        const req = request.request;
        if (!req)
          return callback();
        const exportsField = DescriptionFileUtils.getField(request.descriptionFileData, this.fieldName);
        if (!exportsField)
          return callback();
        const name = DescriptionFileUtils.getField(request.descriptionFileData, "name");
        if (typeof name !== "string")
          return callback();
        if (req.startsWith(name) && (req.length === name.length || req.charCodeAt(name.length) === slashCode)) {
          const remainingRequest = `.${req.slice(name.length)}`;
          const obj = {
            ...request,
            request: remainingRequest,
            path: request.descriptionFileRoot,
            relativePath: "."
          };
          resolver.doResolve(target, obj, "self reference", resolveContext, callback);
        } else {
          return callback();
        }
      });
    }
  };
});
var require_SymlinkPlugin = __commonJS2((exports, module) => {
  var forEachBail = require_forEachBail();
  var getPaths = require_getPaths();
  var { getType, PathType } = require_path();
  module.exports = class SymlinkPlugin {
    constructor(source, target) {
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      const fs3 = resolver.fileSystem;
      resolver.getHook(this.source).tapAsync("SymlinkPlugin", (request, resolveContext, callback) => {
        if (request.ignoreSymlinks)
          return callback();
        const pathsResult = getPaths(request.path);
        const pathSegments = pathsResult.segments;
        const paths = pathsResult.paths;
        let containsSymlink = false;
        let idx = -1;
        forEachBail(paths, (path4, callback2) => {
          idx++;
          if (resolveContext.fileDependencies)
            resolveContext.fileDependencies.add(path4);
          fs3.readlink(path4, (err, result) => {
            if (!err && result) {
              pathSegments[idx] = result;
              containsSymlink = true;
              const resultType = getType(result.toString());
              if (resultType === PathType.AbsoluteWin || resultType === PathType.AbsolutePosix) {
                return callback2(null, idx);
              }
            }
            callback2();
          });
        }, (err, idx2) => {
          if (!containsSymlink)
            return callback();
          const resultSegments = typeof idx2 === "number" ? pathSegments.slice(0, idx2 + 1) : pathSegments.slice();
          const result = resultSegments.reduceRight((a, b) => {
            return resolver.join(a, b);
          });
          const obj = {
            ...request,
            path: result
          };
          resolver.doResolve(target, obj, "resolved symlink to " + result, resolveContext, callback);
        });
      });
    }
  };
});
var require_TryNextPlugin = __commonJS2((exports, module) => {
  module.exports = class TryNextPlugin {
    constructor(source, message, target) {
      this.source = source;
      this.message = message;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("TryNextPlugin", (request, resolveContext, callback) => {
        resolver.doResolve(target, request, this.message, resolveContext, callback);
      });
    }
  };
});
var require_UnsafeCachePlugin = __commonJS2((exports, module) => {
  function getCacheId(type, request, withContext) {
    return JSON.stringify({
      type,
      context: withContext ? request.context : "",
      path: request.path,
      query: request.query,
      fragment: request.fragment,
      request: request.request
    });
  }
  module.exports = class UnsafeCachePlugin {
    constructor(source, filterPredicate, cache, withContext, target) {
      this.source = source;
      this.filterPredicate = filterPredicate;
      this.withContext = withContext;
      this.cache = cache;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("UnsafeCachePlugin", (request, resolveContext, callback) => {
        if (!this.filterPredicate(request))
          return callback();
        const isYield = typeof resolveContext.yield === "function";
        const cacheId = getCacheId(isYield ? "yield" : "default", request, this.withContext);
        const cacheEntry = this.cache[cacheId];
        if (cacheEntry) {
          if (isYield) {
            const yield_2 = resolveContext.yield;
            if (Array.isArray(cacheEntry)) {
              for (const result of cacheEntry)
                yield_2(result);
            } else {
              yield_2(cacheEntry);
            }
            return callback(null, null);
          }
          return callback(null, cacheEntry);
        }
        let yieldFn;
        let yield_;
        const yieldResult = [];
        if (isYield) {
          yieldFn = resolveContext.yield;
          yield_ = (result) => {
            yieldResult.push(result);
          };
        }
        resolver.doResolve(target, request, null, yield_ ? { ...resolveContext, yield: yield_ } : resolveContext, (err, result) => {
          if (err)
            return callback(err);
          if (isYield) {
            if (result)
              yieldResult.push(result);
            for (const result2 of yieldResult) {
              yieldFn(result2);
            }
            this.cache[cacheId] = yieldResult;
            return callback(null, null);
          }
          if (result)
            return callback(null, this.cache[cacheId] = result);
          callback();
        });
      });
    }
  };
});
var require_UseFilePlugin = __commonJS2((exports, module) => {
  module.exports = class UseFilePlugin {
    constructor(source, filename, target) {
      this.source = source;
      this.filename = filename;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("UseFilePlugin", (request, resolveContext, callback) => {
        const filePath = resolver.join(request.path, this.filename);
        const obj = {
          ...request,
          path: filePath,
          relativePath: request.relativePath && resolver.join(request.relativePath, this.filename)
        };
        resolver.doResolve(target, obj, "using path: " + filePath, resolveContext, callback);
      });
    }
  };
});
var require_ResolverFactory = __commonJS2((exports) => {
  var versions = __require2("process").versions;
  var Resolver = require_Resolver();
  var { getType, PathType } = require_path();
  var SyncAsyncFileSystemDecorator = require_SyncAsyncFileSystemDecorator();
  var AliasFieldPlugin = require_AliasFieldPlugin();
  var AliasPlugin = require_AliasPlugin();
  var AppendPlugin = require_AppendPlugin();
  var ConditionalPlugin = require_ConditionalPlugin();
  var DescriptionFilePlugin = require_DescriptionFilePlugin();
  var DirectoryExistsPlugin = require_DirectoryExistsPlugin();
  var ExportsFieldPlugin = require_ExportsFieldPlugin();
  var ExtensionAliasPlugin = require_ExtensionAliasPlugin();
  var FileExistsPlugin = require_FileExistsPlugin();
  var ImportsFieldPlugin = require_ImportsFieldPlugin();
  var JoinRequestPartPlugin = require_JoinRequestPartPlugin();
  var JoinRequestPlugin = require_JoinRequestPlugin();
  var MainFieldPlugin = require_MainFieldPlugin();
  var ModulesInHierarchicalDirectoriesPlugin = require_ModulesInHierarchicalDirectoriesPlugin();
  var ModulesInRootPlugin = require_ModulesInRootPlugin();
  var NextPlugin = require_NextPlugin();
  var ParsePlugin = require_ParsePlugin();
  var PnpPlugin = require_PnpPlugin();
  var RestrictionsPlugin = require_RestrictionsPlugin();
  var ResultPlugin = require_ResultPlugin();
  var RootsPlugin = require_RootsPlugin();
  var SelfReferencePlugin = require_SelfReferencePlugin();
  var SymlinkPlugin = require_SymlinkPlugin();
  var TryNextPlugin = require_TryNextPlugin();
  var UnsafeCachePlugin = require_UnsafeCachePlugin();
  var UseFilePlugin = require_UseFilePlugin();
  function processPnpApiOption(option) {
    if (option === undefined && versions.pnp) {
      const _findPnpApi = __require2("module").findPnpApi;
      if (_findPnpApi) {
        return {
          resolveToUnqualified(request, issuer, opts) {
            const pnpapi = _findPnpApi(issuer);
            if (!pnpapi) {
              return null;
            }
            return pnpapi.resolveToUnqualified(request, issuer, opts);
          }
        };
      }
    }
    return option || null;
  }
  function normalizeAlias(alias) {
    return typeof alias === "object" && !Array.isArray(alias) && alias !== null ? Object.keys(alias).map((key) => {
      const obj = { name: key, onlyModule: false, alias: alias[key] };
      if (/\$$/.test(key)) {
        obj.onlyModule = true;
        obj.name = key.slice(0, -1);
      }
      return obj;
    }) : alias || [];
  }
  function createOptions(options) {
    const mainFieldsSet = new Set(options.mainFields || ["main"]);
    const mainFields = [];
    for (const item of mainFieldsSet) {
      if (typeof item === "string") {
        mainFields.push({
          name: [item],
          forceRelative: true
        });
      } else if (Array.isArray(item)) {
        mainFields.push({
          name: item,
          forceRelative: true
        });
      } else {
        mainFields.push({
          name: Array.isArray(item.name) ? item.name : [item.name],
          forceRelative: item.forceRelative
        });
      }
    }
    return {
      alias: normalizeAlias(options.alias),
      fallback: normalizeAlias(options.fallback),
      aliasFields: new Set(options.aliasFields),
      cachePredicate: options.cachePredicate || function() {
        return true;
      },
      cacheWithContext: typeof options.cacheWithContext !== "undefined" ? options.cacheWithContext : true,
      exportsFields: new Set(options.exportsFields || ["exports"]),
      importsFields: new Set(options.importsFields || ["imports"]),
      conditionNames: new Set(options.conditionNames),
      descriptionFiles: Array.from(new Set(options.descriptionFiles || ["package.json"])),
      enforceExtension: options.enforceExtension === undefined ? options.extensions && options.extensions.includes("") ? true : false : options.enforceExtension,
      extensions: new Set(options.extensions || [".js", ".json", ".node"]),
      extensionAlias: options.extensionAlias ? Object.keys(options.extensionAlias).map((k) => ({
        extension: k,
        alias: options.extensionAlias[k]
      })) : [],
      fileSystem: options.useSyncFileSystemCalls ? new SyncAsyncFileSystemDecorator(options.fileSystem) : options.fileSystem,
      unsafeCache: options.unsafeCache && typeof options.unsafeCache !== "object" ? {} : options.unsafeCache || false,
      symlinks: typeof options.symlinks !== "undefined" ? options.symlinks : true,
      resolver: options.resolver,
      modules: mergeFilteredToArray(Array.isArray(options.modules) ? options.modules : options.modules ? [options.modules] : ["node_modules"], (item) => {
        const type = getType(item);
        return type === PathType.Normal || type === PathType.Relative;
      }),
      mainFields,
      mainFiles: new Set(options.mainFiles || ["index"]),
      plugins: options.plugins || [],
      pnpApi: processPnpApiOption(options.pnpApi),
      roots: new Set(options.roots || undefined),
      fullySpecified: options.fullySpecified || false,
      resolveToContext: options.resolveToContext || false,
      preferRelative: options.preferRelative || false,
      preferAbsolute: options.preferAbsolute || false,
      restrictions: new Set(options.restrictions)
    };
  }
  exports.createResolver = function(options) {
    const normalizedOptions = createOptions(options);
    const {
      alias,
      fallback,
      aliasFields,
      cachePredicate,
      cacheWithContext,
      conditionNames,
      descriptionFiles,
      enforceExtension,
      exportsFields,
      extensionAlias,
      importsFields,
      extensions,
      fileSystem,
      fullySpecified,
      mainFields,
      mainFiles,
      modules,
      plugins: userPlugins,
      pnpApi,
      resolveToContext,
      preferRelative,
      preferAbsolute,
      symlinks,
      unsafeCache,
      resolver: customResolver,
      restrictions,
      roots
    } = normalizedOptions;
    const plugins = userPlugins.slice();
    const resolver = customResolver ? customResolver : new Resolver(fileSystem, normalizedOptions);
    resolver.ensureHook("resolve");
    resolver.ensureHook("internalResolve");
    resolver.ensureHook("newInternalResolve");
    resolver.ensureHook("parsedResolve");
    resolver.ensureHook("describedResolve");
    resolver.ensureHook("rawResolve");
    resolver.ensureHook("normalResolve");
    resolver.ensureHook("internal");
    resolver.ensureHook("rawModule");
    resolver.ensureHook("alternateRawModule");
    resolver.ensureHook("module");
    resolver.ensureHook("resolveAsModule");
    resolver.ensureHook("undescribedResolveInPackage");
    resolver.ensureHook("resolveInPackage");
    resolver.ensureHook("resolveInExistingDirectory");
    resolver.ensureHook("relative");
    resolver.ensureHook("describedRelative");
    resolver.ensureHook("directory");
    resolver.ensureHook("undescribedExistingDirectory");
    resolver.ensureHook("existingDirectory");
    resolver.ensureHook("undescribedRawFile");
    resolver.ensureHook("rawFile");
    resolver.ensureHook("file");
    resolver.ensureHook("finalFile");
    resolver.ensureHook("existingFile");
    resolver.ensureHook("resolved");
    resolver.hooks.newInteralResolve = resolver.hooks.newInternalResolve;
    for (const { source, resolveOptions } of [
      { source: "resolve", resolveOptions: { fullySpecified } },
      { source: "internal-resolve", resolveOptions: { fullySpecified: false } }
    ]) {
      if (unsafeCache) {
        plugins.push(new UnsafeCachePlugin(source, cachePredicate, unsafeCache, cacheWithContext, `new-${source}`));
        plugins.push(new ParsePlugin(`new-${source}`, resolveOptions, "parsed-resolve"));
      } else {
        plugins.push(new ParsePlugin(source, resolveOptions, "parsed-resolve"));
      }
    }
    plugins.push(new DescriptionFilePlugin("parsed-resolve", descriptionFiles, false, "described-resolve"));
    plugins.push(new NextPlugin("after-parsed-resolve", "described-resolve"));
    plugins.push(new NextPlugin("described-resolve", "raw-resolve"));
    if (fallback.length > 0) {
      plugins.push(new AliasPlugin("described-resolve", fallback, "internal-resolve"));
    }
    if (alias.length > 0) {
      plugins.push(new AliasPlugin("raw-resolve", alias, "internal-resolve"));
    }
    aliasFields.forEach((item) => {
      plugins.push(new AliasFieldPlugin("raw-resolve", item, "internal-resolve"));
    });
    extensionAlias.forEach((item) => plugins.push(new ExtensionAliasPlugin("raw-resolve", item, "normal-resolve")));
    plugins.push(new NextPlugin("raw-resolve", "normal-resolve"));
    if (preferRelative) {
      plugins.push(new JoinRequestPlugin("after-normal-resolve", "relative"));
    }
    plugins.push(new ConditionalPlugin("after-normal-resolve", { module: true }, "resolve as module", false, "raw-module"));
    plugins.push(new ConditionalPlugin("after-normal-resolve", { internal: true }, "resolve as internal import", false, "internal"));
    if (preferAbsolute) {
      plugins.push(new JoinRequestPlugin("after-normal-resolve", "relative"));
    }
    if (roots.size > 0) {
      plugins.push(new RootsPlugin("after-normal-resolve", roots, "relative"));
    }
    if (!preferRelative && !preferAbsolute) {
      plugins.push(new JoinRequestPlugin("after-normal-resolve", "relative"));
    }
    importsFields.forEach((importsField) => {
      plugins.push(new ImportsFieldPlugin("internal", conditionNames, importsField, "relative", "internal-resolve"));
    });
    exportsFields.forEach((exportsField) => {
      plugins.push(new SelfReferencePlugin("raw-module", exportsField, "resolve-as-module"));
    });
    modules.forEach((item) => {
      if (Array.isArray(item)) {
        if (item.includes("node_modules") && pnpApi) {
          plugins.push(new ModulesInHierarchicalDirectoriesPlugin("raw-module", item.filter((i) => i !== "node_modules"), "module"));
          plugins.push(new PnpPlugin("raw-module", pnpApi, "undescribed-resolve-in-package", "alternate-raw-module"));
          plugins.push(new ModulesInHierarchicalDirectoriesPlugin("alternate-raw-module", ["node_modules"], "module"));
        } else {
          plugins.push(new ModulesInHierarchicalDirectoriesPlugin("raw-module", item, "module"));
        }
      } else {
        plugins.push(new ModulesInRootPlugin("raw-module", item, "module"));
      }
    });
    plugins.push(new JoinRequestPartPlugin("module", "resolve-as-module"));
    if (!resolveToContext) {
      plugins.push(new ConditionalPlugin("resolve-as-module", { directory: false, request: "." }, "single file module", true, "undescribed-raw-file"));
    }
    plugins.push(new DirectoryExistsPlugin("resolve-as-module", "undescribed-resolve-in-package"));
    plugins.push(new DescriptionFilePlugin("undescribed-resolve-in-package", descriptionFiles, false, "resolve-in-package"));
    plugins.push(new NextPlugin("after-undescribed-resolve-in-package", "resolve-in-package"));
    exportsFields.forEach((exportsField) => {
      plugins.push(new ExportsFieldPlugin("resolve-in-package", conditionNames, exportsField, "relative"));
    });
    plugins.push(new NextPlugin("resolve-in-package", "resolve-in-existing-directory"));
    plugins.push(new JoinRequestPlugin("resolve-in-existing-directory", "relative"));
    plugins.push(new DescriptionFilePlugin("relative", descriptionFiles, true, "described-relative"));
    plugins.push(new NextPlugin("after-relative", "described-relative"));
    if (resolveToContext) {
      plugins.push(new NextPlugin("described-relative", "directory"));
    } else {
      plugins.push(new ConditionalPlugin("described-relative", { directory: false }, null, true, "raw-file"));
      plugins.push(new ConditionalPlugin("described-relative", { fullySpecified: false }, "as directory", true, "directory"));
    }
    plugins.push(new DirectoryExistsPlugin("directory", "undescribed-existing-directory"));
    if (resolveToContext) {
      plugins.push(new NextPlugin("undescribed-existing-directory", "resolved"));
    } else {
      plugins.push(new DescriptionFilePlugin("undescribed-existing-directory", descriptionFiles, false, "existing-directory"));
      mainFiles.forEach((item) => {
        plugins.push(new UseFilePlugin("undescribed-existing-directory", item, "undescribed-raw-file"));
      });
      mainFields.forEach((item) => {
        plugins.push(new MainFieldPlugin("existing-directory", item, "resolve-in-existing-directory"));
      });
      mainFiles.forEach((item) => {
        plugins.push(new UseFilePlugin("existing-directory", item, "undescribed-raw-file"));
      });
      plugins.push(new DescriptionFilePlugin("undescribed-raw-file", descriptionFiles, true, "raw-file"));
      plugins.push(new NextPlugin("after-undescribed-raw-file", "raw-file"));
      plugins.push(new ConditionalPlugin("raw-file", { fullySpecified: true }, null, false, "file"));
      if (!enforceExtension) {
        plugins.push(new TryNextPlugin("raw-file", "no extension", "file"));
      }
      extensions.forEach((item) => {
        plugins.push(new AppendPlugin("raw-file", item, "file"));
      });
      if (alias.length > 0)
        plugins.push(new AliasPlugin("file", alias, "internal-resolve"));
      aliasFields.forEach((item) => {
        plugins.push(new AliasFieldPlugin("file", item, "internal-resolve"));
      });
      plugins.push(new NextPlugin("file", "final-file"));
      plugins.push(new FileExistsPlugin("final-file", "existing-file"));
      if (symlinks)
        plugins.push(new SymlinkPlugin("existing-file", "existing-file"));
      plugins.push(new NextPlugin("existing-file", "resolved"));
    }
    const resolved = resolver.hooks.resolved;
    if (restrictions.size > 0) {
      plugins.push(new RestrictionsPlugin(resolved, restrictions));
    }
    plugins.push(new ResultPlugin(resolved));
    for (const plugin of plugins) {
      if (typeof plugin === "function") {
        plugin.call(resolver, resolver);
      } else if (plugin) {
        plugin.apply(resolver);
      }
    }
    return resolver;
  };
  function mergeFilteredToArray(array, filter) {
    const result = [];
    const set = new Set(array);
    for (const item of set) {
      if (filter(item)) {
        const lastElement = result.length > 0 ? result[result.length - 1] : undefined;
        if (Array.isArray(lastElement)) {
          lastElement.push(item);
        } else {
          result.push([item]);
        }
      } else {
        result.push(item);
      }
    }
    return result;
  }
});
var require_CloneBasenamePlugin = __commonJS2((exports, module) => {
  var basename = require_getPaths().basename;
  module.exports = class CloneBasenamePlugin {
    constructor(source, target) {
      this.source = source;
      this.target = target;
    }
    apply(resolver) {
      const target = resolver.ensureHook(this.target);
      resolver.getHook(this.source).tapAsync("CloneBasenamePlugin", (request, resolveContext, callback) => {
        const requestPath = request.path;
        const filename = basename(requestPath);
        const filePath = resolver.join(requestPath, filename);
        const obj = {
          ...request,
          path: filePath,
          relativePath: request.relativePath && resolver.join(request.relativePath, filename)
        };
        resolver.doResolve(target, obj, "using path: " + filePath, resolveContext, callback);
      });
    }
  };
});
var require_LogInfoPlugin = __commonJS2((exports, module) => {
  module.exports = class LogInfoPlugin {
    constructor(source) {
      this.source = source;
    }
    apply(resolver) {
      const source = this.source;
      resolver.getHook(this.source).tapAsync("LogInfoPlugin", (request, resolveContext, callback) => {
        if (!resolveContext.log)
          return callback();
        const log = resolveContext.log;
        const prefix = "[" + source + "] ";
        if (request.path)
          log(prefix + "Resolving in directory: " + request.path);
        if (request.request)
          log(prefix + "Resolving request: " + request.request);
        if (request.module)
          log(prefix + "Request is an module request.");
        if (request.directory)
          log(prefix + "Request is a directory request.");
        if (request.query)
          log(prefix + "Resolving request query: " + request.query);
        if (request.fragment)
          log(prefix + "Resolving request fragment: " + request.fragment);
        if (request.descriptionFilePath)
          log(prefix + "Has description data from " + request.descriptionFilePath);
        if (request.relativePath)
          log(prefix + "Relative path from description file is: " + request.relativePath);
        callback();
      });
    }
  };
});
var require_lib2 = __commonJS2((exports, module) => {
  var fs3 = require_graceful_fs();
  var CachedInputFileSystem = require_CachedInputFileSystem();
  var ResolverFactory = require_ResolverFactory();
  var nodeFileSystem = new CachedInputFileSystem(fs3, 4000);
  var nodeContext = {
    environments: ["node+es3+es5+process+native"]
  };
  var asyncResolver = ResolverFactory.createResolver({
    conditionNames: ["node"],
    extensions: [".js", ".json", ".node"],
    fileSystem: nodeFileSystem
  });
  var resolve = (context, path4, request, resolveContext, callback) => {
    if (typeof context === "string") {
      callback = resolveContext;
      resolveContext = request;
      request = path4;
      path4 = context;
      context = nodeContext;
    }
    if (typeof callback !== "function") {
      callback = resolveContext;
    }
    asyncResolver.resolve(context, path4, request, resolveContext, callback);
  };
  var syncResolver = ResolverFactory.createResolver({
    conditionNames: ["node"],
    extensions: [".js", ".json", ".node"],
    useSyncFileSystemCalls: true,
    fileSystem: nodeFileSystem
  });
  var resolveSync = (context, path4, request) => {
    if (typeof context === "string") {
      request = path4;
      path4 = context;
      context = nodeContext;
    }
    return syncResolver.resolveSync(context, path4, request);
  };
  function create(options) {
    const resolver = ResolverFactory.createResolver({
      fileSystem: nodeFileSystem,
      ...options
    });
    return function(context, path4, request, resolveContext, callback) {
      if (typeof context === "string") {
        callback = resolveContext;
        resolveContext = request;
        request = path4;
        path4 = context;
        context = nodeContext;
      }
      if (typeof callback !== "function") {
        callback = resolveContext;
      }
      resolver.resolve(context, path4, request, resolveContext, callback);
    };
  }
  function createSync(options) {
    const resolver = ResolverFactory.createResolver({
      useSyncFileSystemCalls: true,
      fileSystem: nodeFileSystem,
      ...options
    });
    return function(context, path4, request) {
      if (typeof context === "string") {
        request = path4;
        path4 = context;
        context = nodeContext;
      }
      return resolver.resolveSync(context, path4, request);
    };
  }
  var mergeExports = (obj, exports2) => {
    const descriptors = Object.getOwnPropertyDescriptors(exports2);
    Object.defineProperties(obj, descriptors);
    return Object.freeze(obj);
  };
  module.exports = mergeExports(resolve, {
    get sync() {
      return resolveSync;
    },
    create: mergeExports(create, {
      get sync() {
        return createSync;
      }
    }),
    ResolverFactory,
    CachedInputFileSystem,
    get CloneBasenamePlugin() {
      return require_CloneBasenamePlugin();
    },
    get LogInfoPlugin() {
      return require_LogInfoPlugin();
    },
    get forEachBail() {
      return require_forEachBail();
    }
  });
});
var require_jiti = __commonJS2((exports, module) => {
  (() => {
    var __webpack_modules__ = { "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive": (module2) => {
      function webpackEmptyAsyncContext(req) {
        return Promise.resolve().then(() => {
          var e = new Error("Cannot find module '" + req + "'");
          throw e.code = "MODULE_NOT_FOUND", e;
        });
      }
      webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive", module2.exports = webpackEmptyAsyncContext;
    } }, __webpack_module_cache__ = {};
    function __webpack_require__(moduleId) {
      var cachedModule = __webpack_module_cache__[moduleId];
      if (cachedModule !== undefined)
        return cachedModule.exports;
      var module2 = __webpack_module_cache__[moduleId] = { exports: {} };
      return __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__), module2.exports;
    }
    __webpack_require__.n = (module2) => {
      var getter = module2 && module2.__esModule ? () => module2.default : () => module2;
      return __webpack_require__.d(getter, { a: getter }), getter;
    }, __webpack_require__.d = (exports2, definition) => {
      for (var key in definition)
        __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
    }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
    var __webpack_exports__ = {};
    (() => {
      __webpack_require__.d(__webpack_exports__, { default: () => createJiti });
      const external_node_os_namespaceObject = __require2("node:os");
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", reservedWords = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = { 5: ecma5AndLessKeywords, "5module": ecma5AndLessKeywords + " export import", 6: ecma5AndLessKeywords + " const class extends export import super" }, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65]");
      function isInAstralSet(code, set) {
        for (var pos = 65536, i2 = 0;i2 < set.length; i2 += 2) {
          if ((pos += set[i2]) > code)
            return false;
          if ((pos += set[i2 + 1]) >= code)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code, astral) {
        return code < 65 ? code === 36 : code < 91 || (code < 97 ? code === 95 : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : astral !== false && isInAstralSet(code, astralIdentifierStartCodes)));
      }
      function isIdentifierChar(code, astral) {
        return code < 48 ? code === 36 : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? code === 95 : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : astral !== false && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
      }
      var TokenType = function(label, conf) {
        conf === undefined && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
      };
      function binop(name, prec) {
        return new TokenType(name, { beforeExpr: true, binop: prec });
      }
      var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true }, keywords = {};
      function kw(name, options) {
        return options === undefined && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
      }
      var types$1 = { num: new TokenType("num", startsExpr), regexp: new TokenType("regexp", startsExpr), string: new TokenType("string", startsExpr), name: new TokenType("name", startsExpr), privateId: new TokenType("privateId", startsExpr), eof: new TokenType("eof"), bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType("]"), braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType("}"), parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType(")"), comma: new TokenType(",", beforeExpr), semi: new TokenType(";", beforeExpr), colon: new TokenType(":", beforeExpr), dot: new TokenType("."), question: new TokenType("?", beforeExpr), questionDot: new TokenType("?."), arrow: new TokenType("=>", beforeExpr), template: new TokenType("template"), invalidTemplate: new TokenType("invalidTemplate"), ellipsis: new TokenType("...", beforeExpr), backQuote: new TokenType("`", startsExpr), dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType("=", { beforeExpr: true, isAssign: true }), assign: new TokenType("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop("||", 1), logicalAND: binop("&&", 2), bitwiseOR: binop("|", 3), bitwiseXOR: binop("^", 4), bitwiseAND: binop("&", 5), equality: binop("==/!=/===/!==", 6), relational: binop("</>/<=/>=", 7), bitShift: binop("<</>>/>>>", 8), plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop("%", 10), star: binop("*", 10), slash: binop("/", 10), starstar: new TokenType("**", { beforeExpr: true }), coalesce: binop("??", 1), _break: kw("break"), _case: kw("case", beforeExpr), _catch: kw("catch"), _continue: kw("continue"), _debugger: kw("debugger"), _default: kw("default", beforeExpr), _do: kw("do", { isLoop: true, beforeExpr: true }), _else: kw("else", beforeExpr), _finally: kw("finally"), _for: kw("for", { isLoop: true }), _function: kw("function", startsExpr), _if: kw("if"), _return: kw("return", beforeExpr), _switch: kw("switch"), _throw: kw("throw", beforeExpr), _try: kw("try"), _var: kw("var"), _const: kw("const"), _while: kw("while", { isLoop: true }), _with: kw("with"), _new: kw("new", { beforeExpr: true, startsExpr: true }), _this: kw("this", startsExpr), _super: kw("super", startsExpr), _class: kw("class", startsExpr), _extends: kw("extends", beforeExpr), _export: kw("export"), _import: kw("import", startsExpr), _null: kw("null", startsExpr), _true: kw("true", startsExpr), _false: kw("false", startsExpr), _in: kw("in", { beforeExpr: true, binop: 7 }), _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
      function isNewLine(code) {
        return code === 10 || code === 13 || code === 8232 || code === 8233;
      }
      function nextLineBreak(code, from, end) {
        end === undefined && (end = code.length);
        for (var i2 = from;i2 < end; i2++) {
          var next = code.charCodeAt(i2);
          if (isNewLine(next))
            return i2 < end - 1 && next === 13 && code.charCodeAt(i2 + 1) === 10 ? i2 + 2 : i2 + 1;
        }
        return -1;
      }
      var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn = Object.hasOwn || function(obj, propName) {
        return acorn_hasOwnProperty.call(obj, propName);
      }, isArray = Array.isArray || function(obj) {
        return acorn_toString.call(obj) === "[object Array]";
      }, regexpCache = Object.create(null);
      function wordsRegexp(words) {
        return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
      }
      function codePointToString(code) {
        return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
      }
      var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
        this.line = line, this.column = col;
      };
      Position.prototype.offset = function(n) {
        return new Position(this.line, this.column + n);
      };
      var SourceLocation = function(p, start, end) {
        this.start = start, this.end = end, p.sourceFile !== null && (this.source = p.sourceFile);
      };
      function getLineInfo(input, offset) {
        for (var line = 1, cur = 0;; ) {
          var nextBreak = nextLineBreak(input, cur, offset);
          if (nextBreak < 0)
            return new Position(line, offset - cur);
          ++line, cur = nextBreak;
        }
      }
      var defaultOptions = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, checkPrivateFields: true, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion = false;
      function getOptions(opts) {
        var options = {};
        for (var opt in defaultOptions)
          options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
        if (options.ecmaVersion === "latest" ? options.ecmaVersion = 1e8 : options.ecmaVersion == null ? (!warnedAboutEcmaVersion && typeof console == "object" && console.warn && (warnedAboutEcmaVersion = true, console.warn(`Since Acorn 8.0.0, options.ecmaVersion is required.
Defaulting to 2020, but this will stop working in the future.`)), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), options.allowReserved == null && (options.allowReserved = options.ecmaVersion < 5), opts && opts.allowHashBang != null || (options.allowHashBang = options.ecmaVersion >= 14), isArray(options.onToken)) {
          var tokens = options.onToken;
          options.onToken = function(token) {
            return tokens.push(token);
          };
        }
        return isArray(options.onComment) && (options.onComment = function(options2, array) {
          return function(block, text, start, end, startLoc, endLoc) {
            var comment = { type: block ? "Block" : "Line", value: text, start, end };
            options2.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
          };
        }(options, options.onComment)), options;
      }
      function functionFlags(async, generator) {
        return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
      }
      var Parser = function(options, input, startPos) {
        this.options = options = getOptions(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
        var reserved = "";
        options.allowReserved !== true && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3], options.sourceType === "module" && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
        var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
        this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf(`
`, startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = options.sourceType === "module", this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = Object.create(null), this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!" && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
      }, prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
      Parser.prototype.parse = function() {
        var node = this.options.program || this.startNode();
        return this.nextToken(), this.parseTopLevel(node);
      }, prototypeAccessors.inFunction.get = function() {
        return (2 & this.currentVarScope().flags) > 0;
      }, prototypeAccessors.inGenerator.get = function() {
        return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
      }, prototypeAccessors.inAsync.get = function() {
        return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
      }, prototypeAccessors.canAwait.get = function() {
        for (var i2 = this.scopeStack.length - 1;i2 >= 0; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.inClassFieldInit || 256 & scope.flags)
            return false;
          if (2 & scope.flags)
            return (4 & scope.flags) > 0;
        }
        return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
      }, prototypeAccessors.allowSuper.get = function() {
        var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
        return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
      }, prototypeAccessors.allowDirectSuper.get = function() {
        return (128 & this.currentThisScope().flags) > 0;
      }, prototypeAccessors.treatFunctionsAsVar.get = function() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      }, prototypeAccessors.allowNewDotTarget.get = function() {
        var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
        return (258 & flags) > 0 || inClassFieldInit;
      }, prototypeAccessors.inClassStaticBlock.get = function() {
        return (256 & this.currentVarScope().flags) > 0;
      }, Parser.extend = function() {
        for (var plugins = [], len = arguments.length;len--; )
          plugins[len] = arguments[len];
        for (var cls = this, i2 = 0;i2 < plugins.length; i2++)
          cls = plugins[i2](cls);
        return cls;
      }, Parser.parse = function(input, options) {
        return new this(options, input).parse();
      }, Parser.parseExpressionAt = function(input, pos, options) {
        var parser = new this(options, input, pos);
        return parser.nextToken(), parser.parseExpression();
      }, Parser.tokenizer = function(input, options) {
        return new this(options, input);
      }, Object.defineProperties(Parser.prototype, prototypeAccessors);
      var pp$9 = Parser.prototype, literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
      pp$9.strictDirective = function(start) {
        if (this.options.ecmaVersion < 5)
          return false;
        for (;; ) {
          skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
          var match = literal.exec(this.input.slice(start));
          if (!match)
            return false;
          if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace.lastIndex = start + match[0].length;
            var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
          }
          start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, this.input[start] === ";" && start++;
        }
      }, pp$9.eat = function(type) {
        return this.type === type && (this.next(), true);
      }, pp$9.isContextual = function(name) {
        return this.type === types$1.name && this.value === name && !this.containsEsc;
      }, pp$9.eatContextual = function(name) {
        return !!this.isContextual(name) && (this.next(), true);
      }, pp$9.expectContextual = function(name) {
        this.eatContextual(name) || this.unexpected();
      }, pp$9.canInsertSemicolon = function() {
        return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      }, pp$9.insertSemicolon = function() {
        if (this.canInsertSemicolon())
          return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
      }, pp$9.semicolon = function() {
        this.eat(types$1.semi) || this.insertSemicolon() || this.unexpected();
      }, pp$9.afterTrailingComma = function(tokType, notNext) {
        if (this.type === tokType)
          return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
      }, pp$9.expect = function(type) {
        this.eat(type) || this.unexpected();
      }, pp$9.unexpected = function(pos) {
        this.raise(pos != null ? pos : this.start, "Unexpected token");
      };
      var DestructuringErrors = function() {
        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
      };
      pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
        if (refDestructuringErrors) {
          refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
          var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
          parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
        }
      }, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
        if (!refDestructuringErrors)
          return false;
        var { shorthandAssign, doubleProto } = refDestructuringErrors;
        if (!andThrow)
          return shorthandAssign >= 0 || doubleProto >= 0;
        shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
      }, pp$9.checkYieldAwaitInDefaultParams = function() {
        this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
      }, pp$9.isSimpleAssignTarget = function(expr) {
        return expr.type === "ParenthesizedExpression" ? this.isSimpleAssignTarget(expr.expression) : expr.type === "Identifier" || expr.type === "MemberExpression";
      };
      var pp$8 = Parser.prototype;
      pp$8.parseTopLevel = function(node) {
        var exports2 = Object.create(null);
        for (node.body || (node.body = []);this.type !== types$1.eof; ) {
          var stmt = this.parseStatement(null, true, exports2);
          node.body.push(stmt);
        }
        if (this.inModule)
          for (var i2 = 0, list2 = Object.keys(this.undefinedExports);i2 < list2.length; i2 += 1) {
            var name = list2[i2];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
        return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
      };
      var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
      pp$8.isLet = function(context) {
        if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
          return false;
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 91 || nextCh === 92)
          return true;
        if (context)
          return false;
        if (nextCh === 123 || nextCh > 55295 && nextCh < 56320)
          return true;
        if (isIdentifierStart(nextCh, true)) {
          for (var pos = next + 1;isIdentifierChar(nextCh = this.input.charCodeAt(pos), true); )
            ++pos;
          if (nextCh === 92 || nextCh > 55295 && nextCh < 56320)
            return true;
          var ident = this.input.slice(next, pos);
          if (!keywordRelationalOperator.test(ident))
            return true;
        }
        return false;
      }, pp$8.isAsyncFunction = function() {
        if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
          return false;
        skipWhiteSpace.lastIndex = this.pos;
        var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
        return !(lineBreak.test(this.input.slice(this.pos, next)) || this.input.slice(next, next + 8) !== "function" || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
      }, pp$8.parseStatement = function(context, topLevel, exports2) {
        var kind, starttype = this.type, node = this.startNode();
        switch (this.isLet(context) && (starttype = types$1._var, kind = "let"), starttype) {
          case types$1._break:
          case types$1._continue:
            return this.parseBreakContinueStatement(node, starttype.keyword);
          case types$1._debugger:
            return this.parseDebuggerStatement(node);
          case types$1._do:
            return this.parseDoStatement(node);
          case types$1._for:
            return this.parseForStatement(node);
          case types$1._function:
            return context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
          case types$1._class:
            return context && this.unexpected(), this.parseClass(node, true);
          case types$1._if:
            return this.parseIfStatement(node);
          case types$1._return:
            return this.parseReturnStatement(node);
          case types$1._switch:
            return this.parseSwitchStatement(node);
          case types$1._throw:
            return this.parseThrowStatement(node);
          case types$1._try:
            return this.parseTryStatement(node);
          case types$1._const:
          case types$1._var:
            return kind = kind || this.value, context && kind !== "var" && this.unexpected(), this.parseVarStatement(node, kind);
          case types$1._while:
            return this.parseWhileStatement(node);
          case types$1._with:
            return this.parseWithStatement(node);
          case types$1.braceL:
            return this.parseBlock(true, node);
          case types$1.semi:
            return this.parseEmptyStatement(node);
          case types$1._export:
          case types$1._import:
            if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
              skipWhiteSpace.lastIndex = this.pos;
              var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46)
                return this.parseExpressionStatement(node, this.parseExpression());
            }
            return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports2);
          default:
            if (this.isAsyncFunction())
              return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
            var maybeName = this.value, expr = this.parseExpression();
            return starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
        }
      }, pp$8.parseBreakContinueStatement = function(node, keyword) {
        var isBreak = keyword === "break";
        this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
        for (var i2 = 0;i2 < this.labels.length; ++i2) {
          var lab = this.labels[i2];
          if (node.label == null || lab.name === node.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop"))
              break;
            if (node.label && isBreak)
              break;
          }
        }
        return i2 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
      }, pp$8.parseDebuggerStatement = function(node) {
        return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
      }, pp$8.parseDoStatement = function(node) {
        return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
      }, pp$8.parseForStatement = function(node) {
        this.next();
        var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
        if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1.parenL), this.type === types$1.semi)
          return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
        var isLet = this.isLet();
        if (this.type === types$1._var || this.type === types$1._const || isLet) {
          var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
          return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1 ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
        }
        var startsWithLet = this.isContextual("let"), isForOf = false, containsEsc = this.containsEsc, refDestructuringErrors = new DestructuringErrors, initPos = this.start, init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
        return this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (awaitAt > -1 ? (this.type === types$1._in && this.unexpected(awaitAt), node.await = true) : isForOf && this.options.ecmaVersion >= 8 && (init.start !== initPos || containsEsc || init.type !== "Identifier" || init.name !== "async" ? this.options.ecmaVersion >= 9 && (node.await = false) : this.unexpected()), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
      }, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
        return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
      }, pp$8.parseIfStatement = function(node) {
        return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
      }, pp$8.parseReturnStatement = function(node) {
        return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
      }, pp$8.parseSwitchStatement = function(node) {
        var cur;
        this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
        for (var sawDefault = false;this.type !== types$1.braceR; )
          if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$1.colon);
          } else
            cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
        return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
      }, pp$8.parseThrowStatement = function(node) {
        return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
      };
      var empty$1 = [];
      pp$8.parseCatchClauseParam = function() {
        var param = this.parseBindingAtom(), simple = param.type === "Identifier";
        return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1.parenR), param;
      }, pp$8.parseTryStatement = function(node) {
        if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1._catch) {
          var clause = this.startNode();
          this.next(), this.eat(types$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
        }
        return node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
      }, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
        return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
      }, pp$8.parseWhileStatement = function(node) {
        return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
      }, pp$8.parseWithStatement = function(node) {
        return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
      }, pp$8.parseEmptyStatement = function(node) {
        return this.next(), this.finishNode(node, "EmptyStatement");
      }, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
        for (var i$1 = 0, list2 = this.labels;i$1 < list2.length; i$1 += 1) {
          list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
        }
        for (var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null, i2 = this.labels.length - 1;i2 >= 0; i2--) {
          var label$1 = this.labels[i2];
          if (label$1.statementStart !== node.start)
            break;
          label$1.statementStart = this.start, label$1.kind = kind;
        }
        return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
      }, pp$8.parseExpressionStatement = function(node, expr) {
        return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
      }, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
        for (createNewLexicalScope === undefined && (createNewLexicalScope = true), node === undefined && (node = this.startNode()), node.body = [], this.expect(types$1.braceL), createNewLexicalScope && this.enterScope(0);this.type !== types$1.braceR; ) {
          var stmt = this.parseStatement(null);
          node.body.push(stmt);
        }
        return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
      }, pp$8.parseFor = function(node, init) {
        return node.init = init, this.expect(types$1.semi), node.test = this.type === types$1.semi ? null : this.parseExpression(), this.expect(types$1.semi), node.update = this.type === types$1.parenR ? null : this.parseExpression(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
      }, pp$8.parseForIn = function(node, init) {
        var isForIn = this.type === types$1._in;
        return this.next(), init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier") && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
      }, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
        for (node.declarations = [], node.kind = kind;; ) {
          var decl = this.startNode();
          if (this.parseVarId(decl, kind), this.eat(types$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || kind !== "const" || this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || decl.id.type === "Identifier" || isFor && (this.type === types$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1.comma))
            break;
        }
        return node;
      }, pp$8.parseVarId = function(decl, kind) {
        decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, kind === "var" ? 1 : 2, false);
      };
      var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
      function isPrivateNameConflicted(privateNameMap, element) {
        var name = element.key.name, curr = privateNameMap[name], next = "true";
        return element.type !== "MethodDefinition" || element.kind !== "get" && element.kind !== "set" || (next = (element.static ? "s" : "i") + element.kind), curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget" ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
      }
      function checkKeyName(node, name) {
        var { computed, key } = node;
        return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
      }
      pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
        this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
      }, pp$8.parseFunctionParams = function(node) {
        this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
      }, pp$8.parseClass = function(node, isStatement) {
        this.next();
        var oldStrict = this.strict;
        this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
        var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
        for (classBody.body = [], this.expect(types$1.braceL);this.type !== types$1.braceR; ) {
          var element = this.parseClassElement(node.superClass !== null);
          element && (classBody.body.push(element), element.type === "MethodDefinition" && element.kind === "constructor" ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
        }
        return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
      }, pp$8.parseClassElement = function(constructorAllowsSuper) {
        if (this.eat(types$1.semi))
          return null;
        var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = false, isAsync = false, kind = "method", isStatic = false;
        if (this.eatContextual("static")) {
          if (ecmaVersion >= 13 && this.eat(types$1.braceL))
            return this.parseClassStaticBlock(node), node;
          this.isClassElementNameStart() || this.type === types$1.star ? isStatic = true : keyName = "static";
        }
        if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star) && (isGenerator = true), !keyName && !isAsync && !isGenerator) {
          var lastValue = this.value;
          (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
        }
        if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
          var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
          isConstructor && kind !== "method" && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
        } else
          this.parseClassField(node);
        return node;
      }, pp$8.isClassElementNameStart = function() {
        return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
      }, pp$8.parseClassElementName = function(element) {
        this.type === types$1.privateId ? (this.value === "constructor" && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
      }, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
        var key = method.key;
        method.kind === "constructor" ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
        var value2 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
        return method.kind === "get" && value2.params.length !== 0 && this.raiseRecoverable(value2.start, "getter should have no params"), method.kind === "set" && value2.params.length !== 1 && this.raiseRecoverable(value2.start, "setter should have exactly one param"), method.kind === "set" && value2.params[0].type === "RestElement" && this.raiseRecoverable(value2.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
      }, pp$8.parseClassField = function(field) {
        if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1.eq)) {
          var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
          scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
        } else
          field.value = null;
        return this.semicolon(), this.finishNode(field, "PropertyDefinition");
      }, pp$8.parseClassStaticBlock = function(node) {
        node.body = [];
        var oldLabels = this.labels;
        for (this.labels = [], this.enterScope(320);this.type !== types$1.braceR; ) {
          var stmt = this.parseStatement(null);
          node.body.push(stmt);
        }
        return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
      }, pp$8.parseClassId = function(node, isStatement) {
        this.type === types$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (isStatement === true && this.unexpected(), node.id = null);
      }, pp$8.parseClassSuper = function(node) {
        node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
      }, pp$8.enterClassBody = function() {
        var element = { declared: Object.create(null), used: [] };
        return this.privateNameStack.push(element), element.declared;
      }, pp$8.exitClassBody = function() {
        var ref2 = this.privateNameStack.pop(), declared = ref2.declared, used = ref2.used;
        if (this.options.checkPrivateFields)
          for (var len = this.privateNameStack.length, parent = len === 0 ? null : this.privateNameStack[len - 1], i2 = 0;i2 < used.length; ++i2) {
            var id = used[i2];
            hasOwn(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
      }, pp$8.parseExportAllDeclaration = function(node, exports2) {
        return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports2, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
      }, pp$8.parseExport = function(node, exports2) {
        if (this.next(), this.eat(types$1.star))
          return this.parseExportAllDeclaration(node, exports2);
        if (this.eat(types$1._default))
          return this.checkExport(exports2, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
        if (this.shouldParseExportStatement())
          node.declaration = this.parseExportDeclaration(node), node.declaration.type === "VariableDeclaration" ? this.checkVariableExport(exports2, node.declaration.declarations) : this.checkExport(exports2, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
        else {
          if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports2), this.eatContextual("from"))
            this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause());
          else {
            for (var i2 = 0, list2 = node.specifiers;i2 < list2.length; i2 += 1) {
              var spec = list2[i2];
              this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), spec.local.type === "Literal" && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
            }
            node.source = null;
          }
          this.semicolon();
        }
        return this.finishNode(node, "ExportNamedDeclaration");
      }, pp$8.parseExportDeclaration = function(node) {
        return this.parseStatement(null);
      }, pp$8.parseExportDefaultDeclaration = function() {
        var isAsync;
        if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
          var fNode = this.startNode();
          return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, false, isAsync);
        }
        if (this.type === types$1._class) {
          var cNode = this.startNode();
          return this.parseClass(cNode, "nullableID");
        }
        var declaration = this.parseMaybeAssign();
        return this.semicolon(), declaration;
      }, pp$8.checkExport = function(exports2, name, pos) {
        exports2 && (typeof name != "string" && (name = name.type === "Identifier" ? name.name : name.value), hasOwn(exports2, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports2[name] = true);
      }, pp$8.checkPatternExport = function(exports2, pat) {
        var type = pat.type;
        if (type === "Identifier")
          this.checkExport(exports2, pat, pat.start);
        else if (type === "ObjectPattern")
          for (var i2 = 0, list2 = pat.properties;i2 < list2.length; i2 += 1) {
            var prop = list2[i2];
            this.checkPatternExport(exports2, prop);
          }
        else if (type === "ArrayPattern")
          for (var i$1 = 0, list$1 = pat.elements;i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            elt && this.checkPatternExport(exports2, elt);
          }
        else
          type === "Property" ? this.checkPatternExport(exports2, pat.value) : type === "AssignmentPattern" ? this.checkPatternExport(exports2, pat.left) : type === "RestElement" && this.checkPatternExport(exports2, pat.argument);
      }, pp$8.checkVariableExport = function(exports2, decls) {
        if (exports2)
          for (var i2 = 0, list2 = decls;i2 < list2.length; i2 += 1) {
            var decl = list2[i2];
            this.checkPatternExport(exports2, decl.id);
          }
      }, pp$8.shouldParseExportStatement = function() {
        return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
      }, pp$8.parseExportSpecifier = function(exports2) {
        var node = this.startNode();
        return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports2, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
      }, pp$8.parseExportSpecifiers = function(exports2) {
        var nodes = [], first = true;
        for (this.expect(types$1.braceL);!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
            break;
          nodes.push(this.parseExportSpecifier(exports2));
        }
        return nodes;
      }, pp$8.parseImport = function(node) {
        return this.next(), this.type === types$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
      }, pp$8.parseImportSpecifier = function() {
        var node = this.startNode();
        return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
      }, pp$8.parseImportDefaultSpecifier = function() {
        var node = this.startNode();
        return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
      }, pp$8.parseImportNamespaceSpecifier = function() {
        var node = this.startNode();
        return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
      }, pp$8.parseImportSpecifiers = function() {
        var nodes = [], first = true;
        if (this.type === types$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1.comma)))
          return nodes;
        if (this.type === types$1.star)
          return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
        for (this.expect(types$1.braceL);!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
            break;
          nodes.push(this.parseImportSpecifier());
        }
        return nodes;
      }, pp$8.parseWithClause = function() {
        var nodes = [];
        if (!this.eat(types$1._with))
          return nodes;
        this.expect(types$1.braceL);
        for (var attributeKeys = {}, first = true;!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
            break;
          var attr = this.parseImportAttribute(), keyName = attr.key.type === "Identifier" ? attr.key.name : attr.key.value;
          hasOwn(attributeKeys, keyName) && this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'"), attributeKeys[keyName] = true, nodes.push(attr);
        }
        return nodes;
      }, pp$8.parseImportAttribute = function() {
        var node = this.startNode();
        return node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never"), this.expect(types$1.colon), this.type !== types$1.string && this.unexpected(), node.value = this.parseExprAtom(), this.finishNode(node, "ImportAttribute");
      }, pp$8.parseModuleExportName = function() {
        if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
          var stringLiteral = this.parseLiteral(this.value);
          return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
        }
        return this.parseIdent(true);
      }, pp$8.adaptDirectivePrologue = function(statements) {
        for (var i2 = 0;i2 < statements.length && this.isDirectiveCandidate(statements[i2]); ++i2)
          statements[i2].directive = statements[i2].expression.raw.slice(1, -1);
      }, pp$8.isDirectiveCandidate = function(statement) {
        return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value == "string" && (this.input[statement.start] === '"' || this.input[statement.start] === "'");
      };
      var pp$7 = Parser.prototype;
      pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 6 && node)
          switch (node.type) {
            case "Identifier":
              this.inAsync && node.name === "await" && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
              for (var i2 = 0, list2 = node.properties;i2 < list2.length; i2 += 1) {
                var prop = list2[i2];
                this.toAssignable(prop, isBinding), prop.type !== "RestElement" || prop.argument.type !== "ArrayPattern" && prop.argument.type !== "ObjectPattern" || this.raise(prop.argument.start, "Unexpected token");
              }
              break;
            case "Property":
              node.kind !== "init" && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement", this.toAssignable(node.argument, isBinding), node.argument.type === "AssignmentPattern" && this.raise(node.argument.start, "Rest elements cannot have a default value");
              break;
            case "AssignmentExpression":
              node.operator !== "=" && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding)
                break;
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
        else
          refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
        return node;
      }, pp$7.toAssignableList = function(exprList, isBinding) {
        for (var end = exprList.length, i2 = 0;i2 < end; i2++) {
          var elt = exprList[i2];
          elt && this.toAssignable(elt, isBinding);
        }
        if (end) {
          var last = exprList[end - 1];
          this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier" && this.unexpected(last.argument.start);
        }
        return exprList;
      }, pp$7.parseSpread = function(refDestructuringErrors) {
        var node = this.startNode();
        return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
      }, pp$7.parseRestBinding = function() {
        var node = this.startNode();
        return this.next(), this.options.ecmaVersion === 6 && this.type !== types$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
      }, pp$7.parseBindingAtom = function() {
        if (this.options.ecmaVersion >= 6)
          switch (this.type) {
            case types$1.bracketL:
              var node = this.startNode();
              return this.next(), node.elements = this.parseBindingList(types$1.bracketR, true, true), this.finishNode(node, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
        return this.parseIdent();
      }, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
        for (var elts = [], first = true;!this.eat(close); )
          if (first ? first = false : this.expect(types$1.comma), allowEmpty && this.type === types$1.comma)
            elts.push(null);
          else {
            if (allowTrailingComma && this.afterTrailingComma(close))
              break;
            if (this.type === types$1.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest), elts.push(rest), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
              break;
            }
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
        return elts;
      }, pp$7.parseAssignableListItem = function(allowModifiers) {
        var elem = this.parseMaybeDefault(this.start, this.startLoc);
        return this.parseBindingListItem(elem), elem;
      }, pp$7.parseBindingListItem = function(param) {
        return param;
      }, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
        if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1.eq))
          return left;
        var node = this.startNodeAt(startPos, startLoc);
        return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
      }, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
        bindingType === undefined && (bindingType = 0);
        var isBind = bindingType !== 0;
        switch (expr.type) {
          case "Identifier":
            this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (bindingType === 2 && expr.name === "let" && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), bindingType !== 5 && this.declareName(expr.name, bindingType, expr.start));
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            isBind && this.raiseRecoverable(expr.start, "Binding member expression");
            break;
          case "ParenthesizedExpression":
            return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
          default:
            this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
        }
      }, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
        switch (bindingType === undefined && (bindingType = 0), expr.type) {
          case "ObjectPattern":
            for (var i2 = 0, list2 = expr.properties;i2 < list2.length; i2 += 1) {
              var prop = list2[i2];
              this.checkLValInnerPattern(prop, bindingType, checkClashes);
            }
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements;i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
            }
            break;
          default:
            this.checkLValSimple(expr, bindingType, checkClashes);
        }
      }, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
        switch (bindingType === undefined && (bindingType = 0), expr.type) {
          case "Property":
            this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
            break;
          case "AssignmentPattern":
            this.checkLValPattern(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLValPattern(expr.argument, bindingType, checkClashes);
            break;
          default:
            this.checkLValPattern(expr, bindingType, checkClashes);
        }
      };
      var TokContext = function(token, isExpr, preserveSpace, override, generator) {
        this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
      }, types = { b_stat: new TokContext("{", false), b_expr: new TokContext("{", true), b_tmpl: new TokContext("${", false), p_stat: new TokContext("(", false), p_expr: new TokContext("(", true), q_tmpl: new TokContext("`", true, true, function(p) {
        return p.tryReadTemplateToken();
      }), f_stat: new TokContext("function", false), f_expr: new TokContext("function", true), f_expr_gen: new TokContext("function", true, false, null, true), f_gen: new TokContext("function", false, false, null, true) }, pp$6 = Parser.prototype;
      pp$6.initialContext = function() {
        return [types.b_stat];
      }, pp$6.curContext = function() {
        return this.context[this.context.length - 1];
      }, pp$6.braceIsBlock = function(prevType) {
        var parent = this.curContext();
        return parent === types.f_expr || parent === types.f_stat || (prevType !== types$1.colon || parent !== types.b_stat && parent !== types.b_expr ? prevType === types$1._return || prevType === types$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow || (prevType === types$1.braceL ? parent === types.b_stat : prevType !== types$1._var && prevType !== types$1._const && prevType !== types$1.name && !this.exprAllowed) : !parent.isExpr);
      }, pp$6.inGeneratorContext = function() {
        for (var i2 = this.context.length - 1;i2 >= 1; i2--) {
          var context = this.context[i2];
          if (context.token === "function")
            return context.generator;
        }
        return false;
      }, pp$6.updateContext = function(prevType) {
        var update, type = this.type;
        type.keyword && prevType === types$1.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
      }, pp$6.overrideContext = function(tokenCtx) {
        this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
      }, types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
        if (this.context.length !== 1) {
          var out = this.context.pop();
          out === types.b_stat && this.curContext().token === "function" && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
        } else
          this.exprAllowed = true;
      }, types$1.braceL.updateContext = function(prevType) {
        this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr), this.exprAllowed = true;
      }, types$1.dollarBraceL.updateContext = function() {
        this.context.push(types.b_tmpl), this.exprAllowed = true;
      }, types$1.parenL.updateContext = function(prevType) {
        var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
        this.context.push(statementParens ? types.p_stat : types.p_expr), this.exprAllowed = true;
      }, types$1.incDec.updateContext = function() {
      }, types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
        !prevType.beforeExpr || prevType === types$1._else || prevType === types$1.semi && this.curContext() !== types.p_stat || prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat ? this.context.push(types.f_stat) : this.context.push(types.f_expr), this.exprAllowed = false;
      }, types$1.colon.updateContext = function() {
        this.curContext().token === "function" && this.context.pop(), this.exprAllowed = true;
      }, types$1.backQuote.updateContext = function() {
        this.curContext() === types.q_tmpl ? this.context.pop() : this.context.push(types.q_tmpl), this.exprAllowed = false;
      }, types$1.star.updateContext = function(prevType) {
        if (prevType === types$1._function) {
          var index = this.context.length - 1;
          this.context[index] === types.f_expr ? this.context[index] = types.f_expr_gen : this.context[index] = types.f_gen;
        }
        this.exprAllowed = true;
      }, types$1.name.updateContext = function(prevType) {
        var allowed = false;
        this.options.ecmaVersion >= 6 && prevType !== types$1.dot && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
      };
      var pp$5 = Parser.prototype;
      function isLocalVariableAccess(node) {
        return node.type === "Identifier" || node.type === "ParenthesizedExpression" && isLocalVariableAccess(node.expression);
      }
      function isPrivateFieldAccess(node) {
        return node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" || node.type === "ChainExpression" && isPrivateFieldAccess(node.expression) || node.type === "ParenthesizedExpression" && isPrivateFieldAccess(node.expression);
      }
      pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
        if (!(this.options.ecmaVersion >= 9 && prop.type === "SpreadElement" || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
          var name, key = prop.key;
          switch (key.type) {
            case "Identifier":
              name = key.name;
              break;
            case "Literal":
              name = String(key.value);
              break;
            default:
              return;
          }
          var kind = prop.kind;
          if (this.options.ecmaVersion >= 6)
            name === "__proto__" && kind === "init" && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
          else {
            var other = propHash[name = "$" + name];
            if (other)
              (kind === "init" ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
            else
              other = propHash[name] = { init: false, get: false, set: false };
            other[kind] = true;
          }
        }
      }, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
        if (this.type === types$1.comma) {
          var node = this.startNodeAt(startPos, startLoc);
          for (node.expressions = [expr];this.eat(types$1.comma); )
            node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
          return this.finishNode(node, "SequenceExpression");
        }
        return expr;
      }, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
        if (this.isContextual("yield")) {
          if (this.inGenerator)
            return this.parseYield(forInit);
          this.exprAllowed = false;
        }
        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
        refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors, ownDestructuringErrors = true);
        var startPos = this.start, startLoc = this.startLoc;
        this.type !== types$1.parenL && this.type !== types$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = forInit === "await");
        var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
        if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
          var node = this.startNodeAt(startPos, startLoc);
          return node.operator = this.value, this.type === types$1.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
        }
        return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
      }, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors))
          return expr;
        if (this.eat(types$1.question)) {
          var node = this.startNodeAt(startPos, startLoc);
          return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
        }
        return expr;
      }, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
        return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
      }, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
        var prec = this.type.binop;
        if (prec != null && (!forInit || this.type !== types$1._in) && prec > minPrec) {
          var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND, coalesce = this.type === types$1.coalesce;
          coalesce && (prec = types$1.logicalAND.binop);
          var op = this.value;
          this.next();
          var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
          return (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
        }
        return left;
      }, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
        right.type === "PrivateIdentifier" && this.raise(right.start, "Private identifier can only be left side of binary expression");
        var node = this.startNodeAt(startPos, startLoc);
        return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
      }, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
        var expr, startPos = this.start, startLoc = this.startLoc;
        if (this.isContextual("await") && this.canAwait)
          expr = this.parseAwait(forInit), sawUnary = true;
        else if (this.type.prefix) {
          var node = this.startNode(), update = this.type === types$1.incDec;
          node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && node.operator === "delete" && isLocalVariableAccess(node.argument) ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : node.operator === "delete" && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
        } else if (sawUnary || this.type !== types$1.privateId) {
          if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors))
            return expr;
          for (;this.type.postfix && !this.canInsertSemicolon(); ) {
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
          }
        } else
          (forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1._in && this.unexpected();
        return incDec || !this.eat(types$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
      }, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
        if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
          return expr;
        var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
        return refDestructuringErrors && result.type === "MemberExpression" && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
      }, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
        for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false;; ) {
          var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
          if (element.optional && (optionalChained = true), element === base || element.type === "ArrowFunctionExpression") {
            if (optionalChained) {
              var chainNode = this.startNodeAt(startPos, startLoc);
              chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
            }
            return element;
          }
          base = element;
        }
      }, pp$5.shouldParseAsyncArrow = function() {
        return !this.canInsertSemicolon() && this.eat(types$1.arrow);
      }, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
      }, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
        var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1.questionDot);
        noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
        var computed = this.eat(types$1.bracketL);
        if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
          var node = this.startNodeAt(startPos, startLoc);
          node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1.bracketR)) : this.type === types$1.privateId && base.type !== "Super" ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent(this.options.allowReserved !== "never"), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
        } else if (!noCalls && this.eat(types$1.parenL)) {
          var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
          var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
          if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow())
            return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
          this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
        } else if (this.type === types$1.backQuote) {
          (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
          var node$2 = this.startNodeAt(startPos, startLoc);
          node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
        }
        return base;
      }, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
        this.type === types$1.slash && this.readRegexp();
        var node, canBeArrow = this.potentialArrowAt === this.start;
        switch (this.type) {
          case types$1._super:
            return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL && this.unexpected(), this.finishNode(node, "Super");
          case types$1._this:
            return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
          case types$1.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function))
              return this.overrideContext(types.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types$1.arrow))
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
              if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc))
                return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
            }
            return id;
          case types$1.regexp:
            var value2 = this.value;
            return (node = this.parseLiteral(value2.value)).regex = { pattern: value2.pattern, flags: value2.flags }, node;
          case types$1.num:
          case types$1.string:
            return this.parseLiteral(this.value);
          case types$1._null:
          case types$1._true:
          case types$1._false:
            return (node = this.startNode()).value = this.type === types$1._null ? null : this.type === types$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
          case types$1.parenL:
            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
            return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
          case types$1.bracketL:
            return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
          case types$1.braceL:
            return this.overrideContext(types.b_expr), this.parseObj(false, refDestructuringErrors);
          case types$1._function:
            return node = this.startNode(), this.next(), this.parseFunction(node, 0);
          case types$1._class:
            return this.parseClass(this.startNode(), false);
          case types$1._new:
            return this.parseNew();
          case types$1.backQuote:
            return this.parseTemplate();
          case types$1._import:
            return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
          default:
            return this.parseExprAtomDefault();
        }
      }, pp$5.parseExprAtomDefault = function() {
        this.unexpected();
      }, pp$5.parseExprImport = function(forNew) {
        var node = this.startNode();
        if (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import"), this.next(), this.type === types$1.parenL && !forNew)
          return this.parseDynamicImport(node);
        if (this.type === types$1.dot) {
          var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
          return meta.name = "import", node.meta = this.finishNode(meta, "Identifier"), this.parseImportMeta(node);
        }
        this.unexpected();
      }, pp$5.parseDynamicImport = function(node) {
        if (this.next(), node.source = this.parseMaybeAssign(), this.options.ecmaVersion >= 16)
          this.eat(types$1.parenR) ? node.options = null : (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) ? node.options = null : (node.options = this.parseMaybeAssign(), this.eat(types$1.parenR) || (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) || this.unexpected())));
        else if (!this.eat(types$1.parenR)) {
          var errorPos = this.start;
          this.eat(types$1.comma) && this.eat(types$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
        }
        return this.finishNode(node, "ImportExpression");
      }, pp$5.parseImportMeta = function(node) {
        this.next();
        var containsEsc = this.containsEsc;
        return node.property = this.parseIdent(true), node.property.name !== "meta" && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), this.options.sourceType === "module" || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
      }, pp$5.parseLiteral = function(value2) {
        var node = this.startNode();
        return node.value = value2, node.raw = this.input.slice(this.start, this.end), node.raw.charCodeAt(node.raw.length - 1) === 110 && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
      }, pp$5.parseParenExpression = function() {
        this.expect(types$1.parenL);
        var val = this.parseExpression();
        return this.expect(types$1.parenR), val;
      }, pp$5.shouldParseArrow = function(exprList) {
        return !this.canInsertSemicolon();
      }, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
        var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
        if (this.options.ecmaVersion >= 6) {
          this.next();
          var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
          for (this.yieldPos = 0, this.awaitPos = 0;this.type !== types$1.parenR; ) {
            if (first ? first = false : this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
              lastIsComma = true;
              break;
            }
            if (this.type === types$1.ellipsis) {
              spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
              break;
            }
            exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
          }
          var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
          if (this.expect(types$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow))
            return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
          exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
        } else
          val = this.parseParenExpression();
        if (this.options.preserveParens) {
          var par = this.startNodeAt(startPos, startLoc);
          return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
        }
        return val;
      }, pp$5.parseParenItem = function(item) {
        return item;
      }, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
      };
      var empty = [];
      pp$5.parseNew = function() {
        this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
        var node = this.startNode();
        if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
          var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
          meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), node.property.name !== "target" && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
        }
        var startPos = this.start, startLoc = this.startLoc;
        return node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false), this.eat(types$1.parenL) ? node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty, this.finishNode(node, "NewExpression");
      }, pp$5.parseTemplateElement = function(ref2) {
        var isTagged = ref2.isTagged, elem = this.startNode();
        return this.type === types$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value.replace(/\r\n?/g, `
`), cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, `
`), cooked: this.value }, this.next(), elem.tail = this.type === types$1.backQuote, this.finishNode(elem, "TemplateElement");
      }, pp$5.parseTemplate = function(ref2) {
        ref2 === undefined && (ref2 = {});
        var isTagged = ref2.isTagged;
        isTagged === undefined && (isTagged = false);
        var node = this.startNode();
        this.next(), node.expressions = [];
        var curElt = this.parseTemplateElement({ isTagged });
        for (node.quasis = [curElt];!curElt.tail; )
          this.type === types$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
        return this.next(), this.finishNode(node, "TemplateLiteral");
      }, pp$5.isAsyncProp = function(prop) {
        return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      }, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
        var node = this.startNode(), first = true, propHash = {};
        for (node.properties = [], this.next();!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR))
            break;
          var prop = this.parseProperty(isPattern, refDestructuringErrors);
          isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
        }
        return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
      }, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
        var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
        if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis))
          return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
        this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1.star)));
        var containsEsc = this.containsEsc;
        return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = true, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star), this.parsePropertyName(prop)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
      }, pp$5.parseGetterSetter = function(prop) {
        prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
        var paramCount = prop.kind === "get" ? 0 : 1;
        if (prop.value.params.length !== paramCount) {
          var start = prop.value.start;
          prop.kind === "get" ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
        } else
          prop.kind === "set" && prop.value.params[0].type === "RestElement" && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
      }, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
        (isGenerator || isAsync) && this.type === types$1.colon && this.unexpected(), this.eat(types$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || prop.key.type !== "Identifier" || prop.key.name !== "get" && prop.key.name !== "set" || this.type === types$1.comma || this.type === types$1.braceR || this.type === types$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier" ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), prop.key.name !== "await" || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected() : ((isGenerator || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
      }, pp$5.parsePropertyName = function(prop) {
        if (this.options.ecmaVersion >= 6) {
          if (this.eat(types$1.bracketL))
            return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$1.bracketR), prop.key;
          prop.computed = false;
        }
        return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
      }, pp$5.initFunction = function(node) {
        node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
      }, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
        var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
      }, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        return this.enterScope(16 | functionFlags(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
      }, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
        var isExpression = isArrowFunction && this.type !== types$1.braceL, oldStrict = this.strict, useStrict = false;
        if (isExpression)
          node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
        else {
          var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
          oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
          var oldLabels = this.labels;
          this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, undefined, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
        }
        this.exitScope();
      }, pp$5.isSimpleParamList = function(params) {
        for (var i2 = 0, list2 = params;i2 < list2.length; i2 += 1) {
          if (list2[i2].type !== "Identifier")
            return false;
        }
        return true;
      }, pp$5.checkParams = function(node, allowDuplicates) {
        for (var nameHash = Object.create(null), i2 = 0, list2 = node.params;i2 < list2.length; i2 += 1) {
          var param = list2[i2];
          this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
        }
      }, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
        for (var elts = [], first = true;!this.eat(close); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(close))
            break;
          var elt = undefined;
          allowEmpty && this.type === types$1.comma ? elt = null : this.type === types$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
        }
        return elts;
      }, pp$5.checkUnreserved = function(ref2) {
        var { start, end, name } = ref2;
        (this.inGenerator && name === "yield" && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && name === "await" && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && name === "arguments" && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || name !== "arguments" && name !== "await" || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || name !== "await" || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
      }, pp$5.parseIdent = function(liberal) {
        var node = this.parseIdentNode();
        return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), node.name !== "await" || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
      }, pp$5.parseIdentNode = function() {
        var node = this.startNode();
        return this.type === types$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, node.name !== "class" && node.name !== "function" || this.lastTokEnd === this.lastTokStart + 1 && this.input.charCodeAt(this.lastTokStart) === 46 || this.context.pop(), this.type = types$1.name) : this.unexpected(), node;
      }, pp$5.parsePrivateIdent = function() {
        var node = this.startNode();
        return this.type === types$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (this.privateNameStack.length === 0 ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
      }, pp$5.parseYield = function(forInit) {
        this.yieldPos || (this.yieldPos = this.start);
        var node = this.startNode();
        return this.next(), this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
      }, pp$5.parseAwait = function(forInit) {
        this.awaitPos || (this.awaitPos = this.start);
        var node = this.startNode();
        return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
      };
      var pp$4 = Parser.prototype;
      pp$4.raise = function(pos, message) {
        var loc = getLineInfo(this.input, pos);
        message += " (" + loc.line + ":" + loc.column + ")";
        var err = new SyntaxError(message);
        throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
      }, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
        if (this.options.locations)
          return new Position(this.curLine, this.pos - this.lineStart);
      };
      var pp$3 = Parser.prototype, Scope = function(flags) {
        this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
      };
      pp$3.enterScope = function(flags) {
        this.scopeStack.push(new Scope(flags));
      }, pp$3.exitScope = function() {
        this.scopeStack.pop();
      }, pp$3.treatFunctionsAsVarInScope = function(scope) {
        return 2 & scope.flags || !this.inModule && 1 & scope.flags;
      }, pp$3.declareName = function(name, bindingType, pos) {
        var redeclared = false;
        if (bindingType === 2) {
          var scope = this.currentScope();
          redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
        } else if (bindingType === 4) {
          this.currentScope().lexical.push(name);
        } else if (bindingType === 3) {
          var scope$2 = this.currentScope();
          redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
        } else
          for (var i2 = this.scopeStack.length - 1;i2 >= 0; --i2) {
            var scope$3 = this.scopeStack[i2];
            if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags)
              break;
          }
        redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
      }, pp$3.checkLocalExport = function(id) {
        this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && (this.undefinedExports[id.name] = id);
      }, pp$3.currentScope = function() {
        return this.scopeStack[this.scopeStack.length - 1];
      }, pp$3.currentVarScope = function() {
        for (var i2 = this.scopeStack.length - 1;; i2--) {
          var scope = this.scopeStack[i2];
          if (259 & scope.flags)
            return scope;
        }
      }, pp$3.currentThisScope = function() {
        for (var i2 = this.scopeStack.length - 1;; i2--) {
          var scope = this.scopeStack[i2];
          if (259 & scope.flags && !(16 & scope.flags))
            return scope;
        }
      };
      var Node = function(parser, pos, loc) {
        this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
      }, pp$2 = Parser.prototype;
      function finishNodeAt(node, type, pos, loc) {
        return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
      }
      pp$2.startNode = function() {
        return new Node(this, this.start, this.startLoc);
      }, pp$2.startNodeAt = function(pos, loc) {
        return new Node(this, pos, loc);
      }, pp$2.finishNode = function(node, type) {
        return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
      }, pp$2.finishNodeAt = function(node, type, pos, loc) {
        return finishNodeAt.call(this, node, type, pos, loc);
      }, pp$2.copyNode = function(node) {
        var newNode = new Node(this, node.start, this.startLoc);
        for (var prop in node)
          newNode[prop] = node[prop];
        return newNode;
      };
      var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = { 9: ecma9BinaryProperties, 10: ecma10BinaryProperties, 11: ecma10BinaryProperties, 12: ecma12BinaryProperties, 13: ecma12BinaryProperties, 14: ecma12BinaryProperties }, unicodeBinaryPropertiesOfStrings = { 9: "", 10: "", 11: "", 12: "", 13: "", 14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji" }, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = { 9: ecma9ScriptValues, 10: ecma10ScriptValues, 11: ecma11ScriptValues, 12: ecma12ScriptValues, 13: ecma13ScriptValues, 14: ecma13ScriptValues + " Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz" }, data = {};
      function buildUnicodeData(ecmaVersion) {
        var d = data[ecmaVersion] = { binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues), binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]), nonBinary: { General_Category: wordsRegexp(unicodeGeneralCategoryValues), Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };
        d.nonBinary.Script_Extensions = d.nonBinary.Script, d.nonBinary.gc = d.nonBinary.General_Category, d.nonBinary.sc = d.nonBinary.Script, d.nonBinary.scx = d.nonBinary.Script_Extensions;
      }
      for (var i = 0, list = [9, 10, 11, 12, 13, 14];i < list.length; i += 1) {
        buildUnicodeData(list[i]);
      }
      var pp$1 = Parser.prototype, BranchID = function(parent, base) {
        this.parent = parent, this.base = base || this;
      };
      BranchID.prototype.separatedFrom = function(alt) {
        for (var self = this;self; self = self.parent)
          for (var other = alt;other; other = other.parent)
            if (self.base === other.base && self !== other)
              return true;
        return false;
      }, BranchID.prototype.sibling = function() {
        return new BranchID(this.parent, this.base);
      };
      var RegExpValidationState = function(parser) {
        this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchV = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = Object.create(null), this.backReferenceNames = [], this.branchID = null;
      };
      function isRegularExpressionModifier(ch) {
        return ch === 105 || ch === 109 || ch === 115;
      }
      function isSyntaxCharacter(ch) {
        return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
      }
      function isControlLetter(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
      }
      RegExpValidationState.prototype.reset = function(start, pattern, flags) {
        var unicodeSets = flags.indexOf("v") !== -1, unicode = flags.indexOf("u") !== -1;
        this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = true, this.switchV = true, this.switchN = true) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = false, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
      }, RegExpValidationState.prototype.raise = function(message) {
        this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
      }, RegExpValidationState.prototype.at = function(i2, forceU) {
        forceU === undefined && (forceU = false);
        var s = this.source, l2 = s.length;
        if (i2 >= l2)
          return -1;
        var c = s.charCodeAt(i2);
        if (!forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l2)
          return c;
        var next = s.charCodeAt(i2 + 1);
        return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
      }, RegExpValidationState.prototype.nextIndex = function(i2, forceU) {
        forceU === undefined && (forceU = false);
        var s = this.source, l2 = s.length;
        if (i2 >= l2)
          return l2;
        var next, c = s.charCodeAt(i2);
        return !forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l2 || (next = s.charCodeAt(i2 + 1)) < 56320 || next > 57343 ? i2 + 1 : i2 + 2;
      }, RegExpValidationState.prototype.current = function(forceU) {
        return forceU === undefined && (forceU = false), this.at(this.pos, forceU);
      }, RegExpValidationState.prototype.lookahead = function(forceU) {
        return forceU === undefined && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
      }, RegExpValidationState.prototype.advance = function(forceU) {
        forceU === undefined && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
      }, RegExpValidationState.prototype.eat = function(ch, forceU) {
        return forceU === undefined && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
      }, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
        forceU === undefined && (forceU = false);
        for (var pos = this.pos, i2 = 0, list2 = chs;i2 < list2.length; i2 += 1) {
          var ch = list2[i2], current = this.at(pos, forceU);
          if (current === -1 || current !== ch)
            return false;
          pos = this.nextIndex(pos, forceU);
        }
        return this.pos = pos, true;
      }, pp$1.validateRegExpFlags = function(state) {
        for (var { validFlags, flags } = state, u = false, v = false, i2 = 0;i2 < flags.length; i2++) {
          var flag = flags.charAt(i2);
          validFlags.indexOf(flag) === -1 && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i2 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), flag === "u" && (u = true), flag === "v" && (v = true);
        }
        this.options.ecmaVersion >= 15 && u && v && this.raise(state.start, "Invalid regular expression flag");
      }, pp$1.validateRegExpPattern = function(state) {
        this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && function(obj) {
          for (var _2 in obj)
            return true;
          return false;
        }(state.groupNames) && (state.switchN = true, this.regexp_pattern(state));
      }, pp$1.regexp_pattern = function(state) {
        state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames = Object.create(null), state.backReferenceNames.length = 0, state.branchID = null, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
        for (var i2 = 0, list2 = state.backReferenceNames;i2 < list2.length; i2 += 1) {
          var name = list2[i2];
          state.groupNames[name] || state.raise("Invalid named capture referenced");
        }
      }, pp$1.regexp_disjunction = function(state) {
        var trackDisjunction = this.options.ecmaVersion >= 16;
        for (trackDisjunction && (state.branchID = new BranchID(state.branchID, null)), this.regexp_alternative(state);state.eat(124); )
          trackDisjunction && (state.branchID = state.branchID.sibling()), this.regexp_alternative(state);
        trackDisjunction && (state.branchID = state.branchID.parent), this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
      }, pp$1.regexp_alternative = function(state) {
        for (;state.pos < state.source.length && this.regexp_eatTerm(state); )
          ;
      }, pp$1.regexp_eatTerm = function(state) {
        return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
      }, pp$1.regexp_eatAssertion = function(state) {
        var start = state.pos;
        if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36))
          return true;
        if (state.eat(92)) {
          if (state.eat(66) || state.eat(98))
            return true;
          state.pos = start;
        }
        if (state.eat(40) && state.eat(63)) {
          var lookbehind = false;
          if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33))
            return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
        }
        return state.pos = start, false;
      }, pp$1.regexp_eatQuantifier = function(state, noError) {
        return noError === undefined && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
      }, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
        return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
      }, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
        var start = state.pos;
        if (state.eat(123)) {
          var min = 0, max = -1;
          if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125)))
            return max !== -1 && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
          state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatAtom = function(state) {
        return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
      }, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatAtomEscape(state))
            return true;
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatUncapturingGroup = function(state) {
        var start = state.pos;
        if (state.eat(40)) {
          if (state.eat(63)) {
            if (this.options.ecmaVersion >= 16) {
              var addModifiers = this.regexp_eatModifiers(state), hasHyphen = state.eat(45);
              if (addModifiers || hasHyphen) {
                for (var i2 = 0;i2 < addModifiers.length; i2++) {
                  var modifier = addModifiers.charAt(i2);
                  addModifiers.indexOf(modifier, i2 + 1) > -1 && state.raise("Duplicate regular expression modifiers");
                }
                if (hasHyphen) {
                  var removeModifiers = this.regexp_eatModifiers(state);
                  addModifiers || removeModifiers || state.current() !== 58 || state.raise("Invalid regular expression modifiers");
                  for (var i$1 = 0;i$1 < removeModifiers.length; i$1++) {
                    var modifier$1 = removeModifiers.charAt(i$1);
                    (removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) && state.raise("Duplicate regular expression modifiers");
                  }
                }
              }
            }
            if (state.eat(58)) {
              if (this.regexp_disjunction(state), state.eat(41))
                return true;
              state.raise("Unterminated group");
            }
          }
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatCapturingGroup = function(state) {
        if (state.eat(40)) {
          if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : state.current() === 63 && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41))
            return state.numCapturingParens += 1, true;
          state.raise("Unterminated group");
        }
        return false;
      }, pp$1.regexp_eatModifiers = function(state) {
        for (var modifiers = "", ch = 0;(ch = state.current()) !== -1 && isRegularExpressionModifier(ch); )
          modifiers += codePointToString(ch), state.advance();
        return modifiers;
      }, pp$1.regexp_eatExtendedAtom = function(state) {
        return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
      }, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
        return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
      }, pp$1.regexp_eatSyntaxCharacter = function(state) {
        var ch = state.current();
        return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatPatternCharacters = function(state) {
        for (var start = state.pos, ch = 0;(ch = state.current()) !== -1 && !isSyntaxCharacter(ch); )
          state.advance();
        return state.pos !== start;
      }, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
        var ch = state.current();
        return !(ch === -1 || ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch === 91 || ch === 94 || ch === 124) && (state.advance(), true);
      }, pp$1.regexp_groupSpecifier = function(state) {
        if (state.eat(63)) {
          this.regexp_eatGroupName(state) || state.raise("Invalid group");
          var trackDisjunction = this.options.ecmaVersion >= 16, known = state.groupNames[state.lastStringValue];
          if (known)
            if (trackDisjunction)
              for (var i2 = 0, list2 = known;i2 < list2.length; i2 += 1) {
                list2[i2].separatedFrom(state.branchID) || state.raise("Duplicate capture group name");
              }
            else
              state.raise("Duplicate capture group name");
          trackDisjunction ? (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID) : state.groupNames[state.lastStringValue] = true;
        }
      }, pp$1.regexp_eatGroupName = function(state) {
        if (state.lastStringValue = "", state.eat(60)) {
          if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62))
            return true;
          state.raise("Invalid capture group name");
        }
        return false;
      }, pp$1.regexp_eatRegExpIdentifierName = function(state) {
        if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
          for (state.lastStringValue += codePointToString(state.lastIntValue);this.regexp_eatRegExpIdentifierPart(state); )
            state.lastStringValue += codePointToString(state.lastIntValue);
          return true;
        }
        return false;
      }, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
        var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
        return state.advance(forceU), ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
          return isIdentifierStart(ch2, true) || ch2 === 36 || ch2 === 95;
        }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
      }, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
        var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
        return state.advance(forceU), ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
          return isIdentifierChar(ch2, true) || ch2 === 36 || ch2 === 95 || ch2 === 8204 || ch2 === 8205;
        }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
      }, pp$1.regexp_eatAtomEscape = function(state) {
        return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (state.current() === 99 && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
      }, pp$1.regexp_eatBackReference = function(state) {
        var start = state.pos;
        if (this.regexp_eatDecimalEscape(state)) {
          var n = state.lastIntValue;
          if (state.switchU)
            return n > state.maxBackReference && (state.maxBackReference = n), true;
          if (n <= state.numCapturingParens)
            return true;
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatKGroupName = function(state) {
        if (state.eat(107)) {
          if (this.regexp_eatGroupName(state))
            return state.backReferenceNames.push(state.lastStringValue), true;
          state.raise("Invalid named reference");
        }
        return false;
      }, pp$1.regexp_eatCharacterEscape = function(state) {
        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
      }, pp$1.regexp_eatCControlLetter = function(state) {
        var start = state.pos;
        if (state.eat(99)) {
          if (this.regexp_eatControlLetter(state))
            return true;
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatZero = function(state) {
        return state.current() === 48 && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
      }, pp$1.regexp_eatControlEscape = function(state) {
        var ch = state.current();
        return ch === 116 ? (state.lastIntValue = 9, state.advance(), true) : ch === 110 ? (state.lastIntValue = 10, state.advance(), true) : ch === 118 ? (state.lastIntValue = 11, state.advance(), true) : ch === 102 ? (state.lastIntValue = 12, state.advance(), true) : ch === 114 && (state.lastIntValue = 13, state.advance(), true);
      }, pp$1.regexp_eatControlLetter = function(state) {
        var ch = state.current();
        return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
      }, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
        forceU === undefined && (forceU = false);
        var ch, start = state.pos, switchU = forceU || state.switchU;
        if (state.eat(117)) {
          if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 55296 && lead <= 56319) {
              var leadSurrogateEnd = state.pos;
              if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                var trail = state.lastIntValue;
                if (trail >= 56320 && trail <= 57343)
                  return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
              }
              state.pos = leadSurrogateEnd, state.lastIntValue = lead;
            }
            return true;
          }
          if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111))
            return true;
          switchU && state.raise("Invalid unicode escape"), state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatIdentityEscape = function(state) {
        if (state.switchU)
          return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
        var ch = state.current();
        return !(ch === 99 || state.switchN && ch === 107) && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatDecimalEscape = function(state) {
        state.lastIntValue = 0;
        var ch = state.current();
        if (ch >= 49 && ch <= 57) {
          do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          } while ((ch = state.current()) >= 48 && ch <= 57);
          return true;
        }
        return false;
      };
      function isUnicodePropertyNameCharacter(ch) {
        return isControlLetter(ch) || ch === 95;
      }
      function isUnicodePropertyValueCharacter(ch) {
        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
      }
      function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      function isHexDigit(ch) {
        return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
      }
      function hexToInt(ch) {
        return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
      }
      function isOctalDigit(ch) {
        return ch >= 48 && ch <= 55;
      }
      pp$1.regexp_eatCharacterClassEscape = function(state) {
        var ch = state.current();
        if (function(ch2) {
          return ch2 === 100 || ch2 === 68 || ch2 === 115 || ch2 === 83 || ch2 === 119 || ch2 === 87;
        }(ch))
          return state.lastIntValue = -1, state.advance(), 1;
        var negate = false;
        if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 80) || ch === 112)) {
          var result;
          if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125))
            return negate && result === 2 && state.raise("Invalid property name"), result;
          state.raise("Invalid property name");
        }
        return 0;
      }, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
        var start = state.pos;
        if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
          var name = state.lastStringValue;
          if (this.regexp_eatUnicodePropertyValue(state)) {
            var value2 = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameAndValue(state, name, value2), 1;
          }
        }
        if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
          var nameOrValue = state.lastStringValue;
          return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
        }
        return 0;
      }, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value2) {
        hasOwn(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value2) || state.raise("Invalid property value");
      }, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
        return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
      }, pp$1.regexp_eatUnicodePropertyName = function(state) {
        var ch = 0;
        for (state.lastStringValue = "";isUnicodePropertyNameCharacter(ch = state.current()); )
          state.lastStringValue += codePointToString(ch), state.advance();
        return state.lastStringValue !== "";
      }, pp$1.regexp_eatUnicodePropertyValue = function(state) {
        var ch = 0;
        for (state.lastStringValue = "";isUnicodePropertyValueCharacter(ch = state.current()); )
          state.lastStringValue += codePointToString(ch), state.advance();
        return state.lastStringValue !== "";
      }, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
        return this.regexp_eatUnicodePropertyValue(state);
      }, pp$1.regexp_eatCharacterClass = function(state) {
        if (state.eat(91)) {
          var negate = state.eat(94), result = this.regexp_classContents(state);
          return state.eat(93) || state.raise("Unterminated character class"), negate && result === 2 && state.raise("Negated character class may contain strings"), true;
        }
        return false;
      }, pp$1.regexp_classContents = function(state) {
        return state.current() === 93 ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
      }, pp$1.regexp_nonEmptyClassRanges = function(state) {
        for (;this.regexp_eatClassAtom(state); ) {
          var left = state.lastIntValue;
          if (state.eat(45) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            !state.switchU || left !== -1 && right !== -1 || state.raise("Invalid character class"), left !== -1 && right !== -1 && left > right && state.raise("Range out of order in character class");
          }
        }
      }, pp$1.regexp_eatClassAtom = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatClassEscape(state))
            return true;
          if (state.switchU) {
            var ch$1 = state.current();
            (ch$1 === 99 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
          }
          state.pos = start;
        }
        var ch = state.current();
        return ch !== 93 && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatClassEscape = function(state) {
        var start = state.pos;
        if (state.eat(98))
          return state.lastIntValue = 8, true;
        if (state.switchU && state.eat(45))
          return state.lastIntValue = 45, true;
        if (!state.switchU && state.eat(99)) {
          if (this.regexp_eatClassControlLetter(state))
            return true;
          state.pos = start;
        }
        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
      }, pp$1.regexp_classSetExpression = function(state) {
        var subResult, result = 1;
        if (this.regexp_eatClassSetRange(state))
          ;
        else if (subResult = this.regexp_eatClassSetOperand(state)) {
          subResult === 2 && (result = 2);
          for (var start = state.pos;state.eatChars([38, 38]); )
            state.current() !== 38 && (subResult = this.regexp_eatClassSetOperand(state)) ? subResult !== 2 && (result = 1) : state.raise("Invalid character in character class");
          if (start !== state.pos)
            return result;
          for (;state.eatChars([45, 45]); )
            this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
          if (start !== state.pos)
            return result;
        } else
          state.raise("Invalid character in character class");
        for (;; )
          if (!this.regexp_eatClassSetRange(state)) {
            if (!(subResult = this.regexp_eatClassSetOperand(state)))
              return result;
            subResult === 2 && (result = 2);
          }
      }, pp$1.regexp_eatClassSetRange = function(state) {
        var start = state.pos;
        if (this.regexp_eatClassSetCharacter(state)) {
          var left = state.lastIntValue;
          if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
            var right = state.lastIntValue;
            return left !== -1 && right !== -1 && left > right && state.raise("Range out of order in character class"), true;
          }
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatClassSetOperand = function(state) {
        return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
      }, pp$1.regexp_eatNestedClass = function(state) {
        var start = state.pos;
        if (state.eat(91)) {
          var negate = state.eat(94), result = this.regexp_classContents(state);
          if (state.eat(93))
            return negate && result === 2 && state.raise("Negated character class may contain strings"), result;
          state.pos = start;
        }
        if (state.eat(92)) {
          var result$1 = this.regexp_eatCharacterClassEscape(state);
          if (result$1)
            return result$1;
          state.pos = start;
        }
        return null;
      }, pp$1.regexp_eatClassStringDisjunction = function(state) {
        var start = state.pos;
        if (state.eatChars([92, 113])) {
          if (state.eat(123)) {
            var result = this.regexp_classStringDisjunctionContents(state);
            if (state.eat(125))
              return result;
          } else
            state.raise("Invalid escape");
          state.pos = start;
        }
        return null;
      }, pp$1.regexp_classStringDisjunctionContents = function(state) {
        for (var result = this.regexp_classString(state);state.eat(124); )
          this.regexp_classString(state) === 2 && (result = 2);
        return result;
      }, pp$1.regexp_classString = function(state) {
        for (var count = 0;this.regexp_eatClassSetCharacter(state); )
          count++;
        return count === 1 ? 1 : 2;
      }, pp$1.regexp_eatClassSetCharacter = function(state) {
        var start = state.pos;
        if (state.eat(92))
          return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, true) : (state.pos = start, false));
        var ch = state.current();
        return !(ch < 0 || ch === state.lookahead() && function(ch2) {
          return ch2 === 33 || ch2 >= 35 && ch2 <= 38 || ch2 >= 42 && ch2 <= 44 || ch2 === 46 || ch2 >= 58 && ch2 <= 64 || ch2 === 94 || ch2 === 96 || ch2 === 126;
        }(ch)) && (!function(ch2) {
          return ch2 === 40 || ch2 === 41 || ch2 === 45 || ch2 === 47 || ch2 >= 91 && ch2 <= 93 || ch2 >= 123 && ch2 <= 125;
        }(ch) && (state.advance(), state.lastIntValue = ch, true));
      }, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
        var ch = state.current();
        return !!function(ch2) {
          return ch2 === 33 || ch2 === 35 || ch2 === 37 || ch2 === 38 || ch2 === 44 || ch2 === 45 || ch2 >= 58 && ch2 <= 62 || ch2 === 64 || ch2 === 96 || ch2 === 126;
        }(ch) && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatClassControlLetter = function(state) {
        var ch = state.current();
        return !(!isDecimalDigit(ch) && ch !== 95) && (state.lastIntValue = ch % 32, state.advance(), true);
      }, pp$1.regexp_eatHexEscapeSequence = function(state) {
        var start = state.pos;
        if (state.eat(120)) {
          if (this.regexp_eatFixedHexDigits(state, 2))
            return true;
          state.switchU && state.raise("Invalid escape"), state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatDecimalDigits = function(state) {
        var start = state.pos, ch = 0;
        for (state.lastIntValue = 0;isDecimalDigit(ch = state.current()); )
          state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
        return state.pos !== start;
      }, pp$1.regexp_eatHexDigits = function(state) {
        var start = state.pos, ch = 0;
        for (state.lastIntValue = 0;isHexDigit(ch = state.current()); )
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
        return state.pos !== start;
      }, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
        if (this.regexp_eatOctalDigit(state)) {
          var n1 = state.lastIntValue;
          if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
          } else
            state.lastIntValue = n1;
          return true;
        }
        return false;
      }, pp$1.regexp_eatOctalDigit = function(state) {
        var ch = state.current();
        return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
      }, pp$1.regexp_eatFixedHexDigits = function(state, length) {
        var start = state.pos;
        state.lastIntValue = 0;
        for (var i2 = 0;i2 < length; ++i2) {
          var ch = state.current();
          if (!isHexDigit(ch))
            return state.pos = start, false;
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
        }
        return true;
      };
      var Token = function(p) {
        this.type = p.type, this.value = p.value, this.start = p.start, this.end = p.end, p.options.locations && (this.loc = new SourceLocation(p, p.startLoc, p.endLoc)), p.options.ranges && (this.range = [p.start, p.end]);
      }, pp = Parser.prototype;
      function stringToBigInt(str) {
        return typeof BigInt != "function" ? null : BigInt(str.replace(/_/g, ""));
      }
      pp.next = function(ignoreEscapeSequenceInKeyword) {
        !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
      }, pp.getToken = function() {
        return this.next(), new Token(this);
      }, typeof Symbol != "undefined" && (pp[Symbol.iterator] = function() {
        var this$1$1 = this;
        return { next: function() {
          var token = this$1$1.getToken();
          return { done: token.type === types$1.eof, value: token };
        } };
      }), pp.nextToken = function() {
        var curContext = this.curContext();
        return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
      }, pp.readToken = function(code) {
        return isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 ? this.readWord() : this.getTokenFromCode(code);
      }, pp.fullCharCodeAtPos = function() {
        var code = this.input.charCodeAt(this.pos);
        if (code <= 55295 || code >= 56320)
          return code;
        var next = this.input.charCodeAt(this.pos + 1);
        return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
      }, pp.skipBlockComment = function() {
        var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
        if (end === -1 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations)
          for (var nextBreak = undefined, pos = start;(nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; )
            ++this.curLine, pos = this.lineStart = nextBreak;
        this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
      }, pp.skipLineComment = function(startSkip) {
        for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip);this.pos < this.input.length && !isNewLine(ch); )
          ch = this.input.charCodeAt(++this.pos);
        this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
      }, pp.skipSpace = function() {
        loop:
          for (;this.pos < this.input.length; ) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                this.input.charCodeAt(this.pos + 1) === 10 && ++this.pos;
              case 10:
              case 8232:
              case 8233:
                ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))))
                  break loop;
                ++this.pos;
            }
          }
      }, pp.finishToken = function(type, val) {
        this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
        var prevType = this.type;
        this.type = type, this.value = val, this.updateContext(prevType);
      }, pp.readToken_dot = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next >= 48 && next <= 57)
          return this.readNumber(true);
        var next2 = this.input.charCodeAt(this.pos + 2);
        return this.options.ecmaVersion >= 6 && next === 46 && next2 === 46 ? (this.pos += 3, this.finishToken(types$1.ellipsis)) : (++this.pos, this.finishToken(types$1.dot));
      }, pp.readToken_slash = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        return this.exprAllowed ? (++this.pos, this.readRegexp()) : next === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.slash, 1);
      }, pp.readToken_mult_modulo_exp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = code === 42 ? types$1.star : types$1.modulo;
        return this.options.ecmaVersion >= 7 && code === 42 && next === 42 && (++size, tokentype = types$1.starstar, next = this.input.charCodeAt(this.pos + 2)), next === 61 ? this.finishOp(types$1.assign, size + 1) : this.finishOp(tokentype, size);
      }, pp.readToken_pipe_amp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (this.options.ecmaVersion >= 12) {
            if (this.input.charCodeAt(this.pos + 2) === 61)
              return this.finishOp(types$1.assign, 3);
          }
          return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
        }
        return next === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
      }, pp.readToken_caret = function() {
        return this.input.charCodeAt(this.pos + 1) === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.bitwiseXOR, 1);
      }, pp.readToken_plus_min = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        return next === code ? next !== 45 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 62 || this.lastTokEnd !== 0 && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : next === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.plusMin, 1);
      }, pp.readToken_lt_gt = function(code) {
        var next = this.input.charCodeAt(this.pos + 1), size = 1;
        return next === code ? (size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.pos + size) === 61 ? this.finishOp(types$1.assign, size + 1) : this.finishOp(types$1.bitShift, size)) : next !== 33 || code !== 60 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 45 || this.input.charCodeAt(this.pos + 3) !== 45 ? (next === 61 && (size = 2), this.finishOp(types$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
      }, pp.readToken_eq_excl = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        return next === 61 ? this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) : code === 61 && next === 62 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1.arrow)) : this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);
      }, pp.readToken_question = function() {
        var ecmaVersion = this.options.ecmaVersion;
        if (ecmaVersion >= 11) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57)
              return this.finishOp(types$1.questionDot, 2);
          }
          if (next === 63) {
            if (ecmaVersion >= 12) {
              if (this.input.charCodeAt(this.pos + 2) === 61)
                return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(types$1.coalesce, 2);
          }
        }
        return this.finishOp(types$1.question, 1);
      }, pp.readToken_numberSign = function() {
        var code = 35;
        if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), true) || code === 92))
          return this.finishToken(types$1.privateId, this.readWord1());
        this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
      }, pp.getTokenFromCode = function(code) {
        switch (code) {
          case 46:
            return this.readToken_dot();
          case 40:
            return ++this.pos, this.finishToken(types$1.parenL);
          case 41:
            return ++this.pos, this.finishToken(types$1.parenR);
          case 59:
            return ++this.pos, this.finishToken(types$1.semi);
          case 44:
            return ++this.pos, this.finishToken(types$1.comma);
          case 91:
            return ++this.pos, this.finishToken(types$1.bracketL);
          case 93:
            return ++this.pos, this.finishToken(types$1.bracketR);
          case 123:
            return ++this.pos, this.finishToken(types$1.braceL);
          case 125:
            return ++this.pos, this.finishToken(types$1.braceR);
          case 58:
            return ++this.pos, this.finishToken(types$1.colon);
          case 96:
            if (this.options.ecmaVersion < 6)
              break;
            return ++this.pos, this.finishToken(types$1.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88)
              return this.readRadixNumber(16);
            if (this.options.ecmaVersion >= 6) {
              if (next === 111 || next === 79)
                return this.readRadixNumber(8);
              if (next === 98 || next === 66)
                return this.readRadixNumber(2);
            }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code);
          case 60:
          case 62:
            return this.readToken_lt_gt(code);
          case 61:
          case 33:
            return this.readToken_eq_excl(code);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types$1.prefix, 1);
          case 35:
            return this.readToken_numberSign();
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
      }, pp.finishOp = function(type, size) {
        var str = this.input.slice(this.pos, this.pos + size);
        return this.pos += size, this.finishToken(type, str);
      }, pp.readRegexp = function() {
        for (var escaped, inClass, start = this.pos;; ) {
          this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
          var ch = this.input.charAt(this.pos);
          if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped)
            escaped = false;
          else {
            if (ch === "[")
              inClass = true;
            else if (ch === "]" && inClass)
              inClass = false;
            else if (ch === "/" && !inClass)
              break;
            escaped = ch === "\\";
          }
          ++this.pos;
        }
        var pattern = this.input.slice(start, this.pos);
        ++this.pos;
        var flagsStart = this.pos, flags = this.readWord1();
        this.containsEsc && this.unexpected(flagsStart);
        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
        state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
        var value2 = null;
        try {
          value2 = new RegExp(pattern, flags);
        } catch (e) {
        }
        return this.finishToken(types$1.regexp, { pattern, flags, value: value2 });
      }, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
        for (var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48, start = this.pos, total = 0, lastCode = 0, i2 = 0, e = len == null ? 1 / 0 : len;i2 < e; ++i2, ++this.pos) {
          var code = this.input.charCodeAt(this.pos), val = undefined;
          if (allowSeparators && code === 95)
            isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), lastCode === 95 && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), i2 === 0 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
          else {
            if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix)
              break;
            lastCode = code, total = total * radix + val;
          }
        }
        return allowSeparators && lastCode === 95 && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || len != null && this.pos - start !== len ? null : total;
      }, pp.readRadixNumber = function(radix) {
        var start = this.pos;
        this.pos += 2;
        var val = this.readInt(radix);
        return val == null && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110 ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val);
      }, pp.readNumber = function(startsWithDot) {
        var start = this.pos;
        startsWithDot || this.readInt(10, undefined, true) !== null || this.raise(start, "Invalid number");
        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        octal && this.strict && this.raise(start, "Invalid number");
        var next = this.input.charCodeAt(this.pos);
        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
          var val$1 = stringToBigInt(this.input.slice(start, this.pos));
          return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val$1);
        }
        octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), next !== 46 || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), next !== 69 && next !== 101 || octal || ((next = this.input.charCodeAt(++this.pos)) !== 43 && next !== 45 || ++this.pos, this.readInt(10) === null && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
        var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
        return this.finishToken(types$1.num, val);
      }, pp.readCodePoint = function() {
        var code;
        if (this.input.charCodeAt(this.pos) === 123) {
          this.options.ecmaVersion < 6 && this.unexpected();
          var codePos = ++this.pos;
          code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
        } else
          code = this.readHexChar(4);
        return code;
      }, pp.readString = function(quote) {
        for (var out = "", chunkStart = ++this.pos;; ) {
          this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
          var ch = this.input.charCodeAt(this.pos);
          if (ch === quote)
            break;
          ch === 92 ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : ch === 8232 || ch === 8233 ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
        }
        return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1.string, out);
      };
      var INVALID_TEMPLATE_ESCAPE_ERROR = {};
      pp.tryReadTemplateToken = function() {
        this.inTemplateElement = true;
        try {
          this.readTmplToken();
        } catch (err) {
          if (err !== INVALID_TEMPLATE_ESCAPE_ERROR)
            throw err;
          this.readInvalidTemplateToken();
        }
        this.inTemplateElement = false;
      }, pp.invalidStringToken = function(position, message) {
        if (this.inTemplateElement && this.options.ecmaVersion >= 9)
          throw INVALID_TEMPLATE_ESCAPE_ERROR;
        this.raise(position, message);
      }, pp.readTmplToken = function() {
        for (var out = "", chunkStart = this.pos;; ) {
          this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
          var ch = this.input.charCodeAt(this.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123)
            return this.pos !== this.start || this.type !== types$1.template && this.type !== types$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1.template, out)) : ch === 36 ? (this.pos += 2, this.finishToken(types$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1.backQuote));
          if (ch === 92)
            out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
          else if (isNewLine(ch)) {
            switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
              case 13:
                this.input.charCodeAt(this.pos) === 10 && ++this.pos;
              case 10:
                out += `
`;
                break;
              default:
                out += String.fromCharCode(ch);
            }
            this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
          } else
            ++this.pos;
        }
      }, pp.readInvalidTemplateToken = function() {
        for (;this.pos < this.input.length; this.pos++)
          switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if (this.input[this.pos + 1] !== "{")
                break;
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
            case "\r":
              this.input[this.pos + 1] === `
` && ++this.pos;
            case `
`:
            case "\u2028":
            case "\u2029":
              ++this.curLine, this.lineStart = this.pos + 1;
          }
        this.raise(this.start, "Unterminated template");
      }, pp.readEscapedChar = function(inTemplate) {
        var ch = this.input.charCodeAt(++this.pos);
        switch (++this.pos, ch) {
          case 110:
            return `
`;
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString(this.readCodePoint());
          case 116:
            return "\t";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            this.input.charCodeAt(this.pos) === 10 && ++this.pos;
          case 10:
            return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
          case 56:
          case 57:
            if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
              var codePos = this.pos - 1;
              this.invalidStringToken(codePos, "Invalid escape sequence in template string");
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
              return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), octalStr === "0" && ch !== 56 && ch !== 57 || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
            }
            return isNewLine(ch) ? (this.options.locations && (this.lineStart = this.pos, ++this.curLine), "") : String.fromCharCode(ch);
        }
      }, pp.readHexChar = function(len) {
        var codePos = this.pos, n = this.readInt(16, len);
        return n === null && this.invalidStringToken(codePos, "Bad character escape sequence"), n;
      }, pp.readWord1 = function() {
        this.containsEsc = false;
        for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6;this.pos < this.input.length; ) {
          var ch = this.fullCharCodeAtPos();
          if (isIdentifierChar(ch, astral))
            this.pos += ch <= 65535 ? 1 : 2;
          else {
            if (ch !== 92)
              break;
            this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            this.input.charCodeAt(++this.pos) !== 117 && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
            var esc = this.readCodePoint();
            (first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.pos);
      }, pp.readWord = function() {
        var word = this.readWord1(), type = types$1.name;
        return this.keywords.test(word) && (type = keywords[word]), this.finishToken(type, word);
      };
      Parser.acorn = { Parser, version: "8.14.0", defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, tokTypes: types$1, keywordTypes: keywords, TokContext, tokContexts: types, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };
      const external_node_module_namespaceObject = __require2("node:module"), external_node_fs_namespaceObject = __require2("node:fs");
      String.fromCharCode;
      const TRAILING_SLASH_RE = /\/$|\/\?|\/#/, JOIN_LEADING_SLASH_RE = /^\.?\//;
      function hasTrailingSlash(input = "", respectQueryAndFragment) {
        return respectQueryAndFragment ? TRAILING_SLASH_RE.test(input) : input.endsWith("/");
      }
      function withTrailingSlash(input = "", respectQueryAndFragment) {
        if (!respectQueryAndFragment)
          return input.endsWith("/") ? input : input + "/";
        if (hasTrailingSlash(input, true))
          return input || "/";
        let path4 = input, fragment = "";
        const fragmentIndex = input.indexOf("#");
        if (fragmentIndex >= 0 && (path4 = input.slice(0, fragmentIndex), fragment = input.slice(fragmentIndex), !path4))
          return fragment;
        const [s0, ...s] = path4.split("?");
        return s0 + "/" + (s.length > 0 ? `?${s.join("?")}` : "") + fragment;
      }
      function isNonEmptyURL(url) {
        return url && url !== "/";
      }
      function dist_joinURL(base, ...input) {
        let url = base || "";
        for (const segment of input.filter((url2) => isNonEmptyURL(url2)))
          if (url) {
            const _segment = segment.replace(JOIN_LEADING_SLASH_RE, "");
            url = withTrailingSlash(url) + _segment;
          } else
            url = segment;
        return url;
      }
      Symbol.for("ufo:protocolRelative");
      const _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
      function normalizeWindowsPath(input = "") {
        return input ? input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r) => r.toUpperCase()) : input;
      }
      const _UNC_REGEX = /^[/\\]{2}/, _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/, pathe_ff20891b_normalize = function(path4) {
        if (path4.length === 0)
          return ".";
        const isUNCPath = (path4 = normalizeWindowsPath(path4)).match(_UNC_REGEX), isPathAbsolute = isAbsolute(path4), trailingSeparator = path4[path4.length - 1] === "/";
        return (path4 = normalizeString(path4, !isPathAbsolute)).length === 0 ? isPathAbsolute ? "/" : trailingSeparator ? "./" : "." : (trailingSeparator && (path4 += "/"), _DRIVE_LETTER_RE.test(path4) && (path4 += "/"), isUNCPath ? isPathAbsolute ? `//${path4}` : `//./${path4}` : isPathAbsolute && !isAbsolute(path4) ? `/${path4}` : path4);
      }, join = function(...arguments_) {
        if (arguments_.length === 0)
          return ".";
        let joined;
        for (const argument of arguments_)
          argument && argument.length > 0 && (joined === undefined ? joined = argument : joined += `/${argument}`);
        return joined === undefined ? "." : pathe_ff20891b_normalize(joined.replace(/\/\/+/g, "/"));
      };
      const resolve = function(...arguments_) {
        let resolvedPath = "", resolvedAbsolute = false;
        for (let index = (arguments_ = arguments_.map((argument) => normalizeWindowsPath(argument))).length - 1;index >= -1 && !resolvedAbsolute; index--) {
          const path4 = index >= 0 ? arguments_[index] : typeof process != "undefined" && typeof process.cwd == "function" ? process.cwd().replace(/\\/g, "/") : "/";
          path4 && path4.length !== 0 && (resolvedPath = `${path4}/${resolvedPath}`, resolvedAbsolute = isAbsolute(path4));
        }
        return resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute), resolvedAbsolute && !isAbsolute(resolvedPath) ? `/${resolvedPath}` : resolvedPath.length > 0 ? resolvedPath : ".";
      };
      function normalizeString(path4, allowAboveRoot) {
        let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
        for (let index = 0;index <= path4.length; ++index) {
          if (index < path4.length)
            char = path4[index];
          else {
            if (char === "/")
              break;
            char = "/";
          }
          if (char === "/") {
            if (lastSlash === index - 1 || dots === 1)
              ;
            else if (dots === 2) {
              if (res.length < 2 || lastSegmentLength !== 2 || res[res.length - 1] !== "." || res[res.length - 2] !== ".") {
                if (res.length > 2) {
                  const lastSlashIndex = res.lastIndexOf("/");
                  lastSlashIndex === -1 ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = index, dots = 0;
                  continue;
                }
                if (res.length > 0) {
                  res = "", lastSegmentLength = 0, lastSlash = index, dots = 0;
                  continue;
                }
              }
              allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
            } else
              res.length > 0 ? res += `/${path4.slice(lastSlash + 1, index)}` : res = path4.slice(lastSlash + 1, index), lastSegmentLength = index - lastSlash - 1;
            lastSlash = index, dots = 0;
          } else
            char === "." && dots !== -1 ? ++dots : dots = -1;
        }
        return res;
      }
      const isAbsolute = function(p) {
        return _IS_ABSOLUTE_RE.test(p);
      }, _EXTNAME_RE = /.(\.[^./]+)$/, extname = function(p) {
        const match = _EXTNAME_RE.exec(normalizeWindowsPath(p));
        return match && match[1] || "";
      }, pathe_ff20891b_dirname = function(p) {
        const segments = normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1);
        return segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute(p) ? "/" : ".");
      }, basename = function(p, extension) {
        const lastSegment = normalizeWindowsPath(p).split("/").pop();
        return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;
      }, external_node_url_namespaceObject = __require2("node:url"), external_node_assert_namespaceObject = __require2("node:assert"), external_node_process_namespaceObject = __require2("node:process"), external_node_path_namespaceObject = __require2("node:path"), external_node_v8_namespaceObject = __require2("node:v8"), external_node_util_namespaceObject = __require2("node:util"), BUILTIN_MODULES = new Set(external_node_module_namespaceObject.builtinModules);
      function normalizeSlash(path4) {
        return path4.replace(/\\/g, "/");
      }
      const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
      function formatList(array, type = "and") {
        return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
      }
      const messages = new Map;
      let userStackTraceLimit;
      function createError(sym, value2, constructor) {
        return messages.set(sym, value2), function(Base, key) {
          return NodeError;
          function NodeError(...parameters) {
            const limit = Error.stackTraceLimit;
            isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
            const error = new Base;
            isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
            const message = function(key2, parameters2, self) {
              const message2 = messages.get(key2);
              if (external_node_assert_namespaceObject(message2 !== undefined, "expected `message` to be found"), typeof message2 == "function")
                return external_node_assert_namespaceObject(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self, parameters2);
              const regex = /%[dfijoOs]/g;
              let expectedLength = 0;
              for (;regex.exec(message2) !== null; )
                expectedLength++;
              return external_node_assert_namespaceObject(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), parameters2.length === 0 ? message2 : (parameters2.unshift(message2), Reflect.apply(external_node_util_namespaceObject.format, null, parameters2));
            }(key, parameters, error);
            return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
              return `${this.name} [${key}]: ${this.message}`;
            }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
          }
        }(constructor, sym);
      }
      function isErrorStackTraceLimitWritable() {
        try {
          if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot())
            return false;
        } catch {
        }
        const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
        return desc === undefined ? Object.isExtensible(Error) : own$1.call(desc, "writable") && desc.writable !== undefined ? desc.writable : desc.set !== undefined;
      }
      codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
        external_node_assert_namespaceObject(typeof name == "string", "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
        let message = "The ";
        if (name.endsWith(" argument"))
          message += `${name} `;
        else {
          const type = name.includes(".") ? "property" : "argument";
          message += `"${name}" ${type} `;
        }
        message += "must be ";
        const types2 = [], instances = [], other = [];
        for (const value2 of expected)
          external_node_assert_namespaceObject(typeof value2 == "string", "All expected entries have to be of type string"), kTypes.has(value2) ? types2.push(value2.toLowerCase()) : classRegExp.exec(value2) === null ? (external_node_assert_namespaceObject(value2 !== "object", 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
        if (instances.length > 0) {
          const pos = types2.indexOf("object");
          pos !== -1 && (types2.slice(pos, 1), instances.push("Object"));
        }
        return types2.length > 0 && (message += `${types2.length > 1 ? "one of type" : "of type"} ${formatList(types2, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
          if (value2 == null)
            return String(value2);
          if (typeof value2 == "function" && value2.name)
            return `function ${value2.name}`;
          if (typeof value2 == "object")
            return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value2, { depth: -1 })}`;
          let inspected = (0, external_node_util_namespaceObject.inspect)(value2, { colors: false });
          inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
          return `type ${typeof value2} (${inspected})`;
        }(actual)}`, message;
      }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = undefined) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path4, base, message) => `Invalid package config ${path4}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = undefined) => {
        const relatedError = typeof target == "string" && !isImport && target.length > 0 && !target.startsWith("./");
        return key === "." ? (external_node_assert_namespaceObject(isImport === false), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
      }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path4, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path4}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = undefined) => subpath === "." ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path4) => `Unknown file extension "${extension}" for ${path4}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
        let inspected = (0, external_node_util_namespaceObject.inspect)(value2);
        inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
        return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
      }, TypeError);
      const captureLargerStackTrace = function(wrappedFunction) {
        const hidden = "__node_internal_" + wrappedFunction.name;
        return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
      }(function(error) {
        const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
        return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
      });
      const hasOwnProperty$1 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = new Map;
      function read(jsonPath, { base, specifier }) {
        const existing = cache.get(jsonPath);
        if (existing)
          return existing;
        let string;
        try {
          string = external_node_fs_namespaceObject.readFileSync(external_node_path_namespaceObject.toNamespacedPath(jsonPath), "utf8");
        } catch (error) {
          const exception = error;
          if (exception.code !== "ENOENT")
            throw exception;
        }
        const result = { exists: false, pjsonPath: jsonPath, main: undefined, name: undefined, type: "none", exports: undefined, imports: undefined };
        if (string !== undefined) {
          let parsed;
          try {
            parsed = JSON.parse(string);
          } catch (error_) {
            const cause = error_, error = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, external_node_url_namespaceObject.fileURLToPath)(base || specifier), cause.message);
            throw error.cause = cause, error;
          }
          result.exists = true, hasOwnProperty$1.call(parsed, "name") && typeof parsed.name == "string" && (result.name = parsed.name), hasOwnProperty$1.call(parsed, "main") && typeof parsed.main == "string" && (result.main = parsed.main), hasOwnProperty$1.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$1.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$1.call(parsed, "type") || parsed.type !== "commonjs" && parsed.type !== "module" || (result.type = parsed.type);
        }
        return cache.set(jsonPath, result), result;
      }
      function getPackageScopeConfig(resolved) {
        let packageJSONUrl = new URL("package.json", resolved);
        for (;; ) {
          if (packageJSONUrl.pathname.endsWith("node_modules/package.json"))
            break;
          const packageConfig = read((0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl), { specifier: resolved });
          if (packageConfig.exists)
            return packageConfig;
          const lastPackageJSONUrl = packageJSONUrl;
          if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname)
            break;
        }
        return { pjsonPath: (0, external_node_url_namespaceObject.fileURLToPath)(packageJSONUrl), exists: false, type: "none" };
      }
      function getPackageType(url) {
        return getPackageScopeConfig(url).type;
      }
      const { ERR_UNKNOWN_FILE_EXTENSION } = codes, dist_hasOwnProperty = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
      const protocolHandlers = { __proto__: null, "data:": function(parsed) {
        const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
        return function(mime2) {
          return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : mime2 === "application/json" ? "json" : null;
        }(mime);
      }, "file:": function(url, _context, ignoreErrors) {
        const value2 = function(url2) {
          const pathname = url2.pathname;
          let index = pathname.length;
          for (;index--; ) {
            const code = pathname.codePointAt(index);
            if (code === 47)
              return "";
            if (code === 46)
              return pathname.codePointAt(index - 1) === 47 ? "" : pathname.slice(index);
          }
          return "";
        }(url);
        if (value2 === ".js") {
          const packageType = getPackageType(url);
          return packageType !== "none" ? packageType : "commonjs";
        }
        if (value2 === "") {
          const packageType = getPackageType(url);
          return packageType === "none" || packageType === "commonjs" ? "commonjs" : "module";
        }
        const format = extensionFormatMap[value2];
        if (format)
          return format;
        if (ignoreErrors)
          return;
        const filepath = (0, external_node_url_namespaceObject.fileURLToPath)(url);
        throw new ERR_UNKNOWN_FILE_EXTENSION(value2, filepath);
      }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
      function getHttpProtocolModuleFormat() {
      }
      const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = new Set, doubleSlashRegEx = /[/\\]{2}/;
      function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
        if (external_node_process_namespaceObject.noDeprecation)
          return;
        const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), double = doubleSlashRegEx.exec(isTarget ? target : request) !== null;
        external_node_process_namespaceObject.emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
      }
      function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
        if (external_node_process_namespaceObject.noDeprecation)
          return;
        const format = function(url2, context) {
          const protocol = url2.protocol;
          return dist_hasOwnProperty.call(protocolHandlers, protocol) && protocolHandlers[protocol](url2, context, true) || null;
        }(url, { parentURL: base.href });
        if (format !== "module")
          return;
        const urlPath = (0, external_node_url_namespaceObject.fileURLToPath)(url.href), packagePath = (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), basePath = (0, external_node_url_namespaceObject.fileURLToPath)(base);
        main ? external_node_path_namespaceObject.resolve(packagePath, main) !== urlPath && external_node_process_namespaceObject.emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : external_node_process_namespaceObject.emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
      }
      function tryStatSync(path4) {
        try {
          return (0, external_node_fs_namespaceObject.statSync)(path4);
        } catch {
        }
      }
      function fileExists(url) {
        const stats = (0, external_node_fs_namespaceObject.statSync)(url, { throwIfNoEntry: false }), isFile = stats ? stats.isFile() : undefined;
        return isFile != null && isFile;
      }
      function legacyMainResolve(packageJsonUrl, packageConfig, base) {
        let guess;
        if (packageConfig.main !== undefined) {
          if (guess = new external_node_url_namespaceObject.URL(packageConfig.main, packageJsonUrl), fileExists(guess))
            return guess;
          const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
          let i3 = -1;
          for (;++i3 < tries2.length && (guess = new external_node_url_namespaceObject.URL(tries2[i3], packageJsonUrl), !fileExists(guess)); )
            guess = undefined;
          if (guess)
            return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
        }
        const tries = ["./index.js", "./index.json", "./index.node"];
        let i2 = -1;
        for (;++i2 < tries.length && (guess = new external_node_url_namespaceObject.URL(tries[i2], packageJsonUrl), !fileExists(guess)); )
          guess = undefined;
        if (guess)
          return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
        throw new ERR_MODULE_NOT_FOUND((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), (0, external_node_url_namespaceObject.fileURLToPath)(base));
      }
      function exportsNotFound(subpath, packageJsonUrl, base) {
        return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
      }
      function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
        return target = typeof target == "object" && target !== null ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, target, internal, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
      }
      function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
        if (subpath !== "" && !pattern && target[target.length - 1] !== "/")
          throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
        if (!target.startsWith("./")) {
          if (internal && !target.startsWith("../") && !target.startsWith("/")) {
            let isURL = false;
            try {
              new external_node_url_namespaceObject.URL(target), isURL = true;
            } catch {
            }
            if (!isURL) {
              return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
            }
          }
          throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
        }
        if (invalidSegmentRegEx.exec(target.slice(2)) !== null) {
          if (deprecatedInvalidSegmentRegEx.exec(target.slice(2)) !== null)
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if (!isPathMap) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, true);
          }
        }
        const resolved = new external_node_url_namespaceObject.URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new external_node_url_namespaceObject.URL(".", packageJsonUrl).pathname;
        if (!resolvedPath.startsWith(packagePath))
          throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
        if (subpath === "")
          return resolved;
        if (invalidSegmentRegEx.exec(subpath) !== null) {
          const request = pattern ? match.replace("*", () => subpath) : match + subpath;
          if (deprecatedInvalidSegmentRegEx.exec(subpath) === null) {
            if (!isPathMap) {
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, false);
            }
          } else
            (function(request2, match2, packageJsonUrl2, internal2, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            })(request, match, packageJsonUrl, internal, base);
        }
        return pattern ? new external_node_url_namespaceObject.URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new external_node_url_namespaceObject.URL(subpath, resolved);
      }
      function isArrayIndex(key) {
        const keyNumber = Number(key);
        return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
      }
      function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
        if (typeof target == "string")
          return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
        if (Array.isArray(target)) {
          const targetList = target;
          if (targetList.length === 0)
            return null;
          let lastException, i2 = -1;
          for (;++i2 < targetList.length; ) {
            const targetItem = targetList[i2];
            let resolveResult;
            try {
              resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
            } catch (error) {
              if (lastException = error, error.code === "ERR_INVALID_PACKAGE_TARGET")
                continue;
              throw error;
            }
            if (resolveResult !== undefined) {
              if (resolveResult !== null)
                return resolveResult;
              lastException = null;
            }
          }
          if (lastException == null)
            return null;
          throw lastException;
        }
        if (typeof target == "object" && target !== null) {
          const keys = Object.getOwnPropertyNames(target);
          let i2 = -1;
          for (;++i2 < keys.length; ) {
            if (isArrayIndex(keys[i2]))
              throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
          }
          for (i2 = -1;++i2 < keys.length; ) {
            const key = keys[i2];
            if (key === "default" || conditions && conditions.has(key)) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
              if (resolveResult === undefined)
                continue;
              return resolveResult;
            }
          }
          return null;
        }
        if (target === null)
          return null;
        throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
      }
      function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
        if (external_node_process_namespaceObject.noDeprecation)
          return;
        const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(pjsonUrl);
        emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), external_node_process_namespaceObject.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
      }
      function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
        let exports2 = packageConfig.exports;
        if (function(exports3, packageJsonUrl2, base2) {
          if (typeof exports3 == "string" || Array.isArray(exports3))
            return true;
          if (typeof exports3 != "object" || exports3 === null)
            return false;
          const keys2 = Object.getOwnPropertyNames(exports3);
          let isConditionalSugar = false, i3 = 0, keyIndex = -1;
          for (;++keyIndex < keys2.length; ) {
            const key = keys2[keyIndex], currentIsConditionalSugar = key === "" || key[0] !== ".";
            if (i3++ == 0)
              isConditionalSugar = currentIsConditionalSugar;
            else if (isConditionalSugar !== currentIsConditionalSugar)
              throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
          }
          return isConditionalSugar;
        }(exports2, packageJsonUrl, base) && (exports2 = { ".": exports2 }), own.call(exports2, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
          const resolveResult = resolvePackageTarget(packageJsonUrl, exports2[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
          if (resolveResult == null)
            throw exportsNotFound(packageSubpath, packageJsonUrl, base);
          return resolveResult;
        }
        let bestMatch = "", bestMatchSubpath = "";
        const keys = Object.getOwnPropertyNames(exports2);
        let i2 = -1;
        for (;++i2 < keys.length; ) {
          const key = keys[i2], patternIndex = key.indexOf("*");
          if (patternIndex !== -1 && packageSubpath.startsWith(key.slice(0, patternIndex))) {
            packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
            const patternTrailer = key.slice(patternIndex + 1);
            packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
          }
        }
        if (bestMatch) {
          const resolveResult = resolvePackageTarget(packageJsonUrl, exports2[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
          if (resolveResult == null)
            throw exportsNotFound(packageSubpath, packageJsonUrl, base);
          return resolveResult;
        }
        throw exportsNotFound(packageSubpath, packageJsonUrl, base);
      }
      function patternKeyCompare(a2, b) {
        const aPatternIndex = a2.indexOf("*"), bPatternIndex = b.indexOf("*"), baseLengthA = aPatternIndex === -1 ? a2.length : aPatternIndex + 1, baseLengthB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;
        return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || aPatternIndex === -1 ? 1 : bPatternIndex === -1 || a2.length > b.length ? -1 : b.length > a2.length ? 1 : 0;
      }
      function packageImportsResolve(name, base, conditions) {
        if (name === "#" || name.startsWith("#/") || name.endsWith("/")) {
          throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        let packageJsonUrl;
        const packageConfig = getPackageScopeConfig(base);
        if (packageConfig.exists) {
          packageJsonUrl = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
          const imports = packageConfig.imports;
          if (imports)
            if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (resolveResult != null)
                return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys = Object.getOwnPropertyNames(imports);
              let i2 = -1;
              for (;++i2 < keys.length; ) {
                const key = keys[i2], patternIndex = key.indexOf("*");
                if (patternIndex !== -1 && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (resolveResult != null)
                  return resolveResult;
              }
            }
        }
        throw function(specifier, packageJsonUrl2, base2) {
          return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl2)), (0, external_node_url_namespaceObject.fileURLToPath)(base2));
        }(name, packageJsonUrl, base);
      }
      function packageResolve(specifier, base, conditions) {
        if (external_node_module_namespaceObject.builtinModules.includes(specifier))
          return new external_node_url_namespaceObject.URL("node:" + specifier);
        const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
          let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
          specifier2[0] === "@" && (isScoped2 = true, separatorIndex === -1 || specifier2.length === 0 ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
          const packageName2 = separatorIndex === -1 ? specifier2 : specifier2.slice(0, separatorIndex);
          if (invalidPackageNameRegEx.exec(packageName2) !== null && (validPackageName = false), !validPackageName)
            throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, external_node_url_namespaceObject.fileURLToPath)(base2));
          return { packageName: packageName2, packageSubpath: "." + (separatorIndex === -1 ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
        }(specifier, base), packageConfig = getPackageScopeConfig(base);
        if (packageConfig.exists) {
          const packageJsonUrl2 = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
          if (packageConfig.name === packageName && packageConfig.exports !== undefined && packageConfig.exports !== null)
            return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
        }
        let lastPath, packageJsonUrl = new external_node_url_namespaceObject.URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
        do {
          const stat = tryStatSync(packageJsonPath.slice(0, -13));
          if (!stat || !stat.isDirectory()) {
            lastPath = packageJsonPath, packageJsonUrl = new external_node_url_namespaceObject.URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
            continue;
          }
          const packageConfig2 = read(packageJsonPath, { base, specifier });
          return packageConfig2.exports !== undefined && packageConfig2.exports !== null ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : packageSubpath === "." ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new external_node_url_namespaceObject.URL(packageSubpath, packageJsonUrl);
        } while (packageJsonPath.length !== lastPath.length);
        throw new ERR_MODULE_NOT_FOUND(packageName, (0, external_node_url_namespaceObject.fileURLToPath)(base), false);
      }
      function moduleResolve(specifier, base, conditions, preserveSymlinks) {
        const protocol = base.protocol, isRemote = protocol === "data:" || protocol === "http:" || protocol === "https:";
        let resolved;
        if (function(specifier2) {
          return specifier2 !== "" && (specifier2[0] === "/" || function(specifier3) {
            if (specifier3[0] === ".") {
              if (specifier3.length === 1 || specifier3[1] === "/")
                return true;
              if (specifier3[1] === "." && (specifier3.length === 2 || specifier3[2] === "/"))
                return true;
            }
            return false;
          }(specifier2));
        }(specifier))
          try {
            resolved = new external_node_url_namespaceObject.URL(specifier, base);
          } catch (error_) {
            const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
            throw error.cause = error_, error;
          }
        else if (protocol === "file:" && specifier[0] === "#")
          resolved = packageImportsResolve(specifier, base, conditions);
        else
          try {
            resolved = new external_node_url_namespaceObject.URL(specifier);
          } catch (error_) {
            if (isRemote && !external_node_module_namespaceObject.builtinModules.includes(specifier)) {
              const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
              throw error.cause = error_, error;
            }
            resolved = packageResolve(specifier, base, conditions);
          }
        return external_node_assert_namespaceObject(resolved !== undefined, "expected to be defined"), resolved.protocol !== "file:" ? resolved : function(resolved2, base2, preserveSymlinks2) {
          if (encodedSeparatorRegEx.exec(resolved2.pathname) !== null)
            throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, external_node_url_namespaceObject.fileURLToPath)(base2));
          let filePath;
          try {
            filePath = (0, external_node_url_namespaceObject.fileURLToPath)(resolved2);
          } catch (error) {
            const cause = error;
            throw Object.defineProperty(cause, "input", { value: String(resolved2) }), Object.defineProperty(cause, "module", { value: String(base2) }), cause;
          }
          const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
          if (stats && stats.isDirectory()) {
            const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            throw error.url = String(resolved2), error;
          }
          if (!stats || !stats.isFile()) {
            const error = new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2), true);
            throw error.url = String(resolved2), error;
          }
          if (!preserveSymlinks2) {
            const real = (0, external_node_fs_namespaceObject.realpathSync)(filePath), { search, hash } = resolved2;
            (resolved2 = (0, external_node_url_namespaceObject.pathToFileURL)(real + (filePath.endsWith(external_node_path_namespaceObject.sep) ? "/" : ""))).search = search, resolved2.hash = hash;
          }
          return resolved2;
        }(resolved, base, preserveSymlinks);
      }
      function fileURLToPath(id) {
        return typeof id != "string" || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
      }
      function pathToFileURL3(id) {
        return (0, external_node_url_namespaceObject.pathToFileURL)(fileURLToPath(id)).toString();
      }
      const DEFAULT_CONDITIONS_SET = new Set(["node", "import"]), DEFAULT_EXTENSIONS = [".mjs", ".cjs", ".js", ".json"], NOT_FOUND_ERRORS = new Set(["ERR_MODULE_NOT_FOUND", "ERR_UNSUPPORTED_DIR_IMPORT", "MODULE_NOT_FOUND", "ERR_PACKAGE_PATH_NOT_EXPORTED"]);
      function _tryModuleResolve(id, url, conditions) {
        try {
          return moduleResolve(id, url, conditions);
        } catch (error) {
          if (!NOT_FOUND_ERRORS.has(error?.code))
            throw error;
        }
      }
      function _resolve(id, options = {}) {
        if (typeof id != "string") {
          if (!(id instanceof URL))
            throw new TypeError("input must be a `string` or `URL`");
          id = fileURLToPath(id);
        }
        if (/(node|data|http|https):/.test(id))
          return id;
        if (BUILTIN_MODULES.has(id))
          return "node:" + id;
        if (id.startsWith("file://") && (id = fileURLToPath(id)), isAbsolute(id))
          try {
            if ((0, external_node_fs_namespaceObject.statSync)(id).isFile())
              return pathToFileURL3(id);
          } catch (error) {
            if (error?.code !== "ENOENT")
              throw error;
          }
        const conditionsSet = options.conditions ? new Set(options.conditions) : DEFAULT_CONDITIONS_SET, _urls = (Array.isArray(options.url) ? options.url : [options.url]).filter(Boolean).map((url) => new URL(function(id2) {
          return typeof id2 != "string" && (id2 = id2.toString()), /(node|data|http|https|file):/.test(id2) ? id2 : BUILTIN_MODULES.has(id2) ? "node:" + id2 : "file://" + encodeURI(normalizeSlash(id2));
        }(url.toString())));
        _urls.length === 0 && _urls.push(new URL(pathToFileURL3(process.cwd())));
        const urls = [..._urls];
        for (const url of _urls)
          url.protocol === "file:" && urls.push(new URL("./", url), new URL(dist_joinURL(url.pathname, "_index.js"), url), new URL("node_modules", url));
        let resolved;
        for (const url of urls) {
          if (resolved = _tryModuleResolve(id, url, conditionsSet), resolved)
            break;
          for (const prefix of ["", "/index"]) {
            for (const extension of options.extensions || DEFAULT_EXTENSIONS)
              if (resolved = _tryModuleResolve(dist_joinURL(id, prefix) + extension, url, conditionsSet), resolved)
                break;
            if (resolved)
              break;
          }
          if (resolved)
            break;
        }
        if (!resolved) {
          const error = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
          throw error.code = "ERR_MODULE_NOT_FOUND", error;
        }
        return pathToFileURL3(resolved);
      }
      function resolveSync(id, options) {
        return _resolve(id, options);
      }
      function resolvePathSync(id, options) {
        return fileURLToPath(resolveSync(id, options));
      }
      const ESM_RE = /([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m, COMMENT_RE = /\/\*.+?\*\/|\/\/.*(?=[nr])/g;
      function hasESMSyntax(code, opts = {}) {
        return opts.stripComments && (code = code.replace(COMMENT_RE, "")), ESM_RE.test(code);
      }
      function escapeStringRegexp(string) {
        if (typeof string != "string")
          throw new TypeError("Expected a string");
        return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
      }
      const pathSeparators = new Set(["/", "\\", undefined]), normalizedAliasSymbol = Symbol.for("pathe:normalizedAlias");
      function normalizeAliases(_aliases) {
        if (_aliases[normalizedAliasSymbol])
          return _aliases;
        const aliases = Object.fromEntries(Object.entries(_aliases).sort(([a2], [b]) => function(a3, b2) {
          return b2.split("/").length - a3.split("/").length;
        }(a2, b)));
        for (const key in aliases)
          for (const alias in aliases)
            alias === key || key.startsWith(alias) || aliases[key].startsWith(alias) && pathSeparators.has(aliases[key][alias.length]) && (aliases[key] = aliases[alias] + aliases[key].slice(alias.length));
        return Object.defineProperty(aliases, normalizedAliasSymbol, { value: true, enumerable: false }), aliases;
      }
      const FILENAME_RE = /(^|[/\\])([^/\\]+?)(?=(\.[^.]+)?$)/;
      function utils_hasTrailingSlash(path4 = "/") {
        const lastChar = path4[path4.length - 1];
        return lastChar === "/" || lastChar === "\\";
      }
      const package_namespaceObject = { rE: "2.4.2" }, external_node_crypto_namespaceObject = __require2("node:crypto"), dist_r = Object.create(null), dist_i = (e) => globalThis.process?.env || globalThis.Deno?.env.toObject() || globalThis.__env__ || (e ? dist_r : globalThis), dist_s = new Proxy(dist_r, { get: (e, o) => dist_i()[o] ?? dist_r[o], has: (e, o) => (o in dist_i()) || (o in dist_r), set: (e, o, E) => (dist_i(true)[o] = E, true), deleteProperty(e, o) {
        if (!o)
          return false;
        return delete dist_i(true)[o], true;
      }, ownKeys() {
        const e = dist_i(true);
        return Object.keys(e);
      } }), dist_t = typeof process < "u" && process.env && "development" || "", B = [["APPVEYOR"], ["AWS_AMPLIFY", "AWS_APP_ID", { ci: true }], ["AZURE_PIPELINES", "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI"], ["AZURE_STATIC", "INPUT_AZURE_STATIC_WEB_APPS_API_TOKEN"], ["APPCIRCLE", "AC_APPCIRCLE"], ["BAMBOO", "bamboo_planKey"], ["BITBUCKET", "BITBUCKET_COMMIT"], ["BITRISE", "BITRISE_IO"], ["BUDDY", "BUDDY_WORKSPACE_ID"], ["BUILDKITE"], ["CIRCLE", "CIRCLECI"], ["CIRRUS", "CIRRUS_CI"], ["CLOUDFLARE_PAGES", "CF_PAGES", { ci: true }], ["CODEBUILD", "CODEBUILD_BUILD_ARN"], ["CODEFRESH", "CF_BUILD_ID"], ["DRONE"], ["DRONE", "DRONE_BUILD_EVENT"], ["DSARI"], ["GITHUB_ACTIONS"], ["GITLAB", "GITLAB_CI"], ["GITLAB", "CI_MERGE_REQUEST_ID"], ["GOCD", "GO_PIPELINE_LABEL"], ["LAYERCI"], ["HUDSON", "HUDSON_URL"], ["JENKINS", "JENKINS_URL"], ["MAGNUM"], ["NETLIFY"], ["NETLIFY", "NETLIFY_LOCAL", { ci: false }], ["NEVERCODE"], ["RENDER"], ["SAIL", "SAILCI"], ["SEMAPHORE"], ["SCREWDRIVER"], ["SHIPPABLE"], ["SOLANO", "TDDIUM"], ["STRIDER"], ["TEAMCITY", "TEAMCITY_VERSION"], ["TRAVIS"], ["VERCEL", "NOW_BUILDER"], ["VERCEL", "VERCEL", { ci: false }], ["VERCEL", "VERCEL_ENV", { ci: false }], ["APPCENTER", "APPCENTER_BUILD_ID"], ["CODESANDBOX", "CODESANDBOX_SSE", { ci: false }], ["STACKBLITZ"], ["STORMKIT"], ["CLEAVR"], ["ZEABUR"], ["CODESPHERE", "CODESPHERE_APP_ID", { ci: true }], ["RAILWAY", "RAILWAY_PROJECT_ID"], ["RAILWAY", "RAILWAY_SERVICE_ID"], ["DENO-DEPLOY", "DENO_DEPLOYMENT_ID"], ["FIREBASE_APP_HOSTING", "FIREBASE_APP_HOSTING", { ci: true }]];
      const l = function() {
        if (globalThis.process?.env)
          for (const e of B) {
            const o = e[1] || e[0];
            if (globalThis.process?.env[o])
              return { name: e[0].toLowerCase(), ...e[2] };
          }
        return globalThis.process?.env?.SHELL === "/bin/jsh" && globalThis.process?.versions?.webcontainer ? { name: "stackblitz", ci: false } : { name: "", ci: false };
      }();
      l.name;
      function dist_n(e) {
        return !!e && e !== "false";
      }
      const I = globalThis.process?.platform || "", T = dist_n(dist_s.CI) || l.ci !== false, R = dist_n(globalThis.process?.stdout && globalThis.process?.stdout.isTTY), A = (dist_n(dist_s.DEBUG), dist_t === "test" || dist_n(dist_s.TEST)), _ = (dist_n(dist_s.MINIMAL), /^win/i.test(I)), C = (/^linux/i.test(I), /^darwin/i.test(I), !dist_n(dist_s.NO_COLOR) && (dist_n(dist_s.FORCE_COLOR) || (R || _) && dist_s.TERM), (globalThis.process?.versions?.node || "").replace(/^v/, "") || null), y = (Number(C?.split(".")[0]), globalThis.process || Object.create(null)), dist_c = { versions: {} }, L = (new Proxy(y, { get: (e, o) => o === "env" ? dist_s : (o in e) ? e[o] : (o in dist_c) ? dist_c[o] : undefined }), globalThis.process?.release?.name === "node"), a = !!globalThis.Bun || !!globalThis.process?.versions?.bun, D = !!globalThis.Deno, O = !!globalThis.fastly, F = [[!!globalThis.Netlify, "netlify"], [!!globalThis.EdgeRuntime, "edge-light"], [globalThis.navigator?.userAgent === "Cloudflare-Workers", "workerd"], [O, "fastly"], [D, "deno"], [a, "bun"], [L, "node"]];
      (function() {
        const e = F.find((o) => o[0]);
        if (e)
          e[1];
      })();
      const external_node_tty_namespaceObject = __require2("node:tty"), hasColors = external_node_tty_namespaceObject?.WriteStream?.prototype?.hasColors?.() ?? false, base_format = (open, close) => {
        if (!hasColors)
          return (input) => input;
        const openCode = `\x1B[${open}m`, closeCode = `\x1B[${close}m`;
        return (input) => {
          const string = input + "";
          let index = string.indexOf(closeCode);
          if (index === -1)
            return openCode + string + closeCode;
          let result = openCode, lastIndex = 0;
          for (;index !== -1; )
            result += string.slice(lastIndex, index) + openCode, lastIndex = index + closeCode.length, index = string.indexOf(closeCode, lastIndex);
          return result += string.slice(lastIndex) + closeCode, result;
        };
      }, red = (base_format(0, 0), base_format(1, 22), base_format(2, 22), base_format(3, 23), base_format(4, 24), base_format(53, 55), base_format(7, 27), base_format(8, 28), base_format(9, 29), base_format(30, 39), base_format(31, 39)), green = base_format(32, 39), yellow = base_format(33, 39), blue = base_format(34, 39), cyan = (base_format(35, 39), base_format(36, 39)), gray = (base_format(37, 39), base_format(90, 39));
      base_format(40, 49), base_format(41, 49), base_format(42, 49), base_format(43, 49), base_format(44, 49), base_format(45, 49), base_format(46, 49), base_format(47, 49), base_format(100, 49), base_format(91, 39), base_format(92, 39), base_format(93, 39), base_format(94, 39), base_format(95, 39), base_format(96, 39), base_format(97, 39), base_format(101, 49), base_format(102, 49), base_format(103, 49), base_format(104, 49), base_format(105, 49), base_format(106, 49), base_format(107, 49);
      function isDir(filename) {
        if (typeof filename != "string" || filename.startsWith("file://"))
          return false;
        try {
          return (0, external_node_fs_namespaceObject.lstatSync)(filename).isDirectory();
        } catch {
          return false;
        }
      }
      function md5(content, len = 8) {
        return (0, external_node_crypto_namespaceObject.createHash)("md5").update(content).digest("hex").slice(0, len);
      }
      const debugMap = { true: green("true"), false: yellow("false"), "[esm]": blue("[esm]"), "[cjs]": green("[cjs]"), "[import]": blue("[import]"), "[require]": green("[require]"), "[native]": cyan("[native]"), "[transpile]": yellow("[transpile]"), "[fallback]": red("[fallback]"), "[unknown]": red("[unknown]"), "[hit]": green("[hit]"), "[miss]": yellow("[miss]"), "[json]": green("[json]"), "[data]": green("[data]") };
      function debug(ctx, ...args) {
        if (!ctx.opts.debug)
          return;
        const cwd = process.cwd();
        console.log(gray(["[jiti]", ...args.map((arg) => (arg in debugMap) ? debugMap[arg] : typeof arg != "string" ? JSON.stringify(arg) : arg.replace(cwd, "."))].join(" ")));
      }
      function jitiInteropDefault(ctx, mod) {
        return ctx.opts.interopDefault ? function(mod2) {
          const modType = typeof mod2;
          if (mod2 === null || modType !== "object" && modType !== "function")
            return mod2;
          const def = mod2.default, defType = typeof def;
          if (def == null)
            return mod2;
          const defIsObj = defType === "object" || defType === "function";
          return new Proxy(mod2, { get(target, prop, receiver) {
            if (prop === "__esModule")
              return true;
            if (prop === "default")
              return def;
            if (Reflect.has(target, prop))
              return Reflect.get(target, prop, receiver);
            if (defIsObj) {
              let fallback = Reflect.get(def, prop, receiver);
              return typeof fallback == "function" && (fallback = fallback.bind(def)), fallback;
            }
          }, apply: (target, thisArg, args) => typeof target == "function" ? Reflect.apply(target, thisArg, args) : defType === "function" ? Reflect.apply(def, thisArg, args) : undefined });
        }(mod) : mod;
      }
      function _booleanEnv(name, defaultValue) {
        const val = _jsonEnv(name, defaultValue);
        return Boolean(val);
      }
      function _jsonEnv(name, defaultValue) {
        const envValue = process.env[name];
        if (!(name in process.env))
          return defaultValue;
        try {
          return JSON.parse(envValue);
        } catch {
          return defaultValue;
        }
      }
      const JS_EXT_RE = /\.(c|m)?j(sx?)$/, TS_EXT_RE = /\.(c|m)?t(sx?)$/;
      function jitiResolve(ctx, id, options) {
        let resolved, lastError;
        if (ctx.isNativeRe.test(id))
          return id;
        ctx.alias && (id = function(path4, aliases) {
          const _path = normalizeWindowsPath(path4);
          aliases = normalizeAliases(aliases);
          for (const [alias, to] of Object.entries(aliases)) {
            if (!_path.startsWith(alias))
              continue;
            const _alias = utils_hasTrailingSlash(alias) ? alias.slice(0, -1) : alias;
            if (utils_hasTrailingSlash(_path[_alias.length]))
              return join(to, _path.slice(alias.length));
          }
          return _path;
        }(id, ctx.alias));
        let parentURL = options?.parentURL || ctx.url;
        isDir(parentURL) && (parentURL = join(parentURL, "_index.js"));
        const conditionSets = ((options?.async) ? [options?.conditions, ["node", "import"], ["node", "require"]] : [options?.conditions, ["node", "require"], ["node", "import"]]).filter(Boolean);
        for (const conditions of conditionSets) {
          try {
            resolved = resolvePathSync(id, { url: parentURL, conditions, extensions: ctx.opts.extensions });
          } catch (error) {
            lastError = error;
          }
          if (resolved)
            return resolved;
        }
        try {
          return ctx.nativeRequire.resolve(id, { paths: options.paths });
        } catch (error) {
          lastError = error;
        }
        for (const ext of ctx.additionalExts) {
          if (resolved = tryNativeRequireResolve(ctx, id + ext, parentURL, options) || tryNativeRequireResolve(ctx, id + "/index" + ext, parentURL, options), resolved)
            return resolved;
          if ((TS_EXT_RE.test(ctx.filename) || TS_EXT_RE.test(ctx.parentModule?.filename || "") || JS_EXT_RE.test(id)) && (resolved = tryNativeRequireResolve(ctx, id.replace(JS_EXT_RE, ".$1t$2"), parentURL, options), resolved))
            return resolved;
        }
        if (!options?.try)
          throw lastError;
      }
      function tryNativeRequireResolve(ctx, id, parentURL, options) {
        try {
          return ctx.nativeRequire.resolve(id, { ...options, paths: [pathe_ff20891b_dirname(fileURLToPath(parentURL)), ...options?.paths || []] });
        } catch {
        }
      }
      const external_node_perf_hooks_namespaceObject = __require2("node:perf_hooks"), external_node_vm_namespaceObject = __require2("node:vm");
      var external_node_vm_default = __webpack_require__.n(external_node_vm_namespaceObject);
      function jitiRequire(ctx, id, opts) {
        const cache2 = ctx.parentCache || {};
        if (id.startsWith("node:"))
          id = id.slice(5);
        else if (id.startsWith("file:"))
          id = (0, external_node_url_namespaceObject.fileURLToPath)(id);
        else if (id.startsWith("data:")) {
          if (!opts.async)
            throw new Error("`data:` URLs are only supported in ESM context. Use `import` or `jiti.import` instead.");
          return debug(ctx, "[native]", "[data]", "[import]", id), nativeImportOrRequire(ctx, id, true);
        }
        if (external_node_module_namespaceObject.builtinModules.includes(id) || id === ".pnp.js")
          return nativeImportOrRequire(ctx, id, opts.async);
        if (ctx.opts.tryNative && !ctx.opts.transformOptions)
          try {
            if (!(id = jitiResolve(ctx, id, opts)) && opts.try)
              return;
            if (debug(ctx, "[try-native]", opts.async && ctx.nativeImport ? "[import]" : "[require]", id), opts.async && ctx.nativeImport)
              return ctx.nativeImport(id).then((m) => (ctx.opts.moduleCache === false && delete ctx.nativeRequire.cache[id], jitiInteropDefault(ctx, m)));
            {
              const _mod = ctx.nativeRequire(id);
              return ctx.opts.moduleCache === false && delete ctx.nativeRequire.cache[id], jitiInteropDefault(ctx, _mod);
            }
          } catch (error) {
            debug(ctx, `[try-native] Using fallback for ${id} because of an error:`, error);
          }
        const filename = jitiResolve(ctx, id, opts);
        if (!filename && opts.try)
          return;
        const ext = extname(filename);
        if (ext === ".json") {
          debug(ctx, "[json]", filename);
          const jsonModule = ctx.nativeRequire(filename);
          return jsonModule && !("default" in jsonModule) && Object.defineProperty(jsonModule, "default", { value: jsonModule, enumerable: false }), jsonModule;
        }
        if (ext && !ctx.opts.extensions.includes(ext))
          return debug(ctx, "[native]", "[unknown]", opts.async ? "[import]" : "[require]", filename), nativeImportOrRequire(ctx, filename, opts.async);
        if (ctx.isNativeRe.test(filename))
          return debug(ctx, "[native]", opts.async ? "[import]" : "[require]", filename), nativeImportOrRequire(ctx, filename, opts.async);
        if (cache2[filename])
          return jitiInteropDefault(ctx, cache2[filename]?.exports);
        if (ctx.opts.moduleCache) {
          const cacheEntry = ctx.nativeRequire.cache[filename];
          if (cacheEntry?.loaded)
            return jitiInteropDefault(ctx, cacheEntry.exports);
        }
        const source = (0, external_node_fs_namespaceObject.readFileSync)(filename, "utf8");
        return eval_evalModule(ctx, source, { id, filename, ext, cache: cache2, async: opts.async });
      }
      function nativeImportOrRequire(ctx, id, async) {
        return async && ctx.nativeImport ? ctx.nativeImport(function(id2) {
          return _ && isAbsolute(id2) ? pathToFileURL3(id2) : id2;
        }(id)).then((m) => jitiInteropDefault(ctx, m)) : jitiInteropDefault(ctx, ctx.nativeRequire(id));
      }
      const CACHE_VERSION = "9";
      function getCache(ctx, topts, get) {
        if (!ctx.opts.fsCache || !topts.filename)
          return get();
        const sourceHash = ` /* v${CACHE_VERSION}-${md5(topts.source, 16)} */
`;
        let cacheName = `${basename(pathe_ff20891b_dirname(topts.filename))}-${function(path4) {
          return path4.match(FILENAME_RE)?.[2];
        }(topts.filename)}` + (ctx.opts.sourceMaps ? "+map" : "") + (topts.interopDefault ? ".i" : "") + `.${md5(topts.filename)}` + (topts.async ? ".mjs" : ".cjs");
        topts.jsx && topts.filename.endsWith("x") && (cacheName += "x");
        const cacheDir = ctx.opts.fsCache, cacheFilePath = join(cacheDir, cacheName);
        if ((0, external_node_fs_namespaceObject.existsSync)(cacheFilePath)) {
          const cacheSource = (0, external_node_fs_namespaceObject.readFileSync)(cacheFilePath, "utf8");
          if (cacheSource.endsWith(sourceHash))
            return debug(ctx, "[cache]", "[hit]", topts.filename, "~>", cacheFilePath), cacheSource;
        }
        debug(ctx, "[cache]", "[miss]", topts.filename);
        const result = get();
        return result.includes("__JITI_ERROR__") || ((0, external_node_fs_namespaceObject.writeFileSync)(cacheFilePath, result + sourceHash, "utf8"), debug(ctx, "[cache]", "[store]", topts.filename, "~>", cacheFilePath)), result;
      }
      function prepareCacheDir(ctx) {
        if (ctx.opts.fsCache === true && (ctx.opts.fsCache = function(ctx2) {
          const nmDir = ctx2.filename && resolve(ctx2.filename, "../node_modules");
          if (nmDir && (0, external_node_fs_namespaceObject.existsSync)(nmDir))
            return join(nmDir, ".cache/jiti");
          let _tmpDir = (0, external_node_os_namespaceObject.tmpdir)();
          if (process.env.TMPDIR && _tmpDir === process.cwd() && !process.env.JITI_RESPECT_TMPDIR_ENV) {
            const _env = process.env.TMPDIR;
            delete process.env.TMPDIR, _tmpDir = (0, external_node_os_namespaceObject.tmpdir)(), process.env.TMPDIR = _env;
          }
          return join(_tmpDir, "jiti");
        }(ctx)), ctx.opts.fsCache)
          try {
            if ((0, external_node_fs_namespaceObject.mkdirSync)(ctx.opts.fsCache, { recursive: true }), !function(filename) {
              try {
                return (0, external_node_fs_namespaceObject.accessSync)(filename, external_node_fs_namespaceObject.constants.W_OK), true;
              } catch {
                return false;
              }
            }(ctx.opts.fsCache))
              throw new Error("directory is not writable!");
          } catch (error) {
            debug(ctx, "Error creating cache directory at ", ctx.opts.fsCache, error), ctx.opts.fsCache = false;
          }
      }
      function transform(ctx, topts) {
        let code = getCache(ctx, topts, () => {
          const res = ctx.opts.transform({ ...ctx.opts.transformOptions, babel: { ...ctx.opts.sourceMaps ? { sourceFileName: topts.filename, sourceMaps: "inline" } : {}, ...ctx.opts.transformOptions?.babel }, interopDefault: ctx.opts.interopDefault, ...topts });
          return res.error && ctx.opts.debug && debug(ctx, res.error), res.code;
        });
        return code.startsWith("#!") && (code = "// " + code), code;
      }
      function eval_evalModule(ctx, source, evalOptions = {}) {
        const id = evalOptions.id || (evalOptions.filename ? basename(evalOptions.filename) : `_jitiEval.${evalOptions.ext || (evalOptions.async ? "mjs" : "js")}`), filename = evalOptions.filename || jitiResolve(ctx, id, { async: evalOptions.async }), ext = evalOptions.ext || extname(filename), cache2 = evalOptions.cache || ctx.parentCache || {}, isTypescript = /\.[cm]?tsx?$/.test(ext), isESM = ext === ".mjs" || ext === ".js" && function(path4) {
          for (;path4 && path4 !== "." && path4 !== "/"; ) {
            path4 = join(path4, "..");
            try {
              const pkg = (0, external_node_fs_namespaceObject.readFileSync)(join(path4, "package.json"), "utf8");
              try {
                return JSON.parse(pkg);
              } catch {
              }
              break;
            } catch {
            }
          }
        }(filename)?.type === "module", isCommonJS = ext === ".cjs", needsTranspile = evalOptions.forceTranspile ?? (!isCommonJS && !(isESM && evalOptions.async) && (isTypescript || isESM || ctx.isTransformRe.test(filename) || hasESMSyntax(source))), start = external_node_perf_hooks_namespaceObject.performance.now();
        if (needsTranspile) {
          source = transform(ctx, { filename, source, ts: isTypescript, async: evalOptions.async ?? false, jsx: ctx.opts.jsx });
          const time = Math.round(1000 * (external_node_perf_hooks_namespaceObject.performance.now() - start)) / 1000;
          debug(ctx, "[transpile]", evalOptions.async ? "[esm]" : "[cjs]", filename, `(${time}ms)`);
        } else {
          if (debug(ctx, "[native]", evalOptions.async ? "[import]" : "[require]", filename), evalOptions.async)
            return Promise.resolve(nativeImportOrRequire(ctx, filename, evalOptions.async)).catch((error) => (debug(ctx, "Native import error:", error), debug(ctx, "[fallback]", filename), eval_evalModule(ctx, source, { ...evalOptions, forceTranspile: true })));
          try {
            return nativeImportOrRequire(ctx, filename, evalOptions.async);
          } catch (error) {
            debug(ctx, "Native require error:", error), debug(ctx, "[fallback]", filename), source = transform(ctx, { filename, source, ts: isTypescript, async: evalOptions.async ?? false, jsx: ctx.opts.jsx });
          }
        }
        const mod = new external_node_module_namespaceObject.Module(filename);
        mod.filename = filename, ctx.parentModule && (mod.parent = ctx.parentModule, Array.isArray(ctx.parentModule.children) && !ctx.parentModule.children.includes(mod) && ctx.parentModule.children.push(mod));
        const _jiti = createJiti(filename, ctx.opts, { parentModule: mod, parentCache: cache2, nativeImport: ctx.nativeImport, onError: ctx.onError, createRequire: ctx.createRequire }, true);
        let compiled;
        mod.require = _jiti, mod.path = pathe_ff20891b_dirname(filename), mod.paths = external_node_module_namespaceObject.Module._nodeModulePaths(mod.path), cache2[filename] = mod, ctx.opts.moduleCache && (ctx.nativeRequire.cache[filename] = mod);
        const wrapped = function(source2, opts) {
          return `(${opts?.async ? "async " : ""}function (exports, require, module, __filename, __dirname, jitiImport, jitiESMResolve) { ${source2}
});`;
        }(source, { async: evalOptions.async });
        try {
          compiled = external_node_vm_default().runInThisContext(wrapped, { filename, lineOffset: 0, displayErrors: false });
        } catch (error) {
          error.name === "SyntaxError" && evalOptions.async && ctx.nativeImport ? (debug(ctx, "[esm]", "[import]", "[fallback]", filename), compiled = function(code, nativeImport) {
            const uri = `data:text/javascript;base64,${Buffer.from(`export default ${code}`).toString("base64")}`;
            return (...args) => nativeImport(uri).then((mod2) => mod2.default(...args));
          }(wrapped, ctx.nativeImport)) : (ctx.opts.moduleCache && delete ctx.nativeRequire.cache[filename], ctx.onError(error));
        }
        let evalResult;
        try {
          evalResult = compiled(mod.exports, mod.require, mod, mod.filename, pathe_ff20891b_dirname(mod.filename), _jiti.import, _jiti.esmResolve);
        } catch (error) {
          ctx.opts.moduleCache && delete ctx.nativeRequire.cache[filename], ctx.onError(error);
        }
        function next() {
          if (mod.exports && mod.exports.__JITI_ERROR__) {
            const { filename: filename2, line, column, code, message } = mod.exports.__JITI_ERROR__, err = new Error(`${code}: ${message} 
 ${`${filename2}:${line}:${column}`}`);
            Error.captureStackTrace(err, jitiRequire), ctx.onError(err);
          }
          mod.loaded = true;
          return jitiInteropDefault(ctx, mod.exports);
        }
        return evalOptions.async ? Promise.resolve(evalResult).then(next) : next();
      }
      const isWindows = (0, external_node_os_namespaceObject.platform)() === "win32";
      function createJiti(filename, userOptions = {}, parentContext, isNested = false) {
        const opts = isNested ? userOptions : function(userOptions2) {
          const jitiDefaults = { fsCache: _booleanEnv("JITI_FS_CACHE", _booleanEnv("JITI_CACHE", true)), moduleCache: _booleanEnv("JITI_MODULE_CACHE", _booleanEnv("JITI_REQUIRE_CACHE", true)), debug: _booleanEnv("JITI_DEBUG", false), sourceMaps: _booleanEnv("JITI_SOURCE_MAPS", false), interopDefault: _booleanEnv("JITI_INTEROP_DEFAULT", true), extensions: _jsonEnv("JITI_EXTENSIONS", [".js", ".mjs", ".cjs", ".ts", ".tsx", ".mts", ".cts", ".mtsx", ".ctsx"]), alias: _jsonEnv("JITI_ALIAS", {}), nativeModules: _jsonEnv("JITI_NATIVE_MODULES", []), transformModules: _jsonEnv("JITI_TRANSFORM_MODULES", []), tryNative: _jsonEnv("JITI_TRY_NATIVE", "Bun" in globalThis), jsx: _booleanEnv("JITI_JSX", false) };
          jitiDefaults.jsx && jitiDefaults.extensions.push(".jsx", ".tsx");
          const deprecatOverrides = {};
          return userOptions2.cache !== undefined && (deprecatOverrides.fsCache = userOptions2.cache), userOptions2.requireCache !== undefined && (deprecatOverrides.moduleCache = userOptions2.requireCache), { ...jitiDefaults, ...deprecatOverrides, ...userOptions2 };
        }(userOptions), alias = opts.alias && Object.keys(opts.alias).length > 0 ? normalizeAliases(opts.alias || {}) : undefined, nativeModules = ["typescript", "jiti", ...opts.nativeModules || []], isNativeRe = new RegExp(`node_modules/(${nativeModules.map((m) => escapeStringRegexp(m)).join("|")})/`), transformModules = [...opts.transformModules || []], isTransformRe = new RegExp(`node_modules/(${transformModules.map((m) => escapeStringRegexp(m)).join("|")})/`);
        filename || (filename = process.cwd()), !isNested && isDir(filename) && (filename = join(filename, "_index.js"));
        const url = pathToFileURL3(filename), additionalExts = [...opts.extensions].filter((ext) => ext !== ".js"), nativeRequire = parentContext.createRequire(isWindows ? filename.replace(/\//g, "\\") : filename), ctx = { filename, url, opts, alias, nativeModules, transformModules, isNativeRe, isTransformRe, additionalExts, nativeRequire, onError: parentContext.onError, parentModule: parentContext.parentModule, parentCache: parentContext.parentCache, nativeImport: parentContext.nativeImport, createRequire: parentContext.createRequire };
        isNested || debug(ctx, "[init]", ...[["version:", package_namespaceObject.rE], ["module-cache:", opts.moduleCache], ["fs-cache:", opts.fsCache], ["interop-defaults:", opts.interopDefault]].flat()), isNested || prepareCacheDir(ctx);
        const jiti = Object.assign(function(id) {
          return jitiRequire(ctx, id, { async: false });
        }, { cache: opts.moduleCache ? nativeRequire.cache : Object.create(null), extensions: nativeRequire.extensions, main: nativeRequire.main, options: opts, resolve: Object.assign(function(path4) {
          return jitiResolve(ctx, path4, { async: false });
        }, { paths: nativeRequire.resolve.paths }), transform: (opts2) => transform(ctx, opts2), evalModule: (source, options) => eval_evalModule(ctx, source, options), async import(id, opts2) {
          const mod = await jitiRequire(ctx, id, { ...opts2, async: true });
          return opts2?.default ? mod?.default ?? mod : mod;
        }, esmResolve(id, opts2) {
          typeof opts2 == "string" && (opts2 = { parentURL: opts2 });
          const resolved = jitiResolve(ctx, id, { parentURL: url, ...opts2, async: true });
          return !resolved || typeof resolved != "string" || resolved.startsWith("file://") ? resolved : pathToFileURL3(resolved);
        } });
        return jiti;
      }
    })(), module.exports = __webpack_exports__.default;
  })();
});
var require_babel = __commonJS2((exports, module) => {
  (() => {
    var __webpack_modules__ = { "./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js": function(module2, __unused_webpack_exports, __webpack_require__2) {
      module2.exports = function(traceMapping, genMapping) {
        const SOURCELESS_MAPPING = SegmentObject("", -1, -1, "", null, false), EMPTY_SOURCES = [];
        function SegmentObject(source, line, column, name, content, ignore) {
          return { source, line, column, name, content, ignore };
        }
        function Source(map, sources, source, content, ignore) {
          return { map, sources, source, content, ignore };
        }
        function MapSource(map, sources) {
          return Source(map, sources, "", null, false);
        }
        function OriginalSource(source, content, ignore) {
          return Source(null, EMPTY_SOURCES, source, content, ignore);
        }
        function traceMappings(tree) {
          const gen = new genMapping.GenMapping({ file: tree.map.file }), { sources: rootSources, map } = tree, rootNames = map.names, rootMappings = traceMapping.decodedMappings(map);
          for (let i = 0;i < rootMappings.length; i++) {
            const segments = rootMappings[i];
            for (let j = 0;j < segments.length; j++) {
              const segment = segments[j], genCol = segment[0];
              let traced = SOURCELESS_MAPPING;
              if (segment.length !== 1 && (traced = originalPositionFor(rootSources[segment[1]], segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : ""), traced == null))
                continue;
              const { column, line, name, content, source, ignore } = traced;
              genMapping.maybeAddSegment(gen, i, genCol, source, line, column, name), source && content != null && genMapping.setSourceContent(gen, source, content), ignore && genMapping.setIgnore(gen, source, true);
            }
          }
          return gen;
        }
        function originalPositionFor(source, line, column, name) {
          if (!source.map)
            return SegmentObject(source.source, line, column, name, source.content, source.ignore);
          const segment = traceMapping.traceSegment(source.map, line, column);
          return segment == null ? null : segment.length === 1 ? SOURCELESS_MAPPING : originalPositionFor(source.sources[segment[1]], segment[2], segment[3], segment.length === 5 ? source.map.names[segment[4]] : name);
        }
        function asArray(value2) {
          return Array.isArray(value2) ? value2 : [value2];
        }
        function buildSourceMapTree(input, loader) {
          const maps = asArray(input).map((m) => new traceMapping.TraceMap(m, "")), map = maps.pop();
          for (let i = 0;i < maps.length; i++)
            if (maps[i].sources.length > 1)
              throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
          let tree = build(map, loader, "", 0);
          for (let i = maps.length - 1;i >= 0; i--)
            tree = MapSource(maps[i], [tree]);
          return tree;
        }
        function build(map, loader, importer, importerDepth) {
          const { resolvedSources, sourcesContent, ignoreList } = map, depth = importerDepth + 1;
          return MapSource(map, resolvedSources.map((sourceFile, i) => {
            const ctx = { importer, depth, source: sourceFile || "", content: undefined, ignore: undefined }, sourceMap = loader(ctx.source, ctx), { source, content, ignore } = ctx;
            return sourceMap ? build(new traceMapping.TraceMap(sourceMap, source), loader, source, depth) : OriginalSource(source, content !== undefined ? content : sourcesContent ? sourcesContent[i] : null, ignore !== undefined ? ignore : !!ignoreList && ignoreList.includes(i));
          }));
        }

        class SourceMap {
          constructor(map, options) {
            const out = options.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
            this.version = out.version, this.file = out.file, this.mappings = out.mappings, this.names = out.names, this.ignoreList = out.ignoreList, this.sourceRoot = out.sourceRoot, this.sources = out.sources, options.excludeContent || (this.sourcesContent = out.sourcesContent);
          }
          toString() {
            return JSON.stringify(this);
          }
        }
        function remapping(input, loader, options) {
          const opts = typeof options == "object" ? options : { excludeContent: !!options, decodedMappings: false }, tree = buildSourceMapTree(input, loader);
          return new SourceMap(traceMappings(tree), opts);
        }
        return remapping;
      }(__webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"));
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive": (module2) => {
      function webpackEmptyAsyncContext(req) {
        return Promise.resolve().then(() => {
          var e = new Error("Cannot find module '" + req + "'");
          throw e.code = "MODULE_NOT_FOUND", e;
        });
      }
      webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive", module2.exports = webpackEmptyAsyncContext;
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive": (module2) => {
      function webpackEmptyContext(req) {
        var e = new Error("Cannot find module '" + req + "'");
        throw e.code = "MODULE_NOT_FOUND", e;
      }
      webpackEmptyContext.keys = () => [], webpackEmptyContext.resolve = webpackEmptyContext, webpackEmptyContext.id = "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive", module2.exports = webpackEmptyContext;
    }, "./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.A = undefined;
      var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-class-properties", manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.push("classProperties", "classPrivateProperties", "classPrivateMethods");
      } }));
      exports2.A = _default;
    }, "./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
      (function(exports3, setArray, sourcemapCodec, traceMapping) {
        const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, NO_NAME = -1;

        class GenMapping {
          constructor({ file, sourceRoot } = {}) {
            this._names = new setArray.SetArray, this._sources = new setArray.SetArray, this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot, this._ignoreList = new setArray.SetArray;
          }
        }
        function cast(map) {
          return map;
        }
        function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
          return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
        }
        function addMapping(map, mapping) {
          return addMappingInternal(false, map, mapping);
        }
        const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), maybeAddMapping = (map, mapping) => addMappingInternal(true, map, mapping);
        function setSourceContent(map, source, content) {
          const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);
          sourcesContent[setArray.put(sources, source)] = content;
        }
        function setIgnore(map, source, ignore = true) {
          const { _sources: sources, _sourcesContent: sourcesContent, _ignoreList: ignoreList } = cast(map), index = setArray.put(sources, source);
          index === sourcesContent.length && (sourcesContent[index] = null), ignore ? setArray.put(ignoreList, index) : setArray.remove(ignoreList, index);
        }
        function toDecodedMap(map) {
          const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names, _ignoreList: ignoreList } = cast(map);
          return removeEmptyFinalLines(mappings), { version: 3, file: map.file || undefined, names: names.array, sourceRoot: map.sourceRoot || undefined, sources: sources.array, sourcesContent, mappings, ignoreList: ignoreList.array };
        }
        function toEncodedMap(map) {
          const decoded = toDecodedMap(map);
          return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
        }
        function fromMap(input) {
          const map = new traceMapping.TraceMap(input), gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
          return putAll(cast(gen)._names, map.names), putAll(cast(gen)._sources, map.sources), cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null), cast(gen)._mappings = traceMapping.decodedMappings(map), map.ignoreList && putAll(cast(gen)._ignoreList, map.ignoreList), gen;
        }
        function allMappings(map) {
          const out = [], { _mappings: mappings, _sources: sources, _names: names } = cast(map);
          for (let i = 0;i < mappings.length; i++) {
            const line = mappings[i];
            for (let j = 0;j < line.length; j++) {
              const seg = line[j], generated = { line: i + 1, column: seg[COLUMN] };
              let source, original, name;
              seg.length !== 1 && (source = sources.array[seg[SOURCES_INDEX]], original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] }, seg.length === 5 && (name = names.array[seg[NAMES_INDEX]])), out.push({ generated, source, original, name });
            }
          }
          return out;
        }
        function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
          const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = cast(map), line = getLine(mappings, genLine), index = getColumnIndex(line, genColumn);
          if (!source) {
            if (skipable && skipSourceless(line, index))
              return;
            return insert(line, index, [genColumn]);
          }
          const sourcesIndex = setArray.put(sources, source), namesIndex = name ? setArray.put(names, name) : NO_NAME;
          if (sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = content != null ? content : null), !skipable || !skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex))
            return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
        }
        function getLine(mappings, index) {
          for (let i = mappings.length;i <= index; i++)
            mappings[i] = [];
          return mappings[index];
        }
        function getColumnIndex(line, genColumn) {
          let index = line.length;
          for (let i = index - 1;i >= 0 && !(genColumn >= line[i][COLUMN]); index = i--)
            ;
          return index;
        }
        function insert(array, index, value2) {
          for (let i = array.length;i > index; i--)
            array[i] = array[i - 1];
          array[index] = value2;
        }
        function removeEmptyFinalLines(mappings) {
          const { length } = mappings;
          let len = length;
          for (let i = len - 1;i >= 0 && !(mappings[i].length > 0); len = i, i--)
            ;
          len < length && (mappings.length = len);
        }
        function putAll(setarr, array) {
          for (let i = 0;i < array.length; i++)
            setArray.put(setarr, array[i]);
        }
        function skipSourceless(line, index) {
          return index === 0 || line[index - 1].length === 1;
        }
        function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
          if (index === 0)
            return false;
          const prev = line[index - 1];
          return prev.length !== 1 && sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
        }
        function addMappingInternal(skipable, map, mapping) {
          const { generated, source, original, name, content } = mapping;
          return source ? addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content) : addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
        }
        exports3.GenMapping = GenMapping, exports3.addMapping = addMapping, exports3.addSegment = addSegment, exports3.allMappings = allMappings, exports3.fromMap = fromMap, exports3.maybeAddMapping = maybeAddMapping, exports3.maybeAddSegment = maybeAddSegment, exports3.setIgnore = setIgnore, exports3.setSourceContent = setSourceContent, exports3.toDecodedMap = toDecodedMap, exports3.toEncodedMap = toEncodedMap, Object.defineProperty(exports3, "__esModule", { value: true });
      })(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));
    }, "./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js": function(module2) {
      module2.exports = function() {
        const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
        function isAbsoluteUrl(input) {
          return schemeRegex.test(input);
        }
        function isSchemeRelativeUrl(input) {
          return input.startsWith("//");
        }
        function isAbsolutePath(input) {
          return input.startsWith("/");
        }
        function isFileUrl(input) {
          return input.startsWith("file:");
        }
        function isRelative(input) {
          return /^[.?#]/.test(input);
        }
        function parseAbsoluteUrl(input) {
          const match = urlRegex.exec(input);
          return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
        }
        function parseFileUrl(input) {
          const match = fileRegex.exec(input), path4 = match[2];
          return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path4) ? path4 : "/" + path4, match[3] || "", match[4] || "");
        }
        function makeUrl(scheme, user, host, port, path4, query, hash) {
          return { scheme, user, host, port, path: path4, query, hash, type: 7 };
        }
        function parseUrl(input) {
          if (isSchemeRelativeUrl(input)) {
            const url2 = parseAbsoluteUrl("http:" + input);
            return url2.scheme = "", url2.type = 6, url2;
          }
          if (isAbsolutePath(input)) {
            const url2 = parseAbsoluteUrl("http://foo.com" + input);
            return url2.scheme = "", url2.host = "", url2.type = 5, url2;
          }
          if (isFileUrl(input))
            return parseFileUrl(input);
          if (isAbsoluteUrl(input))
            return parseAbsoluteUrl(input);
          const url = parseAbsoluteUrl("http://foo.com/" + input);
          return url.scheme = "", url.host = "", url.type = input ? input.startsWith("?") ? 3 : input.startsWith("#") ? 2 : 4 : 1, url;
        }
        function stripPathFilename(path4) {
          if (path4.endsWith("/.."))
            return path4;
          const index = path4.lastIndexOf("/");
          return path4.slice(0, index + 1);
        }
        function mergePaths(url, base) {
          normalizePath(base, base.type), url.path === "/" ? url.path = base.path : url.path = stripPathFilename(base.path) + url.path;
        }
        function normalizePath(url, type) {
          const rel = type <= 4, pieces = url.path.split("/");
          let pointer = 1, positive = 0, addTrailingSlash = false;
          for (let i = 1;i < pieces.length; i++) {
            const piece = pieces[i];
            piece ? (addTrailingSlash = false, piece !== "." && (piece !== ".." ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : rel && (pieces[pointer++] = piece))) : addTrailingSlash = true;
          }
          let path4 = "";
          for (let i = 1;i < pointer; i++)
            path4 += "/" + pieces[i];
          (!path4 || addTrailingSlash && !path4.endsWith("/..")) && (path4 += "/"), url.path = path4;
        }
        function resolve(input, base) {
          if (!input && !base)
            return "";
          const url = parseUrl(input);
          let inputType = url.type;
          if (base && inputType !== 7) {
            const baseUrl = parseUrl(base), baseType = baseUrl.type;
            switch (inputType) {
              case 1:
                url.hash = baseUrl.hash;
              case 2:
                url.query = baseUrl.query;
              case 3:
              case 4:
                mergePaths(url, baseUrl);
              case 5:
                url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port;
              case 6:
                url.scheme = baseUrl.scheme;
            }
            baseType > inputType && (inputType = baseType);
          }
          normalizePath(url, inputType);
          const queryHash = url.query + url.hash;
          switch (inputType) {
            case 2:
            case 3:
              return queryHash;
            case 4: {
              const path4 = url.path.slice(1);
              return path4 ? isRelative(base || input) && !isRelative(path4) ? "./" + path4 + queryHash : path4 + queryHash : queryHash || ".";
            }
            case 5:
              return url.path + queryHash;
            default:
              return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
          }
        }
        return resolve;
      }();
    }, "./node_modules/.pnpm/@jridgewell+set-array@1.2.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js": function(__unused_webpack_module, exports2) {
      (function(exports3) {

        class SetArray {
          constructor() {
            this._indexes = { __proto__: null }, this.array = [];
          }
        }
        function cast(set) {
          return set;
        }
        function get(setarr, key) {
          return cast(setarr)._indexes[key];
        }
        function put(setarr, key) {
          const index = get(setarr, key);
          if (index !== undefined)
            return index;
          const { array, _indexes: indexes } = cast(setarr), length = array.push(key);
          return indexes[key] = length - 1;
        }
        function pop(setarr) {
          const { array, _indexes: indexes } = cast(setarr);
          array.length !== 0 && (indexes[array.pop()] = undefined);
        }
        function remove(setarr, key) {
          const index = get(setarr, key);
          if (index === undefined)
            return;
          const { array, _indexes: indexes } = cast(setarr);
          for (let i = index + 1;i < array.length; i++) {
            const k = array[i];
            array[i - 1] = k, indexes[k]--;
          }
          indexes[key] = undefined, array.pop();
        }
        exports3.SetArray = SetArray, exports3.get = get, exports3.pop = pop, exports3.put = put, exports3.remove = remove, Object.defineProperty(exports3, "__esModule", { value: true });
      })(exports2);
    }, "./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js": function(__unused_webpack_module, exports2) {
      (function(exports3) {
        const comma = 44, semicolon = 59, chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
        for (let i = 0;i < chars.length; i++) {
          const c = chars.charCodeAt(i);
          intToChar[i] = c, charToInt[c] = i;
        }
        function decodeInteger(reader, relative) {
          let value2 = 0, shift = 0, integer = 0;
          do {
            const c = reader.next();
            integer = charToInt[c], value2 |= (31 & integer) << shift, shift += 5;
          } while (32 & integer);
          const shouldNegate = 1 & value2;
          return value2 >>>= 1, shouldNegate && (value2 = -2147483648 | -value2), relative + value2;
        }
        function encodeInteger(builder, num, relative) {
          let delta = num - relative;
          delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
          do {
            let clamped = 31 & delta;
            delta >>>= 5, delta > 0 && (clamped |= 32), builder.write(intToChar[clamped]);
          } while (delta > 0);
          return num;
        }
        function hasMoreVlq(reader, max) {
          return !(reader.pos >= max) && reader.peek() !== comma;
        }
        const bufLength = 16384, td = typeof TextDecoder != "undefined" ? new TextDecoder : typeof Buffer != "undefined" ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
          let out = "";
          for (let i = 0;i < buf.length; i++)
            out += String.fromCharCode(buf[i]);
          return out;
        } };

        class StringWriter {
          constructor() {
            this.pos = 0, this.out = "", this.buffer = new Uint8Array(bufLength);
          }
          write(v) {
            const { buffer } = this;
            buffer[this.pos++] = v, this.pos === bufLength && (this.out += td.decode(buffer), this.pos = 0);
          }
          flush() {
            const { buffer, out, pos } = this;
            return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
          }
        }

        class StringReader {
          constructor(buffer) {
            this.pos = 0, this.buffer = buffer;
          }
          next() {
            return this.buffer.charCodeAt(this.pos++);
          }
          peek() {
            return this.buffer.charCodeAt(this.pos);
          }
          indexOf(char) {
            const { buffer, pos } = this, idx = buffer.indexOf(char, pos);
            return idx === -1 ? buffer.length : idx;
          }
        }
        const EMPTY = [];
        function decodeOriginalScopes(input) {
          const { length } = input, reader = new StringReader(input), scopes = [], stack = [];
          let line = 0;
          for (;reader.pos < length; reader.pos++) {
            line = decodeInteger(reader, line);
            const column = decodeInteger(reader, 0);
            if (!hasMoreVlq(reader, length)) {
              const last = stack.pop();
              last[2] = line, last[3] = column;
              continue;
            }
            const kind = decodeInteger(reader, 0), scope = 1 & decodeInteger(reader, 0) ? [line, column, 0, 0, kind, decodeInteger(reader, 0)] : [line, column, 0, 0, kind];
            let vars = EMPTY;
            if (hasMoreVlq(reader, length)) {
              vars = [];
              do {
                const varsIndex = decodeInteger(reader, 0);
                vars.push(varsIndex);
              } while (hasMoreVlq(reader, length));
            }
            scope.vars = vars, scopes.push(scope), stack.push(scope);
          }
          return scopes;
        }
        function encodeOriginalScopes(scopes) {
          const writer = new StringWriter;
          for (let i = 0;i < scopes.length; )
            i = _encodeOriginalScopes(scopes, i, writer, [0]);
          return writer.flush();
        }
        function _encodeOriginalScopes(scopes, index, writer, state) {
          const scope = scopes[index], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, 4: kind, vars } = scope;
          index > 0 && writer.write(comma), state[0] = encodeInteger(writer, startLine, state[0]), encodeInteger(writer, startColumn, 0), encodeInteger(writer, kind, 0), encodeInteger(writer, scope.length === 6 ? 1 : 0, 0), scope.length === 6 && encodeInteger(writer, scope[5], 0);
          for (const v of vars)
            encodeInteger(writer, v, 0);
          for (index++;index < scopes.length; ) {
            const next = scopes[index], { 0: l, 1: c } = next;
            if (l > endLine || l === endLine && c >= endColumn)
              break;
            index = _encodeOriginalScopes(scopes, index, writer, state);
          }
          return writer.write(comma), state[0] = encodeInteger(writer, endLine, state[0]), encodeInteger(writer, endColumn, 0), index;
        }
        function decodeGeneratedRanges(input) {
          const { length } = input, reader = new StringReader(input), ranges = [], stack = [];
          let genLine = 0, definitionSourcesIndex = 0, definitionScopeIndex = 0, callsiteSourcesIndex = 0, callsiteLine = 0, callsiteColumn = 0, bindingLine = 0, bindingColumn = 0;
          do {
            const semi = reader.indexOf(";");
            let genColumn = 0;
            for (;reader.pos < semi; reader.pos++) {
              if (genColumn = decodeInteger(reader, genColumn), !hasMoreVlq(reader, semi)) {
                const last = stack.pop();
                last[2] = genLine, last[3] = genColumn;
                continue;
              }
              const fields = decodeInteger(reader, 0), hasCallsite = 2 & fields, hasScope = 4 & fields;
              let range, callsite = null, bindings = EMPTY;
              if (1 & fields) {
                const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
                definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0), definitionSourcesIndex = defSourcesIndex, range = [genLine, genColumn, 0, 0, defSourcesIndex, definitionScopeIndex];
              } else
                range = [genLine, genColumn, 0, 0];
              if (range.isScope = !!hasScope, hasCallsite) {
                const prevCsi = callsiteSourcesIndex, prevLine = callsiteLine;
                callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
                const sameSource = prevCsi === callsiteSourcesIndex;
                callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0), callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0), callsite = [callsiteSourcesIndex, callsiteLine, callsiteColumn];
              }
              if (range.callsite = callsite, hasMoreVlq(reader, semi)) {
                bindings = [];
                do {
                  bindingLine = genLine, bindingColumn = genColumn;
                  const expressionsCount = decodeInteger(reader, 0);
                  let expressionRanges;
                  if (expressionsCount < -1) {
                    expressionRanges = [[decodeInteger(reader, 0)]];
                    for (let i = -1;i > expressionsCount; i--) {
                      const prevBl = bindingLine;
                      bindingLine = decodeInteger(reader, bindingLine), bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
                      const expression = decodeInteger(reader, 0);
                      expressionRanges.push([expression, bindingLine, bindingColumn]);
                    }
                  } else
                    expressionRanges = [[expressionsCount]];
                  bindings.push(expressionRanges);
                } while (hasMoreVlq(reader, semi));
              }
              range.bindings = bindings, ranges.push(range), stack.push(range);
            }
            genLine++, reader.pos = semi + 1;
          } while (reader.pos < length);
          return ranges;
        }
        function encodeGeneratedRanges(ranges) {
          if (ranges.length === 0)
            return "";
          const writer = new StringWriter;
          for (let i = 0;i < ranges.length; )
            i = _encodeGeneratedRanges(ranges, i, writer, [0, 0, 0, 0, 0, 0, 0]);
          return writer.flush();
        }
        function _encodeGeneratedRanges(ranges, index, writer, state) {
          const range = ranges[index], { 0: startLine, 1: startColumn, 2: endLine, 3: endColumn, isScope, callsite, bindings } = range;
          if (state[0] < startLine ? (catchupLine(writer, state[0], startLine), state[0] = startLine, state[1] = 0) : index > 0 && writer.write(comma), state[1] = encodeInteger(writer, range[1], state[1]), encodeInteger(writer, (range.length === 6 ? 1 : 0) | (callsite ? 2 : 0) | (isScope ? 4 : 0), 0), range.length === 6) {
            const { 4: sourcesIndex, 5: scopesIndex } = range;
            sourcesIndex !== state[2] && (state[3] = 0), state[2] = encodeInteger(writer, sourcesIndex, state[2]), state[3] = encodeInteger(writer, scopesIndex, state[3]);
          }
          if (callsite) {
            const { 0: sourcesIndex, 1: callLine, 2: callColumn } = range.callsite;
            sourcesIndex !== state[4] ? (state[5] = 0, state[6] = 0) : callLine !== state[5] && (state[6] = 0), state[4] = encodeInteger(writer, sourcesIndex, state[4]), state[5] = encodeInteger(writer, callLine, state[5]), state[6] = encodeInteger(writer, callColumn, state[6]);
          }
          if (bindings)
            for (const binding of bindings) {
              binding.length > 1 && encodeInteger(writer, -binding.length, 0), encodeInteger(writer, binding[0][0], 0);
              let bindingStartLine = startLine, bindingStartColumn = startColumn;
              for (let i = 1;i < binding.length; i++) {
                const expRange = binding[i];
                bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine), bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn), encodeInteger(writer, expRange[0], 0);
              }
            }
          for (index++;index < ranges.length; ) {
            const next = ranges[index], { 0: l, 1: c } = next;
            if (l > endLine || l === endLine && c >= endColumn)
              break;
            index = _encodeGeneratedRanges(ranges, index, writer, state);
          }
          return state[0] < endLine ? (catchupLine(writer, state[0], endLine), state[0] = endLine, state[1] = 0) : writer.write(comma), state[1] = encodeInteger(writer, endColumn, state[1]), index;
        }
        function catchupLine(writer, lastLine, line) {
          do {
            writer.write(semicolon);
          } while (++lastLine < line);
        }
        function decode(mappings) {
          const { length } = mappings, reader = new StringReader(mappings), decoded = [];
          let genColumn = 0, sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
          do {
            const semi = reader.indexOf(";"), line = [];
            let sorted = true, lastCol = 0;
            for (genColumn = 0;reader.pos < semi; ) {
              let seg;
              genColumn = decodeInteger(reader, genColumn), genColumn < lastCol && (sorted = false), lastCol = genColumn, hasMoreVlq(reader, semi) ? (sourcesIndex = decodeInteger(reader, sourcesIndex), sourceLine = decodeInteger(reader, sourceLine), sourceColumn = decodeInteger(reader, sourceColumn), hasMoreVlq(reader, semi) ? (namesIndex = decodeInteger(reader, namesIndex), seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]) : seg = [genColumn, sourcesIndex, sourceLine, sourceColumn]) : seg = [genColumn], line.push(seg), reader.pos++;
            }
            sorted || sort(line), decoded.push(line), reader.pos = semi + 1;
          } while (reader.pos <= length);
          return decoded;
        }
        function sort(line) {
          line.sort(sortComparator);
        }
        function sortComparator(a, b) {
          return a[0] - b[0];
        }
        function encode(decoded) {
          const writer = new StringWriter;
          let sourcesIndex = 0, sourceLine = 0, sourceColumn = 0, namesIndex = 0;
          for (let i = 0;i < decoded.length; i++) {
            const line = decoded[i];
            if (i > 0 && writer.write(semicolon), line.length === 0)
              continue;
            let genColumn = 0;
            for (let j = 0;j < line.length; j++) {
              const segment = line[j];
              j > 0 && writer.write(comma), genColumn = encodeInteger(writer, segment[0], genColumn), segment.length !== 1 && (sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex), sourceLine = encodeInteger(writer, segment[2], sourceLine), sourceColumn = encodeInteger(writer, segment[3], sourceColumn), segment.length !== 4 && (namesIndex = encodeInteger(writer, segment[4], namesIndex)));
            }
          }
          return writer.flush();
        }
        exports3.decode = decode, exports3.decodeGeneratedRanges = decodeGeneratedRanges, exports3.decodeOriginalScopes = decodeOriginalScopes, exports3.encode = encode, exports3.encodeGeneratedRanges = encodeGeneratedRanges, exports3.encodeOriginalScopes = encodeOriginalScopes, Object.defineProperty(exports3, "__esModule", { value: true });
      })(exports2);
    }, "./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
      (function(exports3, sourcemapCodec, resolveUri) {
        function resolve(input, base) {
          return base && !base.endsWith("/") && (base += "/"), resolveUri(input, base);
        }
        function stripFilename(path4) {
          if (!path4)
            return "";
          const index = path4.lastIndexOf("/");
          return path4.slice(0, index + 1);
        }
        const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
        function maybeSort(mappings, owned) {
          const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
          if (unsortedIndex === mappings.length)
            return mappings;
          owned || (mappings = mappings.slice());
          for (let i = unsortedIndex;i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1))
            mappings[i] = sortSegments(mappings[i], owned);
          return mappings;
        }
        function nextUnsortedSegmentLine(mappings, start) {
          for (let i = start;i < mappings.length; i++)
            if (!isSorted(mappings[i]))
              return i;
          return mappings.length;
        }
        function isSorted(line) {
          for (let j = 1;j < line.length; j++)
            if (line[j][COLUMN] < line[j - 1][COLUMN])
              return false;
          return true;
        }
        function sortSegments(line, owned) {
          return owned || (line = line.slice()), line.sort(sortComparator);
        }
        function sortComparator(a, b) {
          return a[COLUMN] - b[COLUMN];
        }
        let found = false;
        function binarySearch(haystack, needle, low, high) {
          for (;low <= high; ) {
            const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
            if (cmp === 0)
              return found = true, mid;
            cmp < 0 ? low = mid + 1 : high = mid - 1;
          }
          return found = false, low - 1;
        }
        function upperBound(haystack, needle, index) {
          for (let i = index + 1;i < haystack.length && haystack[i][COLUMN] === needle; index = i++)
            ;
          return index;
        }
        function lowerBound(haystack, needle, index) {
          for (let i = index - 1;i >= 0 && haystack[i][COLUMN] === needle; index = i--)
            ;
          return index;
        }
        function memoizedState() {
          return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
        }
        function memoizedBinarySearch(haystack, needle, state, key) {
          const { lastKey, lastNeedle, lastIndex } = state;
          let low = 0, high = haystack.length - 1;
          if (key === lastKey) {
            if (needle === lastNeedle)
              return found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle, lastIndex;
            needle >= lastNeedle ? low = lastIndex === -1 ? 0 : lastIndex : high = lastIndex;
          }
          return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
        }
        function buildBySources(decoded, memos) {
          const sources = memos.map(buildNullArray);
          for (let i = 0;i < decoded.length; i++) {
            const line = decoded[i];
            for (let j = 0;j < line.length; j++) {
              const seg = line[j];
              if (seg.length === 1)
                continue;
              const sourceIndex2 = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources[sourceIndex2], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos[sourceIndex2];
              let index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
              memo.lastIndex = ++index, insert(originalLine, index, [sourceColumn, i, seg[COLUMN]]);
            }
          }
          return sources;
        }
        function insert(array, index, value2) {
          for (let i = array.length;i > index; i--)
            array[i] = array[i - 1];
          array[index] = value2;
        }
        function buildNullArray() {
          return { __proto__: null };
        }
        const AnyMap = function(map, mapUrl) {
          const parsed = parse(map);
          if (!("sections" in parsed))
            return new TraceMap(parsed, mapUrl);
          const mappings = [], sources = [], sourcesContent = [], names = [], ignoreList = [];
          return recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, 1 / 0, 1 / 0), presortedDecodedMap({ version: 3, file: parsed.file, names, sources, sourcesContent, mappings, ignoreList });
        };
        function parse(map) {
          return typeof map == "string" ? JSON.parse(map) : map;
        }
        function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
          const { sections } = input;
          for (let i = 0;i < sections.length; i++) {
            const { map, offset } = sections[i];
            let sl = stopLine, sc = stopColumn;
            if (i + 1 < sections.length) {
              const nextOffset = sections[i + 1].offset;
              sl = Math.min(stopLine, lineOffset + nextOffset.line), sl === stopLine ? sc = Math.min(stopColumn, columnOffset + nextOffset.column) : sl < stopLine && (sc = columnOffset + nextOffset.column);
            }
            addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
          }
        }
        function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
          const parsed = parse(input);
          if ("sections" in parsed)
            return recurse(...arguments);
          const map = new TraceMap(parsed, mapUrl), sourcesOffset = sources.length, namesOffset = names.length, decoded = decodedMappings(map), { resolvedSources, sourcesContent: contents, ignoreList: ignores } = map;
          if (append(sources, resolvedSources), append(names, map.names), contents)
            append(sourcesContent, contents);
          else
            for (let i = 0;i < resolvedSources.length; i++)
              sourcesContent.push(null);
          if (ignores)
            for (let i = 0;i < ignores.length; i++)
              ignoreList.push(ignores[i] + sourcesOffset);
          for (let i = 0;i < decoded.length; i++) {
            const lineI = lineOffset + i;
            if (lineI > stopLine)
              return;
            const out = getLine(mappings, lineI), cOffset = i === 0 ? columnOffset : 0, line = decoded[i];
            for (let j = 0;j < line.length; j++) {
              const seg = line[j], column = cOffset + seg[COLUMN];
              if (lineI === stopLine && column >= stopColumn)
                return;
              if (seg.length === 1) {
                out.push([column]);
                continue;
              }
              const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN];
              out.push(seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
            }
          }
        }
        function append(arr, other) {
          for (let i = 0;i < other.length; i++)
            arr.push(other[i]);
        }
        function getLine(arr, index) {
          for (let i = arr.length;i <= index; i++)
            arr[i] = [];
          return arr[index];
        }
        const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;

        class TraceMap {
          constructor(map, mapUrl) {
            const isString = typeof map == "string";
            if (!isString && map._decodedMemo)
              return map;
            const parsed = isString ? JSON.parse(map) : map, { version, file, names, sourceRoot, sources, sourcesContent } = parsed;
            this.version = version, this.file = file, this.names = names || [], this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent, this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || undefined;
            const from = resolve(sourceRoot || "", stripFilename(mapUrl));
            this.resolvedSources = sources.map((s) => resolve(s || "", from));
            const { mappings } = parsed;
            typeof mappings == "string" ? (this._encoded = mappings, this._decoded = undefined) : (this._encoded = undefined, this._decoded = maybeSort(mappings, isString)), this._decodedMemo = memoizedState(), this._bySources = undefined, this._bySourceMemos = undefined;
          }
        }
        function cast(map) {
          return map;
        }
        function encodedMappings(map) {
          var _a, _b;
          return (_a = (_b = cast(map))._encoded) !== null && _a !== undefined ? _a : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
        }
        function decodedMappings(map) {
          var _a;
          return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec.decode(cast(map)._encoded));
        }
        function traceSegment(map, line, column) {
          const decoded = decodedMappings(map);
          if (line >= decoded.length)
            return null;
          const segments = decoded[line], index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
          return index === -1 ? null : segments[index];
        }
        function originalPositionFor(map, needle) {
          let { line, column, bias } = needle;
          if (line--, line < 0)
            throw new Error(LINE_GTR_ZERO);
          if (column < 0)
            throw new Error(COL_GTR_EQ_ZERO);
          const decoded = decodedMappings(map);
          if (line >= decoded.length)
            return OMapping(null, null, null, null);
          const segments = decoded[line], index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
          if (index === -1)
            return OMapping(null, null, null, null);
          const segment = segments[index];
          if (segment.length === 1)
            return OMapping(null, null, null, null);
          const { names, resolvedSources } = map;
          return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
        }
        function generatedPositionFor(map, needle) {
          const { source, line, column, bias } = needle;
          return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
        }
        function allGeneratedPositionsFor(map, needle) {
          const { source, line, column, bias } = needle;
          return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
        }
        function eachMapping(map, cb) {
          const decoded = decodedMappings(map), { names, resolvedSources } = map;
          for (let i = 0;i < decoded.length; i++) {
            const line = decoded[i];
            for (let j = 0;j < line.length; j++) {
              const seg = line[j], generatedLine = i + 1, generatedColumn = seg[0];
              let source = null, originalLine = null, originalColumn = null, name = null;
              seg.length !== 1 && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), seg.length === 5 && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
            }
          }
        }
        function sourceIndex(map, source) {
          const { sources, resolvedSources } = map;
          let index = sources.indexOf(source);
          return index === -1 && (index = resolvedSources.indexOf(source)), index;
        }
        function sourceContentFor(map, source) {
          const { sourcesContent } = map;
          if (sourcesContent == null)
            return null;
          const index = sourceIndex(map, source);
          return index === -1 ? null : sourcesContent[index];
        }
        function isIgnored(map, source) {
          const { ignoreList } = map;
          if (ignoreList == null)
            return false;
          const index = sourceIndex(map, source);
          return index !== -1 && ignoreList.includes(index);
        }
        function presortedDecodedMap(map, mapUrl) {
          const tracer = new TraceMap(clone(map, []), mapUrl);
          return cast(tracer)._decoded = map.mappings, tracer;
        }
        function decodedMap(map) {
          return clone(map, decodedMappings(map));
        }
        function encodedMap(map) {
          return clone(map, encodedMappings(map));
        }
        function clone(map, mappings) {
          return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings, ignoreList: map.ignoreList || map.x_google_ignoreList };
        }
        function OMapping(source, line, column, name) {
          return { source, line, column, name };
        }
        function GMapping(line, column) {
          return { line, column };
        }
        function traceSegmentInternal(segments, memo, line, column, bias) {
          let index = memoizedBinarySearch(segments, column, memo, line);
          return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, index === -1 || index === segments.length ? -1 : index;
        }
        function sliceGeneratedPositions(segments, memo, line, column, bias) {
          let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
          if (found || bias !== LEAST_UPPER_BOUND || min++, min === -1 || min === segments.length)
            return [];
          const matchedColumn = found ? column : segments[min][COLUMN];
          found || (min = lowerBound(segments, matchedColumn, min));
          const max = upperBound(segments, matchedColumn, min), result = [];
          for (;min <= max; min++) {
            const segment = segments[min];
            result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
          }
          return result;
        }
        function generatedPosition(map, source, line, column, bias, all) {
          var _a;
          if (--line < 0)
            throw new Error(LINE_GTR_ZERO);
          if (column < 0)
            throw new Error(COL_GTR_EQ_ZERO);
          const { sources, resolvedSources } = map;
          let sourceIndex2 = sources.indexOf(source);
          if (sourceIndex2 === -1 && (sourceIndex2 = resolvedSources.indexOf(source)), sourceIndex2 === -1)
            return all ? [] : GMapping(null, null);
          const segments = ((_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState))))[sourceIndex2][line];
          if (segments == null)
            return all ? [] : GMapping(null, null);
          const memo = cast(map)._bySourceMemos[sourceIndex2];
          if (all)
            return sliceGeneratedPositions(segments, memo, line, column, bias);
          const index = traceSegmentInternal(segments, memo, line, column, bias);
          if (index === -1)
            return GMapping(null, null);
          const segment = segments[index];
          return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
        }
        exports3.AnyMap = AnyMap, exports3.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND, exports3.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND, exports3.TraceMap = TraceMap, exports3.allGeneratedPositionsFor = allGeneratedPositionsFor, exports3.decodedMap = decodedMap, exports3.decodedMappings = decodedMappings, exports3.eachMapping = eachMapping, exports3.encodedMap = encodedMap, exports3.encodedMappings = encodedMappings, exports3.generatedPositionFor = generatedPositionFor, exports3.isIgnored = isIgnored, exports3.originalPositionFor = originalPositionFor, exports3.presortedDecodedMap = presortedDecodedMap, exports3.sourceContentFor = sourceContentFor, exports3.traceSegment = traceSegment;
      })(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.5.0/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.2/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));
    }, "./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
      var _path = __webpack_require__2("path");
      function isInType(path4) {
        switch (path4.parent.type) {
          case "TSTypeReference":
          case "TSQualifiedName":
          case "TSExpressionWithTypeArguments":
          case "TSTypeQuery":
            return true;
          default:
            return false;
        }
      }
      module2.exports = function(_ref) {
        var types = _ref.types, decoratorExpressionForConstructor = function(decorator, param) {
          return function(className) {
            var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier(className), types.Identifier("undefined"), types.NumericLiteral(param.key)]), resultantDecoratorWithFallback = types.logicalExpression("||", resultantDecorator, types.Identifier(className)), assignment = types.assignmentExpression("=", types.Identifier(className), resultantDecoratorWithFallback);
            return types.expressionStatement(assignment);
          };
        }, decoratorExpressionForMethod = function(decorator, param) {
          return function(className, functionName) {
            var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier("".concat(className, ".prototype")), types.StringLiteral(functionName), types.NumericLiteral(param.key)]);
            return types.expressionStatement(resultantDecorator);
          };
        };
        return { visitor: { Program: function(path4, state) {
          var extension = (0, _path.extname)(state.file.opts.filename);
          extension !== ".ts" && extension !== ".tsx" || function() {
            var decorators = Object.create(null);
            path4.node.body.filter(function(it) {
              var { type, declaration } = it;
              switch (type) {
                case "ClassDeclaration":
                  return true;
                case "ExportNamedDeclaration":
                case "ExportDefaultDeclaration":
                  return declaration && declaration.type === "ClassDeclaration";
                default:
                  return false;
              }
            }).map(function(it) {
              return it.type === "ClassDeclaration" ? it : it.declaration;
            }).forEach(function(clazz) {
              clazz.body.body.forEach(function(body) {
                (body.params || []).forEach(function(param) {
                  (param.decorators || []).forEach(function(decorator) {
                    decorator.expression.callee ? decorators[decorator.expression.callee.name] = decorator : decorators[decorator.expression.name] = decorator;
                  });
                });
              });
            });
            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
            try {
              for (var _step, _iterator = path4.get("body")[Symbol.iterator]();!(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var stmt = _step.value;
                if (stmt.node.type === "ImportDeclaration") {
                  if (stmt.node.specifiers.length === 0)
                    continue;
                  var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                  try {
                    for (var _step2, _loop = function() {
                      var specifier = _step2.value, binding = stmt.scope.getBinding(specifier.local.name);
                      binding.referencePaths.length ? binding.referencePaths.reduce(function(prev, next) {
                        return prev || isInType(next);
                      }, false) && Object.keys(decorators).forEach(function(k) {
                        var decorator = decorators[k];
                        (decorator.expression.arguments || []).forEach(function(arg) {
                          arg.name === specifier.local.name && binding.referencePaths.push({ parent: decorator.expression });
                        });
                      }) : decorators[specifier.local.name] && binding.referencePaths.push({ parent: decorators[specifier.local.name] });
                    }, _iterator2 = stmt.node.specifiers[Symbol.iterator]();!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true)
                      _loop();
                  } catch (err) {
                    _didIteratorError2 = true, _iteratorError2 = err;
                  } finally {
                    try {
                      _iteratorNormalCompletion2 || _iterator2.return == null || _iterator2.return();
                    } finally {
                      if (_didIteratorError2)
                        throw _iteratorError2;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError = true, _iteratorError = err;
            } finally {
              try {
                _iteratorNormalCompletion || _iterator.return == null || _iterator.return();
              } finally {
                if (_didIteratorError)
                  throw _iteratorError;
              }
            }
          }();
        }, Function: function(path4) {
          var functionName = "";
          path4.node.id ? functionName = path4.node.id.name : path4.node.key && (functionName = path4.node.key.name), (path4.get("params") || []).slice().forEach(function(param) {
            var decorators = param.node.decorators || [], transformable = decorators.length;
            if (decorators.slice().forEach(function(decorator) {
              if (path4.type === "ClassMethod") {
                var classIdentifier, parentNode = path4.parentPath.parentPath, classDeclaration = path4.findParent(function(p) {
                  return p.type === "ClassDeclaration";
                });
                if (classDeclaration ? classIdentifier = classDeclaration.node.id.name : (parentNode.insertAfter(null), classIdentifier = function(path22) {
                  var assignment = path22.findParent(function(p) {
                    return p.node.type === "AssignmentExpression";
                  });
                  return assignment.node.right.type === "SequenceExpression" ? assignment.node.right.expressions[1].name : assignment.node.right.type === "ClassExpression" ? assignment.node.left.name : null;
                }(path4)), functionName === "constructor") {
                  var expression = decoratorExpressionForConstructor(decorator, param)(classIdentifier);
                  parentNode.insertAfter(expression);
                } else {
                  var _expression = decoratorExpressionForMethod(decorator, param)(classIdentifier, functionName);
                  parentNode.insertAfter(_expression);
                }
              } else {
                var className = path4.findParent(function(p) {
                  return p.node.type === "VariableDeclarator";
                }).node.id.name;
                if (functionName === className) {
                  var _expression2 = decoratorExpressionForConstructor(decorator, param)(className);
                  if (path4.parentKey === "body")
                    path4.insertAfter(_expression2);
                  else
                    path4.findParent(function(p) {
                      return p.parentKey === "body";
                    }).insertAfter(_expression2);
                } else {
                  var classParent = path4.findParent(function(p) {
                    return p.node.type === "CallExpression";
                  }), _expression3 = decoratorExpressionForMethod(decorator, param)(className, functionName);
                  classParent.insertAfter(_expression3);
                }
              }
            }), transformable) {
              var replacement = function(path22) {
                switch (path22.node.type) {
                  case "ObjectPattern":
                    return types.ObjectPattern(path22.node.properties);
                  case "AssignmentPattern":
                    return types.AssignmentPattern(path22.node.left, path22.node.right);
                  case "TSParameterProperty":
                    return types.Identifier(path22.node.parameter.name);
                  default:
                    return types.Identifier(path22.node.name);
                }
              }(param);
              param.replaceWith(replacement);
            }
          });
        } } };
      };
    }, "./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js": (__unused_webpack_module, exports2) => {
      var decodeBase64;
      function Converter(sm, opts) {
        (opts = opts || {}).hasComment && (sm = function(sm2) {
          return sm2.split(",").pop();
        }(sm)), opts.encoding === "base64" ? sm = decodeBase64(sm) : opts.encoding === "uri" && (sm = decodeURIComponent(sm)), (opts.isJSON || opts.encoding) && (sm = JSON.parse(sm)), this.sourcemap = sm;
      }
      function makeConverter(sm) {
        return new Converter(sm, { isJSON: true });
      }
      Object.defineProperty(exports2, "commentRegex", { get: function() {
        return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/gm;
      } }), Object.defineProperty(exports2, "mapFileCommentRegex", { get: function() {
        return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/gm;
      } }), decodeBase64 = typeof Buffer != "undefined" ? typeof Buffer.from == "function" ? function(base64) {
        return Buffer.from(base64, "base64").toString();
      } : function(base64) {
        if (typeof value == "number")
          throw new TypeError("The value to decode must not be of type number.");
        return new Buffer(base64, "base64").toString();
      } : function(base64) {
        return decodeURIComponent(escape(atob(base64)));
      }, Converter.prototype.toJSON = function(space) {
        return JSON.stringify(this.sourcemap, null, space);
      }, typeof Buffer != "undefined" ? typeof Buffer.from == "function" ? Converter.prototype.toBase64 = function() {
        var json = this.toJSON();
        return Buffer.from(json, "utf8").toString("base64");
      } : Converter.prototype.toBase64 = function() {
        var json = this.toJSON();
        if (typeof json == "number")
          throw new TypeError("The json to encode must not be of type number.");
        return new Buffer(json, "utf8").toString("base64");
      } : Converter.prototype.toBase64 = function() {
        var json = this.toJSON();
        return btoa(unescape(encodeURIComponent(json)));
      }, Converter.prototype.toURI = function() {
        var json = this.toJSON();
        return encodeURIComponent(json);
      }, Converter.prototype.toComment = function(options) {
        var encoding, content, data;
        return options != null && options.encoding === "uri" ? (encoding = "", content = this.toURI()) : (encoding = ";base64", content = this.toBase64()), data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content, options != null && options.multiline ? "/*# " + data + " */" : "//# " + data;
      }, Converter.prototype.toObject = function() {
        return JSON.parse(this.toJSON());
      }, Converter.prototype.addProperty = function(key, value2) {
        if (this.sourcemap.hasOwnProperty(key))
          throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
        return this.setProperty(key, value2);
      }, Converter.prototype.setProperty = function(key, value2) {
        return this.sourcemap[key] = value2, this;
      }, Converter.prototype.getProperty = function(key) {
        return this.sourcemap[key];
      }, exports2.fromObject = function(obj) {
        return new Converter(obj);
      }, exports2.fromJSON = function(json) {
        return new Converter(json, { isJSON: true });
      }, exports2.fromURI = function(uri) {
        return new Converter(uri, { encoding: "uri" });
      }, exports2.fromBase64 = function(base64) {
        return new Converter(base64, { encoding: "base64" });
      }, exports2.fromComment = function(comment) {
        var m;
        return new Converter(comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), { encoding: (m = exports2.commentRegex.exec(comment)) && m[4] || "uri", hasComment: true });
      }, exports2.fromMapFileComment = function(comment, read) {
        if (typeof read == "string")
          throw new Error("String directory paths are no longer supported with `fromMapFileComment`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
        var sm = function(sm2, read2) {
          var r = exports2.mapFileCommentRegex.exec(sm2), filename = r[1] || r[2];
          try {
            return (sm2 = read2(filename)) != null && typeof sm2.catch == "function" ? sm2.catch(throwError) : sm2;
          } catch (e) {
            throwError(e);
          }
          function throwError(e) {
            throw new Error("An error occurred while trying to read the map file at " + filename + `
` + e.stack);
          }
        }(comment, read);
        return sm != null && typeof sm.then == "function" ? sm.then(makeConverter) : makeConverter(sm);
      }, exports2.fromSource = function(content) {
        var m = content.match(exports2.commentRegex);
        return m ? exports2.fromComment(m.pop()) : null;
      }, exports2.fromMapFileSource = function(content, read) {
        if (typeof read == "string")
          throw new Error("String directory paths are no longer supported with `fromMapFileSource`\nPlease review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
        var m = content.match(exports2.mapFileCommentRegex);
        return m ? exports2.fromMapFileComment(m.pop(), read) : null;
      }, exports2.removeComments = function(src) {
        return src.replace(exports2.commentRegex, "");
      }, exports2.removeMapFileComments = function(src) {
        return src.replace(exports2.mapFileCommentRegex, "");
      }, exports2.generateMapFileComment = function(file, options) {
        var data = "sourceMappingURL=" + file;
        return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
      };
    }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js": (module2, exports2, __webpack_require__2) => {
      exports2.formatArgs = function(args) {
        if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff), !this.useColors)
          return;
        const c = "color: " + this.color;
        args.splice(1, 0, c, "color: inherit");
        let index = 0, lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, (match) => {
          match !== "%%" && (index++, match === "%c" && (lastC = index));
        }), args.splice(lastC, 0, c);
      }, exports2.save = function(namespaces) {
        try {
          namespaces ? exports2.storage.setItem("debug", namespaces) : exports2.storage.removeItem("debug");
        } catch (error) {
        }
      }, exports2.load = function() {
        let r;
        try {
          r = exports2.storage.getItem("debug");
        } catch (error) {
        }
        !r && typeof process != "undefined" && "env" in process && (r = process.env.DEBUG);
        return r;
      }, exports2.useColors = function() {
        if (typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
          return true;
        if (typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
          return false;
        let m;
        return typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }, exports2.storage = function() {
        try {
          return localStorage;
        } catch (error) {
        }
      }(), exports2.destroy = (() => {
        let warned = false;
        return () => {
          warned || (warned = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
        };
      })(), exports2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], exports2.log = console.debug || console.log || (() => {
      }), module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports2);
      const { formatters } = module2.exports;
      formatters.j = function(v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message;
        }
      };
    }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
      module2.exports = function(env) {
        function createDebug(namespace) {
          let prevTime, namespacesCache, enabledCache, enableOverride = null;
          function debug(...args) {
            if (!debug.enabled)
              return;
            const self = debug, curr = Number(new Date), ms = curr - (prevTime || curr);
            self.diff = ms, self.prev = prevTime, self.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), typeof args[0] != "string" && args.unshift("%O");
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
              if (match === "%%")
                return "%";
              index++;
              const formatter = createDebug.formatters[format];
              if (typeof formatter == "function") {
                const val = args[index];
                match = formatter.call(self, val), args.splice(index, 1), index--;
              }
              return match;
            }), createDebug.formatArgs.call(self, args);
            (self.log || createDebug.log).apply(self, args);
          }
          return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", { enumerable: true, configurable: false, get: () => enableOverride !== null ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache), set: (v) => {
            enableOverride = v;
          } }), typeof createDebug.init == "function" && createDebug.init(debug), debug;
        }
        function extend(namespace, delimiter) {
          const newDebug = createDebug(this.namespace + (delimiter === undefined ? ":" : delimiter) + namespace);
          return newDebug.log = this.log, newDebug;
        }
        function matchesTemplate(search, template) {
          let searchIndex = 0, templateIndex = 0, starIndex = -1, matchIndex = 0;
          for (;searchIndex < search.length; )
            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*"))
              template[templateIndex] === "*" ? (starIndex = templateIndex, matchIndex = searchIndex, templateIndex++) : (searchIndex++, templateIndex++);
            else {
              if (starIndex === -1)
                return false;
              templateIndex = starIndex + 1, matchIndex++, searchIndex = matchIndex;
            }
          for (;templateIndex < template.length && template[templateIndex] === "*"; )
            templateIndex++;
          return templateIndex === template.length;
        }
        return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
          if (val instanceof Error)
            return val.stack || val.message;
          return val;
        }, createDebug.disable = function() {
          const namespaces = [...createDebug.names, ...createDebug.skips.map((namespace) => "-" + namespace)].join(",");
          return createDebug.enable(""), namespaces;
        }, createDebug.enable = function(namespaces) {
          createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
          const split = (typeof namespaces == "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
          for (const ns of split)
            ns[0] === "-" ? createDebug.skips.push(ns.slice(1)) : createDebug.names.push(ns);
        }, createDebug.enabled = function(name) {
          for (const skip of createDebug.skips)
            if (matchesTemplate(name, skip))
              return false;
          for (const ns of createDebug.names)
            if (matchesTemplate(name, ns))
              return true;
          return false;
        }, createDebug.humanize = __webpack_require__2("./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"), createDebug.destroy = function() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }, Object.keys(env).forEach((key) => {
          createDebug[key] = env[key];
        }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, createDebug.selectColor = function(namespace) {
          let hash = 0;
          for (let i = 0;i < namespace.length; i++)
            hash = (hash << 5) - hash + namespace.charCodeAt(i), hash |= 0;
          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }, createDebug.enable(createDebug.load()), createDebug;
      };
    }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
      typeof process == "undefined" || process.type === "renderer" || false || process.__nwjs ? module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js") : module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js");
    }, "./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js": (module2, exports2, __webpack_require__2) => {
      const tty = __webpack_require__2("tty"), util = __webpack_require__2("util");
      exports2.init = function(debug) {
        debug.inspectOpts = {};
        const keys = Object.keys(exports2.inspectOpts);
        for (let i = 0;i < keys.length; i++)
          debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
      }, exports2.log = function(...args) {
        return process.stderr.write(util.formatWithOptions(exports2.inspectOpts, ...args) + `
`);
      }, exports2.formatArgs = function(args) {
        const { namespace: name, useColors } = this;
        if (useColors) {
          const c = this.color, colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c), prefix = `  ${colorCode};1m${name} \x1B[0m`;
          args[0] = prefix + args[0].split(`
`).join(`
` + prefix), args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
        } else
          args[0] = function() {
            if (exports2.inspectOpts.hideDate)
              return "";
            return new Date().toISOString() + " ";
          }() + name + " " + args[0];
      }, exports2.save = function(namespaces) {
        namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
      }, exports2.load = function() {
        return process.env.DEBUG;
      }, exports2.useColors = function() {
        return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
      }, exports2.destroy = util.deprecate(() => {
      }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), exports2.colors = [6, 2, 3, 4, 5, 1];
      try {
        const supportsColor = __webpack_require__2("./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");
        supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports2.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
      } catch (error) {
      }
      exports2.inspectOpts = Object.keys(process.env).filter((key) => /^debug_/i.test(key)).reduce((obj, key) => {
        const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => k.toUpperCase());
        let val = process.env[key];
        return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && (val === "null" ? null : Number(val)), obj[prop] = val, obj;
      }, {}), module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js")(exports2);
      const { formatters } = module2.exports;
      formatters.o = function(v) {
        return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts).split(`
`).map((str) => str.trim()).join(" ");
      }, formatters.O = function(v) {
        return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts);
      };
    }, "./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js": (module2) => {
      const GENSYNC_START = Symbol.for("gensync:v1:start"), GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
      function assertTypeof(type, name, value2, allowUndefined) {
        if (typeof value2 === type || allowUndefined && value2 === undefined)
          return;
        let msg;
        throw msg = allowUndefined ? `Expected opts.${name} to be either a ${type}, or undefined.` : `Expected opts.${name} to be a ${type}.`, makeError(msg, "GENSYNC_OPTIONS_ERROR");
      }
      function makeError(msg, code) {
        return Object.assign(new Error(msg), { code });
      }
      function buildOperation({ name, arity, sync, async }) {
        return setFunctionMetadata(name, arity, function* (...args) {
          const resume = yield GENSYNC_START;
          if (!resume) {
            return sync.call(this, args);
          }
          let result;
          try {
            async.call(this, args, (value2) => {
              result || (result = { value: value2 }, resume());
            }, (err) => {
              result || (result = { err }, resume());
            });
          } catch (err) {
            result = { err }, resume();
          }
          if (yield GENSYNC_SUSPEND, result.hasOwnProperty("err"))
            throw result.err;
          return result.value;
        });
      }
      function evaluateSync(gen) {
        let value2;
        for (;!({ value: value2 } = gen.next()).done; )
          assertStart(value2, gen);
        return value2;
      }
      function evaluateAsync(gen, resolve, reject) {
        (function step() {
          try {
            let value2;
            for (;!({ value: value2 } = gen.next()).done; ) {
              assertStart(value2, gen);
              let sync = true, didSyncResume = false;
              const out = gen.next(() => {
                sync ? didSyncResume = true : step();
              });
              if (sync = false, assertSuspend(out, gen), !didSyncResume)
                return;
            }
            return resolve(value2);
          } catch (err) {
            return reject(err);
          }
        })();
      }
      function assertStart(value2, gen) {
        value2 !== GENSYNC_START && throwError(gen, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value2)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, "GENSYNC_EXPECTED_START"));
      }
      function assertSuspend({ value: value2, done }, gen) {
        (done || value2 !== GENSYNC_SUSPEND) && throwError(gen, makeError(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value2)}. If you get this, it is probably a gensync bug.`, "GENSYNC_EXPECTED_SUSPEND"));
      }
      function throwError(gen, err) {
        throw gen.throw && gen.throw(err), err;
      }
      function setFunctionMetadata(name, arity, fn) {
        if (typeof name == "string") {
          const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
          nameDesc && !nameDesc.configurable || Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, { configurable: true, value: name }));
        }
        if (typeof arity == "number") {
          const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
          lengthDesc && !lengthDesc.configurable || Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, { configurable: true, value: arity }));
        }
        return fn;
      }
      module2.exports = Object.assign(function(optsOrFn) {
        let genFn = optsOrFn;
        return genFn = typeof optsOrFn != "function" ? function({ name, arity, sync, async, errback }) {
          if (assertTypeof("string", "name", name, true), assertTypeof("number", "arity", arity, true), assertTypeof("function", "sync", sync), assertTypeof("function", "async", async, true), assertTypeof("function", "errback", errback, true), async && errback)
            throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", "GENSYNC_OPTIONS_ERROR");
          if (typeof name != "string") {
            let fnName;
            errback && errback.name && errback.name !== "errback" && (fnName = errback.name), async && async.name && async.name !== "async" && (fnName = async.name.replace(/Async$/, "")), sync && sync.name && sync.name !== "sync" && (fnName = sync.name.replace(/Sync$/, "")), typeof fnName == "string" && (name = fnName);
          }
          typeof arity != "number" && (arity = sync.length);
          return buildOperation({ name, arity, sync: function(args) {
            return sync.apply(this, args);
          }, async: function(args, resolve, reject) {
            async ? async.apply(this, args).then(resolve, reject) : errback ? errback.call(this, ...args, (err, value2) => {
              err == null ? resolve(value2) : reject(err);
            }) : resolve(sync.apply(this, args));
          } });
        }(optsOrFn) : function(genFn2) {
          return setFunctionMetadata(genFn2.name, genFn2.length, function(...args) {
            return genFn2.apply(this, args);
          });
        }(optsOrFn), Object.assign(genFn, function(genFn2) {
          const fns = { sync: function(...args) {
            return evaluateSync(genFn2.apply(this, args));
          }, async: function(...args) {
            return new Promise((resolve, reject) => {
              evaluateAsync(genFn2.apply(this, args), resolve, reject);
            });
          }, errback: function(...args) {
            const cb = args.pop();
            if (typeof cb != "function")
              throw makeError("Asynchronous function called without callback", "GENSYNC_ERRBACK_NO_CALLBACK");
            let gen;
            try {
              gen = genFn2.apply(this, args);
            } catch (err) {
              return void cb(err);
            }
            evaluateAsync(gen, (val) => cb(undefined, val), (err) => cb(err));
          } };
          return fns;
        }(genFn));
      }, { all: buildOperation({ name: "all", arity: 1, sync: function(args) {
        return Array.from(args[0]).map((item) => evaluateSync(item));
      }, async: function(args, resolve, reject) {
        const items = Array.from(args[0]);
        if (items.length === 0)
          return void Promise.resolve().then(() => resolve([]));
        let count = 0;
        const results = items.map(() => {
        });
        items.forEach((item, i) => {
          evaluateAsync(item, (val) => {
            results[i] = val, count += 1, count === results.length && resolve(results);
          }, reject);
        });
      } }), race: buildOperation({ name: "race", arity: 1, sync: function(args) {
        const items = Array.from(args[0]);
        if (items.length === 0)
          throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
        return evaluateSync(items[0]);
      }, async: function(args, resolve, reject) {
        const items = Array.from(args[0]);
        if (items.length === 0)
          throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
        for (const item of items)
          evaluateAsync(item, resolve, reject);
      } }) });
    }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
      module2.exports = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");
    }, "./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js": (module2) => {
      module2.exports = (flag, argv = process.argv) => {
        const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--", position = argv.indexOf(prefix + flag), terminatorPosition = argv.indexOf("--");
        return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
      };
    }, "./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js": (module2) => {
      const object = {}, hasOwnProperty2 = object.hasOwnProperty, forOwn = (object2, callback) => {
        for (const key in object2)
          hasOwnProperty2.call(object2, key) && callback(key, object2[key]);
      }, fourHexEscape = (hex) => "\\u" + ("0000" + hex).slice(-4), hexadecimal = (code, lowercase) => {
        let hexadecimal2 = code.toString(16);
        return lowercase ? hexadecimal2 : hexadecimal2.toUpperCase();
      }, toString = object.toString, isArray = Array.isArray, isBigInt = (value2) => typeof value2 == "bigint", singleEscapes = { "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t" }, regexSingleEscape = /[\\\b\f\n\r\t]/, regexDigit = /[0-9]/, regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/, escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g, escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g, jsesc = (argument, options) => {
        const increaseIndentation = () => {
          oldIndent = indent, ++options.indentLevel, indent = options.indent.repeat(options.indentLevel);
        }, defaults = { escapeEverything: false, minimal: false, isScriptContext: false, quotes: "single", wrap: false, es6: false, json: false, compact: true, lowercaseHex: false, numbers: "decimal", indent: "\t", indentLevel: 0, __inline1__: false, __inline2__: false }, json = options && options.json;
        var destination, source;
        json && (defaults.quotes = "double", defaults.wrap = true), destination = defaults, (options = (source = options) ? (forOwn(source, (key, value2) => {
          destination[key] = value2;
        }), destination) : destination).quotes != "single" && options.quotes != "double" && options.quotes != "backtick" && (options.quotes = "single");
        const quote = options.quotes == "double" ? '"' : options.quotes == "backtick" ? "`" : "'", compact = options.compact, lowercaseHex = options.lowercaseHex;
        let indent = options.indent.repeat(options.indentLevel), oldIndent = "";
        const { __inline1__: inline1, __inline2__: inline2 } = options, newLine = compact ? "" : `
`;
        let result, isEmpty = true;
        const useBinNumbers = options.numbers == "binary", useOctNumbers = options.numbers == "octal", useDecNumbers = options.numbers == "decimal", useHexNumbers = options.numbers == "hexadecimal";
        if (json && argument && ((value2) => typeof value2 == "function")(argument.toJSON) && (argument = argument.toJSON()), !((value2) => typeof value2 == "string" || toString.call(value2) == "[object String]")(argument)) {
          if (((value2) => toString.call(value2) == "[object Map]")(argument))
            return argument.size == 0 ? "new Map()" : (compact || (options.__inline1__ = true, options.__inline2__ = false), "new Map(" + jsesc(Array.from(argument), options) + ")");
          if (((value2) => toString.call(value2) == "[object Set]")(argument))
            return argument.size == 0 ? "new Set()" : "new Set(" + jsesc(Array.from(argument), options) + ")";
          if (((value2) => typeof Buffer == "function" && Buffer.isBuffer(value2))(argument))
            return argument.length == 0 ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
          if (isArray(argument))
            return result = [], options.wrap = true, inline1 && (options.__inline1__ = false, options.__inline2__ = true), inline2 || increaseIndentation(), ((array, callback) => {
              const length = array.length;
              let index = -1;
              for (;++index < length; )
                callback(array[index]);
            })(argument, (value2) => {
              isEmpty = false, inline2 && (options.__inline2__ = false), result.push((compact || inline2 ? "" : indent) + jsesc(value2, options));
            }), isEmpty ? "[]" : inline2 ? "[" + result.join(", ") + "]" : "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
          if (((value2) => typeof value2 == "number" || toString.call(value2) == "[object Number]")(argument) || isBigInt(argument)) {
            if (json)
              return JSON.stringify(Number(argument));
            let result2;
            if (useDecNumbers)
              result2 = String(argument);
            else if (useHexNumbers) {
              let hexadecimal2 = argument.toString(16);
              lowercaseHex || (hexadecimal2 = hexadecimal2.toUpperCase()), result2 = "0x" + hexadecimal2;
            } else
              useBinNumbers ? result2 = "0b" + argument.toString(2) : useOctNumbers && (result2 = "0o" + argument.toString(8));
            return isBigInt(argument) ? result2 + "n" : result2;
          }
          return isBigInt(argument) ? json ? JSON.stringify(Number(argument)) : argument + "n" : ((value2) => toString.call(value2) == "[object Object]")(argument) ? (result = [], options.wrap = true, increaseIndentation(), forOwn(argument, (key, value2) => {
            isEmpty = false, result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value2, options));
          }), isEmpty ? "{}" : "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}") : json ? JSON.stringify(argument) || "null" : String(argument);
        }
        const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
        return result = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {
          if (pair) {
            if (options.minimal)
              return pair;
            const first = pair.charCodeAt(0), second = pair.charCodeAt(1);
            if (options.es6) {
              return "\\u{" + hexadecimal(1024 * (first - 55296) + second - 56320 + 65536, lowercaseHex) + "}";
            }
            return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
          }
          if (lone)
            return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
          if (char == "\x00" && !json && !regexDigit.test(string.charAt(index + 1)))
            return "\\0";
          if (quoteChar)
            return quoteChar == quote || options.escapeEverything ? "\\" + quoteChar : quoteChar;
          if (regexSingleEscape.test(char))
            return singleEscapes[char];
          if (options.minimal && !regexWhitespace.test(char))
            return char;
          const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
          return json || hex.length > 2 ? fourHexEscape(hex) : "\\x" + ("00" + hex).slice(-2);
        }), quote == "`" && (result = result.replace(/\$\{/g, "\\${")), options.isScriptContext && (result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--")), options.wrap && (result = quote + result + quote), result;
      };
      jsesc.version = "3.0.2", module2.exports = jsesc;
    }, "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive": (module2) => {
      function webpackEmptyAsyncContext(req) {
        return Promise.resolve().then(() => {
          var e = new Error("Cannot find module '" + req + "'");
          throw e.code = "MODULE_NOT_FOUND", e;
        });
      }
      webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.7.3/node_modules/mlly/dist lazy recursive", module2.exports = webpackEmptyAsyncContext;
    }, "./node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js": (module2) => {
      var s = 1000, m = 60 * s, h = 60 * m, d = 24 * h, w = 7 * d, y = 365.25 * d;
      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= 1.5 * n;
        return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
      }
      module2.exports = function(val, options) {
        options = options || {};
        var type = typeof val;
        if (type === "string" && val.length > 0)
          return function(str) {
            if ((str = String(str)).length > 100)
              return;
            var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
            if (!match)
              return;
            var n = parseFloat(match[1]);
            switch ((match[2] || "ms").toLowerCase()) {
              case "years":
              case "year":
              case "yrs":
              case "yr":
              case "y":
                return n * y;
              case "weeks":
              case "week":
              case "w":
                return n * w;
              case "days":
              case "day":
              case "d":
                return n * d;
              case "hours":
              case "hour":
              case "hrs":
              case "hr":
              case "h":
                return n * h;
              case "minutes":
              case "minute":
              case "mins":
              case "min":
              case "m":
                return n * m;
              case "seconds":
              case "second":
              case "secs":
              case "sec":
              case "s":
                return n * s;
              case "milliseconds":
              case "millisecond":
              case "msecs":
              case "msec":
              case "ms":
                return n;
              default:
                return;
            }
          }(val);
        if (type === "number" && isFinite(val))
          return options.long ? function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d)
              return plural(ms, msAbs, d, "day");
            if (msAbs >= h)
              return plural(ms, msAbs, h, "hour");
            if (msAbs >= m)
              return plural(ms, msAbs, m, "minute");
            if (msAbs >= s)
              return plural(ms, msAbs, s, "second");
            return ms + " ms";
          }(val) : function(ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d)
              return Math.round(ms / d) + "d";
            if (msAbs >= h)
              return Math.round(ms / h) + "h";
            if (msAbs >= m)
              return Math.round(ms / m) + "m";
            if (msAbs >= s)
              return Math.round(ms / s) + "s";
            return ms + "ms";
          }(val);
        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
      };
    }, "./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js": (module2, exports2) => {
      var debug;
      exports2 = module2.exports = SemVer, debug = typeof process == "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER"), console.log.apply(console, args);
      } : function() {
      }, exports2.SEMVER_SPEC_VERSION = "2.0.0";
      var MAX_LENGTH = 256, MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6, re = exports2.re = [], safeRe = exports2.safeRe = [], src = exports2.src = [], t = exports2.tokens = {}, R = 0;
      function tok(n) {
        t[n] = R++;
      }
      var safeRegexReplacements = [["\\s", 1], ["\\d", MAX_LENGTH], ["[a-zA-Z0-9-]", MAX_SAFE_BUILD_LENGTH]];
      function makeSafeRe(value2) {
        for (var i2 = 0;i2 < safeRegexReplacements.length; i2++) {
          var token = safeRegexReplacements[i2][0], max = safeRegexReplacements[i2][1];
          value2 = value2.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
        }
        return value2;
      }
      tok("NUMERICIDENTIFIER"), src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), src[t.NUMERICIDENTIFIERLOOSE] = "\\d+", tok("NONNUMERICIDENTIFIER"), src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", tok("MAINVERSION"), src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")", tok("MAINVERSIONLOOSE"), src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")", tok("PRERELEASEIDENTIFIER"), src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASEIDENTIFIERLOOSE"), src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASE"), src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))", tok("PRERELEASELOOSE"), src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))", tok("BUILDIDENTIFIER"), src[t.BUILDIDENTIFIER] = "[a-zA-Z0-9-]+", tok("BUILD"), src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))", tok("FULL"), tok("FULLPLAIN"), src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?", src[t.FULL] = "^" + src[t.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?", tok("LOOSE"), src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$", tok("GTLT"), src[t.GTLT] = "((?:<|>)?=?)", tok("XRANGEIDENTIFIERLOOSE"), src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", tok("XRANGEIDENTIFIER"), src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*", tok("XRANGEPLAIN"), src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGEPLAINLOOSE"), src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGE"), src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$", tok("XRANGELOOSE"), src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$", tok("COERCE"), src[t.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", tok("COERCERTL"), re[t.COERCERTL] = new RegExp(src[t.COERCE], "g"), safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), "g"), tok("LONETILDE"), src[t.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+", re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g"), safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), "g");
      tok("TILDE"), src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$", tok("TILDELOOSE"), src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$", tok("LONECARET"), src[t.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+", re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g"), safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), "g");
      tok("CARET"), src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$", tok("CARETLOOSE"), src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$", tok("COMPARATORLOOSE"), src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$", tok("COMPARATOR"), src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$", tok("COMPARATORTRIM"), src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")", re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g"), safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), "g");
      tok("HYPHENRANGE"), src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$", tok("HYPHENRANGELOOSE"), src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$", tok("STAR"), src[t.STAR] = "(<|>)?=?\\s*\\*";
      for (var i = 0;i < R; i++)
        debug(i, src[i]), re[i] || (re[i] = new RegExp(src[i]), safeRe[i] = new RegExp(makeSafeRe(src[i])));
      function parse(version, options) {
        if (options && typeof options == "object" || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer)
          return version;
        if (typeof version != "string")
          return null;
        if (version.length > MAX_LENGTH)
          return null;
        if (!(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]).test(version))
          return null;
        try {
          return new SemVer(version, options);
        } catch (er) {
          return null;
        }
      }
      function SemVer(version, options) {
        if (options && typeof options == "object" || (options = { loose: !!options, includePrerelease: false }), version instanceof SemVer) {
          if (version.loose === options.loose)
            return version;
          version = version.version;
        } else if (typeof version != "string")
          throw new TypeError("Invalid Version: " + version);
        if (version.length > MAX_LENGTH)
          throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
        if (!(this instanceof SemVer))
          return new SemVer(version, options);
        debug("SemVer", version, options), this.options = options, this.loose = !!options.loose;
        var m = version.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
        if (!m)
          throw new TypeError("Invalid Version: " + version);
        if (this.raw = version, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
          throw new TypeError("Invalid major version");
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
          throw new TypeError("Invalid minor version");
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
          throw new TypeError("Invalid patch version");
        m[4] ? this.prerelease = m[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER)
              return num;
          }
          return id;
        }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
      }
      exports2.parse = parse, exports2.valid = function(version, options) {
        var v = parse(version, options);
        return v ? v.version : null;
      }, exports2.clean = function(version, options) {
        var s = parse(version.trim().replace(/^[=v]+/, ""), options);
        return s ? s.version : null;
      }, exports2.SemVer = SemVer, SemVer.prototype.format = function() {
        return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
      }, SemVer.prototype.toString = function() {
        return this.version;
      }, SemVer.prototype.compare = function(other) {
        return debug("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), this.compareMain(other) || this.comparePre(other);
      }, SemVer.prototype.compareMain = function(other) {
        return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }, SemVer.prototype.comparePre = function(other) {
        if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
          return -1;
        if (!this.prerelease.length && other.prerelease.length)
          return 1;
        if (!this.prerelease.length && !other.prerelease.length)
          return 0;
        var i2 = 0;
        do {
          var a = this.prerelease[i2], b = other.prerelease[i2];
          if (debug("prerelease compare", i2, a, b), a === undefined && b === undefined)
            return 0;
          if (b === undefined)
            return 1;
          if (a === undefined)
            return -1;
          if (a !== b)
            return compareIdentifiers(a, b);
        } while (++i2);
      }, SemVer.prototype.compareBuild = function(other) {
        other instanceof SemVer || (other = new SemVer(other, this.options));
        var i2 = 0;
        do {
          var a = this.build[i2], b = other.build[i2];
          if (debug("prerelease compare", i2, a, b), a === undefined && b === undefined)
            return 0;
          if (b === undefined)
            return 1;
          if (a === undefined)
            return -1;
          if (a !== b)
            return compareIdentifiers(a, b);
        } while (++i2);
      }, SemVer.prototype.inc = function(release, identifier) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
            break;
          case "preminor":
            this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
            break;
          case "prepatch":
            this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
            break;
          case "prerelease":
            this.prerelease.length === 0 && this.inc("patch", identifier), this.inc("pre", identifier);
            break;
          case "major":
            this.minor === 0 && this.patch === 0 && this.prerelease.length !== 0 || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
            break;
          case "minor":
            this.patch === 0 && this.prerelease.length !== 0 || this.minor++, this.patch = 0, this.prerelease = [];
            break;
          case "patch":
            this.prerelease.length === 0 && this.patch++, this.prerelease = [];
            break;
          case "pre":
            if (this.prerelease.length === 0)
              this.prerelease = [0];
            else {
              for (var i2 = this.prerelease.length;--i2 >= 0; )
                typeof this.prerelease[i2] == "number" && (this.prerelease[i2]++, i2 = -2);
              i2 === -1 && this.prerelease.push(0);
            }
            identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
            break;
          default:
            throw new Error("invalid increment argument: " + release);
        }
        return this.format(), this.raw = this.version, this;
      }, exports2.inc = function(version, release, loose, identifier) {
        typeof loose == "string" && (identifier = loose, loose = undefined);
        try {
          return new SemVer(version, loose).inc(release, identifier).version;
        } catch (er) {
          return null;
        }
      }, exports2.diff = function(version1, version2) {
        if (eq(version1, version2))
          return null;
        var v1 = parse(version1), v2 = parse(version2), prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1)
          if ((key === "major" || key === "minor" || key === "patch") && v1[key] !== v2[key])
            return prefix + key;
        return defaultResult;
      }, exports2.compareIdentifiers = compareIdentifiers;
      var numeric = /^[0-9]+$/;
      function compareIdentifiers(a, b) {
        var anum = numeric.test(a), bnum = numeric.test(b);
        return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
      }
      function compare(a, b, loose) {
        return new SemVer(a, loose).compare(new SemVer(b, loose));
      }
      function gt(a, b, loose) {
        return compare(a, b, loose) > 0;
      }
      function lt(a, b, loose) {
        return compare(a, b, loose) < 0;
      }
      function eq(a, b, loose) {
        return compare(a, b, loose) === 0;
      }
      function neq(a, b, loose) {
        return compare(a, b, loose) !== 0;
      }
      function gte(a, b, loose) {
        return compare(a, b, loose) >= 0;
      }
      function lte(a, b, loose) {
        return compare(a, b, loose) <= 0;
      }
      function cmp(a, op, b, loose) {
        switch (op) {
          case "===":
            return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a === b;
          case "!==":
            return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a !== b;
          case "":
          case "=":
          case "==":
            return eq(a, b, loose);
          case "!=":
            return neq(a, b, loose);
          case ">":
            return gt(a, b, loose);
          case ">=":
            return gte(a, b, loose);
          case "<":
            return lt(a, b, loose);
          case "<=":
            return lte(a, b, loose);
          default:
            throw new TypeError("Invalid operator: " + op);
        }
      }
      function Comparator(comp, options) {
        if (options && typeof options == "object" || (options = { loose: !!options, includePrerelease: false }), comp instanceof Comparator) {
          if (comp.loose === !!options.loose)
            return comp;
          comp = comp.value;
        }
        if (!(this instanceof Comparator))
          return new Comparator(comp, options);
        comp = comp.trim().split(/\s+/).join(" "), debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
      }
      exports2.rcompareIdentifiers = function(a, b) {
        return compareIdentifiers(b, a);
      }, exports2.major = function(a, loose) {
        return new SemVer(a, loose).major;
      }, exports2.minor = function(a, loose) {
        return new SemVer(a, loose).minor;
      }, exports2.patch = function(a, loose) {
        return new SemVer(a, loose).patch;
      }, exports2.compare = compare, exports2.compareLoose = function(a, b) {
        return compare(a, b, true);
      }, exports2.compareBuild = function(a, b, loose) {
        var versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
        return versionA.compare(versionB) || versionA.compareBuild(versionB);
      }, exports2.rcompare = function(a, b, loose) {
        return compare(b, a, loose);
      }, exports2.sort = function(list, loose) {
        return list.sort(function(a, b) {
          return exports2.compareBuild(a, b, loose);
        });
      }, exports2.rsort = function(list, loose) {
        return list.sort(function(a, b) {
          return exports2.compareBuild(b, a, loose);
        });
      }, exports2.gt = gt, exports2.lt = lt, exports2.eq = eq, exports2.neq = neq, exports2.gte = gte, exports2.lte = lte, exports2.cmp = cmp, exports2.Comparator = Comparator;
      var ANY = {};
      function Range(range, options) {
        if (options && typeof options == "object" || (options = { loose: !!options, includePrerelease: false }), range instanceof Range)
          return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
        if (range instanceof Comparator)
          return new Range(range.value, options);
        if (!(this instanceof Range))
          return new Range(range, options);
        if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range.trim().split(/\s+/).join(" "), this.set = this.raw.split("||").map(function(range2) {
          return this.parseRange(range2.trim());
        }, this).filter(function(c) {
          return c.length;
        }), !this.set.length)
          throw new TypeError("Invalid SemVer Range: " + this.raw);
        this.format();
      }
      function isSatisfiable(comparators, options) {
        for (var result = true, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop();result && remainingComparators.length; )
          result = remainingComparators.every(function(otherComparator) {
            return testComparator.intersects(otherComparator, options);
          }), testComparator = remainingComparators.pop();
        return result;
      }
      function isX(id) {
        return !id || id.toLowerCase() === "x" || id === "*";
      }
      function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
        return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
      }
      function testSet(set, version, options) {
        for (var i2 = 0;i2 < set.length; i2++)
          if (!set[i2].test(version))
            return false;
        if (version.prerelease.length && !options.includePrerelease) {
          for (i2 = 0;i2 < set.length; i2++)
            if (debug(set[i2].semver), set[i2].semver !== ANY && set[i2].semver.prerelease.length > 0) {
              var allowed = set[i2].semver;
              if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch)
                return true;
            }
          return false;
        }
        return true;
      }
      function satisfies(version, range, options) {
        try {
          range = new Range(range, options);
        } catch (er) {
          return false;
        }
        return range.test(version);
      }
      function outside(version, range, hilo, options) {
        var gtfn, ltefn, ltfn, comp, ecomp;
        switch (version = new SemVer(version, options), range = new Range(range, options), hilo) {
          case ">":
            gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
            break;
          case "<":
            gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
            break;
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
        }
        if (satisfies(version, range, options))
          return false;
        for (var i2 = 0;i2 < range.set.length; ++i2) {
          var comparators = range.set[i2], high = null, low = null;
          if (comparators.forEach(function(comparator) {
            comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
          }), high.operator === comp || high.operator === ecomp)
            return false;
          if ((!low.operator || low.operator === comp) && ltefn(version, low.semver))
            return false;
          if (low.operator === ecomp && ltfn(version, low.semver))
            return false;
        }
        return true;
      }
      Comparator.prototype.parse = function(comp) {
        var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], m = comp.match(r);
        if (!m)
          throw new TypeError("Invalid comparator: " + comp);
        this.operator = m[1] !== undefined ? m[1] : "", this.operator === "=" && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
      }, Comparator.prototype.toString = function() {
        return this.value;
      }, Comparator.prototype.test = function(version) {
        if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY)
          return true;
        if (typeof version == "string")
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        return cmp(version, this.operator, this.semver, this.options);
      }, Comparator.prototype.intersects = function(comp, options) {
        if (!(comp instanceof Comparator))
          throw new TypeError("a Comparator is required");
        var rangeTmp;
        if (options && typeof options == "object" || (options = { loose: !!options, includePrerelease: false }), this.operator === "")
          return this.value === "" || (rangeTmp = new Range(comp.value, options), satisfies(this.value, rangeTmp, options));
        if (comp.operator === "")
          return comp.value === "" || (rangeTmp = new Range(this.value, options), satisfies(comp.semver, rangeTmp, options));
        var sameDirectionIncreasing = !(this.operator !== ">=" && this.operator !== ">" || comp.operator !== ">=" && comp.operator !== ">"), sameDirectionDecreasing = !(this.operator !== "<=" && this.operator !== "<" || comp.operator !== "<=" && comp.operator !== "<"), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(this.operator !== ">=" && this.operator !== "<=" || comp.operator !== ">=" && comp.operator !== "<="), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
        return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
      }, exports2.Range = Range, Range.prototype.format = function() {
        return this.range = this.set.map(function(comps) {
          return comps.join(" ").trim();
        }).join("||").trim(), this.range;
      }, Range.prototype.toString = function() {
        return this.range;
      }, Range.prototype.parseRange = function(range) {
        var loose = this.options.loose, hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace), debug("hyphen replace", range), range = range.replace(safeRe[t.COMPARATORTRIM], "$1$2$3"), debug("comparator trim", range, safeRe[t.COMPARATORTRIM]), range = (range = (range = range.replace(safeRe[t.TILDETRIM], "$1~")).replace(safeRe[t.CARETTRIM], "$1^")).split(/\s+/).join(" ");
        var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR], set = range.split(" ").map(function(comp) {
          return function(comp2, options) {
            return debug("comp", comp2, options), comp2 = function(comp3, options2) {
              return comp3.trim().split(/\s+/).map(function(comp4) {
                return function(comp5, options3) {
                  debug("caret", comp5, options3);
                  var r = options3.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
                  return comp5.replace(r, function(_, M, m, p, pr) {
                    var ret;
                    return debug("caret", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = M === "0" ? ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0" : pr ? (debug("replaceCaret pr", pr), ret = M === "0" ? m === "0" ? ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0") : (debug("no pr"), ret = M === "0" ? m === "0" ? ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0"), debug("caret return", ret), ret;
                  });
                }(comp4, options2);
              }).join(" ");
            }(comp2, options), debug("caret", comp2), comp2 = function(comp3, options2) {
              return comp3.trim().split(/\s+/).map(function(comp4) {
                return function(comp5, options3) {
                  var r = options3.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
                  return comp5.replace(r, function(_, M, m, p, pr) {
                    var ret;
                    return debug("tilde", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : pr ? (debug("replaceTilde pr", pr), ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0") : ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0", debug("tilde return", ret), ret;
                  });
                }(comp4, options2);
              }).join(" ");
            }(comp2, options), debug("tildes", comp2), comp2 = function(comp3, options2) {
              return debug("replaceXRanges", comp3, options2), comp3.split(/\s+/).map(function(comp4) {
                return function(comp5, options3) {
                  comp5 = comp5.trim();
                  var r = options3.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
                  return comp5.replace(r, function(ret, gtlt, M, m, p, pr) {
                    debug("xRange", comp5, ret, gtlt, M, m, p, pr);
                    var xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
                    return gtlt === "=" && anyX && (gtlt = ""), pr = options3.includePrerelease ? "-0" : "", xM ? ret = gtlt === ">" || gtlt === "<" ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, gtlt === ">" ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : gtlt === "<=" && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), ret = gtlt + M + "." + m + "." + p + pr) : xm ? ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr : xp && (ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr), debug("xRange return", ret), ret;
                  });
                }(comp4, options2);
              }).join(" ");
            }(comp2, options), debug("xrange", comp2), comp2 = function(comp3, options2) {
              return debug("replaceStars", comp3, options2), comp3.trim().replace(safeRe[t.STAR], "");
            }(comp2, options), debug("stars", comp2), comp2;
          }(comp, this.options);
        }, this).join(" ").split(/\s+/);
        return this.options.loose && (set = set.filter(function(comp) {
          return !!comp.match(compRe);
        })), set = set.map(function(comp) {
          return new Comparator(comp, this.options);
        }, this);
      }, Range.prototype.intersects = function(range, options) {
        if (!(range instanceof Range))
          throw new TypeError("a Range is required");
        return this.set.some(function(thisComparators) {
          return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
            return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
              return rangeComparators.every(function(rangeComparator) {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }, exports2.toComparators = function(range, options) {
        return new Range(range, options).set.map(function(comp) {
          return comp.map(function(c) {
            return c.value;
          }).join(" ").trim().split(" ");
        });
      }, Range.prototype.test = function(version) {
        if (!version)
          return false;
        if (typeof version == "string")
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        for (var i2 = 0;i2 < this.set.length; i2++)
          if (testSet(this.set[i2], version, this.options))
            return true;
        return false;
      }, exports2.satisfies = satisfies, exports2.maxSatisfying = function(versions, range, options) {
        var max = null, maxSV = null;
        try {
          var rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        return versions.forEach(function(v) {
          rangeObj.test(v) && (max && maxSV.compare(v) !== -1 || (maxSV = new SemVer(max = v, options)));
        }), max;
      }, exports2.minSatisfying = function(versions, range, options) {
        var min = null, minSV = null;
        try {
          var rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        return versions.forEach(function(v) {
          rangeObj.test(v) && (min && minSV.compare(v) !== 1 || (minSV = new SemVer(min = v, options)));
        }), min;
      }, exports2.minVersion = function(range, loose) {
        range = new Range(range, loose);
        var minver = new SemVer("0.0.0");
        if (range.test(minver))
          return minver;
        if (minver = new SemVer("0.0.0-0"), range.test(minver))
          return minver;
        minver = null;
        for (var i2 = 0;i2 < range.set.length; ++i2) {
          range.set[i2].forEach(function(comparator) {
            var compver = new SemVer(comparator.semver.version);
            switch (comparator.operator) {
              case ">":
                compver.prerelease.length === 0 ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
              case "":
              case ">=":
                minver && !gt(minver, compver) || (minver = compver);
                break;
              case "<":
              case "<=":
                break;
              default:
                throw new Error("Unexpected operation: " + comparator.operator);
            }
          });
        }
        if (minver && range.test(minver))
          return minver;
        return null;
      }, exports2.validRange = function(range, options) {
        try {
          return new Range(range, options).range || "*";
        } catch (er) {
          return null;
        }
      }, exports2.ltr = function(version, range, options) {
        return outside(version, range, "<", options);
      }, exports2.gtr = function(version, range, options) {
        return outside(version, range, ">", options);
      }, exports2.outside = outside, exports2.prerelease = function(version, options) {
        var parsed = parse(version, options);
        return parsed && parsed.prerelease.length ? parsed.prerelease : null;
      }, exports2.intersects = function(r1, r2, options) {
        return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
      }, exports2.coerce = function(version, options) {
        if (version instanceof SemVer)
          return version;
        typeof version == "number" && (version = String(version));
        if (typeof version != "string")
          return null;
        var match = null;
        if ((options = options || {}).rtl) {
          for (var next;(next = safeRe[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); )
            match && next.index + next[0].length === match.index + match[0].length || (match = next), safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
          safeRe[t.COERCERTL].lastIndex = -1;
        } else
          match = version.match(safeRe[t.COERCE]);
        if (match === null)
          return null;
        return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
      };
    }, "./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
      const os = __webpack_require__2("os"), tty = __webpack_require__2("tty"), hasFlag = __webpack_require__2("./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"), { env } = process;
      let forceColor;
      function translateLevel(level) {
        return level !== 0 && { level, hasBasic: true, has256: level >= 2, has16m: level >= 3 };
      }
      function supportsColor(haveStream, streamIsTTY) {
        if (forceColor === 0)
          return 0;
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor"))
          return 3;
        if (hasFlag("color=256"))
          return 2;
        if (haveStream && !streamIsTTY && forceColor === undefined)
          return 0;
        const min = forceColor || 0;
        if (env.TERM === "dumb")
          return min;
        if (process.platform === "win32") {
          const osRelease = os.release().split(".");
          return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
        }
        if ("CI" in env)
          return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => (sign in env)) || env.CI_NAME === "codeship" ? 1 : min;
        if ("TEAMCITY_VERSION" in env)
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
        if (env.COLORTERM === "truecolor")
          return 3;
        if ("TERM_PROGRAM" in env) {
          const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          switch (env.TERM_PROGRAM) {
            case "iTerm.app":
              return version >= 3 ? 3 : 2;
            case "Apple_Terminal":
              return 2;
          }
        }
        return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || ("COLORTERM" in env) ? 1 : min;
      }
      hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1), "FORCE_COLOR" in env && (forceColor = env.FORCE_COLOR === "true" ? 1 : env.FORCE_COLOR === "false" ? 0 : env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3)), module2.exports = { supportsColor: function(stream) {
        return translateLevel(supportsColor(stream, stream && stream.isTTY));
      }, stdout: translateLevel(supportsColor(true, tty.isatty(1))), stderr: translateLevel(supportsColor(true, tty.isatty(2))) };
    }, assert: (module2) => {
      module2.exports = __require2("assert");
    }, fs: (module2) => {
      module2.exports = __require2("fs");
    }, module: (module2) => {
      module2.exports = __require2("module");
    }, os: (module2) => {
      module2.exports = __require2("os");
    }, path: (module2) => {
      module2.exports = __require2("path");
    }, process: (module2) => {
      module2.exports = __require2("process");
    }, tty: (module2) => {
      module2.exports = __require2("tty");
    }, url: (module2) => {
      module2.exports = __require2("url");
    }, util: (module2) => {
      module2.exports = __require2("util");
    }, v8: (module2) => {
      module2.exports = __require2("v8");
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertSimpleType = assertSimpleType, exports2.makeStrongCache = makeStrongCache, exports2.makeStrongCacheSync = function(handler) {
        return synchronize(makeStrongCache(handler));
      }, exports2.makeWeakCache = makeWeakCache, exports2.makeWeakCacheSync = function(handler) {
        return synchronize(makeWeakCache(handler));
      };
      var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js");
      const synchronize = (gen) => _gensync()(gen).sync;
      function* genTrue() {
        return true;
      }
      function makeWeakCache(handler) {
        return makeCachedFunction(WeakMap, handler);
      }
      function makeStrongCache(handler) {
        return makeCachedFunction(Map, handler);
      }
      function makeCachedFunction(CallCache, handler) {
        const callCacheSync = new CallCache, callCacheAsync = new CallCache, futureCache = new CallCache;
        return function* (arg, data) {
          const asyncContext = yield* (0, _async.isAsync)(), callCache = asyncContext ? callCacheAsync : callCacheSync, cached = yield* function* (asyncContext2, callCache2, futureCache2, arg2, data2) {
            const cached2 = yield* getCachedValue(callCache2, arg2, data2);
            if (cached2.valid)
              return cached2;
            if (asyncContext2) {
              const cached3 = yield* getCachedValue(futureCache2, arg2, data2);
              if (cached3.valid) {
                return { valid: true, value: yield* (0, _async.waitFor)(cached3.value.promise) };
              }
            }
            return { valid: false, value: null };
          }(asyncContext, callCache, futureCache, arg, data);
          if (cached.valid)
            return cached.value;
          const cache = new CacheConfigurator(data), handlerResult = handler(arg, cache);
          let finishLock, value2;
          return value2 = (0, _util.isIterableIterator)(handlerResult) ? yield* (0, _async.onFirstPause)(handlerResult, () => {
            finishLock = function(config, futureCache2, arg2) {
              const finishLock2 = new Lock;
              return updateFunctionCache(futureCache2, config, arg2, finishLock2), finishLock2;
            }(cache, futureCache, arg);
          }) : handlerResult, updateFunctionCache(callCache, cache, arg, value2), finishLock && (futureCache.delete(arg), finishLock.release(value2)), value2;
        };
      }
      function* getCachedValue(cache, arg, data) {
        const cachedValue = cache.get(arg);
        if (cachedValue) {
          for (const { value: value2, valid } of cachedValue)
            if (yield* valid(data))
              return { valid: true, value: value2 };
        }
        return { valid: false, value: null };
      }
      function updateFunctionCache(cache, config, arg, value2) {
        config.configured() || config.forever();
        let cachedValue = cache.get(arg);
        switch (config.deactivate(), config.mode()) {
          case "forever":
            cachedValue = [{ value: value2, valid: genTrue }], cache.set(arg, cachedValue);
            break;
          case "invalidate":
            cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue);
            break;
          case "valid":
            cachedValue ? cachedValue.push({ value: value2, valid: config.validator() }) : (cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue));
        }
      }

      class CacheConfigurator {
        constructor(data) {
          this._active = true, this._never = false, this._forever = false, this._invalidate = false, this._configured = false, this._pairs = [], this._data = undefined, this._data = data;
        }
        simple() {
          return function(cache) {
            function cacheFn(val) {
              if (typeof val != "boolean")
                return cache.using(() => assertSimpleType(val()));
              val ? cache.forever() : cache.never();
            }
            return cacheFn.forever = () => cache.forever(), cacheFn.never = () => cache.never(), cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb())), cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb())), cacheFn;
          }(this);
        }
        mode() {
          return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
        }
        forever() {
          if (!this._active)
            throw new Error("Cannot change caching after evaluation has completed.");
          if (this._never)
            throw new Error("Caching has already been configured with .never()");
          this._forever = true, this._configured = true;
        }
        never() {
          if (!this._active)
            throw new Error("Cannot change caching after evaluation has completed.");
          if (this._forever)
            throw new Error("Caching has already been configured with .forever()");
          this._never = true, this._configured = true;
        }
        using(handler) {
          if (!this._active)
            throw new Error("Cannot change caching after evaluation has completed.");
          if (this._never || this._forever)
            throw new Error("Caching has already been configured with .never or .forever()");
          this._configured = true;
          const key = handler(this._data), fn = (0, _async.maybeAsync)(handler, "You appear to be using an async cache handler, but Babel has been called synchronously");
          return (0, _async.isThenable)(key) ? key.then((key2) => (this._pairs.push([key2, fn]), key2)) : (this._pairs.push([key, fn]), key);
        }
        invalidate(handler) {
          return this._invalidate = true, this.using(handler);
        }
        validator() {
          const pairs = this._pairs;
          return function* (data) {
            for (const [key, fn] of pairs)
              if (key !== (yield* fn(data)))
                return false;
            return true;
          };
        }
        deactivate() {
          this._active = false;
        }
        configured() {
          return this._configured;
        }
      }
      function assertSimpleType(value2) {
        if ((0, _async.isThenable)(value2))
          throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
        if (value2 != null && typeof value2 != "string" && typeof value2 != "boolean" && typeof value2 != "number")
          throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
        return value2;
      }

      class Lock {
        constructor() {
          this.released = false, this.promise = undefined, this._resolve = undefined, this.promise = new Promise((resolve) => {
            this._resolve = resolve;
          });
        }
        release(value2) {
          this.released = true, this._resolve(value2);
        }
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      function _debug() {
        const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
        return _debug = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildPresetChain = function* (arg, context) {
        const chain = yield* buildPresetChainWalker(arg, context);
        return chain ? { plugins: dedupDescriptors(chain.plugins), presets: dedupDescriptors(chain.presets), options: chain.options.map((o) => normalizeOptions(o)), files: new Set } : null;
      }, exports2.buildPresetChainWalker = undefined, exports2.buildRootChain = function* (opts, context) {
        let configReport, babelRcReport;
        const programmaticLogger = new _printer.ConfigPrinter, programmaticChain = yield* loadProgrammaticChain({ options: opts, dirname: context.cwd }, context, undefined, programmaticLogger);
        if (!programmaticChain)
          return null;
        const programmaticReport = yield* programmaticLogger.output();
        let configFile;
        typeof opts.configFile == "string" ? configFile = yield* (0, _index.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller) : opts.configFile !== false && (configFile = yield* (0, _index.findRootConfig)(context.root, context.envName, context.caller));
        let { babelrc, babelrcRoots } = opts, babelrcRootsDirectory = context.cwd;
        const configFileChain = emptyChain(), configFileLogger = new _printer.ConfigPrinter;
        if (configFile) {
          const validatedFile = validateConfigFile(configFile), result = yield* loadFileChain(validatedFile, context, undefined, configFileLogger);
          if (!result)
            return null;
          configReport = yield* configFileLogger.output(), babelrc === undefined && (babelrc = validatedFile.options.babelrc), babelrcRoots === undefined && (babelrcRootsDirectory = validatedFile.dirname, babelrcRoots = validatedFile.options.babelrcRoots), mergeChain(configFileChain, result);
        }
        let ignoreFile, babelrcFile, isIgnored = false;
        const fileChain = emptyChain();
        if ((babelrc === true || babelrc === undefined) && typeof context.filename == "string") {
          const pkgData = yield* (0, _index.findPackageData)(context.filename);
          if (pkgData && function(context2, pkgData2, babelrcRoots2, babelrcRootsDirectory2) {
            if (typeof babelrcRoots2 == "boolean")
              return babelrcRoots2;
            const absoluteRoot = context2.root;
            if (babelrcRoots2 === undefined)
              return pkgData2.directories.includes(absoluteRoot);
            let babelrcPatterns = babelrcRoots2;
            Array.isArray(babelrcPatterns) || (babelrcPatterns = [babelrcPatterns]);
            if (babelrcPatterns = babelrcPatterns.map((pat) => typeof pat == "string" ? _path().resolve(babelrcRootsDirectory2, pat) : pat), babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot)
              return pkgData2.directories.includes(absoluteRoot);
            return babelrcPatterns.some((pat) => (typeof pat == "string" && (pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory2)), pkgData2.directories.some((directory) => matchPattern(pat, babelrcRootsDirectory2, directory, context2))));
          }(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
            if ({ ignore: ignoreFile, config: babelrcFile } = yield* (0, _index.findRelativeConfig)(pkgData, context.envName, context.caller), ignoreFile && fileChain.files.add(ignoreFile.filepath), ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) && (isIgnored = true), babelrcFile && !isIgnored) {
              const validatedFile = validateBabelrcFile(babelrcFile), babelrcLogger = new _printer.ConfigPrinter, result = yield* loadFileChain(validatedFile, context, undefined, babelrcLogger);
              result ? (babelRcReport = yield* babelrcLogger.output(), mergeChain(fileChain, result)) : isIgnored = true;
            }
            babelrcFile && isIgnored && fileChain.files.add(babelrcFile.filepath);
          }
        }
        context.showConfig && console.log(`Babel configs on "${context.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x) => !!x).join(`

`) + `
-----End Babel configs-----`);
        const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
        return { plugins: isIgnored ? [] : dedupDescriptors(chain.plugins), presets: isIgnored ? [] : dedupDescriptors(chain.presets), options: isIgnored ? [] : chain.options.map((o) => normalizeOptions(o)), fileHandling: isIgnored ? "ignored" : "transpile", ignore: ignoreFile || undefined, babelrc: babelrcFile || undefined, config: configFile || undefined, files: chain.files };
      };
      var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
      const debug = _debug()("babel:config:config-chain");
      const buildPresetChainWalker = exports2.buildPresetChainWalker = makeChainWalker({ root: (preset) => loadPresetDescriptors(preset), env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName), overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index), overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName), createLogger: () => () => {
      } }), loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors)), loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName))), loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index))), loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
      const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("configfile", file.options, file.filepath) })), validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("babelrcfile", file.options, file.filepath) })), validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("extendsfile", file.options, file.filepath) })), loadProgrammaticChain = makeChainWalker({ root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors), env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName), overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index), overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName), createLogger: (input, context, baseLogger) => function(_, context2, baseLogger2) {
        var _context$caller;
        if (!baseLogger2)
          return () => {
          };
        return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, { callerName: (_context$caller = context2.caller) == null ? undefined : _context$caller.name });
      }(0, context, baseLogger) }), loadFileChainWalker = makeChainWalker({ root: (file) => loadFileDescriptors(file), env: (file, envName) => loadFileEnvDescriptors(file)(envName), overrides: (file, index) => loadFileOverridesDescriptors(file)(index), overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName), createLogger: (file, context, baseLogger) => function(filepath, context2, baseLogger2) {
        if (!baseLogger2)
          return () => {
          };
        return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Config, { filepath });
      }(file.filepath, context, baseLogger) });
      function* loadFileChain(input, context, files, baseLogger) {
        const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
        return chain == null || chain.files.add(input.filepath), chain;
      }
      const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors)), loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName))), loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index))), loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
      function buildRootDescriptors({ dirname: dirname2, options }, alias, descriptors) {
        return descriptors(dirname2, options, alias);
      }
      function buildEnvDescriptors({ dirname: dirname2, options }, alias, descriptors, envName) {
        var _options$env;
        const opts = (_options$env = options.env) == null ? undefined : _options$env[envName];
        return opts ? descriptors(dirname2, opts, `${alias}.env["${envName}"]`) : null;
      }
      function buildOverrideDescriptors({ dirname: dirname2, options }, alias, descriptors, index) {
        var _options$overrides;
        const opts = (_options$overrides = options.overrides) == null ? undefined : _options$overrides[index];
        if (!opts)
          throw new Error("Assertion failure - missing override");
        return descriptors(dirname2, opts, `${alias}.overrides[${index}]`);
      }
      function buildOverrideEnvDescriptors({ dirname: dirname2, options }, alias, descriptors, index, envName) {
        var _options$overrides2, _override$env;
        const override = (_options$overrides2 = options.overrides) == null ? undefined : _options$overrides2[index];
        if (!override)
          throw new Error("Assertion failure - missing override");
        const opts = (_override$env = override.env) == null ? undefined : _override$env[envName];
        return opts ? descriptors(dirname2, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
      }
      function makeChainWalker({ root, env, overrides, overridesEnv, createLogger }) {
        return function* (input, context, files = new Set, baseLogger) {
          const { dirname: dirname2 } = input, flattenedConfigs = [], rootOpts = root(input);
          if (configIsApplicable(rootOpts, dirname2, context, input.filepath)) {
            flattenedConfigs.push({ config: rootOpts, envName: undefined, index: undefined });
            const envOpts = env(input, context.envName);
            envOpts && configIsApplicable(envOpts, dirname2, context, input.filepath) && flattenedConfigs.push({ config: envOpts, envName: context.envName, index: undefined }), (rootOpts.options.overrides || []).forEach((_, index) => {
              const overrideOps = overrides(input, index);
              if (configIsApplicable(overrideOps, dirname2, context, input.filepath)) {
                flattenedConfigs.push({ config: overrideOps, index, envName: undefined });
                const overrideEnvOpts = overridesEnv(input, index, context.envName);
                overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname2, context, input.filepath) && flattenedConfigs.push({ config: overrideEnvOpts, index, envName: context.envName });
              }
            });
          }
          if (flattenedConfigs.some(({ config: { options: { ignore, only } } }) => shouldIgnore(context, ignore, only, dirname2)))
            return null;
          const chain = emptyChain(), logger = createLogger(input, context, baseLogger);
          for (const { config, index, envName } of flattenedConfigs) {
            if (!(yield* mergeExtendsChain(chain, config.options, dirname2, context, files, baseLogger)))
              return null;
            logger(config, index, envName), yield* mergeChainOpts(chain, config);
          }
          return chain;
        };
      }
      function* mergeExtendsChain(chain, opts, dirname2, context, files, baseLogger) {
        if (opts.extends === undefined)
          return true;
        const file = yield* (0, _index.loadConfig)(opts.extends, dirname2, context.envName, context.caller);
        if (files.has(file))
          throw new Error(`Configuration cycle detected loading ${file.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file2) => ` - ${file2.filepath}`).join(`
`));
        files.add(file);
        const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
        return files.delete(file), !!fileChain && (mergeChain(chain, fileChain), true);
      }
      function mergeChain(target, source) {
        target.options.push(...source.options), target.plugins.push(...source.plugins), target.presets.push(...source.presets);
        for (const file of source.files)
          target.files.add(file);
        return target;
      }
      function* mergeChainOpts(target, { options, plugins, presets }) {
        return target.options.push(options), target.plugins.push(...yield* plugins()), target.presets.push(...yield* presets()), target;
      }
      function emptyChain() {
        return { options: [], presets: [], plugins: [], files: new Set };
      }
      function normalizeOptions(opts) {
        const options = Object.assign({}, opts);
        return delete options.extends, delete options.env, delete options.overrides, delete options.plugins, delete options.presets, delete options.passPerPreset, delete options.ignore, delete options.only, delete options.test, delete options.include, delete options.exclude, hasOwnProperty.call(options, "sourceMap") && (options.sourceMaps = options.sourceMap, delete options.sourceMap), options;
      }
      function dedupDescriptors(items) {
        const map = new Map, descriptors = [];
        for (const item of items)
          if (typeof item.value == "function") {
            const fnKey = item.value;
            let nameMap = map.get(fnKey);
            nameMap || (nameMap = new Map, map.set(fnKey, nameMap));
            let desc = nameMap.get(item.name);
            desc ? desc.value = item : (desc = { value: item }, descriptors.push(desc), item.ownPass || nameMap.set(item.name, desc));
          } else
            descriptors.push({ value: item });
        return descriptors.reduce((acc, desc) => (acc.push(desc.value), acc), []);
      }
      function configIsApplicable({ options }, dirname2, context, configName) {
        return (options.test === undefined || configFieldIsApplicable(context, options.test, dirname2, configName)) && (options.include === undefined || configFieldIsApplicable(context, options.include, dirname2, configName)) && (options.exclude === undefined || !configFieldIsApplicable(context, options.exclude, dirname2, configName));
      }
      function configFieldIsApplicable(context, test, dirname2, configName) {
        return matchesPatterns(context, Array.isArray(test) ? test : [test], dirname2, configName);
      }
      function ignoreListReplacer(_key, value2) {
        return value2 instanceof RegExp ? String(value2) : value2;
      }
      function shouldIgnore(context, ignore, only, dirname2) {
        if (ignore && matchesPatterns(context, ignore, dirname2)) {
          var _context$filename;
          const message = `No config is applied to "${(_context$filename = context.filename) != null ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname2}"`;
          return debug(message), context.showConfig && console.log(message), true;
        }
        if (only && !matchesPatterns(context, only, dirname2)) {
          var _context$filename2;
          const message = `No config is applied to "${(_context$filename2 = context.filename) != null ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname2}"`;
          return debug(message), context.showConfig && console.log(message), true;
        }
        return false;
      }
      function matchesPatterns(context, patterns, dirname2, configName) {
        return patterns.some((pattern) => matchPattern(pattern, dirname2, context.filename, context, configName));
      }
      function matchPattern(pattern, dirname2, pathToTest, context, configName) {
        if (typeof pattern == "function")
          return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, { dirname: dirname2, envName: context.envName, caller: context.caller });
        if (typeof pathToTest != "string")
          throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
        return typeof pattern == "string" && (pattern = (0, _patternToRegex.default)(pattern, dirname2)), pattern.test(pathToTest);
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createCachedDescriptors = function(dirname2, options, alias) {
        const { plugins, presets, passPerPreset } = options;
        return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname2), plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname2)(alias) : () => handlerOf([]), presets: presets ? () => createCachedPresetDescriptors(presets, dirname2)(alias)(!!passPerPreset) : () => handlerOf([]) };
      }, exports2.createDescriptor = createDescriptor, exports2.createUncachedDescriptors = function(dirname2, options, alias) {
        return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname2), plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname2, alias)), presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname2, alias, !!options.passPerPreset)) };
      };
      var _functional = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
      function* handlerOf(value2) {
        return value2;
      }
      function optionsWithResolvedBrowserslistConfigFile(options, dirname2) {
        return typeof options.browserslistConfigFile == "string" && (options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname2)), options;
      }
      const PRESET_DESCRIPTOR_CACHE = new WeakMap, createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
        const dirname2 = cache.using((dir) => dir);
        return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
          return (yield* createPresetDescriptors(items, dirname2, alias, passPerPreset)).map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
        }));
      }), PLUGIN_DESCRIPTOR_CACHE = new WeakMap, createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
        const dirname2 = cache.using((dir) => dir);
        return (0, _caching.makeStrongCache)(function* (alias) {
          return (yield* createPluginDescriptors(items, dirname2, alias)).map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
        });
      }), DEFAULT_OPTIONS = {};
      function loadCachedDescriptor(cache, desc) {
        const { value: value2, options = DEFAULT_OPTIONS } = desc;
        if (options === false)
          return desc;
        let cacheByOptions = cache.get(value2);
        cacheByOptions || (cacheByOptions = new WeakMap, cache.set(value2, cacheByOptions));
        let possibilities = cacheByOptions.get(options);
        if (possibilities || (possibilities = [], cacheByOptions.set(options, possibilities)), !possibilities.includes(desc)) {
          const matches = possibilities.filter((possibility) => {
            return b = desc, (a = possibility).name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && ((_a$file = a.file) == null ? undefined : _a$file.request) === ((_b$file = b.file) == null ? undefined : _b$file.request) && ((_a$file2 = a.file) == null ? undefined : _a$file2.resolved) === ((_b$file2 = b.file) == null ? undefined : _b$file2.resolved);
            var a, b, _a$file, _b$file, _a$file2, _b$file2;
          });
          if (matches.length > 0)
            return matches[0];
          possibilities.push(desc);
        }
        return desc;
      }
      function* createPresetDescriptors(items, dirname2, alias, passPerPreset) {
        return yield* createDescriptors("preset", items, dirname2, alias, passPerPreset);
      }
      function* createPluginDescriptors(items, dirname2, alias) {
        return yield* createDescriptors("plugin", items, dirname2, alias);
      }
      function* createDescriptors(type, items, dirname2, alias, ownPass) {
        const descriptors = yield* _gensync().all(items.map((item, index) => createDescriptor(item, dirname2, { type, alias: `${alias}$${index}`, ownPass: !!ownPass })));
        return function(items2) {
          const map = new Map;
          for (const item of items2) {
            if (typeof item.value != "function")
              continue;
            let nameMap = map.get(item.value);
            if (nameMap || (nameMap = new Set, map.set(item.value, nameMap)), nameMap.has(item.name)) {
              const conflicts = items2.filter((i) => i.value === item.value);
              throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separate names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detected are:", `${JSON.stringify(conflicts, null, 2)}`].join(`
`));
            }
            nameMap.add(item.name);
          }
        }(descriptors), descriptors;
      }
      function* createDescriptor(pair, dirname2, { type, alias, ownPass }) {
        const desc = (0, _item.getItemDescriptor)(pair);
        if (desc)
          return desc;
        let name, options, file, value2 = pair;
        Array.isArray(value2) && (value2.length === 3 ? [value2, options, name] = value2 : [value2, options] = value2);
        let filepath = null;
        if (typeof value2 == "string") {
          if (typeof type != "string")
            throw new Error("To resolve a string-based item, the type of item must be given");
          const resolver = type === "plugin" ? _index.loadPlugin : _index.loadPreset, request = value2;
          ({ filepath, value: value2 } = yield* resolver(value2, dirname2)), file = { request, resolved: filepath };
        }
        if (!value2)
          throw new Error(`Unexpected falsy value: ${String(value2)}`);
        if (typeof value2 == "object" && value2.__esModule) {
          if (!value2.default)
            throw new Error("Must export a default export when using ES6 modules.");
          value2 = value2.default;
        }
        if (typeof value2 != "object" && typeof value2 != "function")
          throw new Error(`Unsupported format: ${typeof value2}. Expected an object or a function.`);
        if (filepath !== null && typeof value2 == "object" && value2)
          throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
        return { name, alias: filepath || alias, value: value2, options, dirname: dirname2, ownPass, file };
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _debug() {
        const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
        return _debug = function() {
          return data;
        }, data;
      }
      function _fs() {
        const data = __webpack_require__2("fs");
        return _fs = function() {
          return data;
        }, data;
      }
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      function _json() {
        const data = __webpack_require__2("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");
        return _json = function() {
          return data;
        }, data;
      }
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ROOT_CONFIG_FILENAMES = undefined, exports2.findConfigUpwards = function(rootDir) {
        let dirname2 = rootDir;
        for (;; ) {
          for (const filename of ROOT_CONFIG_FILENAMES)
            if (_fs().existsSync(_path().join(dirname2, filename)))
              return dirname2;
          const nextDir = _path().dirname(dirname2);
          if (dirname2 === nextDir)
            break;
          dirname2 = nextDir;
        }
        return null;
      }, exports2.findRelativeConfig = function* (packageData, envName, caller) {
        let config = null, ignore = null;
        const dirname2 = _path().dirname(packageData.filepath);
        for (const loc of packageData.directories) {
          var _packageData$pkg;
          if (!config)
            config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, ((_packageData$pkg = packageData.pkg) == null ? undefined : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
          if (!ignore) {
            const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
            ignore = yield* readIgnoreConfig(ignoreLoc), ignore && debug("Found ignore %o from %o.", ignore.filepath, dirname2);
          }
        }
        return { config, ignore };
      }, exports2.findRootConfig = function(dirname2, envName, caller) {
        return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname2, envName, caller);
      }, exports2.loadConfig = function* (name, dirname2, envName, caller) {
        const filepath = (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r, { paths: [b] }, M = __webpack_require__2("module")) => {
          let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
          if (f)
            return f;
          throw f = new Error(`Cannot resolve module '${r}'`), f.code = "MODULE_NOT_FOUND", f;
        })(name, { paths: [dirname2] }), conf = yield* readConfig(filepath, envName, caller);
        var v, w;
        if (!conf)
          throw new _configError.default("Config file contains no configuration data", filepath);
        return debug("Loaded config %o from %o.", name, dirname2), conf;
      }, exports2.resolveShowConfigPath = function* (dirname2) {
        const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
        if (targetPath != null) {
          const absolutePath = _path().resolve(dirname2, targetPath);
          if (!(yield* fs3.stat(absolutePath)).isFile())
            throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
          return absolutePath;
        }
        return null;
      };
      var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), fs3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
      const debug = _debug()("babel:config:loading:files:configuration"), ROOT_CONFIG_FILENAMES = exports2.ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config.cts"], RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"], BABELIGNORE_FILENAME = ".babelignore", runConfig = (0, _caching.makeWeakCache)(function* (options, cache) {
        return yield* [], { options: (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)), cacheNeedsConfiguration: !cache.configured() };
      });
      function* readConfigCode(filepath, data) {
        if (!_fs().existsSync(filepath))
          return null;
        let options = yield* (0, _moduleTypes.default)(filepath, (yield* (0, _async.isAsync)()) ? "auto" : "require", "You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously or when using the Node.js `--experimental-require-module` flag.", "You appear to be using a configuration file that contains top-level await, which is only supported when running Babel asynchronously."), cacheNeedsConfiguration = false;
        if (typeof options == "function" && ({ options, cacheNeedsConfiguration } = yield* runConfig(options, data)), !options || typeof options != "object" || Array.isArray(options))
          throw new _configError.default("Configuration should be an exported JavaScript object.", filepath);
        if (typeof options.then == "function")
          throw options.catch == null || options.catch(() => {
          }), new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.", filepath);
        return cacheNeedsConfiguration && function(filepath2) {
          throw new _configError.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, filepath2);
        }(filepath), function(options2, filepath2) {
          let configFilesByFilepath = cfboaf.get(options2);
          configFilesByFilepath || cfboaf.set(options2, configFilesByFilepath = new Map);
          let configFile = configFilesByFilepath.get(filepath2);
          configFile || (configFile = { filepath: filepath2, dirname: _path().dirname(filepath2), options: options2 }, configFilesByFilepath.set(filepath2, configFile));
          return configFile;
        }(options, filepath);
      }
      const cfboaf = new WeakMap;
      const packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
        const babel = file.options.babel;
        if (babel === undefined)
          return null;
        if (typeof babel != "object" || Array.isArray(babel) || babel === null)
          throw new _configError.default(".babel property must be an object", file.filepath);
        return { filepath: file.filepath, dirname: file.dirname, options: babel };
      }), readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
        let options;
        try {
          options = _json().parse(content);
        } catch (err) {
          throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
        }
        if (!options)
          throw new _configError.default("No config detected", filepath);
        if (typeof options != "object")
          throw new _configError.default("Config returned typeof " + typeof options, filepath);
        if (Array.isArray(options))
          throw new _configError.default("Expected config object but found array", filepath);
        return delete options.$schema, { filepath, dirname: _path().dirname(filepath), options };
      }), readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
        const ignoreDir = _path().dirname(filepath), ignorePatterns = content.split(`
`).map((line) => line.replace(/#.*$/, "").trim()).filter(Boolean);
        for (const pattern of ignorePatterns)
          if (pattern[0] === "!")
            throw new _configError.default("Negation of file paths is not supported.", filepath);
        return { filepath, dirname: _path().dirname(filepath), ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir)) };
      });
      function* loadOneConfig(names, dirname2, envName, caller, previousConfig = null) {
        const config = (yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname2, filename), envName, caller)))).reduce((previousConfig2, config2) => {
          if (config2 && previousConfig2)
            throw new _configError.default(`Multiple configuration files found. Please remove one:
 - ${_path().basename(previousConfig2.filepath)}
 - ${config2.filepath}
from ${dirname2}`);
          return config2 || previousConfig2;
        }, previousConfig);
        return config && debug("Found configuration %o from %o.", config.filepath, dirname2), config;
      }
      function readConfig(filepath, envName, caller) {
        switch (_path().extname(filepath)) {
          case ".js":
          case ".cjs":
          case ".mjs":
          case ".cts":
            return readConfigCode(filepath, { envName, caller });
          default:
            return readConfigJSON5(filepath);
        }
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs": (module2, __unused_webpack_exports, __webpack_require__2) => {
      module2.exports = function(filepath) {
        return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files lazy recursive")(filepath);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ROOT_CONFIG_FILENAMES", { enumerable: true, get: function() {
        return _configuration.ROOT_CONFIG_FILENAMES;
      } }), Object.defineProperty(exports2, "findConfigUpwards", { enumerable: true, get: function() {
        return _configuration.findConfigUpwards;
      } }), Object.defineProperty(exports2, "findPackageData", { enumerable: true, get: function() {
        return _package.findPackageData;
      } }), Object.defineProperty(exports2, "findRelativeConfig", { enumerable: true, get: function() {
        return _configuration.findRelativeConfig;
      } }), Object.defineProperty(exports2, "findRootConfig", { enumerable: true, get: function() {
        return _configuration.findRootConfig;
      } }), Object.defineProperty(exports2, "loadConfig", { enumerable: true, get: function() {
        return _configuration.loadConfig;
      } }), Object.defineProperty(exports2, "loadPlugin", { enumerable: true, get: function() {
        return _plugins.loadPlugin;
      } }), Object.defineProperty(exports2, "loadPreset", { enumerable: true, get: function() {
        return _plugins.loadPreset;
      } }), Object.defineProperty(exports2, "resolvePlugin", { enumerable: true, get: function() {
        return _plugins.resolvePlugin;
      } }), Object.defineProperty(exports2, "resolvePreset", { enumerable: true, get: function() {
        return _plugins.resolvePreset;
      } }), Object.defineProperty(exports2, "resolveShowConfigPath", { enumerable: true, get: function() {
        return _configuration.resolveShowConfigPath;
      } });
      var _package = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js"), _configuration = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/configuration.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js");
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (filepath, loader, esmError, tlaError) {
        var _async2;
        let async, ext = _path().extname(filepath);
        SUPPORTED_EXTENSIONS.has(ext) || (ext = ".js");
        switch (`${loader} ${ext}`) {
          case "require .cjs":
          case "auto .cjs":
            return loadCjsDefault(filepath, arguments[2]);
          case "require .cts":
          case "auto .cts":
            return function(filepath2) {
              const ext2 = ".cts", hasTsSupport = !!(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".ts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".cts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".mts"]);
              let handler;
              if (!hasTsSupport) {
                const opts = { babelrc: false, configFile: false, sourceType: "unambiguous", sourceMaps: "inline", sourceFileName: _path().basename(filepath2), presets: [[getTSPreset(filepath2), Object.assign({ onlyRemoveTypeImports: true, optimizeConstEnums: true }, { allowDeclareFields: true })]] };
                handler = function(m, filename) {
                  if (handler && filename.endsWith(ext2))
                    try {
                      return m._compile((0, _transformFile.transformFileSync)(filename, Object.assign({}, opts, { filename })).code, filename);
                    } catch (error) {
                      if (!hasTsSupport) {
                        const packageJson = __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json");
                        _semver().lt(packageJson.version, "7.21.4") && console.error("`.cts` configuration file failed to load, please try to update `@babel/preset-typescript`.");
                      }
                      throw error;
                    }
                  return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[".js"](m, filename);
                }, __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2] = handler;
              }
              try {
                return loadCjsDefault(filepath2);
              } finally {
                hasTsSupport || (__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2] === handler && delete __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext2], handler = undefined);
              }
            }(filepath);
          case "auto .js":
          case "require .js":
          case "require .mjs":
            try {
              return loadCjsDefault(filepath, arguments[2]);
            } catch (e) {
              var _async;
              if (e.code === "ERR_REQUIRE_ASYNC_MODULE" || e.code === "ERR_REQUIRE_CYCLE_MODULE" && asyncModules.has(filepath)) {
                if (asyncModules.add(filepath), !((_async = async) != null ? _async : async = yield* (0, _async3.isAsync)()))
                  throw new _configError.default(tlaError, filepath);
              } else if (e.code !== "ERR_REQUIRE_ESM" && ext !== ".mjs")
                throw e;
            }
          case "auto .mjs":
            if ((_async2 = async) != null ? _async2 : async = yield* (0, _async3.isAsync)())
              return (yield* (0, _async3.waitFor)(loadMjsFromPath(filepath))).default;
            throw new _configError.default(esmError, filepath);
          default:
            throw new Error("Internal Babel error: unreachable code.");
        }
      }, exports2.supportsESM = undefined;
      var _async3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      function _url() {
        const data = __webpack_require__2("url");
        return _url = function() {
          return data;
        }, data;
      }
      function _semver() {
        const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
        return _semver = function() {
          return data;
        }, data;
      }
      function _debug() {
        const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
        return _debug = function() {
          return data;
        }, data;
      }
      var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js");
      function asyncGeneratorStep(n2, t, e, r, o, a, c) {
        try {
          var i = n2[a](c), u = i.value;
        } catch (n3) {
          return void e(n3);
        }
        i.done ? t(u) : Promise.resolve(u).then(r, o);
      }
      const debug = _debug()("babel:config:loading:files:module-types");
      try {
        var import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/import.cjs");
      } catch (_unused) {
      }
      exports2.supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
      const LOADING_CJS_FILES = new Set;
      function loadCjsDefault(filepath) {
        if (LOADING_CJS_FILES.has(filepath))
          return debug("Auto-ignoring usage of config %o.", filepath), {};
        let module2;
        try {
          LOADING_CJS_FILES.add(filepath), module2 = (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);
        } finally {
          LOADING_CJS_FILES.delete(filepath);
        }
        return module2 == null || !module2.__esModule && module2[Symbol.toStringTag] !== "Module" ? module2 : module2.default || (arguments[1] ? module2 : undefined);
      }
      const loadMjsFromPath = (0, _rewriteStackTrace.endHiddenCallStack)((n = function* (filepath) {
        const url = (0, _url().pathToFileURL)(filepath).toString() + "?import";
        if (!import_)
          throw new _configError.default(`Internal error: Native ECMAScript modules aren't supported by this platform.
`, filepath);
        return yield import_(url);
      }, _loadMjsFromPath = function() {
        var t = this, e = arguments;
        return new Promise(function(r, o) {
          var a = n.apply(t, e);
          function _next(n2) {
            asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
          }
          function _throw(n2) {
            asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
          }
          _next(undefined);
        });
      }, function(_x) {
        return _loadMjsFromPath.apply(this, arguments);
      }));
      var n, _loadMjsFromPath;
      const SUPPORTED_EXTENSIONS = new Set([".js", ".mjs", ".cjs", ".cts"]), asyncModules = new Set;
      function getTSPreset(filepath) {
        try {
          return __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js");
        } catch (error) {
          if (error.code !== "MODULE_NOT_FOUND")
            throw error;
          let message = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";
          throw process.versions.pnp && (message += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
\t"@babel/core@*":
\t\tpeerDependencies:
\t\t\t"@babel/preset-typescript": "*"
`), new _configError.default(message, filepath);
        }
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/package.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.findPackageData = function* (filepath) {
        let pkg = null;
        const directories = [];
        let isPackage = true, dirname2 = _path().dirname(filepath);
        for (;!pkg && _path().basename(dirname2) !== "node_modules"; ) {
          directories.push(dirname2), pkg = yield* readConfigPackage(_path().join(dirname2, PACKAGE_FILENAME));
          const nextLoc = _path().dirname(dirname2);
          if (dirname2 === nextLoc) {
            isPackage = false;
            break;
          }
          dirname2 = nextLoc;
        }
        return { filepath, directories, pkg, isPackage };
      };
      var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
      const PACKAGE_FILENAME = "package.json", readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
        let options;
        try {
          options = JSON.parse(content);
        } catch (err) {
          throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
        }
        if (!options)
          throw new Error(`${filepath}: No config detected`);
        if (typeof options != "object")
          throw new _configError.default("Config returned typeof " + typeof options, filepath);
        if (Array.isArray(options))
          throw new _configError.default("Expected config object but found array", filepath);
        return { filepath, dirname: _path().dirname(filepath), options };
      });
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _debug() {
        const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
        return _debug = function() {
          return data;
        }, data;
      }
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.loadPlugin = function* (name, dirname2) {
        const { filepath, loader } = resolvePlugin(name, dirname2, yield* (0, _async.isAsync)()), value2 = yield* requireModule("plugin", loader, filepath);
        return debug("Loaded plugin %o from %o.", name, dirname2), { filepath, value: value2 };
      }, exports2.loadPreset = function* (name, dirname2) {
        const { filepath, loader } = resolvePreset(name, dirname2, yield* (0, _async.isAsync)()), value2 = yield* requireModule("preset", loader, filepath);
        return debug("Loaded preset %o from %o.", name, dirname2), { filepath, value: value2 };
      }, exports2.resolvePreset = exports2.resolvePlugin = undefined;
      var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/module-types.js");
      function _url() {
        const data = __webpack_require__2("url");
        return _url = function() {
          return data;
        }, data;
      }
      var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");
      function _fs() {
        const data = __webpack_require__2("fs");
        return _fs = function() {
          return data;
        }, data;
      }
      const debug = _debug()("babel:config:loading:files:plugins"), EXACT_RE = /^module:/, BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/, BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/, BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/, BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/, OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/, OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/, resolvePlugin = exports2.resolvePlugin = resolveStandardizedName.bind(null, "plugin"), resolvePreset = exports2.resolvePreset = resolveStandardizedName.bind(null, "preset");
      function standardizeName(type, name) {
        if (_path().isAbsolute(name))
          return name;
        const isPreset = type === "preset";
        return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
      }
      function* resolveAlternativesHelper(type, name) {
        const standardizedName = standardizeName(type, name), { error, value: value2 } = yield standardizedName;
        if (!error)
          return value2;
        if (error.code !== "MODULE_NOT_FOUND")
          throw error;
        standardizedName === name || (yield name).error || (error.message += `
- If you want to resolve "${name}", use "module:${name}"`), (yield standardizeName(type, "@babel/" + name)).error || (error.message += `
- Did you mean "@babel/${name}"?`);
        const oppositeType = type === "preset" ? "plugin" : "preset";
        if ((yield standardizeName(oppositeType, name)).error || (error.message += `
- Did you accidentally pass a ${oppositeType} as a ${type}?`), type === "plugin") {
          const transformName = standardizedName.replace("-proposal-", "-transform-");
          transformName === standardizedName || (yield transformName).error || (error.message += `
- Did you mean "${transformName}"?`);
        }
        throw error.message += `

Make sure that all the Babel plugins and presets you are using
are defined as dependencies or devDependencies in your package.json
file. It's possible that the missing plugin is loaded by a preset
you are using that forgot to add the plugin to its dependencies: you
can workaround this problem by explicitly adding the missing package
to your top-level package.json.
`, error;
      }
      function tryRequireResolve(id, dirname2) {
        try {
          return dirname2 ? { error: null, value: (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r, { paths: [b] }, M = __webpack_require__2("module")) => {
            let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
            if (f)
              return f;
            throw f = new Error(`Cannot resolve module '${r}'`), f.code = "MODULE_NOT_FOUND", f;
          })(id, { paths: [dirname2] }) } : { error: null, value: __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files sync recursive").resolve(id) };
        } catch (error) {
          return { error, value: null };
        }
        var v, w;
      }
      function tryImportMetaResolve(id, options) {
        try {
          return { error: null, value: (0, _importMetaResolve.resolve)(id, options) };
        } catch (error) {
          return { error, value: null };
        }
      }
      function resolveStandardizedNameForRequire(type, name, dirname2) {
        const it = resolveAlternativesHelper(type, name);
        let res = it.next();
        for (;!res.done; )
          res = it.next(tryRequireResolve(res.value, dirname2));
        return { loader: "require", filepath: res.value };
      }
      function resolveStandardizedName(type, name, dirname2, allowAsync) {
        if (!_moduleTypes.supportsESM || !allowAsync)
          return resolveStandardizedNameForRequire(type, name, dirname2);
        try {
          const resolved = function(type2, name2, dirname22) {
            const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname22, "./babel-virtual-resolve-base.js")).href, it = resolveAlternativesHelper(type2, name2);
            let res = it.next();
            for (;!res.done; )
              res = it.next(tryImportMetaResolve(res.value, parentUrl));
            return { loader: "auto", filepath: (0, _url().fileURLToPath)(res.value) };
          }(type, name, dirname2);
          if (!(0, _fs().existsSync)(resolved.filepath))
            throw Object.assign(new Error(`Could not resolve "${name}" in file ${dirname2}.`), { type: "MODULE_NOT_FOUND" });
          return resolved;
        } catch (e) {
          try {
            return resolveStandardizedNameForRequire(type, name, dirname2);
          } catch (e2) {
            if (e.type === "MODULE_NOT_FOUND")
              throw e;
            if (e2.type === "MODULE_NOT_FOUND")
              throw e2;
            throw e;
          }
        }
      }
      var LOADING_MODULES = new Set;
      function* requireModule(type, loader, name) {
        if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name))
          throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
        try {
          return LOADING_MODULES.add(name), yield* (0, _moduleTypes.default)(name, loader, `You appear to be using a native ECMAScript module ${type}, which is only supported when running Babel asynchronously or when using the Node.js \`--experimental-require-module\` flag.`, `You appear to be using a ${type} that contains top-level await, which is only supported when running Babel asynchronously.`, true);
        } catch (err) {
          throw err.message = `[BABEL]: ${err.message} (While processing: ${name})`, err;
        } finally {
          LOADING_MODULES.delete(name);
        }
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeStaticFileCache = function(fn) {
        return (0, _caching.makeStrongCache)(function* (filepath, cache) {
          const cached = cache.invalidate(() => function(filepath2) {
            if (!_fs2().existsSync(filepath2))
              return null;
            try {
              return +_fs2().statSync(filepath2).mtime;
            } catch (e) {
              if (e.code !== "ENOENT" && e.code !== "ENOTDIR")
                throw e;
            }
            return null;
          }(filepath));
          return cached === null ? null : fn(filepath, yield* fs3.readFile(filepath, "utf8"));
        });
      };
      var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), fs3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
      function _fs2() {
        const data = __webpack_require__2("fs");
        return _fs2 = function() {
          return data;
        }, data;
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), context = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
      function _traverse() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        return _traverse = function() {
          return data;
        }, data;
      }
      var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
      exports2.default = _gensync()(function* (inputOpts) {
        var _opts$assumptions;
        const result = yield* (0, _partial.default)(inputOpts);
        if (!result)
          return null;
        const { options, context: context2, fileHandling } = result;
        if (fileHandling === "ignored")
          return null;
        const optionDefaults = {}, { plugins, presets } = options;
        if (!plugins || !presets)
          throw new Error("Assertion failure - plugins and presets exist");
        const presetContext = Object.assign({}, context2, { targets: options.targets }), toDescriptor = (item) => {
          const desc = (0, _item.getItemDescriptor)(item);
          if (!desc)
            throw new Error("Assertion failure - must be config item");
          return desc;
        }, presetsDescriptors = presets.map(toDescriptor), initialPluginsDescriptors = plugins.map(toDescriptor), pluginDescriptorsByPass = [[]], passes = [], externalDependencies = [], ignored = yield* enhanceError(context2, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
          const presets2 = [];
          for (let i = 0;i < rawPresets.length; i++) {
            const descriptor = rawPresets[i];
            if (descriptor.options !== false) {
              try {
                var preset = yield* loadPresetDescriptor(descriptor, presetContext);
              } catch (e) {
                throw e.code === "BABEL_UNKNOWN_OPTION" && (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e), e;
              }
              externalDependencies.push(preset.externalDependencies), descriptor.ownPass ? presets2.push({ preset: preset.chain, pass: [] }) : presets2.unshift({ preset: preset.chain, pass: pluginDescriptorsPass });
            }
          }
          if (presets2.length > 0) {
            pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p) => p !== pluginDescriptorsPass));
            for (const { preset: preset2, pass } of presets2) {
              if (!preset2)
                return true;
              pass.push(...preset2.plugins);
              if (yield* recursePresetDescriptors(preset2.presets, pass))
                return true;
              preset2.options.forEach((opts2) => {
                (0, _util.mergeOptions)(optionDefaults, opts2);
              });
            }
          }
        })(presetsDescriptors, pluginDescriptorsByPass[0]);
        if (ignored)
          return null;
        const opts = optionDefaults;
        (0, _util.mergeOptions)(opts, options);
        const pluginContext = Object.assign({}, presetContext, { assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {} });
        return yield* enhanceError(context2, function* () {
          pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
          for (const descs of pluginDescriptorsByPass) {
            const pass = [];
            passes.push(pass);
            for (let i = 0;i < descs.length; i++) {
              const descriptor = descs[i];
              if (descriptor.options !== false) {
                try {
                  var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
                } catch (e) {
                  throw e.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY" && (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e), e;
                }
                pass.push(plugin), externalDependencies.push(plugin.externalDependencies);
              }
            }
          }
        })(), opts.plugins = passes[0], opts.presets = passes.slice(1).filter((plugins2) => plugins2.length > 0).map((plugins2) => ({ plugins: plugins2 })), opts.passPerPreset = opts.presets.length > 0, { options: opts, passes, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
      });
      function enhanceError(context2, fn) {
        return function* (arg1, arg2) {
          try {
            return yield* fn(arg1, arg2);
          } catch (e) {
            var _context$filename;
            if (!/^\[BABEL\]/.test(e.message))
              e.message = `[BABEL] ${(_context$filename = context2.filename) != null ? _context$filename : "unknown file"}: ${e.message}`;
            throw e;
          }
        };
      }
      const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname: dirname2, alias }, cache) {
        if (options === false)
          throw new Error("Assertion failure");
        options = options || {};
        const externalDependencies = [];
        let item = value2;
        if (typeof value2 == "function") {
          const factory = (0, _async.maybeAsync)(value2, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), api = Object.assign({}, context, apiFactory(cache, externalDependencies));
          try {
            item = yield* factory(api, options, dirname2);
          } catch (e) {
            throw alias && (e.message += ` (While processing: ${JSON.stringify(alias)})`), e;
          }
        }
        if (!item || typeof item != "object")
          throw new Error("Plugin/Preset did not return an object.");
        if ((0, _async.isThenable)(item))
          throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
        if (externalDependencies.length > 0 && (!cache.configured() || cache.mode() === "forever")) {
          let error = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
          throw cache.configured() ? error += " has been configured to never be invalidated. " : error += "has not been configured to be invalidated when the external dependencies change. ", error += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`, new Error(error);
        }
        return { value: item, options, dirname: dirname2, alias, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
      }), pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI), presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI), instantiatePlugin = (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname: dirname2, alias, externalDependencies }, cache) {
        const pluginObj = (0, _plugins.validatePluginObject)(value2), plugin = Object.assign({}, pluginObj);
        if (plugin.visitor && (plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor))), plugin.inherits) {
          const inheritsDescriptor = { name: undefined, alias: `${alias}$inherits`, value: plugin.inherits, options, dirname: dirname2 }, inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => cache.invalidate((data) => run(inheritsDescriptor, data)));
          plugin.pre = chainMaybeAsync(inherits.pre, plugin.pre), plugin.post = chainMaybeAsync(inherits.post, plugin.post), plugin.manipulateOptions = chainMaybeAsync(inherits.manipulateOptions, plugin.manipulateOptions), plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]), inherits.externalDependencies.length > 0 && (externalDependencies = externalDependencies.length === 0 ? inherits.externalDependencies : (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]));
        }
        return new _plugin.default(plugin, options, alias, externalDependencies);
      });
      function* loadPluginDescriptor(descriptor, context2) {
        if (descriptor.value instanceof _plugin.default) {
          if (descriptor.options)
            throw new Error("Passed options to an existing Plugin instance will not work.");
          return descriptor.value;
        }
        return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context2), context2);
      }
      const needsFilename = (val) => val && typeof val != "function", validateIfOptionNeedsFilename = (options, descriptor) => {
        if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
          const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
          throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join(`
`));
        }
      }, validatePreset = (preset, context2, descriptor) => {
        if (!context2.filename) {
          var _options$overrides;
          const { options } = preset;
          validateIfOptionNeedsFilename(options, descriptor), (_options$overrides = options.overrides) == null || _options$overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
        }
      }, instantiatePreset = (0, _caching.makeWeakCacheSync)(({ value: value2, dirname: dirname2, alias, externalDependencies }) => ({ options: (0, _options.validate)("preset", value2), alias, dirname: dirname2, externalDependencies }));
      function* loadPresetDescriptor(descriptor, context2) {
        const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context2));
        return validatePreset(preset, context2, descriptor), { chain: yield* (0, _configChain.buildPresetChain)(preset, context2), externalDependencies: preset.externalDependencies };
      }
      function chainMaybeAsync(a, b) {
        return a ? b ? function(...args) {
          const res = a.apply(this, args);
          return res && typeof res.then == "function" ? res.then(() => b.apply(this, args)) : b.apply(this, args);
        } : a : b;
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/config-api.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _semver() {
        const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
        return _semver = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeConfigAPI = makeConfigAPI, exports2.makePluginAPI = function(cache, externalDependencies) {
        return Object.assign({}, makePresetAPI(cache, externalDependencies), { assumption: (name) => cache.using((data) => data.assumptions[name]) });
      }, exports2.makePresetAPI = makePresetAPI;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/caching.js");
      function makeConfigAPI(cache) {
        return { version: _index.version, cache: cache.simple(), env: (value2) => cache.using((data) => value2 === undefined ? data.envName : typeof value2 == "function" ? (0, _caching.assertSimpleType)(value2(data.envName)) : (Array.isArray(value2) ? value2 : [value2]).some((entry) => {
          if (typeof entry != "string")
            throw new Error("Unexpected non-string value");
          return entry === data.envName;
        })), async: () => false, caller: (cb) => cache.using((data) => (0, _caching.assertSimpleType)(cb(data.caller))), assertVersion };
      }
      function makePresetAPI(cache, externalDependencies) {
        return Object.assign({}, makeConfigAPI(cache), { targets: () => JSON.parse(cache.using((data) => JSON.stringify(data.targets))), addExternalDependency: (ref) => {
          externalDependencies.push(ref);
        } });
      }
      function assertVersion(range) {
        if (typeof range == "number") {
          if (!Number.isInteger(range))
            throw new Error("Expected string or integer value.");
          range = `^${range}.0.0-0`;
        }
        if (typeof range != "string")
          throw new Error("Expected string or integer value.");
        if (range === "*" || _semver().satisfies(_index.version, range))
          return;
        const limit = Error.stackTraceLimit;
        typeof limit == "number" && limit < 25 && (Error.stackTraceLimit = 25);
        const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
        throw typeof limit == "number" && (Error.stackTraceLimit = limit), Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: _index.version, range });
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.finalize = function(deepArr) {
        return Object.freeze(deepArr);
      }, exports2.flattenToSet = function(arr) {
        const result = new Set, stack = [arr];
        for (;stack.length > 0; )
          for (const el of stack.pop())
            Array.isArray(el) ? stack.push(el) : result.add(el);
        return result;
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.getEnv = function(defaultValue = "development") {
        return process.env.BABEL_ENV || "development";
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function(target, options, callback) {
        if (callback !== undefined)
          (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options, callback);
        else {
          if (typeof options != "function")
            return createConfigItemSync(target, options);
          (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, undefined, callback);
        }
      }, exports2.createConfigItemAsync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
      }, exports2.createConfigItemSync = createConfigItemSync, Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
        return _full.default;
      } }), exports2.loadOptions = function(opts, callback) {
        if (callback !== undefined)
          (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
        else {
          if (typeof opts != "function")
            return loadOptionsSync(opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(undefined, opts);
        }
      }, exports2.loadOptionsAsync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
      }, exports2.loadOptionsSync = loadOptionsSync, exports2.loadPartialConfig = function(opts, callback) {
        if (callback !== undefined)
          (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
        else {
          if (typeof opts != "function")
            return loadPartialConfigSync(opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(undefined, opts);
        }
      }, exports2.loadPartialConfigAsync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
      }, exports2.loadPartialConfigSync = loadPartialConfigSync;
      var _full = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/full.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
      const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
      function loadPartialConfigSync(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
      }
      const loadOptionsRunner = _gensync()(function* (opts) {
        var _config$options;
        const config = yield* (0, _full.default)(opts);
        return (_config$options = config == null ? undefined : config.options) != null ? _config$options : null;
      });
      function loadOptionsSync(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
      }
      const createConfigItemRunner = _gensync()(_item.createConfigItem);
      function createConfigItemSync(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function* (value2, { dirname: dirname2 = ".", type } = {}) {
        return createItemFromDescriptor(yield* (0, _configDescriptors.createDescriptor)(value2, _path().resolve(dirname2), { type, alias: "programmatic item" }));
      }, exports2.createItemFromDescriptor = createItemFromDescriptor, exports2.getItemDescriptor = function(item) {
        if (item != null && item[CONFIG_ITEM_BRAND])
          return item._descriptor;
        return;
      };
      var _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-descriptors.js");
      function createItemFromDescriptor(desc) {
        return new ConfigItem(desc);
      }
      const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");

      class ConfigItem {
        constructor(descriptor) {
          this._descriptor = undefined, this[CONFIG_ITEM_BRAND] = true, this.value = undefined, this.options = undefined, this.dirname = undefined, this.name = undefined, this.file = undefined, this._descriptor = descriptor, Object.defineProperty(this, "_descriptor", { enumerable: false }), Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: false }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name = this._descriptor.name, this.file = this._descriptor.file ? { request: this._descriptor.file.request, resolved: this._descriptor.file.resolved } : undefined, Object.freeze(this);
        }
      }
      Object.freeze(ConfigItem.prototype);
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/partial.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = loadPrivatePartialConfig, exports2.loadPartialConfig = function* (opts) {
        let showIgnoredFiles = false;
        if (typeof opts == "object" && opts !== null && !Array.isArray(opts)) {
          var _opts = opts;
          ({ showIgnoredFiles } = _opts), opts = function(r, e) {
            if (r == null)
              return {};
            var t = {};
            for (var n in r)
              if ({}.hasOwnProperty.call(r, n)) {
                if (e.includes(n))
                  continue;
                t[n] = r[n];
              }
            return t;
          }(_opts, _excluded);
        }
        const result = yield* loadPrivatePartialConfig(opts);
        if (!result)
          return null;
        const { options, babelrc, ignore, config, fileHandling, files } = result;
        if (fileHandling === "ignored" && !showIgnoredFiles)
          return null;
        return (options.plugins || []).forEach((item) => {
          if (item.value instanceof _plugin.default)
            throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
        }), new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined, fileHandling, files);
      };
      var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/config-chain.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js");
      const _excluded = ["showIgnoredFiles"];
      function* loadPrivatePartialConfig(inputOpts) {
        if (inputOpts != null && (typeof inputOpts != "object" || Array.isArray(inputOpts)))
          throw new Error("Babel options must be an object, null, or undefined");
        const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {}, { envName = (0, _environment.getEnv)(), cwd = ".", root: rootDir = ".", rootMode = "root", caller, cloneInputAst = true } = args, absoluteCwd = _path().resolve(cwd), absoluteRootDir = function(rootDir2, rootMode2) {
          switch (rootMode2) {
            case "root":
              return rootDir2;
            case "upward-optional": {
              const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
              return upwardRootDir === null ? rootDir2 : upwardRootDir;
            }
            case "upward": {
              const upwardRootDir = (0, _index.findConfigUpwards)(rootDir2);
              if (upwardRootDir !== null)
                return upwardRootDir;
              throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir2}".
One of the following config files must be in the directory tree: "${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), { code: "BABEL_ROOT_NOT_FOUND", dirname: rootDir2 });
            }
            default:
              throw new Error("Assertion failure - unknown rootMode value.");
          }
        }(_path().resolve(absoluteCwd, rootDir), rootMode), filename = typeof args.filename == "string" ? _path().resolve(cwd, args.filename) : undefined, context = { filename, cwd: absoluteCwd, root: absoluteRootDir, envName, caller, showConfig: (yield* (0, _index.resolveShowConfigPath)(absoluteCwd)) === filename }, configChain = yield* (0, _configChain.buildRootChain)(args, context);
        if (!configChain)
          return null;
        const merged = { assumptions: {} };
        configChain.options.forEach((opts) => {
          (0, _util.mergeOptions)(merged, opts);
        });
        return { options: Object.assign({}, merged, { targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir), cloneInputAst, babelrc: false, configFile: false, browserslistConfigFile: false, passPerPreset: false, envName: context.envName, cwd: context.cwd, root: context.root, rootMode: "root", filename: typeof context.filename == "string" ? context.filename : undefined, plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)), presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)) }), context, fileHandling: configChain.fileHandling, ignore: configChain.ignore, babelrc: configChain.babelrc, config: configChain.config, files: configChain.files };
      }

      class PartialConfig {
        constructor(options, babelrc, ignore, config, fileHandling, files) {
          this.options = undefined, this.babelrc = undefined, this.babelignore = undefined, this.config = undefined, this.fileHandling = undefined, this.files = undefined, this.options = options, this.babelignore = ignore, this.babelrc = babelrc, this.config = config, this.fileHandling = fileHandling, this.files = files, Object.freeze(this);
        }
        hasFilesystemConfig() {
          return this.babelrc !== undefined || this.config !== undefined;
        }
      }
      Object.freeze(PartialConfig.prototype);
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/pattern-to-regex.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pattern, dirname2) {
        const parts = _path().resolve(dirname2, pattern).split(_path().sep);
        return new RegExp(["^", ...parts.map((part, i) => {
          const last = i === parts.length - 1;
          return part === "**" ? last ? starStarPatLast : starStarPat : part === "*" ? last ? starPatLast : starPat : part.indexOf("*.") === 0 ? substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep) : escapeRegExp(part) + (last ? endSep : sep);
        })].join(""));
      };
      const sep = `\\${_path().sep}`, endSep = `(?:${sep}|$)`, substitution = `[^${sep}]+`, starPat = `(?:${substitution}${sep})`, starPatLast = `(?:${substitution}${endSep})`, starStarPat = `${starPat}*?`, starStarPatLast = `${starPat}*?${starPatLast}?`;
      function escapeRegExp(string) {
        return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js");
      exports2.default = class {
        constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
          this.key = undefined, this.manipulateOptions = undefined, this.post = undefined, this.pre = undefined, this.visitor = undefined, this.parserOverride = undefined, this.generatorOverride = undefined, this.options = undefined, this.externalDependencies = undefined, this.key = plugin.name || key, this.manipulateOptions = plugin.manipulateOptions, this.post = plugin.post, this.pre = plugin.pre, this.visitor = plugin.visitor || {}, this.parserOverride = plugin.parserOverride, this.generatorOverride = plugin.generatorOverride, this.options = options, this.externalDependencies = externalDependencies;
        }
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ConfigPrinter = exports2.ChainFormatter = undefined;
      const ChainFormatter = exports2.ChainFormatter = { Programmatic: 0, Config: 1 }, Formatter = { title(type, callerName, filepath) {
        let title = "";
        return type === ChainFormatter.Programmatic ? (title = "programmatic options", callerName && (title += " from " + callerName)) : title = "config " + filepath, title;
      }, loc(index, envName) {
        let loc = "";
        return index != null && (loc += `.overrides[${index}]`), envName != null && (loc += `.env["${envName}"]`), loc;
      }, *optionsAndDescriptors(opt) {
        const content = Object.assign({}, opt.options);
        delete content.overrides, delete content.env;
        const pluginDescriptors = [...yield* opt.plugins()];
        pluginDescriptors.length && (content.plugins = pluginDescriptors.map((d) => descriptorToConfig(d)));
        const presetDescriptors = [...yield* opt.presets()];
        return presetDescriptors.length && (content.presets = [...presetDescriptors].map((d) => descriptorToConfig(d))), JSON.stringify(content, undefined, 2);
      } };
      function descriptorToConfig(d) {
        var _d$file;
        let name = (_d$file = d.file) == null ? undefined : _d$file.request;
        return name == null && (typeof d.value == "object" ? name = d.value : typeof d.value == "function" && (name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`)), name == null && (name = "[Unknown]"), d.options === undefined ? name : d.name == null ? [name, d.options] : [name, d.options, d.name];
      }

      class ConfigPrinter {
        constructor() {
          this._stack = [];
        }
        configure(enabled, type, { callerName, filepath }) {
          return enabled ? (content, index, envName) => {
            this._stack.push({ type, callerName, filepath, content, index, envName });
          } : () => {
          };
        }
        static *format(config) {
          let title = Formatter.title(config.type, config.callerName, config.filepath);
          const loc = Formatter.loc(config.index, config.envName);
          loc && (title += ` ${loc}`);
          return `${title}
${yield* Formatter.optionsAndDescriptors(config.content)}`;
        }
        *output() {
          if (this._stack.length === 0)
            return "";
          return (yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)))).join(`

`);
        }
      }
      exports2.ConfigPrinter = ConfigPrinter;
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/resolve-targets.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      function _helperCompilationTargets() {
        const data = __webpack_require__2("./stubs/helper-compilation-targets.mjs");
        return _helperCompilationTargets = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.resolveBrowserslistConfigFile = function(browserslistConfigFile, configFileDir) {
        return _path().resolve(configFileDir, browserslistConfigFile);
      }, exports2.resolveTargets = function(options, root) {
        const optTargets = options.targets;
        let targets;
        typeof optTargets == "string" || Array.isArray(optTargets) ? targets = { browsers: optTargets } : optTargets && (targets = ("esmodules" in optTargets) ? Object.assign({}, optTargets, { esmodules: "intersect" }) : optTargets);
        const { browserslistConfigFile } = options;
        let configFile, ignoreBrowserslistConfig = false;
        typeof browserslistConfigFile == "string" ? configFile = browserslistConfigFile : ignoreBrowserslistConfig = browserslistConfigFile === false;
        return (0, _helperCompilationTargets().default)(targets, { ignoreBrowserslistConfig, configFile, configPath: root, browserslistEnv: options.browserslistEnv });
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/util.js": (__unused_webpack_module, exports2) => {
      function mergeDefaultFields(target, source) {
        for (const k of Object.keys(source)) {
          const val = source[k];
          val !== undefined && (target[k] = val);
        }
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIterableIterator = function(value2) {
        return !!value2 && typeof value2.next == "function" && typeof value2[Symbol.iterator] == "function";
      }, exports2.mergeOptions = function(target, source) {
        for (const k of Object.keys(source))
          if (k !== "parserOpts" && k !== "generatorOpts" && k !== "assumptions" || !source[k]) {
            const val = source[k];
            val !== undefined && (target[k] = val);
          } else {
            const parserOpts = source[k];
            mergeDefaultFields(target[k] || (target[k] = {}), parserOpts);
          }
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _helperCompilationTargets() {
        const data = __webpack_require__2("./stubs/helper-compilation-targets.mjs");
        return _helperCompilationTargets = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.access = access, exports2.assertArray = assertArray, exports2.assertAssumptions = function(loc, value2) {
        if (value2 === undefined)
          return;
        if (typeof value2 != "object" || value2 === null)
          throw new Error(`${msg(loc)} must be an object or undefined.`);
        let root = loc;
        do {
          root = root.parent;
        } while (root.type !== "root");
        const inPreset = root.source === "preset";
        for (const name of Object.keys(value2)) {
          const subLoc = access(loc, name);
          if (!_options.assumptionsNames.has(name))
            throw new Error(`${msg(subLoc)} is not a supported assumption.`);
          if (typeof value2[name] != "boolean")
            throw new Error(`${msg(subLoc)} must be a boolean.`);
          if (inPreset && value2[name] === false)
            throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
        }
        return value2;
      }, exports2.assertBabelrcSearch = function(loc, value2) {
        if (value2 === undefined || typeof value2 == "boolean")
          return value2;
        if (Array.isArray(value2))
          value2.forEach((item, i) => {
            if (!checkValidTest(item))
              throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
          });
        else if (!checkValidTest(value2))
          throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value2)}`);
        return value2;
      }, exports2.assertBoolean = assertBoolean, exports2.assertCallerMetadata = function(loc, value2) {
        const obj = assertObject(loc, value2);
        if (obj) {
          if (typeof obj.name != "string")
            throw new Error(`${msg(loc)} set but does not contain "name" property string`);
          for (const prop of Object.keys(obj)) {
            const propLoc = access(loc, prop), value3 = obj[prop];
            if (value3 != null && typeof value3 != "boolean" && typeof value3 != "string" && typeof value3 != "number")
              throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
          }
        }
        return value2;
      }, exports2.assertCompact = function(loc, value2) {
        if (value2 !== undefined && typeof value2 != "boolean" && value2 !== "auto")
          throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
        return value2;
      }, exports2.assertConfigApplicableTest = function(loc, value2) {
        if (value2 === undefined)
          return value2;
        if (Array.isArray(value2))
          value2.forEach((item, i) => {
            if (!checkValidTest(item))
              throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
          });
        else if (!checkValidTest(value2))
          throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
        return value2;
      }, exports2.assertConfigFileSearch = function(loc, value2) {
        if (value2 !== undefined && typeof value2 != "boolean" && typeof value2 != "string")
          throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value2)}`);
        return value2;
      }, exports2.assertFunction = function(loc, value2) {
        if (value2 !== undefined && typeof value2 != "function")
          throw new Error(`${msg(loc)} must be a function, or undefined`);
        return value2;
      }, exports2.assertIgnoreList = function(loc, value2) {
        const arr = assertArray(loc, value2);
        return arr == null || arr.forEach((item, i) => function(loc2, value3) {
          if (typeof value3 != "string" && typeof value3 != "function" && !(value3 instanceof RegExp))
            throw new Error(`${msg(loc2)} must be an array of string/Function/RegExp values, or undefined`);
          return value3;
        }(access(loc, i), item)), arr;
      }, exports2.assertInputSourceMap = function(loc, value2) {
        if (value2 !== undefined && typeof value2 != "boolean" && (typeof value2 != "object" || !value2))
          throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
        return value2;
      }, exports2.assertObject = assertObject, exports2.assertPluginList = function(loc, value2) {
        const arr = assertArray(loc, value2);
        arr && arr.forEach((item, i) => function(loc2, value3) {
          if (Array.isArray(value3)) {
            if (value3.length === 0)
              throw new Error(`${msg(loc2)} must include an object`);
            if (value3.length > 3)
              throw new Error(`${msg(loc2)} may only be a two-tuple or three-tuple`);
            if (assertPluginTarget(access(loc2, 0), value3[0]), value3.length > 1) {
              const opts = value3[1];
              if (opts !== undefined && opts !== false && (typeof opts != "object" || Array.isArray(opts) || opts === null))
                throw new Error(`${msg(access(loc2, 1))} must be an object, false, or undefined`);
            }
            if (value3.length === 3) {
              const name = value3[2];
              if (name !== undefined && typeof name != "string")
                throw new Error(`${msg(access(loc2, 2))} must be a string, or undefined`);
            }
          } else
            assertPluginTarget(loc2, value3);
          return value3;
        }(access(loc, i), item));
        return arr;
      }, exports2.assertRootMode = function(loc, value2) {
        if (value2 !== undefined && value2 !== "root" && value2 !== "upward" && value2 !== "upward-optional")
          throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
        return value2;
      }, exports2.assertSourceMaps = function(loc, value2) {
        if (value2 !== undefined && typeof value2 != "boolean" && value2 !== "inline" && value2 !== "both")
          throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
        return value2;
      }, exports2.assertSourceType = function(loc, value2) {
        if (value2 !== undefined && value2 !== "module" && value2 !== "script" && value2 !== "unambiguous")
          throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
        return value2;
      }, exports2.assertString = function(loc, value2) {
        if (value2 !== undefined && typeof value2 != "string")
          throw new Error(`${msg(loc)} must be a string, or undefined`);
        return value2;
      }, exports2.assertTargets = function(loc, value2) {
        if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value2))
          return value2;
        if (typeof value2 != "object" || !value2 || Array.isArray(value2))
          throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
        const browsersLoc = access(loc, "browsers"), esmodulesLoc = access(loc, "esmodules");
        assertBrowsersList(browsersLoc, value2.browsers), assertBoolean(esmodulesLoc, value2.esmodules);
        for (const key of Object.keys(value2)) {
          const val = value2[key], subLoc = access(loc, key);
          if (key === "esmodules")
            assertBoolean(subLoc, val);
          else if (key === "browsers")
            assertBrowsersList(subLoc, val);
          else {
            if (!hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
              const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
              throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
            }
            assertBrowserVersion(subLoc, val);
          }
        }
        return value2;
      }, exports2.msg = msg;
      var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js");
      function msg(loc) {
        switch (loc.type) {
          case "root":
            return "";
          case "env":
            return `${msg(loc.parent)}.env["${loc.name}"]`;
          case "overrides":
            return `${msg(loc.parent)}.overrides[${loc.index}]`;
          case "option":
            return `${msg(loc.parent)}.${loc.name}`;
          case "access":
            return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
          default:
            throw new Error(`Assertion failure: Unknown type ${loc.type}`);
        }
      }
      function access(loc, name) {
        return { type: "access", name, parent: loc };
      }
      function assertBoolean(loc, value2) {
        if (value2 !== undefined && typeof value2 != "boolean")
          throw new Error(`${msg(loc)} must be a boolean, or undefined`);
        return value2;
      }
      function assertObject(loc, value2) {
        if (value2 !== undefined && (typeof value2 != "object" || Array.isArray(value2) || !value2))
          throw new Error(`${msg(loc)} must be an object, or undefined`);
        return value2;
      }
      function assertArray(loc, value2) {
        if (value2 != null && !Array.isArray(value2))
          throw new Error(`${msg(loc)} must be an array, or undefined`);
        return value2;
      }
      function checkValidTest(value2) {
        return typeof value2 == "string" || typeof value2 == "function" || value2 instanceof RegExp;
      }
      function assertPluginTarget(loc, value2) {
        if ((typeof value2 != "object" || !value2) && typeof value2 != "string" && typeof value2 != "function")
          throw new Error(`${msg(loc)} must be a string, object, function`);
        return value2;
      }
      function assertBrowsersList(loc, value2) {
        if (value2 !== undefined && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value2))
          throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
      }
      function assertBrowserVersion(loc, value2) {
        if ((typeof value2 != "number" || Math.round(value2) !== value2) && typeof value2 != "string")
          throw new Error(`${msg(loc)} must be a string or an integer number`);
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/options.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assumptionsNames = undefined, exports2.checkNoUnwrappedItemOptionPairs = function(items, index, type, e) {
        if (index === 0)
          return;
        const lastItem = items[index - 1], thisItem = items[index];
        lastItem.file && lastItem.options === undefined && typeof thisItem.value == "object" && (e.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, undefined, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`);
      }, exports2.validate = function(type, opts, filename) {
        try {
          return validateNested({ type: "root", source: type }, opts);
        } catch (error) {
          const configError = new _configError.default(error.message, filename);
          throw error.code && (configError.code = error.code), configError;
        }
      };
      var _removed = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js"), _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js");
      const ROOT_VALIDATORS = { cwd: _optionAssertions.assertString, root: _optionAssertions.assertString, rootMode: _optionAssertions.assertRootMode, configFile: _optionAssertions.assertConfigFileSearch, caller: _optionAssertions.assertCallerMetadata, filename: _optionAssertions.assertString, filenameRelative: _optionAssertions.assertString, code: _optionAssertions.assertBoolean, ast: _optionAssertions.assertBoolean, cloneInputAst: _optionAssertions.assertBoolean, envName: _optionAssertions.assertString }, BABELRC_VALIDATORS = { babelrc: _optionAssertions.assertBoolean, babelrcRoots: _optionAssertions.assertBabelrcSearch }, NONPRESET_VALIDATORS = { extends: _optionAssertions.assertString, ignore: _optionAssertions.assertIgnoreList, only: _optionAssertions.assertIgnoreList, targets: _optionAssertions.assertTargets, browserslistConfigFile: _optionAssertions.assertConfigFileSearch, browserslistEnv: _optionAssertions.assertString }, COMMON_VALIDATORS = { inputSourceMap: _optionAssertions.assertInputSourceMap, presets: _optionAssertions.assertPluginList, plugins: _optionAssertions.assertPluginList, passPerPreset: _optionAssertions.assertBoolean, assumptions: _optionAssertions.assertAssumptions, env: function(loc, value2) {
        if (loc.parent.type === "env")
          throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
        const parent = loc.parent, obj = (0, _optionAssertions.assertObject)(loc, value2);
        if (obj)
          for (const envName of Object.keys(obj)) {
            const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
            if (!env)
              continue;
            validateNested({ type: "env", name: envName, parent }, env);
          }
        return obj;
      }, overrides: function(loc, value2) {
        if (loc.parent.type === "env")
          throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
        if (loc.parent.type === "overrides")
          throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
        const parent = loc.parent, arr = (0, _optionAssertions.assertArray)(loc, value2);
        if (arr)
          for (const [index, item] of arr.entries()) {
            const objLoc = (0, _optionAssertions.access)(loc, index), env = (0, _optionAssertions.assertObject)(objLoc, item);
            if (!env)
              throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
            validateNested({ type: "overrides", index, parent }, env);
          }
        return arr;
      }, test: _optionAssertions.assertConfigApplicableTest, include: _optionAssertions.assertConfigApplicableTest, exclude: _optionAssertions.assertConfigApplicableTest, retainLines: _optionAssertions.assertBoolean, comments: _optionAssertions.assertBoolean, shouldPrintComment: _optionAssertions.assertFunction, compact: _optionAssertions.assertCompact, minified: _optionAssertions.assertBoolean, auxiliaryCommentBefore: _optionAssertions.assertString, auxiliaryCommentAfter: _optionAssertions.assertString, sourceType: _optionAssertions.assertSourceType, wrapPluginVisitorMethod: _optionAssertions.assertFunction, highlightCode: _optionAssertions.assertBoolean, sourceMaps: _optionAssertions.assertSourceMaps, sourceMap: _optionAssertions.assertSourceMaps, sourceFileName: _optionAssertions.assertString, sourceRoot: _optionAssertions.assertString, parserOpts: _optionAssertions.assertObject, generatorOpts: _optionAssertions.assertObject };
      Object.assign(COMMON_VALIDATORS, { getModuleId: _optionAssertions.assertFunction, moduleRoot: _optionAssertions.assertString, moduleIds: _optionAssertions.assertBoolean, moduleId: _optionAssertions.assertString });
      exports2.assumptionsNames = new Set(["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUninitializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"]);
      function getSource(loc) {
        return loc.type === "root" ? loc.source : getSource(loc.parent);
      }
      function validateNested(loc, opts) {
        const type = getSource(loc);
        return function(opts2) {
          if (hasOwnProperty.call(opts2, "sourceMap") && hasOwnProperty.call(opts2, "sourceMaps"))
            throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
        }(opts), Object.keys(opts).forEach((key) => {
          const optLoc = { type: "option", name: key, parent: loc };
          if (type === "preset" && NONPRESET_VALIDATORS[key])
            throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
          if (type !== "arguments" && ROOT_VALIDATORS[key])
            throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
          if (type !== "arguments" && type !== "configfile" && BABELRC_VALIDATORS[key]) {
            if (type === "babelrcfile" || type === "extendsfile")
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
            throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
          }
          (COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError)(optLoc, opts[key]);
        }), opts;
      }
      function throwUnknownError(loc) {
        const key = loc.name;
        if (_removed.default[key]) {
          const { message, version = 5 } = _removed.default[key];
          throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
        }
        {
          const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
          throw unknownOptErr.code = "BABEL_UNKNOWN_OPTION", unknownOptErr;
        }
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.validatePluginObject = function(obj) {
        const rootPath = { type: "root", source: "plugin" };
        return Object.keys(obj).forEach((key) => {
          const validator = VALIDATORS[key];
          if (!validator) {
            const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
            throw invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", invalidPluginPropertyError;
          }
          validator({ type: "option", name: key, parent: rootPath }, obj[key]);
        }), obj;
      };
      var _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/option-assertions.js");
      const VALIDATORS = { name: _optionAssertions.assertString, manipulateOptions: _optionAssertions.assertFunction, pre: _optionAssertions.assertFunction, post: _optionAssertions.assertFunction, inherits: _optionAssertions.assertFunction, visitor: function(loc, value2) {
        const obj = (0, _optionAssertions.assertObject)(loc, value2);
        if (obj && (Object.keys(obj).forEach((prop) => {
          prop !== "_exploded" && prop !== "_verified" && function(key, value3) {
            if (value3 && typeof value3 == "object")
              Object.keys(value3).forEach((handler) => {
                if (handler !== "enter" && handler !== "exit")
                  throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
              });
            else if (typeof value3 != "function")
              throw new Error(`.visitor["${key}"] must be a function`);
          }(prop, obj[prop]);
        }), obj.enter || obj.exit))
          throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
        return obj;
      }, parserOverride: _optionAssertions.assertFunction, generatorOverride: _optionAssertions.assertFunction };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/validation/removed.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      exports2.default = { auxiliaryComment: { message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`" }, blacklist: { message: "Put the specific transforms you want in the `plugins` option" }, breakConfig: { message: "This is not a necessary option in Babel 6" }, experimental: { message: "Put the specific transforms you want in the `plugins` option" }, externalHelpers: { message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/" }, extra: { message: "" }, jsxPragma: { message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/" }, loose: { message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option." }, metadataUsedHelpers: { message: "Not required anymore as this is enabled by default" }, modules: { message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules" }, nonStandard: { message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/" }, optional: { message: "Put the specific transforms you want in the `plugins` option" }, sourceMapName: { message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." }, stage: { message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets" }, whitelist: { message: "Put the specific transforms you want in the `plugins` option" }, resolveModuleSource: { version: 6, message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options" }, metadata: { version: 6, message: "Generated plugin metadata is always included in the output result" }, sourceMapTarget: { version: 6, message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." } };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/config-error.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");

      class ConfigError extends Error {
        constructor(message, filename) {
          super(message), (0, _rewriteStackTrace.expectedError)(this), filename && (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
        }
      }
      exports2.default = ConfigError;
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js": (__unused_webpack_module, exports2) => {
      var _Object$getOwnPropert;
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.beginHiddenCallStack = function(fn) {
        return SUPPORTED ? Object.defineProperty(function(...args) {
          return setupPrepareStackTrace(), fn(...args);
        }, "name", { value: STOP_HIDING }) : fn;
      }, exports2.endHiddenCallStack = function(fn) {
        return SUPPORTED ? Object.defineProperty(function(...args) {
          return fn(...args);
        }, "name", { value: START_HIDING }) : fn;
      }, exports2.expectedError = function(error) {
        if (!SUPPORTED)
          return;
        return expectedErrors.add(error), error;
      }, exports2.injectVirtualStackFrame = function(error, filename) {
        if (!SUPPORTED)
          return;
        let frames = virtualFrames.get(error);
        frames || virtualFrames.set(error, frames = []);
        return frames.push(function(filename2) {
          return Object.create({ isNative: () => false, isConstructor: () => false, isToplevel: () => true, getFileName: () => filename2, getLineNumber: () => {
          }, getColumnNumber: () => {
          }, getFunctionName: () => {
          }, getMethodName: () => {
          }, getTypeName: () => {
          }, toString: () => filename2 });
        }(filename)), error;
      };
      const ErrorToString = Function.call.bind(Error.prototype.toString), SUPPORTED = !!Error.captureStackTrace && ((_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) == null ? undefined : _Object$getOwnPropert.writable) === true, START_HIDING = "startHiding - secret - don't use this - v1", STOP_HIDING = "stopHiding - secret - don't use this - v1", expectedErrors = new WeakSet, virtualFrames = new WeakMap;
      function setupPrepareStackTrace() {
        setupPrepareStackTrace = () => {
        };
        const { prepareStackTrace = defaultPrepareStackTrace } = Error;
        Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, 50)), Error.prepareStackTrace = function(err, trace) {
          let newTrace = [];
          let status = expectedErrors.has(err) ? "hiding" : "unknown";
          for (let i = 0;i < trace.length; i++) {
            const name = trace[i].getFunctionName();
            if (name === START_HIDING)
              status = "hiding";
            else if (name === STOP_HIDING) {
              if (status === "hiding")
                status = "showing", virtualFrames.has(err) && newTrace.unshift(...virtualFrames.get(err));
              else if (status === "unknown") {
                newTrace = trace;
                break;
              }
            } else
              status !== "hiding" && newTrace.push(trace[i]);
          }
          return prepareStackTrace(err, newTrace);
        };
      }
      function defaultPrepareStackTrace(err, trace) {
        return trace.length === 0 ? ErrorToString(err) : `${ErrorToString(err)}
    at ${trace.join(`
    at `)}`;
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      function asyncGeneratorStep(n, t, e, r, o, a, c) {
        try {
          var i = n[a](c), u = i.value;
        } catch (n2) {
          return void e(n2);
        }
        i.done ? t(u) : Promise.resolve(u).then(r, o);
      }
      function _asyncToGenerator(n) {
        return function() {
          var t = this, e = arguments;
          return new Promise(function(r, o) {
            var a = n.apply(t, e);
            function _next(n2) {
              asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
            }
            function _throw(n2) {
              asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
            }
            _next(undefined);
          });
        };
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.forwardAsync = function(action, cb) {
        const g = _gensync()(action);
        return withKind((kind) => {
          const adapted = g[kind];
          return cb(adapted);
        });
      }, exports2.isAsync = undefined, exports2.isThenable = isThenable, exports2.maybeAsync = function(fn, message) {
        return _gensync()({ sync(...args) {
          const result = fn.apply(this, args);
          if (isThenable(result))
            throw new Error(message);
          return result;
        }, async(...args) {
          return Promise.resolve(fn.apply(this, args));
        } });
      }, exports2.waitFor = exports2.onFirstPause = undefined;
      const runGenerator = _gensync()(function* (item) {
        return yield* item;
      });
      exports2.isAsync = _gensync()({ sync: () => false, errback: (cb) => cb(null, true) });
      const withKind = _gensync()({ sync: (cb) => cb("sync"), async: (_ref = _asyncToGenerator(function* (cb) {
        return cb("async");
      }), function(_x) {
        return _ref.apply(this, arguments);
      }) });
      var _ref;
      exports2.onFirstPause = _gensync()({ name: "onFirstPause", arity: 2, sync: function(item) {
        return runGenerator.sync(item);
      }, errback: function(item, firstPause, cb) {
        let completed = false;
        runGenerator.errback(item, (err, value2) => {
          completed = true, cb(err, value2);
        }), completed || firstPause();
      } }), exports2.waitFor = _gensync()({ sync: (x) => x, async: (_ref2 = _asyncToGenerator(function* (x) {
        return x;
      }), function(_x2) {
        return _ref2.apply(this, arguments);
      }) });
      var _ref2;
      function isThenable(val) {
        return !(!val || typeof val != "object" && typeof val != "function" || !val.then || typeof val.then != "function");
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _fs() {
        const data = __webpack_require__2("fs");
        return _fs = function() {
          return data;
        }, data;
      }
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.stat = exports2.readFile = undefined;
      exports2.readFile = _gensync()({ sync: _fs().readFileSync, errback: _fs().readFile }), exports2.stat = _gensync()({ sync: _fs().statSync, errback: _fs().stat });
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/functional.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.once = function(fn) {
        let result, resultP, promiseReferenced = false;
        return function* () {
          if (!result) {
            if (resultP)
              return promiseReferenced = true, yield* (0, _async.waitFor)(resultP);
            if (yield* (0, _async.isAsync)()) {
              let resolve, reject;
              resultP = new Promise((res, rej) => {
                resolve = res, reject = rej;
              });
              try {
                result = { ok: true, value: yield* fn() }, resultP = null, promiseReferenced && resolve(result.value);
              } catch (error) {
                result = { ok: false, value: error }, resultP = null, promiseReferenced && reject(error);
              }
            } else
              try {
                result = { ok: true, value: yield* fn() };
              } catch (error) {
                result = { ok: false, value: error };
              }
          }
          if (result.ok)
            return result.value;
          throw result.value;
        };
      };
      var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.DEFAULT_EXTENSIONS = undefined, Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
        return _file.default;
      } }), Object.defineProperty(exports2, "buildExternalHelpers", { enumerable: true, get: function() {
        return _buildExternalHelpers.default;
      } }), Object.defineProperty(exports2, "createConfigItem", { enumerable: true, get: function() {
        return _index2.createConfigItem;
      } }), Object.defineProperty(exports2, "createConfigItemAsync", { enumerable: true, get: function() {
        return _index2.createConfigItemAsync;
      } }), Object.defineProperty(exports2, "createConfigItemSync", { enumerable: true, get: function() {
        return _index2.createConfigItemSync;
      } }), Object.defineProperty(exports2, "getEnv", { enumerable: true, get: function() {
        return _environment.getEnv;
      } }), Object.defineProperty(exports2, "loadOptions", { enumerable: true, get: function() {
        return _index2.loadOptions;
      } }), Object.defineProperty(exports2, "loadOptionsAsync", { enumerable: true, get: function() {
        return _index2.loadOptionsAsync;
      } }), Object.defineProperty(exports2, "loadOptionsSync", { enumerable: true, get: function() {
        return _index2.loadOptionsSync;
      } }), Object.defineProperty(exports2, "loadPartialConfig", { enumerable: true, get: function() {
        return _index2.loadPartialConfig;
      } }), Object.defineProperty(exports2, "loadPartialConfigAsync", { enumerable: true, get: function() {
        return _index2.loadPartialConfigAsync;
      } }), Object.defineProperty(exports2, "loadPartialConfigSync", { enumerable: true, get: function() {
        return _index2.loadPartialConfigSync;
      } }), Object.defineProperty(exports2, "parse", { enumerable: true, get: function() {
        return _parse.parse;
      } }), Object.defineProperty(exports2, "parseAsync", { enumerable: true, get: function() {
        return _parse.parseAsync;
      } }), Object.defineProperty(exports2, "parseSync", { enumerable: true, get: function() {
        return _parse.parseSync;
      } }), exports2.resolvePreset = exports2.resolvePlugin = undefined, Object.defineProperty(exports2, "template", { enumerable: true, get: function() {
        return _template().default;
      } }), Object.defineProperty(exports2, "tokTypes", { enumerable: true, get: function() {
        return _parser().tokTypes;
      } }), Object.defineProperty(exports2, "transform", { enumerable: true, get: function() {
        return _transform.transform;
      } }), Object.defineProperty(exports2, "transformAsync", { enumerable: true, get: function() {
        return _transform.transformAsync;
      } }), Object.defineProperty(exports2, "transformFile", { enumerable: true, get: function() {
        return _transformFile.transformFile;
      } }), Object.defineProperty(exports2, "transformFileAsync", { enumerable: true, get: function() {
        return _transformFile.transformFileAsync;
      } }), Object.defineProperty(exports2, "transformFileSync", { enumerable: true, get: function() {
        return _transformFile.transformFileSync;
      } }), Object.defineProperty(exports2, "transformFromAst", { enumerable: true, get: function() {
        return _transformAst.transformFromAst;
      } }), Object.defineProperty(exports2, "transformFromAstAsync", { enumerable: true, get: function() {
        return _transformAst.transformFromAstAsync;
      } }), Object.defineProperty(exports2, "transformFromAstSync", { enumerable: true, get: function() {
        return _transformAst.transformFromAstSync;
      } }), Object.defineProperty(exports2, "transformSync", { enumerable: true, get: function() {
        return _transform.transformSync;
      } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
        return _traverse().default;
      } }), exports2.version = exports2.types = undefined;
      var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _buildExternalHelpers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js"), resolvers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/files/index.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/environment.js");
      function _types() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        return _types = function() {
          return data;
        }, data;
      }
      function _parser() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
        return _parser = function() {
          return data;
        }, data;
      }
      function _traverse() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        return _traverse = function() {
          return data;
        }, data;
      }
      function _template() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
        return _template = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "types", { enumerable: true, get: function() {
        return _types();
      } });
      var _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _transform = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js"), _transformAst = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js");
      __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
      exports2.version = "7.26.0";
      exports2.resolvePlugin = (name, dirname2) => resolvers.resolvePlugin(name, dirname2, false).filepath;
      exports2.resolvePreset = (name, dirname2) => resolvers.resolvePreset(name, dirname2, false).filepath;
      exports2.DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
      exports2.OptionManager = class {
        init(opts) {
          return (0, _index2.loadOptionsSync)(opts);
        }
      }, exports2.Plugin = function(alias) {
        throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.parse = undefined, exports2.parseAsync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
      }, exports2.parseSync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
      const parseRunner = _gensync()(function* (code, opts) {
        const config = yield* (0, _index.default)(opts);
        return config === null ? null : yield* (0, _index2.default)(config.passes, (0, _normalizeOpts.default)(config), code);
      });
      exports2.parse = function(code, opts, callback) {
        if (typeof opts == "function" && (callback = opts, opts = undefined), callback === undefined)
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
        (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _parser() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js");
        return _parser = function() {
          return data;
        }, data;
      }
      function _codeFrame() {
        const data = __webpack_require__2("./stubs/babel-codeframe.mjs");
        return _codeFrame = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, { parserOpts, highlightCode = true, filename = "unknown" }, code) {
        try {
          const results = [];
          for (const plugins of pluginPasses)
            for (const plugin of plugins) {
              const { parserOverride } = plugin;
              if (parserOverride) {
                const ast = parserOverride(code, parserOpts, _parser().parse);
                ast !== undefined && results.push(ast);
              }
            }
          if (results.length === 0)
            return (0, _parser().parse)(code, parserOpts);
          if (results.length === 1) {
            if (yield* [], typeof results[0].then == "function")
              throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            return results[0];
          }
          throw new Error("More than one plugin attempted to override parsing.");
        } catch (err) {
          err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" && (err.message += `
Consider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.`);
          const { loc, missingPlugin } = err;
          if (loc) {
            const codeFrame = (0, _codeFrame().codeFrameColumns)(code, { start: { line: loc.line, column: loc.column + 1 } }, { highlightCode });
            err.message = missingPlugin ? `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame, filename) : `${filename}: ${err.message}

` + codeFrame, err.code = "BABEL_PARSE_ERROR";
          }
          throw err;
        }
      };
      var _missingPluginHelper = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(missingPluginName, loc, codeFrame, filename) {
        let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
        const pluginInfo = pluginNameMap[missingPluginName];
        if (pluginInfo) {
          const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;
          if (syntaxPlugin) {
            const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
            if (transformPlugin) {
              helpMessage += `

Add ${getNameURLCombination(transformPlugin)} to the '${transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets"}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
            } else
              helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
          }
        }
        return helpMessage += `

If you already added the plugin for this syntax to your config, it's possible that your config isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
\tnpx cross-env BABEL_SHOW_CONFIG_FOR=${filename === "unknown" ? "<name of the input file>" : filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`, helpMessage;
      };
      const pluginNameMap = { asyncDoExpressions: { syntax: { name: "@babel/plugin-syntax-async-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions" } }, decimal: { syntax: { name: "@babel/plugin-syntax-decimal", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal" } }, decorators: { syntax: { name: "@babel/plugin-syntax-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators" }, transform: { name: "@babel/plugin-proposal-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators" } }, doExpressions: { syntax: { name: "@babel/plugin-syntax-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions" }, transform: { name: "@babel/plugin-proposal-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions" } }, exportDefaultFrom: { syntax: { name: "@babel/plugin-syntax-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from" }, transform: { name: "@babel/plugin-proposal-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from" } }, flow: { syntax: { name: "@babel/plugin-syntax-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow" }, transform: { name: "@babel/preset-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow" } }, functionBind: { syntax: { name: "@babel/plugin-syntax-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind" }, transform: { name: "@babel/plugin-proposal-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind" } }, functionSent: { syntax: { name: "@babel/plugin-syntax-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent" }, transform: { name: "@babel/plugin-proposal-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent" } }, jsx: { syntax: { name: "@babel/plugin-syntax-jsx", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx" }, transform: { name: "@babel/preset-react", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react" } }, pipelineOperator: { syntax: { name: "@babel/plugin-syntax-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator" }, transform: { name: "@babel/plugin-proposal-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator" } }, recordAndTuple: { syntax: { name: "@babel/plugin-syntax-record-and-tuple", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple" } }, throwExpressions: { syntax: { name: "@babel/plugin-syntax-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions" }, transform: { name: "@babel/plugin-proposal-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions" } }, typescript: { syntax: { name: "@babel/plugin-syntax-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript" }, transform: { name: "@babel/preset-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript" } } };
      Object.assign(pluginNameMap, { asyncGenerators: { syntax: { name: "@babel/plugin-syntax-async-generators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators" }, transform: { name: "@babel/plugin-transform-async-generator-functions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions" } }, classProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties" } }, classPrivateMethods: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-transform-private-methods", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods" } }, classStaticBlock: { syntax: { name: "@babel/plugin-syntax-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block" }, transform: { name: "@babel/plugin-transform-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block" } }, dynamicImport: { syntax: { name: "@babel/plugin-syntax-dynamic-import", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import" } }, exportNamespaceFrom: { syntax: { name: "@babel/plugin-syntax-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from" }, transform: { name: "@babel/plugin-transform-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from" } }, importAssertions: { syntax: { name: "@babel/plugin-syntax-import-assertions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions" } }, importAttributes: { syntax: { name: "@babel/plugin-syntax-import-attributes", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes" } }, importMeta: { syntax: { name: "@babel/plugin-syntax-import-meta", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta" } }, logicalAssignment: { syntax: { name: "@babel/plugin-syntax-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators" }, transform: { name: "@babel/plugin-transform-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators" } }, moduleStringNames: { syntax: { name: "@babel/plugin-syntax-module-string-names", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names" } }, numericSeparator: { syntax: { name: "@babel/plugin-syntax-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator" }, transform: { name: "@babel/plugin-transform-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator" } }, nullishCoalescingOperator: { syntax: { name: "@babel/plugin-syntax-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator" }, transform: { name: "@babel/plugin-transform-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator" } }, objectRestSpread: { syntax: { name: "@babel/plugin-syntax-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread" }, transform: { name: "@babel/plugin-transform-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread" } }, optionalCatchBinding: { syntax: { name: "@babel/plugin-syntax-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding" }, transform: { name: "@babel/plugin-transform-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding" } }, optionalChaining: { syntax: { name: "@babel/plugin-syntax-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining" }, transform: { name: "@babel/plugin-transform-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining" } }, privateIn: { syntax: { name: "@babel/plugin-syntax-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object" }, transform: { name: "@babel/plugin-transform-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object" } }, regexpUnicodeSets: { syntax: { name: "@babel/plugin-syntax-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md" }, transform: { name: "@babel/plugin-transform-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md" } } });
      const getNameURLCombination = ({ name, url }) => `${name} (${url})`;
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/tools/build-external-helpers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function helpers() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
        return helpers = function() {
          return data;
        }, data;
      }
      function _generator() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
        return _generator = function() {
          return data;
        }, data;
      }
      function _template() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
        return _template = function() {
          return data;
        }, data;
      }
      function _t() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        return _t = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(allowlist, outputType = "global") {
        let tree;
        const build = { global: buildGlobal, module: buildModule, umd: buildUmd, var: buildVar }[outputType];
        if (!build)
          throw new Error(`Unsupported output type ${outputType}`);
        tree = build(allowlist);
        return (0, _generator().default)(tree).code;
      };
      const { arrayExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, cloneNode, conditionalExpression, exportNamedDeclaration, exportSpecifier, expressionStatement, functionExpression, identifier, memberExpression, objectExpression, program, stringLiteral, unaryExpression, variableDeclaration, variableDeclarator } = _t(), buildUmdWrapper = (replacements) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
      function buildGlobal(allowlist) {
        const namespace = identifier("babelHelpers"), body = [], container = functionExpression(null, [identifier("global")], blockStatement(body)), tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
        return body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))])), buildHelpers(body, namespace, allowlist), tree;
      }
      function buildModule(allowlist) {
        const body = [], refs = buildHelpers(body, null, allowlist);
        return body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => exportSpecifier(cloneNode(refs[name]), identifier(name))))), program(body, [], "module");
      }
      function buildUmd(allowlist) {
        const namespace = identifier("babelHelpers"), body = [];
        return body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))])), buildHelpers(body, namespace, allowlist), program([buildUmdWrapper({ FACTORY_PARAMETERS: identifier("global"), BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])), COMMON_ARGUMENTS: identifier("exports"), AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]), FACTORY_BODY: body, UMD_ROOT: identifier("this") })]);
      }
      function buildVar(allowlist) {
        const namespace = identifier("babelHelpers"), body = [];
        body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
        const tree = program(body);
        return buildHelpers(body, namespace, allowlist), body.push(expressionStatement(namespace)), tree;
      }
      function buildHelpers(body, namespace, allowlist) {
        const getHelperReference = (name) => namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`), refs = {};
        return helpers().list.forEach(function(name) {
          if (allowlist && !allowlist.includes(name))
            return;
          const ref = refs[name] = getHelperReference(name), { nodes } = helpers().get(name, getHelperReference, namespace ? null : `_${name}`, [], namespace ? (ast, exportName, mapExportBindingAssignments) => {
            mapExportBindingAssignments((node) => assignmentExpression("=", ref, node)), ast.body.push(expressionStatement(assignmentExpression("=", ref, identifier(exportName))));
          } : null);
          body.push(...nodes);
        }), refs;
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-ast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFromAst = undefined, exports2.transformFromAstAsync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
      }, exports2.transformFromAstSync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
      const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
        const config = yield* (0, _index.default)(opts);
        if (config === null)
          return null;
        if (!ast)
          throw new Error("No AST given");
        return yield* (0, _index2.run)(config, code, ast);
      });
      exports2.transformFromAst = function(ast, code, optsOrCallback, maybeCallback) {
        let opts, callback;
        if (typeof optsOrCallback == "function" ? (callback = optsOrCallback, opts = undefined) : (opts = optsOrCallback, callback = maybeCallback), callback === undefined)
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
        (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFile = function(...args) {
        transformFileRunner.errback(...args);
      }, exports2.transformFileAsync = function(...args) {
        return transformFileRunner.async(...args);
      }, exports2.transformFileSync = function(...args) {
        return transformFileRunner.sync(...args);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), fs3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/fs.js");
      const transformFileRunner = _gensync()(function* (filename, opts) {
        const options = Object.assign({}, opts, { filename }), config = yield* (0, _index.default)(options);
        if (config === null)
          return null;
        const code = yield* fs3.readFile(filename, "utf8");
        return yield* (0, _index2.run)(config, code);
      });
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transform.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _gensync() {
        const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
        return _gensync = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transform = undefined, exports2.transformAsync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
      }, exports2.transformSync = function(...args) {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
      const transformRunner = _gensync()(function* (code, opts) {
        const config = yield* (0, _index.default)(opts);
        return config === null ? null : yield* (0, _index2.run)(config, code);
      });
      exports2.transform = function(code, optsOrCallback, maybeCallback) {
        let opts, callback;
        if (typeof optsOrCallback == "function" ? (callback = optsOrCallback, opts = undefined) : (opts = optsOrCallback, callback = maybeCallback), callback === undefined)
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
        (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _traverse() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        return _traverse = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function() {
        LOADED_PLUGIN || (LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, { visitor: _traverse().default.explode(blockHoistPlugin.visitor) }), {}));
        return LOADED_PLUGIN;
      };
      var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/plugin.js");
      let LOADED_PLUGIN;
      const blockHoistPlugin = { name: "internal.blockHoist", visitor: { Block: { exit({ node }) {
        node.body = performHoisting(node.body);
      } }, SwitchCase: { exit({ node }) {
        node.consequent = performHoisting(node.consequent);
      } } } };
      function performHoisting(body) {
        let max = Math.pow(2, 30) - 1, hasChange = false;
        for (let i = 0;i < body.length; i++) {
          const p = priority(body[i]);
          if (p > max) {
            hasChange = true;
            break;
          }
          max = p;
        }
        return hasChange ? function(body2) {
          const buckets = Object.create(null);
          for (let i = 0;i < body2.length; i++) {
            const n = body2[i], p = priority(n);
            (buckets[p] || (buckets[p] = [])).push(n);
          }
          const keys = Object.keys(buckets).map((k) => +k).sort((a, b) => b - a);
          let index = 0;
          for (const key of keys) {
            const bucket = buckets[key];
            for (const n of bucket)
              body2[index++] = n;
          }
          return body2;
        }(body.slice()) : body;
      }
      function priority(bodyNode) {
        const priority2 = bodyNode == null ? undefined : bodyNode._blockHoist;
        return priority2 == null ? 1 : priority2 === true ? 2 : priority2;
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.getModuleName = () => __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js").getModuleName;
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function helpers() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js");
        return helpers = function() {
          return data;
        }, data;
      }
      function _traverse() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        return _traverse = function() {
          return data;
        }, data;
      }
      function _codeFrame() {
        const data = __webpack_require__2("./stubs/babel-codeframe.mjs");
        return _codeFrame = function() {
          return data;
        }, data;
      }
      function _t() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        return _t = function() {
          return data;
        }, data;
      }
      function _semver() {
        const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js");
        return _semver = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var babel7 = function(e, r) {
        if (!r && e && e.__esModule)
          return e;
        if (e === null || typeof e != "object" && typeof e != "function")
          return { default: e };
        var t = _getRequireWildcardCache(r);
        if (t && t.has(e))
          return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e)
          if (u !== "default" && {}.hasOwnProperty.call(e, u)) {
            var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
            i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
          }
        return n.default = e, t && t.set(e, n), n;
      }(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/babel-7-helpers.cjs"), true);
      function _getRequireWildcardCache(e) {
        if (typeof WeakMap != "function")
          return null;
        var r = new WeakMap, t = new WeakMap;
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r;
        })(e);
      }
      const { cloneNode, interpreterDirective } = _t(), errorVisitor = { enter(path4, state) {
        const loc = path4.node.loc;
        loc && (state.loc = loc, path4.stop());
      } };

      class File {
        constructor(options, { code, ast, inputMap }) {
          this._map = new Map, this.opts = undefined, this.declarations = {}, this.path = undefined, this.ast = undefined, this.scope = undefined, this.metadata = {}, this.code = "", this.inputMap = undefined, this.hub = { file: this, getCode: () => this.code, getScope: () => this.scope, addHelper: this.addHelper.bind(this), buildError: this.buildCodeFrameError.bind(this) }, this.opts = options, this.code = code, this.ast = ast, this.inputMap = inputMap, this.path = _traverse().NodePath.get({ hub: this.hub, parentPath: null, parent: this.ast, container: this.ast, key: "program" }).setContext(), this.scope = this.path.scope;
        }
        get shebang() {
          const { interpreter } = this.path.node;
          return interpreter ? interpreter.value : "";
        }
        set shebang(value2) {
          value2 ? this.path.get("interpreter").replaceWith(interpreterDirective(value2)) : this.path.get("interpreter").remove();
        }
        set(key, val) {
          if (key === "helpersNamespace")
            throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
          this._map.set(key, val);
        }
        get(key) {
          return this._map.get(key);
        }
        has(key) {
          return this._map.has(key);
        }
        availableHelper(name, versionRange) {
          let minVersion;
          try {
            minVersion = helpers().minVersion(name);
          } catch (err) {
            if (err.code !== "BABEL_HELPER_UNKNOWN")
              throw err;
            return false;
          }
          return typeof versionRange != "string" || (_semver().valid(versionRange) && (versionRange = `^${versionRange}`), !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(">=8.0.0", versionRange));
        }
        addHelper(name) {
          const declar = this.declarations[name];
          if (declar)
            return cloneNode(declar);
          const generator = this.get("helperGenerator");
          if (generator) {
            const res = generator(name);
            if (res)
              return res;
          }
          helpers().minVersion(name);
          const uid = this.declarations[name] = this.scope.generateUidIdentifier(name), dependencies = {};
          for (const dep of helpers().getDependencies(name))
            dependencies[dep] = this.addHelper(dep);
          const { nodes, globals } = helpers().get(name, (dep) => dependencies[dep], uid.name, Object.keys(this.scope.getAllBindings()));
          globals.forEach((name2) => {
            this.path.scope.hasBinding(name2, true) && this.path.scope.rename(name2);
          }), nodes.forEach((node) => {
            node._compact = true;
          });
          const added = this.path.unshiftContainer("body", nodes);
          for (const path4 of added)
            path4.isVariableDeclaration() && this.scope.registerDeclaration(path4);
          return uid;
        }
        buildCodeFrameError(node, msg, _Error = SyntaxError) {
          let loc = node == null ? undefined : node.loc;
          if (!loc && node) {
            const state = { loc: null };
            (0, _traverse().default)(node, errorVisitor, this.scope, state), loc = state.loc;
            let txt = "This is an error on an internal node. Probably an internal error.";
            loc && (txt += " Location has been estimated."), msg += ` (${txt})`;
          }
          if (loc) {
            const { highlightCode = true } = this.opts;
            msg += `
` + (0, _codeFrame().codeFrameColumns)(this.code, { start: { line: loc.start.line, column: loc.start.column + 1 }, end: loc.end && loc.start.line === loc.end.line ? { line: loc.end.line, column: loc.end.column + 1 } : undefined }, { highlightCode });
          }
          return new _Error(msg);
        }
      }
      exports2.default = File, File.prototype.addImport = function() {
        throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
      }, File.prototype.addTemplateObject = function() {
        throw new Error("This function has been moved into the template literal transform itself.");
      }, File.prototype.getModuleName = function() {
        return babel7.getModuleName()(this.opts, this.opts);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _convertSourceMap() {
        const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
        return _convertSourceMap = function() {
          return data;
        }, data;
      }
      function _generator() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js");
        return _generator = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pluginPasses, file) {
        const { opts, ast, code, inputMap } = file, { generatorOpts } = opts;
        generatorOpts.inputSourceMap = inputMap == null ? undefined : inputMap.toObject();
        const results = [];
        for (const plugins of pluginPasses)
          for (const plugin of plugins) {
            const { generatorOverride } = plugin;
            if (generatorOverride) {
              const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
              result2 !== undefined && results.push(result2);
            }
          }
        let result;
        if (results.length === 0)
          result = (0, _generator().default)(ast, generatorOpts, code);
        else {
          if (results.length !== 1)
            throw new Error("More than one plugin attempted to override codegen.");
          if (result = results[0], typeof result.then == "function")
            throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
        }
        let { code: outputCode, decodedMap: outputMap = result.map } = result;
        result.__mergedMap ? outputMap = Object.assign({}, result.map) : outputMap && (outputMap = inputMap ? (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName) : result.map);
        opts.sourceMaps !== "inline" && opts.sourceMaps !== "both" || (outputCode += `
` + _convertSourceMap().fromObject(outputMap).toComment());
        opts.sourceMaps === "inline" && (outputMap = null);
        return { outputCode, outputMap };
      };
      var _mergeMap = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js");
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/merge-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _remapping() {
        const data = __webpack_require__2("./node_modules/.pnpm/@ampproject+remapping@2.3.0/node_modules/@ampproject/remapping/dist/remapping.umd.js");
        return _remapping = function() {
          return data;
        }, data;
      }
      function rootless(map) {
        return Object.assign({}, map, { sourceRoot: null });
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(inputMap, map, sourceFileName) {
        const source = sourceFileName.replace(/\\/g, "/");
        let found = false;
        const result = _remapping()(rootless(map), (s, ctx) => s !== source || found ? null : (found = true, ctx.source = "", rootless(inputMap)));
        typeof inputMap.sourceRoot == "string" && (result.sourceRoot = inputMap.sourceRoot);
        return Object.assign({}, result);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _traverse() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
        return _traverse = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.run = function* (config, code, ast) {
        const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast), opts = file.opts;
        try {
          yield* function* (file2, pluginPasses) {
            const async = yield* (0, _async.isAsync)();
            for (const pluginPairs of pluginPasses) {
              const passPairs = [], passes = [], visitors = [];
              for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
                const pass = new _pluginPass.default(file2, plugin.key, plugin.options, async);
                passPairs.push([plugin, pass]), passes.push(pass), visitors.push(plugin.visitor);
              }
              for (const [plugin, pass] of passPairs)
                if (plugin.pre) {
                  const fn = (0, _async.maybeAsync)(plugin.pre, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
                  yield* fn.call(pass, file2);
                }
              const visitor = _traverse().default.visitors.merge(visitors, passes, file2.opts.wrapPluginVisitorMethod);
              (0, _traverse().default)(file2.ast, visitor, file2.scope);
              for (const [plugin, pass] of passPairs)
                if (plugin.post) {
                  const fn = (0, _async.maybeAsync)(plugin.post, "You appear to be using an async plugin/preset, but Babel has been called synchronously");
                  yield* fn.call(pass, file2);
                }
            }
          }(file, config.passes);
        } catch (e) {
          var _opts$filename;
          throw e.message = `${(_opts$filename = opts.filename) != null ? _opts$filename : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_TRANSFORM_ERROR"), e;
        }
        let outputCode, outputMap;
        try {
          opts.code !== false && ({ outputCode, outputMap } = (0, _generate.default)(config.passes, file));
        } catch (e) {
          var _opts$filename2;
          throw e.message = `${(_opts$filename2 = opts.filename) != null ? _opts$filename2 : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_GENERATE_ERROR"), e;
        }
        return { metadata: file.metadata, options: opts, ast: opts.ast === true ? file.ast : null, code: outputCode === undefined ? null : outputCode, map: outputMap === undefined ? null : outputMap, sourceType: file.ast.program.sourceType, externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies) };
      };
      var _pluginPass = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js"), _blockHoistPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _normalizeFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js"), _generate = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/generate.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/config/helpers/deep-array.js"), _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/gensync-utils/async.js");
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _fs() {
        const data = __webpack_require__2("fs");
        return _fs = function() {
          return data;
        }, data;
      }
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      function _debug() {
        const data = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js");
        return _debug = function() {
          return data;
        }, data;
      }
      function _t() {
        const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
        return _t = function() {
          return data;
        }, data;
      }
      function _convertSourceMap() {
        const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@2.0.0/node_modules/convert-source-map/index.js");
        return _convertSourceMap = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, options, code, ast) {
        if (code = `${code || ""}`, ast) {
          if (ast.type === "Program")
            ast = file(ast, [], []);
          else if (ast.type !== "File")
            throw new Error("AST root must be a Program or File node");
          options.cloneInputAst && (ast = (0, _cloneDeep.default)(ast));
        } else
          ast = yield* (0, _index.default)(pluginPasses, options, code);
        let inputMap = null;
        if (options.inputSourceMap !== false) {
          if (typeof options.inputSourceMap == "object" && (inputMap = _convertSourceMap().fromObject(options.inputSourceMap)), !inputMap) {
            const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
            if (lastComment)
              try {
                inputMap = _convertSourceMap().fromComment("//" + lastComment);
              } catch (err) {
                debug("discarding unknown inline input sourcemap");
              }
          }
          if (!inputMap) {
            const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
            if (typeof options.filename == "string" && lastComment)
              try {
                const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment), inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]), "utf8");
                inputMap = _convertSourceMap().fromJSON(inputMapContent);
              } catch (err) {
                debug("discarding unknown file input sourcemap", err);
              }
            else
              lastComment && debug("discarding un-loadable file input sourcemap");
          }
        }
        return new _file.default(options, { code, ast, inputMap });
      };
      var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/file/file.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/parser/index.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js");
      const { file, traverseFast } = _t(), debug = _debug()("babel:transform:file"), INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/, EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
      function extractCommentsFromList(regex, comments, lastComment) {
        return comments && (comments = comments.filter(({ value: value2 }) => !regex.test(value2) || (lastComment = value2, false))), [comments, lastComment];
      }
      function extractComments(regex, ast) {
        let lastComment = null;
        return traverseFast(ast, (node) => {
          [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment), [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment), [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
        }), lastComment;
      }
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/normalize-opts.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(config) {
        const { filename, cwd, filenameRelative = typeof filename == "string" ? _path().relative(cwd, filename) : "unknown", sourceType = "module", inputSourceMap, sourceMaps = !!inputSourceMap, sourceRoot = config.options.moduleRoot, sourceFileName = _path().basename(filenameRelative), comments = true, compact = "auto" } = config.options, opts = config.options, options = Object.assign({}, opts, { parserOpts: Object.assign({ sourceType: _path().extname(filenameRelative) === ".mjs" ? "module" : sourceType, sourceFileName: filename, plugins: [] }, opts.parserOpts), generatorOpts: Object.assign({ filename, auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, retainLines: opts.retainLines, comments, shouldPrintComment: opts.shouldPrintComment, compact, minified: opts.minified, sourceMaps, sourceRoot, sourceFileName }, opts.generatorOpts) });
        for (const plugins of config.passes)
          for (const plugin of plugins)
            plugin.manipulateOptions && plugin.manipulateOptions(options, options.parserOpts);
        return options;
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/plugin-pass.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;

      class PluginPass {
        constructor(file, key, options, isAsync) {
          this._map = new Map, this.key = undefined, this.file = undefined, this.opts = undefined, this.cwd = undefined, this.filename = undefined, this.isAsync = undefined, this.key = key, this.file = file, this.opts = options || {}, this.cwd = file.opts.cwd, this.filename = file.opts.filename, this.isAsync = isAsync;
        }
        set(key, val) {
          this._map.set(key, val);
        }
        get(key) {
          return this._map.get(key);
        }
        availableHelper(name, versionRange) {
          return this.file.availableHelper(name, versionRange);
        }
        addHelper(name) {
          return this.file.addHelper(name);
        }
        buildCodeFrameError(node, msg, _Error) {
          return this.file.buildCodeFrameError(node, msg, _Error);
        }
      }
      exports2.default = PluginPass, PluginPass.prototype.getModuleName = function() {
        return this.file.getModuleName();
      }, PluginPass.prototype.addImport = function() {
        this.file.addImport();
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/transformation/util/clone-deep.js": (__unused_webpack_module, exports2) => {
      function deepClone(value2, cache) {
        if (value2 !== null) {
          if (cache.has(value2))
            return cache.get(value2);
          let cloned;
          if (Array.isArray(value2)) {
            cloned = new Array(value2.length), cache.set(value2, cloned);
            for (let i = 0;i < value2.length; i++)
              cloned[i] = typeof value2[i] != "object" ? value2[i] : deepClone(value2[i], cache);
          } else {
            cloned = {}, cache.set(value2, cloned);
            const keys = Object.keys(value2);
            for (let i = 0;i < keys.length; i++) {
              const key = keys[i];
              cloned[key] = typeof value2[key] != "object" ? value2[key] : deepClone(value2[key], cache);
            }
          }
          return cloned;
        }
        return value2;
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(value2) {
        return typeof value2 != "object" ? value2 : deepClone(value2, new Map);
      };
    }, "./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/vendor/import-meta-resolve.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _assert() {
        const data = __webpack_require__2("assert");
        return _assert = function() {
          return data;
        }, data;
      }
      function _fs() {
        const data = function(e, r) {
          if (!r && e && e.__esModule)
            return e;
          if (e === null || typeof e != "object" && typeof e != "function")
            return { default: e };
          var t = _getRequireWildcardCache(r);
          if (t && t.has(e))
            return t.get(e);
          var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var u in e)
            if (u !== "default" && {}.hasOwnProperty.call(e, u)) {
              var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
              i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
            }
          return n.default = e, t && t.set(e, n), n;
        }(__webpack_require__2("fs"), true);
        return _fs = function() {
          return data;
        }, data;
      }
      function _process() {
        const data = __webpack_require__2("process");
        return _process = function() {
          return data;
        }, data;
      }
      function _url() {
        const data = __webpack_require__2("url");
        return _url = function() {
          return data;
        }, data;
      }
      function _path() {
        const data = __webpack_require__2("path");
        return _path = function() {
          return data;
        }, data;
      }
      function _module() {
        const data = __webpack_require__2("module");
        return _module = function() {
          return data;
        }, data;
      }
      function _v() {
        const data = __webpack_require__2("v8");
        return _v = function() {
          return data;
        }, data;
      }
      function _util() {
        const data = __webpack_require__2("util");
        return _util = function() {
          return data;
        }, data;
      }
      function _getRequireWildcardCache(e) {
        if (typeof WeakMap != "function")
          return null;
        var r = new WeakMap, t = new WeakMap;
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r;
        })(e);
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.moduleResolve = moduleResolve, exports2.resolve = function(specifier, parent) {
        if (!parent)
          throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
        try {
          return function(specifier2, context = {}) {
            const { parentURL } = context;
            let parsedParentURL, parsed, protocol;
            if (_assert()(parentURL !== undefined, "expected `parentURL` to be defined"), function(parentURL2) {
              if (parentURL2 === undefined)
                return;
              if (typeof parentURL2 != "string" && (self = parentURL2, !Boolean(self && typeof self == "object" && "href" in self && typeof self.href == "string" && "protocol" in self && typeof self.protocol == "string" && self.href && self.protocol)))
                throw new codes.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], parentURL2);
              var self;
            }(parentURL), parentURL)
              try {
                parsedParentURL = new (_url()).URL(parentURL);
              } catch (_unused4) {
              }
            try {
              if (parsed = shouldBeTreatedAsRelativeOrAbsolutePath(specifier2) ? new (_url()).URL(specifier2, parsedParentURL) : new (_url()).URL(specifier2), protocol = parsed.protocol, protocol === "data:")
                return { url: parsed.href, format: null };
            } catch (_unused5) {
            }
            const maybeReturn = function(specifier3, parsed2, parsedParentURL2) {
              if (parsedParentURL2) {
                const parentProtocol = parsedParentURL2.protocol;
                if (parentProtocol === "http:" || parentProtocol === "https:") {
                  if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier3)) {
                    const parsedProtocol = parsed2 == null ? undefined : parsed2.protocol;
                    if (parsedProtocol && parsedProtocol !== "https:" && parsedProtocol !== "http:")
                      throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                    return { url: (parsed2 == null ? undefined : parsed2.href) || "" };
                  }
                  if (_module().builtinModules.includes(specifier3))
                    throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "remote imports cannot import from a local location.");
                  throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier3, parsedParentURL2, "only relative and absolute specifiers are supported.");
                }
              }
            }(specifier2, parsed, parsedParentURL);
            if (maybeReturn)
              return maybeReturn;
            protocol === undefined && parsed && (protocol = parsed.protocol);
            if (protocol === "node:")
              return { url: specifier2 };
            if (parsed && parsed.protocol === "node:")
              return { url: specifier2 };
            const conditions = function(conditions2) {
              if (conditions2 !== undefined && conditions2 !== DEFAULT_CONDITIONS) {
                if (!Array.isArray(conditions2))
                  throw new ERR_INVALID_ARG_VALUE("conditions", conditions2, "expected an array");
                return new Set(conditions2);
              }
              return DEFAULT_CONDITIONS_SET;
            }(context.conditions), url = moduleResolve(specifier2, new (_url()).URL(parentURL), conditions, false);
            return { url: url.href, format: defaultGetFormatWithoutErrors(url, { parentURL }) };
          }(specifier, { parentURL: parent }).url;
        } catch (error) {
          const exception = error;
          if ((exception.code === "ERR_UNSUPPORTED_DIR_IMPORT" || exception.code === "ERR_MODULE_NOT_FOUND") && typeof exception.url == "string")
            return exception.url;
          throw error;
        }
      };
      const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
      function formatList(array, type = "and") {
        return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
      }
      const messages = new Map;
      let userStackTraceLimit;
      function createError(sym, value2, constructor) {
        return messages.set(sym, value2), function(Base, key) {
          return NodeError;
          function NodeError(...parameters) {
            const limit = Error.stackTraceLimit;
            isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
            const error = new Base;
            isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
            const message = function(key2, parameters2, self) {
              const message2 = messages.get(key2);
              if (_assert()(message2 !== undefined, "expected `message` to be found"), typeof message2 == "function")
                return _assert()(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self, parameters2);
              const regex = /%[dfijoOs]/g;
              let expectedLength = 0;
              for (;regex.exec(message2) !== null; )
                expectedLength++;
              return _assert()(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), parameters2.length === 0 ? message2 : (parameters2.unshift(message2), Reflect.apply(_util().format, null, parameters2));
            }(key, parameters, error);
            return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
              return `${this.name} [${key}]: ${this.message}`;
            }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
          }
        }(constructor, sym);
      }
      function isErrorStackTraceLimitWritable() {
        try {
          if (_v().startupSnapshot.isBuildingSnapshot())
            return false;
        } catch (_unused) {
        }
        const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
        return desc === undefined ? Object.isExtensible(Error) : own$1.call(desc, "writable") && desc.writable !== undefined ? desc.writable : desc.set !== undefined;
      }
      codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
        _assert()(typeof name == "string", "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
        let message = "The ";
        if (name.endsWith(" argument"))
          message += `${name} `;
        else {
          const type = name.includes(".") ? "property" : "argument";
          message += `"${name}" ${type} `;
        }
        message += "must be ";
        const types = [], instances = [], other = [];
        for (const value2 of expected)
          _assert()(typeof value2 == "string", "All expected entries have to be of type string"), kTypes.has(value2) ? types.push(value2.toLowerCase()) : classRegExp.exec(value2) === null ? (_assert()(value2 !== "object", 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
        if (instances.length > 0) {
          const pos = types.indexOf("object");
          pos !== -1 && (types.slice(pos, 1), instances.push("Object"));
        }
        return types.length > 0 && (message += `${types.length > 1 ? "one of type" : "of type"} ${formatList(types, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
          if (value2 == null)
            return String(value2);
          if (typeof value2 == "function" && value2.name)
            return `function ${value2.name}`;
          if (typeof value2 == "object")
            return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, _util().inspect)(value2, { depth: -1 })}`;
          let inspected = (0, _util().inspect)(value2, { colors: false });
          inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
          return `type ${typeof value2} (${inspected})`;
        }(actual)}`, message;
      }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = undefined) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path4, base, message) => `Invalid package config ${path4}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = undefined) => {
        const relatedError = typeof target == "string" && !isImport && target.length > 0 && !target.startsWith("./");
        return key === "." ? (_assert()(isImport === false), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
      }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path4, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path4}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = undefined) => subpath === "." ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path4) => `Unknown file extension "${extension}" for ${path4}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
        let inspected = (0, _util().inspect)(value2);
        inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
        return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
      }, TypeError);
      const captureLargerStackTrace = function(wrappedFunction) {
        const hidden = "__node_internal_" + wrappedFunction.name;
        return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
      }(function(error) {
        const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
        return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
      });
      const hasOwnProperty$1 = {}.hasOwnProperty, { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, cache = new Map;
      function read(jsonPath, { base, specifier }) {
        const existing = cache.get(jsonPath);
        if (existing)
          return existing;
        let string;
        try {
          string = _fs().default.readFileSync(_path().toNamespacedPath(jsonPath), "utf8");
        } catch (error) {
          const exception = error;
          if (exception.code !== "ENOENT")
            throw exception;
        }
        const result = { exists: false, pjsonPath: jsonPath, main: undefined, name: undefined, type: "none", exports: undefined, imports: undefined };
        if (string !== undefined) {
          let parsed;
          try {
            parsed = JSON.parse(string);
          } catch (error_) {
            const cause = error_, error = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), cause.message);
            throw error.cause = cause, error;
          }
          result.exists = true, hasOwnProperty$1.call(parsed, "name") && typeof parsed.name == "string" && (result.name = parsed.name), hasOwnProperty$1.call(parsed, "main") && typeof parsed.main == "string" && (result.main = parsed.main), hasOwnProperty$1.call(parsed, "exports") && (result.exports = parsed.exports), hasOwnProperty$1.call(parsed, "imports") && (result.imports = parsed.imports), !hasOwnProperty$1.call(parsed, "type") || parsed.type !== "commonjs" && parsed.type !== "module" || (result.type = parsed.type);
        }
        return cache.set(jsonPath, result), result;
      }
      function getPackageScopeConfig(resolved) {
        let packageJSONUrl = new URL("package.json", resolved);
        for (;; ) {
          if (packageJSONUrl.pathname.endsWith("node_modules/package.json"))
            break;
          const packageConfig = read((0, _url().fileURLToPath)(packageJSONUrl), { specifier: resolved });
          if (packageConfig.exists)
            return packageConfig;
          const lastPackageJSONUrl = packageJSONUrl;
          if (packageJSONUrl = new URL("../package.json", packageJSONUrl), packageJSONUrl.pathname === lastPackageJSONUrl.pathname)
            break;
        }
        return { pjsonPath: (0, _url().fileURLToPath)(packageJSONUrl), exists: false, type: "none" };
      }
      function getPackageType(url) {
        return getPackageScopeConfig(url).type;
      }
      const { ERR_UNKNOWN_FILE_EXTENSION } = codes, hasOwnProperty2 = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
      const protocolHandlers = { __proto__: null, "data:": function(parsed) {
        const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
        return function(mime2) {
          return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : mime2 === "application/json" ? "json" : null;
        }(mime);
      }, "file:": function(url, _context, ignoreErrors) {
        const value2 = function(url2) {
          const pathname = url2.pathname;
          let index = pathname.length;
          for (;index--; ) {
            const code = pathname.codePointAt(index);
            if (code === 47)
              return "";
            if (code === 46)
              return pathname.codePointAt(index - 1) === 47 ? "" : pathname.slice(index);
          }
          return "";
        }(url);
        if (value2 === ".js") {
          const packageType = getPackageType(url);
          return packageType !== "none" ? packageType : "commonjs";
        }
        if (value2 === "") {
          const packageType = getPackageType(url);
          return packageType === "none" || packageType === "commonjs" ? "commonjs" : "module";
        }
        const format = extensionFormatMap[value2];
        if (format)
          return format;
        if (ignoreErrors)
          return;
        const filepath = (0, _url().fileURLToPath)(url);
        throw new ERR_UNKNOWN_FILE_EXTENSION(value2, filepath);
      }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
      function getHttpProtocolModuleFormat() {
      }
      function defaultGetFormatWithoutErrors(url, context) {
        const protocol = url.protocol;
        return hasOwnProperty2.call(protocolHandlers, protocol) && protocolHandlers[protocol](url, context, true) || null;
      }
      const { ERR_INVALID_ARG_VALUE } = codes, DEFAULT_CONDITIONS = Object.freeze(["node", "import"]), DEFAULT_CONDITIONS_SET = new Set(DEFAULT_CONDITIONS);
      const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSeparatorRegEx = /%2f|%5c/i, emittedPackageWarnings = new Set, doubleSlashRegEx = /[/\\]{2}/;
      function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
        if (_process().noDeprecation)
          return;
        const pjsonPath = (0, _url().fileURLToPath)(packageJsonUrl), double = doubleSlashRegEx.exec(isTarget ? target : request) !== null;
        _process().emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
      }
      function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
        if (_process().noDeprecation)
          return;
        if (defaultGetFormatWithoutErrors(url, { parentURL: base.href }) !== "module")
          return;
        const urlPath = (0, _url().fileURLToPath)(url.href), packagePath = (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), basePath = (0, _url().fileURLToPath)(base);
        main ? _path().resolve(packagePath, main) !== urlPath && _process().emitWarning(`Package ${packagePath} has a "main" field set to "${main}", excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field is deprecated for ES modules.`, "DeprecationWarning", "DEP0151") : _process().emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
      }
      function tryStatSync(path4) {
        try {
          return (0, _fs().statSync)(path4);
        } catch (_unused2) {
        }
      }
      function fileExists(url) {
        const stats = (0, _fs().statSync)(url, { throwIfNoEntry: false }), isFile = stats ? stats.isFile() : undefined;
        return isFile != null && isFile;
      }
      function legacyMainResolve(packageJsonUrl, packageConfig, base) {
        let guess;
        if (packageConfig.main !== undefined) {
          if (guess = new (_url()).URL(packageConfig.main, packageJsonUrl), fileExists(guess))
            return guess;
          const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
          let i2 = -1;
          for (;++i2 < tries2.length && (guess = new (_url()).URL(tries2[i2], packageJsonUrl), !fileExists(guess)); )
            guess = undefined;
          if (guess)
            return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
        }
        const tries = ["./index.js", "./index.json", "./index.node"];
        let i = -1;
        for (;++i < tries.length && (guess = new (_url()).URL(tries[i], packageJsonUrl), !fileExists(guess)); )
          guess = undefined;
        if (guess)
          return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
        throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
      }
      function exportsNotFound(subpath, packageJsonUrl, base) {
        return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
      }
      function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
        return target = typeof target == "object" && target !== null ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, target, internal, base && (0, _url().fileURLToPath)(base));
      }
      function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
        if (subpath !== "" && !pattern && target[target.length - 1] !== "/")
          throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
        if (!target.startsWith("./")) {
          if (internal && !target.startsWith("../") && !target.startsWith("/")) {
            let isURL = false;
            try {
              new (_url()).URL(target), isURL = true;
            } catch (_unused3) {
            }
            if (!isURL) {
              return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
            }
          }
          throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
        }
        if (invalidSegmentRegEx.exec(target.slice(2)) !== null) {
          if (deprecatedInvalidSegmentRegEx.exec(target.slice(2)) !== null)
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if (!isPathMap) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, true);
          }
        }
        const resolved = new (_url()).URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new (_url()).URL(".", packageJsonUrl).pathname;
        if (!resolvedPath.startsWith(packagePath))
          throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
        if (subpath === "")
          return resolved;
        if (invalidSegmentRegEx.exec(subpath) !== null) {
          const request = pattern ? match.replace("*", () => subpath) : match + subpath;
          if (deprecatedInvalidSegmentRegEx.exec(subpath) === null) {
            if (!isPathMap) {
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, false);
            }
          } else
            (function(request2, match2, packageJsonUrl2, internal2, base2) {
              const reason = `request is not a valid match in pattern "${match2}" for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl2)}`;
              throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, _url().fileURLToPath)(base2));
            })(request, match, packageJsonUrl, internal, base);
        }
        return pattern ? new (_url()).URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new (_url()).URL(subpath, resolved);
      }
      function isArrayIndex(key) {
        const keyNumber = Number(key);
        return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
      }
      function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
        if (typeof target == "string")
          return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
        if (Array.isArray(target)) {
          const targetList = target;
          if (targetList.length === 0)
            return null;
          let lastException, i = -1;
          for (;++i < targetList.length; ) {
            const targetItem = targetList[i];
            let resolveResult;
            try {
              resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
            } catch (error) {
              if (lastException = error, error.code === "ERR_INVALID_PACKAGE_TARGET")
                continue;
              throw error;
            }
            if (resolveResult !== undefined) {
              if (resolveResult !== null)
                return resolveResult;
              lastException = null;
            }
          }
          if (lastException == null)
            return null;
          throw lastException;
        }
        if (typeof target == "object" && target !== null) {
          const keys = Object.getOwnPropertyNames(target);
          let i = -1;
          for (;++i < keys.length; ) {
            if (isArrayIndex(keys[i]))
              throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
          }
          for (i = -1;++i < keys.length; ) {
            const key = keys[i];
            if (key === "default" || conditions && conditions.has(key)) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
              if (resolveResult === undefined)
                continue;
              return resolveResult;
            }
          }
          return null;
        }
        if (target === null)
          return null;
        throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
      }
      function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
        if (_process().noDeprecation)
          return;
        const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
        emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), _process().emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
      }
      function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
        let exports3 = packageConfig.exports;
        if (function(exports4, packageJsonUrl2, base2) {
          if (typeof exports4 == "string" || Array.isArray(exports4))
            return true;
          if (typeof exports4 != "object" || exports4 === null)
            return false;
          const keys2 = Object.getOwnPropertyNames(exports4);
          let isConditionalSugar = false, i2 = 0, keyIndex = -1;
          for (;++keyIndex < keys2.length; ) {
            const key = keys2[keyIndex], currentIsConditionalSugar = key === "" || key[0] !== ".";
            if (i2++ == 0)
              isConditionalSugar = currentIsConditionalSugar;
            else if (isConditionalSugar !== currentIsConditionalSugar)
              throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
          }
          return isConditionalSugar;
        }(exports3, packageJsonUrl, base) && (exports3 = { ".": exports3 }), own.call(exports3, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
          const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
          if (resolveResult == null)
            throw exportsNotFound(packageSubpath, packageJsonUrl, base);
          return resolveResult;
        }
        let bestMatch = "", bestMatchSubpath = "";
        const keys = Object.getOwnPropertyNames(exports3);
        let i = -1;
        for (;++i < keys.length; ) {
          const key = keys[i], patternIndex = key.indexOf("*");
          if (patternIndex !== -1 && packageSubpath.startsWith(key.slice(0, patternIndex))) {
            packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
            const patternTrailer = key.slice(patternIndex + 1);
            packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
          }
        }
        if (bestMatch) {
          const resolveResult = resolvePackageTarget(packageJsonUrl, exports3[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
          if (resolveResult == null)
            throw exportsNotFound(packageSubpath, packageJsonUrl, base);
          return resolveResult;
        }
        throw exportsNotFound(packageSubpath, packageJsonUrl, base);
      }
      function patternKeyCompare(a, b) {
        const aPatternIndex = a.indexOf("*"), bPatternIndex = b.indexOf("*"), baseLengthA = aPatternIndex === -1 ? a.length : aPatternIndex + 1, baseLengthB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;
        return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || aPatternIndex === -1 ? 1 : bPatternIndex === -1 || a.length > b.length ? -1 : b.length > a.length ? 1 : 0;
      }
      function packageImportsResolve(name, base, conditions) {
        if (name === "#" || name.startsWith("#/") || name.endsWith("/")) {
          throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, _url().fileURLToPath)(base));
        }
        let packageJsonUrl;
        const packageConfig = getPackageScopeConfig(base);
        if (packageConfig.exists) {
          packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
          const imports = packageConfig.imports;
          if (imports)
            if (own.call(imports, name) && !name.includes("*")) {
              const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
              if (resolveResult != null)
                return resolveResult;
            } else {
              let bestMatch = "", bestMatchSubpath = "";
              const keys = Object.getOwnPropertyNames(imports);
              let i = -1;
              for (;++i < keys.length; ) {
                const key = keys[i], patternIndex = key.indexOf("*");
                if (patternIndex !== -1 && name.startsWith(key.slice(0, -1))) {
                  const patternTrailer = key.slice(patternIndex + 1);
                  name.length >= key.length && name.endsWith(patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                }
              }
              if (bestMatch) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                if (resolveResult != null)
                  return resolveResult;
              }
            }
        }
        throw function(specifier, packageJsonUrl2, base2) {
          return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl2)), (0, _url().fileURLToPath)(base2));
        }(name, packageJsonUrl, base);
      }
      function packageResolve(specifier, base, conditions) {
        if (_module().builtinModules.includes(specifier))
          return new (_url()).URL("node:" + specifier);
        const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
          let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
          specifier2[0] === "@" && (isScoped2 = true, separatorIndex === -1 || specifier2.length === 0 ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
          const packageName2 = separatorIndex === -1 ? specifier2 : specifier2.slice(0, separatorIndex);
          if (invalidPackageNameRegEx.exec(packageName2) !== null && (validPackageName = false), !validPackageName)
            throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, _url().fileURLToPath)(base2));
          return { packageName: packageName2, packageSubpath: "." + (separatorIndex === -1 ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
        }(specifier, base), packageConfig = getPackageScopeConfig(base);
        if (packageConfig.exists) {
          const packageJsonUrl2 = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
          if (packageConfig.name === packageName && packageConfig.exports !== undefined && packageConfig.exports !== null)
            return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
        }
        let lastPath, packageJsonUrl = new (_url()).URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
        do {
          const stat = tryStatSync(packageJsonPath.slice(0, -13));
          if (!stat || !stat.isDirectory()) {
            lastPath = packageJsonPath, packageJsonUrl = new (_url()).URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
            continue;
          }
          const packageConfig2 = read(packageJsonPath, { base, specifier });
          return packageConfig2.exports !== undefined && packageConfig2.exports !== null ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : packageSubpath === "." ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new (_url()).URL(packageSubpath, packageJsonUrl);
        } while (packageJsonPath.length !== lastPath.length);
        throw new ERR_MODULE_NOT_FOUND(packageName, (0, _url().fileURLToPath)(base), false);
      }
      function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
        return specifier !== "" && (specifier[0] === "/" || function(specifier2) {
          if (specifier2[0] === ".") {
            if (specifier2.length === 1 || specifier2[1] === "/")
              return true;
            if (specifier2[1] === "." && (specifier2.length === 2 || specifier2[2] === "/"))
              return true;
          }
          return false;
        }(specifier));
      }
      function moduleResolve(specifier, base, conditions, preserveSymlinks) {
        const protocol = base.protocol, isRemote = protocol === "data:" || protocol === "http:" || protocol === "https:";
        let resolved;
        if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier))
          try {
            resolved = new (_url()).URL(specifier, base);
          } catch (error_) {
            const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
            throw error.cause = error_, error;
          }
        else if (protocol === "file:" && specifier[0] === "#")
          resolved = packageImportsResolve(specifier, base, conditions);
        else
          try {
            resolved = new (_url()).URL(specifier);
          } catch (error_) {
            if (isRemote && !_module().builtinModules.includes(specifier)) {
              const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
              throw error.cause = error_, error;
            }
            resolved = packageResolve(specifier, base, conditions);
          }
        return _assert()(resolved !== undefined, "expected to be defined"), resolved.protocol !== "file:" ? resolved : function(resolved2, base2, preserveSymlinks2) {
          if (encodedSeparatorRegEx.exec(resolved2.pathname) !== null)
            throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, _url().fileURLToPath)(base2));
          let filePath;
          try {
            filePath = (0, _url().fileURLToPath)(resolved2);
          } catch (error) {
            const cause = error;
            throw Object.defineProperty(cause, "input", { value: String(resolved2) }), Object.defineProperty(cause, "module", { value: String(base2) }), cause;
          }
          const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
          if (stats && stats.isDirectory()) {
            const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, _url().fileURLToPath)(base2));
            throw error.url = String(resolved2), error;
          }
          if (!stats || !stats.isFile()) {
            const error = new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, _url().fileURLToPath)(base2), true);
            throw error.url = String(resolved2), error;
          }
          if (!preserveSymlinks2) {
            const real = (0, _fs().realpathSync)(filePath), { search, hash } = resolved2;
            (resolved2 = (0, _url().pathToFileURL)(real + (filePath.endsWith(_path().sep) ? "/" : ""))).search = search, resolved2.hash = hash;
          }
          return resolved2;
        }(resolved, base, preserveSymlinks);
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      exports2.default = class {
        constructor(map, indentChar) {
          this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this._canMarkIdName = true, this._indentChar = "", this._fastIndentations = [], this._position = { line: 1, column: 0 }, this._sourcePosition = { identifierName: undefined, identifierNamePos: undefined, line: undefined, column: undefined, filename: undefined }, this._map = map, this._indentChar = indentChar;
          for (let i = 0;i < 64; i++)
            this._fastIndentations.push(indentChar.repeat(i));
          this._allocQueue();
        }
        _allocQueue() {
          const queue = this._queue;
          for (let i = 0;i < 16; i++)
            queue.push({ char: 0, repeat: 1, line: undefined, column: undefined, identifierName: undefined, identifierNamePos: undefined, filename: "" });
        }
        _pushQueue(char, repeat, line, column, filename) {
          const cursor = this._queueCursor;
          cursor === this._queue.length && this._allocQueue();
          const item = this._queue[cursor];
          item.char = char, item.repeat = repeat, item.line = line, item.column = column, item.filename = filename, this._queueCursor++;
        }
        _popQueue() {
          if (this._queueCursor === 0)
            throw new Error("Cannot pop from empty queue");
          return this._queue[--this._queueCursor];
        }
        get() {
          this._flush();
          const map = this._map, result = { code: (this._buf + this._str).trimRight(), decodedMap: map == null ? undefined : map.getDecoded(), get __mergedMap() {
            return this.map;
          }, get map() {
            const resultMap = map ? map.get() : null;
            return result.map = resultMap, resultMap;
          }, set map(value2) {
            Object.defineProperty(result, "map", { value: value2, writable: true });
          }, get rawMappings() {
            const mappings = map == null ? undefined : map.getRawMappings();
            return result.rawMappings = mappings, mappings;
          }, set rawMappings(value2) {
            Object.defineProperty(result, "rawMappings", { value: value2, writable: true });
          } };
          return result;
        }
        append(str, maybeNewline) {
          this._flush(), this._append(str, this._sourcePosition, maybeNewline);
        }
        appendChar(char) {
          this._flush(), this._appendChar(char, 1, this._sourcePosition);
        }
        queue(char) {
          if (char === 10)
            for (;this._queueCursor !== 0; ) {
              const char2 = this._queue[this._queueCursor - 1].char;
              if (char2 !== 32 && char2 !== 9)
                break;
              this._queueCursor--;
            }
          const sourcePosition = this._sourcePosition;
          this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
        }
        queueIndentation(repeat) {
          repeat !== 0 && this._pushQueue(-1, repeat, undefined, undefined, undefined);
        }
        _flush() {
          const queueCursor = this._queueCursor, queue = this._queue;
          for (let i = 0;i < queueCursor; i++) {
            const item = queue[i];
            this._appendChar(item.char, item.repeat, item);
          }
          this._queueCursor = 0;
        }
        _appendChar(char, repeat, sourcePos) {
          if (this._last = char, char === -1) {
            const fastIndentation = this._fastIndentations[repeat];
            this._str += fastIndentation !== undefined ? fastIndentation : repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
          } else
            this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
          char !== 10 ? (this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename), this._position.column += repeat) : (this._position.line++, this._position.column = 0), this._canMarkIdName && (sourcePos.identifierName = undefined, sourcePos.identifierNamePos = undefined);
        }
        _append(str, sourcePos, maybeNewline) {
          const len = str.length, position = this._position;
          if (this._last = str.charCodeAt(len - 1), ++this._appendCount > 4096 ? (this._str, this._buf += this._str, this._str = str, this._appendCount = 0) : this._str += str, !maybeNewline && !this._map)
            return void (position.column += len);
          const { column, identifierName, identifierNamePos, filename } = sourcePos;
          let line = sourcePos.line;
          identifierName == null && identifierNamePos == null || !this._canMarkIdName || (sourcePos.identifierName = undefined, sourcePos.identifierNamePos = undefined);
          let i = str.indexOf(`
`), last = 0;
          for (i !== 0 && this._mark(line, column, identifierName, identifierNamePos, filename);i !== -1; )
            position.line++, position.column = 0, last = i + 1, last < len && line !== undefined && this._mark(++line, 0, null, null, filename), i = str.indexOf(`
`, last);
          position.column += len - last;
        }
        _mark(line, column, identifierName, identifierNamePos, filename) {
          var _this$_map;
          (_this$_map = this._map) == null || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
        }
        removeTrailingNewline() {
          const queueCursor = this._queueCursor;
          queueCursor !== 0 && this._queue[queueCursor - 1].char === 10 && this._queueCursor--;
        }
        removeLastSemicolon() {
          const queueCursor = this._queueCursor;
          queueCursor !== 0 && this._queue[queueCursor - 1].char === 59 && this._queueCursor--;
        }
        getLastChar() {
          const queueCursor = this._queueCursor;
          return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;
        }
        getNewlineCount() {
          const queueCursor = this._queueCursor;
          let count = 0;
          if (queueCursor === 0)
            return this._last === 10 ? 1 : 0;
          for (let i = queueCursor - 1;i >= 0 && this._queue[i].char === 10; i--)
            count++;
          return count === queueCursor && this._last === 10 ? count + 1 : count;
        }
        endsWithCharAndNewline() {
          const queue = this._queue, queueCursor = this._queueCursor;
          if (queueCursor !== 0) {
            if (queue[queueCursor - 1].char !== 10)
              return;
            return queueCursor > 1 ? queue[queueCursor - 2].char : this._last;
          }
        }
        hasContent() {
          return this._queueCursor !== 0 || !!this._last;
        }
        exactSource(loc, cb) {
          if (!this._map)
            return void cb();
          this.source("start", loc);
          const identifierName = loc.identifierName, sourcePos = this._sourcePosition;
          identifierName && (this._canMarkIdName = false, sourcePos.identifierName = identifierName), cb(), identifierName && (this._canMarkIdName = true, sourcePos.identifierName = undefined, sourcePos.identifierNamePos = undefined), this.source("end", loc);
        }
        source(prop, loc) {
          this._map && this._normalizePosition(prop, loc, 0);
        }
        sourceWithOffset(prop, loc, columnOffset) {
          this._map && this._normalizePosition(prop, loc, columnOffset);
        }
        _normalizePosition(prop, loc, columnOffset) {
          const pos = loc[prop], target = this._sourcePosition;
          pos && (target.line = pos.line, target.column = Math.max(pos.column + columnOffset, 0), target.filename = loc.filename);
        }
        getCurrentColumn() {
          const queue = this._queue, queueCursor = this._queueCursor;
          let lastIndex = -1, len = 0;
          for (let i = 0;i < queueCursor; i++) {
            const item = queue[i];
            item.char === 10 && (lastIndex = len), len += item.repeat;
          }
          return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;
        }
        getCurrentLine() {
          let count = 0;
          const queue = this._queue;
          for (let i = 0;i < this._queueCursor; i++)
            queue[i].char === 10 && count++;
          return this._position.line + count;
        }
      };
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BlockStatement = function(node) {
        var _node$directives2;
        this.tokenChar(123);
        const exit = this.enterDelimited(), directivesLen = (_node$directives2 = node.directives) == null ? undefined : _node$directives2.length;
        if (directivesLen) {
          var _node$directives$trai2;
          const newline = node.body.length ? 2 : 1;
          this.printSequence(node.directives, true, newline), (_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai2.length || this.newline(newline);
        }
        this.printSequence(node.body, true), exit(), this.rightBrace(node);
      }, exports2.Directive = function(node) {
        this.print(node.value), this.semicolon();
      }, exports2.DirectiveLiteral = function(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== undefined)
          return void this.token(raw);
        const { value: value2 } = node;
        if (unescapedDoubleQuoteRE.test(value2)) {
          if (unescapedSingleQuoteRE.test(value2))
            throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
          this.token(`'${value2}'`);
        } else
          this.token(`"${value2}"`);
      }, exports2.File = function(node) {
        node.program && this.print(node.program.interpreter);
        this.print(node.program);
      }, exports2.InterpreterDirective = function(node) {
        this.token(`#!${node.value}`), this.newline(1, true);
      }, exports2.Placeholder = function(node) {
        this.token("%%"), this.print(node.name), this.token("%%"), node.expectedNode === "Statement" && this.semicolon();
      }, exports2.Program = function(node) {
        var _node$directives;
        this.noIndentInnerCommentsHere(), this.printInnerComments();
        const directivesLen = (_node$directives = node.directives) == null ? undefined : _node$directives.length;
        if (directivesLen) {
          var _node$directives$trai;
          const newline = node.body.length ? 2 : 1;
          this.printSequence(node.directives, undefined, newline), (_node$directives$trai = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai.length || this.newline(newline);
        }
        this.printSequence(node.body);
      };
      const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/, unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ClassAccessorProperty = function(node) {
        var _node$key$loc2;
        this.printJoin(node.decorators);
        const endLine = (_node$key$loc2 = node.key.loc) == null || (_node$key$loc2 = _node$key$loc2.end) == null ? undefined : _node$key$loc2.line;
        endLine && this.catchUp(endLine);
        this.tsPrintClassMemberModifiers(node), this.word("accessor", true), this.space(), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
        node.optional && this.tokenChar(63);
        node.definite && this.tokenChar(33);
        this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
        this.semicolon();
      }, exports2.ClassBody = function(node) {
        if (this.tokenChar(123), node.body.length === 0)
          this.tokenChar(125);
        else {
          this.newline();
          const separator = function(printer, node2) {
            if (!printer.tokenMap || node2.start == null || node2.end == null)
              return null;
            const indexes = printer.tokenMap.getIndexes(node2);
            if (!indexes)
              return null;
            let k = 1, occurrenceCount = 0, nextLocIndex = 0;
            const advanceNextLocIndex = () => {
              for (;nextLocIndex < node2.body.length && node2.body[nextLocIndex].start == null; )
                nextLocIndex++;
            };
            return advanceNextLocIndex(), (i) => {
              nextLocIndex <= i && (nextLocIndex = i + 1, advanceNextLocIndex());
              const end = nextLocIndex === node2.body.length ? node2.end : node2.body[nextLocIndex].start;
              let tok;
              for (;k < indexes.length && printer.tokenMap.matchesOriginal(tok = printer._tokens[indexes[k]], ";") && tok.start < end; )
                printer.token(";", undefined, occurrenceCount++), k++;
            };
          }(this, node);
          separator == null || separator(-1);
          const exit = this.enterDelimited();
          this.printJoin(node.body, true, true, separator, true), exit(), this.endsWith(10) || this.newline(), this.rightBrace(node);
        }
      }, exports2.ClassExpression = exports2.ClassDeclaration = function(node, parent) {
        (isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent)) && this._shouldPrintDecoratorsBeforeExport(parent) || this.printJoin(node.decorators);
        node.declare && (this.word("declare"), this.space());
        node.abstract && (this.word("abstract"), this.space());
        this.word("class"), node.id && (this.space(), this.print(node.id));
        this.print(node.typeParameters), node.superClass && (this.space(), this.word("extends"), this.space(), this.print(node.superClass), this.print(node.superTypeParameters));
        node.implements && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
        this.space(), this.print(node.body);
      }, exports2.ClassMethod = function(node) {
        this._classMethodHead(node), this.space(), this.print(node.body);
      }, exports2.ClassPrivateMethod = function(node) {
        this._classMethodHead(node), this.space(), this.print(node.body);
      }, exports2.ClassPrivateProperty = function(node) {
        this.printJoin(node.decorators), node.static && (this.word("static"), this.space());
        this.print(node.key), this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
        this.semicolon();
      }, exports2.ClassProperty = function(node) {
        if (this.printJoin(node.decorators), !node.static && !this.format.preserveFormat) {
          var _node$key$loc;
          const endLine = (_node$key$loc = node.key.loc) == null || (_node$key$loc = _node$key$loc.end) == null ? undefined : _node$key$loc.line;
          endLine && this.catchUp(endLine);
        }
        this.tsPrintClassMemberModifiers(node), node.computed ? (this.tokenChar(91), this.print(node.key), this.tokenChar(93)) : (this._variance(node), this.print(node.key));
        node.optional && this.tokenChar(63);
        node.definite && this.tokenChar(33);
        this.print(node.typeAnnotation), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value));
        this.semicolon();
      }, exports2.StaticBlock = function(node) {
        this.word("static"), this.space(), this.tokenChar(123), node.body.length === 0 ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, true), this.rightBrace(node));
      }, exports2._classMethodHead = function(node) {
        if (this.printJoin(node.decorators), !this.format.preserveFormat) {
          var _node$key$loc3;
          const endLine = (_node$key$loc3 = node.key.loc) == null || (_node$key$loc3 = _node$key$loc3.end) == null ? undefined : _node$key$loc3.line;
          endLine && this.catchUp(endLine);
        }
        this.tsPrintClassMemberModifiers(node), this._methodHead(node);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { isExportDefaultDeclaration, isExportNamedDeclaration } = _t;
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.LogicalExpression = exports2.BinaryExpression = exports2.AssignmentExpression = function(node) {
        this.print(node.left), this.space(), node.operator === "in" || node.operator === "instanceof" ? this.word(node.operator) : (this.token(node.operator), this._endsWithDiv = node.operator === "/");
        this.space(), this.print(node.right);
      }, exports2.AssignmentPattern = function(node) {
        this.print(node.left), (node.left.type === "Identifier" || isPattern(node.left)) && (node.left.optional && this.tokenChar(63), this.print(node.left.typeAnnotation));
        this.space(), this.tokenChar(61), this.space(), this.print(node.right);
      }, exports2.AwaitExpression = function(node) {
        this.word("await"), node.argument && (this.space(), this.printTerminatorless(node.argument));
      }, exports2.BindExpression = function(node) {
        this.print(node.object), this.token("::"), this.print(node.callee);
      }, exports2.CallExpression = function(node) {
        this.print(node.callee), this.print(node.typeArguments), this.print(node.typeParameters), this.tokenChar(40);
        const exit = this.enterDelimited();
        this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
      }, exports2.ConditionalExpression = function(node) {
        this.print(node.test), this.space(), this.tokenChar(63), this.space(), this.print(node.consequent), this.space(), this.tokenChar(58), this.space(), this.print(node.alternate);
      }, exports2.Decorator = function(node) {
        this.tokenChar(64), this.print(node.expression), this.newline();
      }, exports2.DoExpression = function(node) {
        node.async && (this.word("async", true), this.space());
        this.word("do"), this.space(), this.print(node.body);
      }, exports2.EmptyStatement = function() {
        this.semicolon(true);
      }, exports2.ExpressionStatement = function(node) {
        this.tokenContext |= _index.TokenContext.expressionStatement, this.print(node.expression), this.semicolon();
      }, exports2.Import = function() {
        this.word("import");
      }, exports2.MemberExpression = function(node) {
        if (this.print(node.object), !node.computed && isMemberExpression(node.property))
          throw new TypeError("Got a MemberExpression for MemberExpression property");
        let computed = node.computed;
        isLiteral(node.property) && typeof node.property.value == "number" && (computed = true);
        if (computed) {
          const exit = this.enterDelimited();
          this.tokenChar(91), this.print(node.property), this.tokenChar(93), exit();
        } else
          this.tokenChar(46), this.print(node.property);
      }, exports2.MetaProperty = function(node) {
        this.print(node.meta), this.tokenChar(46), this.print(node.property);
      }, exports2.ModuleExpression = function(node) {
        this.word("module", true), this.space(), this.tokenChar(123), this.indent();
        const { body } = node;
        (body.body.length || body.directives.length) && this.newline();
        this.print(body), this.dedent(), this.rightBrace(node);
      }, exports2.NewExpression = function(node, parent) {
        if (this.word("new"), this.space(), this.print(node.callee), this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression(parent))
          return;
        this.print(node.typeArguments), this.print(node.typeParameters), node.optional && this.token("?.");
        if (node.arguments.length === 0 && this.tokenMap && !this.tokenMap.endMatches(node, ")"))
          return;
        this.tokenChar(40);
        const exit = this.enterDelimited();
        this.printList(node.arguments, this.shouldPrintTrailingComma(")")), exit(), this.rightParens(node);
      }, exports2.OptionalCallExpression = function(node) {
        this.print(node.callee), this.print(node.typeParameters), node.optional && this.token("?.");
        this.print(node.typeArguments), this.tokenChar(40);
        const exit = this.enterDelimited();
        this.printList(node.arguments), exit(), this.rightParens(node);
      }, exports2.OptionalMemberExpression = function(node) {
        let { computed } = node;
        const { optional, property } = node;
        if (this.print(node.object), !computed && isMemberExpression(property))
          throw new TypeError("Got a MemberExpression for MemberExpression property");
        isLiteral(property) && typeof property.value == "number" && (computed = true);
        optional && this.token("?.");
        computed ? (this.tokenChar(91), this.print(property), this.tokenChar(93)) : (optional || this.tokenChar(46), this.print(property));
      }, exports2.ParenthesizedExpression = function(node) {
        this.tokenChar(40);
        const exit = this.enterDelimited();
        this.print(node.expression), exit(), this.rightParens(node);
      }, exports2.PrivateName = function(node) {
        this.tokenChar(35), this.print(node.id);
      }, exports2.SequenceExpression = function(node) {
        this.printList(node.expressions);
      }, exports2.Super = function() {
        this.word("super");
      }, exports2.ThisExpression = function() {
        this.word("this");
      }, exports2.UnaryExpression = function(node) {
        const { operator } = node;
        operator === "void" || operator === "delete" || operator === "typeof" || operator === "throw" ? (this.word(operator), this.space()) : this.token(operator);
        this.print(node.argument);
      }, exports2.UpdateExpression = function(node) {
        node.prefix ? (this.token(node.operator), this.print(node.argument)) : (this.print(node.argument, true), this.token(node.operator));
      }, exports2.V8IntrinsicIdentifier = function(node) {
        this.tokenChar(37), this.word(node.name);
      }, exports2.YieldExpression = function(node) {
        this.word("yield", true), node.delegate ? (this.tokenChar(42), node.argument && (this.space(), this.print(node.argument))) : node.argument && (this.space(), this.printTerminatorless(node.argument));
      }, exports2._shouldPrintDecoratorsBeforeExport = function(node) {
        if (typeof this.format.decoratorsBeforeExport == "boolean")
          return this.format.decoratorsBeforeExport;
        return typeof node.start == "number" && node.start === node.declaration.start;
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
      const { isCallExpression, isLiteral, isMemberExpression, isNewExpression, isPattern } = _t;
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.AnyTypeAnnotation = function() {
        this.word("any");
      }, exports2.ArrayTypeAnnotation = function(node) {
        this.print(node.elementType, true), this.tokenChar(91), this.tokenChar(93);
      }, exports2.BooleanLiteralTypeAnnotation = function(node) {
        this.word(node.value ? "true" : "false");
      }, exports2.BooleanTypeAnnotation = function() {
        this.word("boolean");
      }, exports2.DeclareClass = function(node, parent) {
        isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
        this.word("class"), this.space(), this._interfaceish(node);
      }, exports2.DeclareExportAllDeclaration = function(node) {
        this.word("declare"), this.space(), _modules.ExportAllDeclaration.call(this, node);
      }, exports2.DeclareExportDeclaration = function(node) {
        this.word("declare"), this.space(), this.word("export"), this.space(), node.default && (this.word("default"), this.space());
        FlowExportDeclaration.call(this, node);
      }, exports2.DeclareFunction = function(node, parent) {
        isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
        this.word("function"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation.typeAnnotation), node.predicate && (this.space(), this.print(node.predicate));
        this.semicolon();
      }, exports2.DeclareInterface = function(node) {
        this.word("declare"), this.space(), this.InterfaceDeclaration(node);
      }, exports2.DeclareModule = function(node) {
        this.word("declare"), this.space(), this.word("module"), this.space(), this.print(node.id), this.space(), this.print(node.body);
      }, exports2.DeclareModuleExports = function(node) {
        this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(node.typeAnnotation);
      }, exports2.DeclareOpaqueType = function(node, parent) {
        isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
        this.OpaqueType(node);
      }, exports2.DeclareTypeAlias = function(node) {
        this.word("declare"), this.space(), this.TypeAlias(node);
      }, exports2.DeclareVariable = function(node, parent) {
        isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
        this.word("var"), this.space(), this.print(node.id), this.print(node.id.typeAnnotation), this.semicolon();
      }, exports2.DeclaredPredicate = function(node) {
        this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(node.value), this.tokenChar(41);
      }, exports2.EmptyTypeAnnotation = function() {
        this.word("empty");
      }, exports2.EnumBooleanBody = function(node) {
        const { explicitType } = node;
        enumExplicitType(this, "boolean", explicitType), enumBody(this, node);
      }, exports2.EnumBooleanMember = function(node) {
        enumInitializedMember(this, node);
      }, exports2.EnumDeclaration = function(node) {
        const { id, body } = node;
        this.word("enum"), this.space(), this.print(id), this.print(body);
      }, exports2.EnumDefaultedMember = function(node) {
        const { id } = node;
        this.print(id), this.tokenChar(44);
      }, exports2.EnumNumberBody = function(node) {
        const { explicitType } = node;
        enumExplicitType(this, "number", explicitType), enumBody(this, node);
      }, exports2.EnumNumberMember = function(node) {
        enumInitializedMember(this, node);
      }, exports2.EnumStringBody = function(node) {
        const { explicitType } = node;
        enumExplicitType(this, "string", explicitType), enumBody(this, node);
      }, exports2.EnumStringMember = function(node) {
        enumInitializedMember(this, node);
      }, exports2.EnumSymbolBody = function(node) {
        enumExplicitType(this, "symbol", true), enumBody(this, node);
      }, exports2.ExistsTypeAnnotation = function() {
        this.tokenChar(42);
      }, exports2.FunctionTypeAnnotation = function(node, parent) {
        this.print(node.typeParameters), this.tokenChar(40), node.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(node.this.typeAnnotation), (node.params.length || node.rest) && (this.tokenChar(44), this.space()));
        this.printList(node.params), node.rest && (node.params.length && (this.tokenChar(44), this.space()), this.token("..."), this.print(node.rest));
        this.tokenChar(41);
        const type = parent == null ? undefined : parent.type;
        type != null && (type === "ObjectTypeCallProperty" || type === "ObjectTypeInternalSlot" || type === "DeclareFunction" || type === "ObjectTypeProperty" && parent.method) ? this.tokenChar(58) : (this.space(), this.token("=>"));
        this.space(), this.print(node.returnType);
      }, exports2.FunctionTypeParam = function(node) {
        this.print(node.name), node.optional && this.tokenChar(63);
        node.name && (this.tokenChar(58), this.space());
        this.print(node.typeAnnotation);
      }, exports2.IndexedAccessType = function(node) {
        this.print(node.objectType, true), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
      }, exports2.InferredPredicate = function() {
        this.tokenChar(37), this.word("checks");
      }, exports2.InterfaceDeclaration = function(node) {
        this.word("interface"), this.space(), this._interfaceish(node);
      }, exports2.GenericTypeAnnotation = exports2.ClassImplements = exports2.InterfaceExtends = function(node) {
        this.print(node.id), this.print(node.typeParameters, true);
      }, exports2.InterfaceTypeAnnotation = function(node) {
        var _node$extends2;
        this.word("interface"), (_node$extends2 = node.extends) != null && _node$extends2.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
        this.space(), this.print(node.body);
      }, exports2.IntersectionTypeAnnotation = function(node) {
        this.printJoin(node.types, undefined, undefined, andSeparator);
      }, exports2.MixedTypeAnnotation = function() {
        this.word("mixed");
      }, exports2.NullLiteralTypeAnnotation = function() {
        this.word("null");
      }, exports2.NullableTypeAnnotation = function(node) {
        this.tokenChar(63), this.print(node.typeAnnotation);
      }, Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
        return _types2.NumericLiteral;
      } }), exports2.NumberTypeAnnotation = function() {
        this.word("number");
      }, exports2.ObjectTypeAnnotation = function(node) {
        node.exact ? this.token("{|") : this.tokenChar(123);
        const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
        props.length && (this.newline(), this.space(), this.printJoin(props, true, true, undefined, undefined, function(leading) {
          if (leading && !props[0])
            return 1;
        }, () => {
          (props.length !== 1 || node.inexact) && (this.tokenChar(44), this.space());
        }), this.space());
        node.inexact && (this.indent(), this.token("..."), props.length && this.newline(), this.dedent());
        node.exact ? this.token("|}") : this.tokenChar(125);
      }, exports2.ObjectTypeCallProperty = function(node) {
        node.static && (this.word("static"), this.space());
        this.print(node.value);
      }, exports2.ObjectTypeIndexer = function(node) {
        node.static && (this.word("static"), this.space());
        this._variance(node), this.tokenChar(91), node.id && (this.print(node.id), this.tokenChar(58), this.space());
        this.print(node.key), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(node.value);
      }, exports2.ObjectTypeInternalSlot = function(node) {
        node.static && (this.word("static"), this.space());
        this.tokenChar(91), this.tokenChar(91), this.print(node.id), this.tokenChar(93), this.tokenChar(93), node.optional && this.tokenChar(63);
        node.method || (this.tokenChar(58), this.space());
        this.print(node.value);
      }, exports2.ObjectTypeProperty = function(node) {
        node.proto && (this.word("proto"), this.space());
        node.static && (this.word("static"), this.space());
        node.kind !== "get" && node.kind !== "set" || (this.word(node.kind), this.space());
        this._variance(node), this.print(node.key), node.optional && this.tokenChar(63);
        node.method || (this.tokenChar(58), this.space());
        this.print(node.value);
      }, exports2.ObjectTypeSpreadProperty = function(node) {
        this.token("..."), this.print(node.argument);
      }, exports2.OpaqueType = function(node) {
        this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), node.supertype && (this.tokenChar(58), this.space(), this.print(node.supertype));
        node.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(node.impltype));
        this.semicolon();
      }, exports2.OptionalIndexedAccessType = function(node) {
        this.print(node.objectType), node.optional && this.token("?.");
        this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
      }, exports2.QualifiedTypeIdentifier = function(node) {
        this.print(node.qualification), this.tokenChar(46), this.print(node.id);
      }, Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
        return _types2.StringLiteral;
      } }), exports2.StringTypeAnnotation = function() {
        this.word("string");
      }, exports2.SymbolTypeAnnotation = function() {
        this.word("symbol");
      }, exports2.ThisTypeAnnotation = function() {
        this.word("this");
      }, exports2.TupleTypeAnnotation = function(node) {
        this.tokenChar(91), this.printList(node.types), this.tokenChar(93);
      }, exports2.TypeAlias = function(node) {
        this.word("type"), this.space(), this.print(node.id), this.print(node.typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(node.right), this.semicolon();
      }, exports2.TypeAnnotation = function(node, parent) {
        this.tokenChar(58), this.space(), parent.type === "ArrowFunctionExpression" ? this.tokenContext |= _index.TokenContext.arrowFlowReturnType : node.optional && this.tokenChar(63);
        this.print(node.typeAnnotation);
      }, exports2.TypeCastExpression = function(node) {
        this.tokenChar(40), this.print(node.expression), this.print(node.typeAnnotation), this.tokenChar(41);
      }, exports2.TypeParameter = function(node) {
        this._variance(node), this.word(node.name), node.bound && this.print(node.bound);
        node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
      }, exports2.TypeParameterDeclaration = exports2.TypeParameterInstantiation = function(node) {
        this.tokenChar(60), this.printList(node.params), this.tokenChar(62);
      }, exports2.TypeofTypeAnnotation = function(node) {
        this.word("typeof"), this.space(), this.print(node.argument);
      }, exports2.UnionTypeAnnotation = function(node) {
        this.printJoin(node.types, undefined, undefined, orSeparator);
      }, exports2.Variance = function(node) {
        node.kind === "plus" ? this.tokenChar(43) : this.tokenChar(45);
      }, exports2.VoidTypeAnnotation = function() {
        this.word("void");
      }, exports2._interfaceish = function(node) {
        var _node$extends;
        this.print(node.id), this.print(node.typeParameters), (_node$extends = node.extends) != null && _node$extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends));
        if (node.type === "DeclareClass") {
          var _node$mixins, _node$implements;
          (_node$mixins = node.mixins) != null && _node$mixins.length && (this.space(), this.word("mixins"), this.space(), this.printList(node.mixins)), (_node$implements = node.implements) != null && _node$implements.length && (this.space(), this.word("implements"), this.space(), this.printList(node.implements));
        }
        this.space(), this.print(node.body);
      }, exports2._variance = function(node) {
        var _node$variance;
        const kind = (_node$variance = node.variance) == null ? undefined : _node$variance.kind;
        kind != null && (kind === "plus" ? this.tokenChar(43) : kind === "minus" && this.tokenChar(45));
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _types2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
      const { isDeclareExportDeclaration, isStatement } = _t;
      function enumExplicitType(context, name, hasExplicitType) {
        hasExplicitType && (context.space(), context.word("of"), context.space(), context.word(name)), context.space();
      }
      function enumBody(context, node) {
        const { members } = node;
        context.token("{"), context.indent(), context.newline();
        for (const member of members)
          context.print(member), context.newline();
        node.hasUnknownMembers && (context.token("..."), context.newline()), context.dedent(), context.token("}");
      }
      function enumInitializedMember(context, node) {
        context.print(node.id), context.space(), context.token("="), context.space(), context.print(node.init), context.token(",");
      }
      function FlowExportDeclaration(node) {
        if (node.declaration) {
          const declar = node.declaration;
          this.print(declar), isStatement(declar) || this.semicolon();
        } else
          this.tokenChar(123), node.specifiers.length && (this.space(), this.printList(node.specifiers), this.space()), this.tokenChar(125), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source)), this.semicolon();
      }
      function andSeparator(occurrenceCount) {
        this.space(), this.token("&", false, occurrenceCount), this.space();
      }
      function orSeparator(occurrenceCount) {
        this.space(), this.token("|", false, occurrenceCount), this.space();
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true });
      var _templateLiterals = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js");
      Object.keys(_templateLiterals).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _templateLiterals[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _templateLiterals[key];
        } }));
      });
      var _expressions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/expressions.js");
      Object.keys(_expressions).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _expressions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _expressions[key];
        } }));
      });
      var _statements = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js");
      Object.keys(_statements).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _statements[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _statements[key];
        } }));
      });
      var _classes = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/classes.js");
      Object.keys(_classes).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _classes[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _classes[key];
        } }));
      });
      var _methods = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js");
      Object.keys(_methods).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _methods[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _methods[key];
        } }));
      });
      var _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js");
      Object.keys(_modules).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _modules[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _modules[key];
        } }));
      });
      var _types = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js");
      Object.keys(_types).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _types[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _types[key];
        } }));
      });
      var _flow = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/flow.js");
      Object.keys(_flow).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _flow[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _flow[key];
        } }));
      });
      var _base = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/base.js");
      Object.keys(_base).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _base[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _base[key];
        } }));
      });
      var _jsx = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js");
      Object.keys(_jsx).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _jsx[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _jsx[key];
        } }));
      });
      var _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js");
      Object.keys(_typescript).forEach(function(key) {
        key !== "default" && key !== "__esModule" && ((key in exports2) && exports2[key] === _typescript[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _typescript[key];
        } }));
      });
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/jsx.js": (__unused_webpack_module, exports2) => {
      function spaceSeparator() {
        this.space();
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.JSXAttribute = function(node) {
        this.print(node.name), node.value && (this.tokenChar(61), this.print(node.value));
      }, exports2.JSXClosingElement = function(node) {
        this.tokenChar(60), this.tokenChar(47), this.print(node.name), this.tokenChar(62);
      }, exports2.JSXClosingFragment = function() {
        this.token("</"), this.tokenChar(62);
      }, exports2.JSXElement = function(node) {
        const open = node.openingElement;
        if (this.print(open), open.selfClosing)
          return;
        this.indent();
        for (const child of node.children)
          this.print(child);
        this.dedent(), this.print(node.closingElement);
      }, exports2.JSXEmptyExpression = function() {
        this.printInnerComments();
      }, exports2.JSXExpressionContainer = function(node) {
        this.tokenChar(123), this.print(node.expression), this.rightBrace(node);
      }, exports2.JSXFragment = function(node) {
        this.print(node.openingFragment), this.indent();
        for (const child of node.children)
          this.print(child);
        this.dedent(), this.print(node.closingFragment);
      }, exports2.JSXIdentifier = function(node) {
        this.word(node.name);
      }, exports2.JSXMemberExpression = function(node) {
        this.print(node.object), this.tokenChar(46), this.print(node.property);
      }, exports2.JSXNamespacedName = function(node) {
        this.print(node.namespace), this.tokenChar(58), this.print(node.name);
      }, exports2.JSXOpeningElement = function(node) {
        this.tokenChar(60), this.print(node.name), this.print(node.typeParameters), node.attributes.length > 0 && (this.space(), this.printJoin(node.attributes, undefined, undefined, spaceSeparator));
        node.selfClosing && (this.space(), this.tokenChar(47));
        this.tokenChar(62);
      }, exports2.JSXOpeningFragment = function() {
        this.tokenChar(60), this.tokenChar(62);
      }, exports2.JSXSpreadAttribute = function(node) {
        this.tokenChar(123), this.token("..."), this.print(node.argument), this.rightBrace(node);
      }, exports2.JSXSpreadChild = function(node) {
        this.tokenChar(123), this.token("..."), this.print(node.expression), this.rightBrace(node);
      }, exports2.JSXText = function(node) {
        const raw = this.getPossibleRaw(node);
        raw !== undefined ? this.token(raw, true) : this.token(node.value, true);
      };
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/methods.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrowFunctionExpression = function(node, parent) {
        node.async && (this.word("async", true), this.space());
        this._shouldPrintArrowParamsParens(node) ? this._params(node, undefined, parent) : this.print(node.params[0], true);
        this._predicate(node, true), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.tokenContext |= _index.TokenContext.arrowBody, this.print(node.body);
      }, exports2.FunctionDeclaration = exports2.FunctionExpression = function(node, parent) {
        this._functionHead(node, parent), this.space(), this.print(node.body);
      }, exports2._functionHead = function(node, parent) {
        node.async && (this.word("async"), this.format.preserveFormat || (this._endsWithInnerRaw = false), this.space());
        this.word("function"), node.generator && (this.format.preserveFormat || (this._endsWithInnerRaw = false), this.tokenChar(42));
        this.space(), node.id && this.print(node.id);
        this._params(node, node.id, parent), node.type !== "TSDeclareFunction" && this._predicate(node);
      }, exports2._methodHead = function(node) {
        const { kind, key } = node;
        kind !== "get" && kind !== "set" || (this.word(kind), this.space());
        node.async && (this.word("async", true), this.space());
        kind !== "method" && kind !== "init" || node.generator && this.tokenChar(42);
        node.computed ? (this.tokenChar(91), this.print(key), this.tokenChar(93)) : this.print(key);
        node.optional && this.tokenChar(63);
        this._params(node, node.computed && node.key.type !== "StringLiteral" ? undefined : node.key, undefined);
      }, exports2._param = function(parameter) {
        this.printJoin(parameter.decorators), this.print(parameter), parameter.optional && this.tokenChar(63);
        this.print(parameter.typeAnnotation);
      }, exports2._parameters = function(parameters, endToken) {
        const exit = this.enterDelimited(), trailingComma = this.shouldPrintTrailingComma(endToken), paramLength = parameters.length;
        for (let i = 0;i < paramLength; i++)
          this._param(parameters[i]), (trailingComma || i < paramLength - 1) && (this.token(",", null, i), this.space());
        this.token(endToken), exit();
      }, exports2._params = function(node, idNode, parentNode) {
        this.print(node.typeParameters);
        const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
        nameInfo && this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
        this.tokenChar(40), this._parameters(node.params, ")");
        const noLineTerminator = node.type === "ArrowFunctionExpression";
        this.print(node.returnType, noLineTerminator), this._noLineTerminator = noLineTerminator;
      }, exports2._predicate = function(node, noLineTerminatorAfter) {
        node.predicate && (node.returnType || this.tokenChar(58), this.space(), this.print(node.predicate, noLineTerminatorAfter));
      }, exports2._shouldPrintArrowParamsParens = function(node) {
        var _firstParam$leadingCo, _firstParam$trailingC;
        if (node.params.length !== 1)
          return true;
        if (node.typeParameters || node.returnType || node.predicate)
          return true;
        const firstParam = node.params[0];
        if (!isIdentifier(firstParam) || firstParam.typeAnnotation || firstParam.optional || (_firstParam$leadingCo = firstParam.leadingComments) != null && _firstParam$leadingCo.length || (_firstParam$trailingC = firstParam.trailingComments) != null && _firstParam$trailingC.length)
          return true;
        if (this.tokenMap) {
          if (node.loc == null)
            return true;
          if (this.tokenMap.findMatching(node, "(") !== null)
            return true;
          const arrowToken = this.tokenMap.findMatching(node, "=>");
          return (arrowToken == null ? undefined : arrowToken.loc) == null || arrowToken.loc.start.line !== node.loc.start.line;
        }
        return !!this.format.retainLines;
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
      const { isIdentifier } = _t;
      function _getFuncIdName(idNode, parent) {
        let nameInfo, id = idNode;
        if (!id && parent) {
          const parentType = parent.type;
          parentType === "VariableDeclarator" ? id = parent.id : parentType === "AssignmentExpression" || parentType === "AssignmentPattern" ? id = parent.left : parentType === "ObjectProperty" || parentType === "ClassProperty" ? parent.computed && parent.key.type !== "StringLiteral" || (id = parent.key) : parentType !== "ClassPrivateProperty" && parentType !== "ClassAccessorProperty" || (id = parent.key);
        }
        if (id) {
          var _id$loc, _id$loc2;
          if (id.type === "Identifier")
            nameInfo = { pos: (_id$loc = id.loc) == null ? undefined : _id$loc.start, name: ((_id$loc2 = id.loc) == null ? undefined : _id$loc2.identifierName) || id.name };
          else if (id.type === "PrivateName") {
            var _id$loc3;
            nameInfo = { pos: (_id$loc3 = id.loc) == null ? undefined : _id$loc3.start, name: "#" + id.id.name };
          } else if (id.type === "StringLiteral") {
            var _id$loc4;
            nameInfo = { pos: (_id$loc4 = id.loc) == null ? undefined : _id$loc4.start, name: id.value };
          }
          return nameInfo;
        }
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/modules.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ExportAllDeclaration = function(node) {
        var _node$attributes, _node$assertions;
        this.word("export"), this.space(), node.exportKind === "type" && (this.word("type"), this.space());
        this.tokenChar(42), this.space(), this.word("from"), this.space(), (_node$attributes = node.attributes) != null && _node$attributes.length || (_node$assertions = node.assertions) != null && _node$assertions.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, false)) : this.print(node.source);
        this.semicolon();
      }, exports2.ExportDefaultDeclaration = function(node) {
        maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space(), this.tokenContext |= _index.TokenContext.exportDefault;
        const declar = node.declaration;
        this.print(declar), isStatement(declar) || this.semicolon();
      }, exports2.ExportDefaultSpecifier = function(node) {
        this.print(node.exported);
      }, exports2.ExportNamedDeclaration = function(node) {
        if (maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.space(), node.declaration) {
          const declar = node.declaration;
          this.print(declar), isStatement(declar) || this.semicolon();
        } else {
          node.exportKind === "type" && (this.word("type"), this.space());
          const specifiers = node.specifiers.slice(0);
          let hasSpecial = false;
          for (;; ) {
            const first = specifiers[0];
            if (!isExportDefaultSpecifier(first) && !isExportNamespaceSpecifier(first))
              break;
            hasSpecial = true, this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
          }
          let hasBrace = false;
          var _node$attributes2, _node$assertions2;
          if ((specifiers.length || !specifiers.length && !hasSpecial) && (hasBrace = true, this.tokenChar(123), specifiers.length && (this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space()), this.tokenChar(125)), node.source)
            this.space(), this.word("from"), this.space(), (_node$attributes2 = node.attributes) != null && _node$attributes2.length || (_node$assertions2 = node.assertions) != null && _node$assertions2.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
          this.semicolon();
        }
      }, exports2.ExportNamespaceSpecifier = function(node) {
        this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.exported);
      }, exports2.ExportSpecifier = function(node) {
        node.exportKind === "type" && (this.word("type"), this.space());
        this.print(node.local), node.exported && node.local.name !== node.exported.name && (this.space(), this.word("as"), this.space(), this.print(node.exported));
      }, exports2.ImportAttribute = function(node) {
        this.print(node.key), this.tokenChar(58), this.space(), this.print(node.value);
      }, exports2.ImportDeclaration = function(node) {
        var _node$attributes3, _node$assertions3;
        this.word("import"), this.space();
        const isTypeKind = node.importKind === "type" || node.importKind === "typeof";
        isTypeKind ? (this.noIndentInnerCommentsHere(), this.word(node.importKind), this.space()) : node.module ? (this.noIndentInnerCommentsHere(), this.word("module"), this.space()) : node.phase && (this.noIndentInnerCommentsHere(), this.word(node.phase), this.space());
        const specifiers = node.specifiers.slice(0), hasSpecifiers = !!specifiers.length;
        for (;hasSpecifiers; ) {
          const first = specifiers[0];
          if (!isImportDefaultSpecifier(first) && !isImportNamespaceSpecifier(first))
            break;
          this.print(specifiers.shift()), specifiers.length && (this.tokenChar(44), this.space());
        }
        let hasBrace = false;
        specifiers.length ? (hasBrace = true, this.tokenChar(123), this.space(), this.printList(specifiers, this.shouldPrintTrailingComma("}")), this.space(), this.tokenChar(125)) : isTypeKind && !hasSpecifiers && (hasBrace = true, this.tokenChar(123), this.tokenChar(125));
        (hasSpecifiers || isTypeKind) && (this.space(), this.word("from"), this.space());
        (_node$attributes3 = node.attributes) != null && _node$attributes3.length || (_node$assertions3 = node.assertions) != null && _node$assertions3.length ? (this.print(node.source, true), this.space(), this._printAttributes(node, hasBrace)) : this.print(node.source);
        this.semicolon();
      }, exports2.ImportDefaultSpecifier = function(node) {
        this.print(node.local);
      }, exports2.ImportExpression = function(node) {
        this.word("import"), node.phase && (this.tokenChar(46), this.word(node.phase));
        this.tokenChar(40), this.print(node.source), node.options != null && (this.tokenChar(44), this.space(), this.print(node.options));
        this.tokenChar(41);
      }, exports2.ImportNamespaceSpecifier = function(node) {
        this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.local);
      }, exports2.ImportSpecifier = function(node) {
        node.importKind !== "type" && node.importKind !== "typeof" || (this.word(node.importKind), this.space());
        this.print(node.imported), node.local && node.local.name !== node.imported.name && (this.space(), this.word("as"), this.space(), this.print(node.local));
      }, exports2._printAttributes = function(node, hasPreviousBrace) {
        const { importAttributesKeyword } = this.format, { attributes, assertions } = node;
        !attributes || importAttributesKeyword || warningShown || (warningShown = true, console.warn('You are using import attributes, without specifying the desired output syntax.\nPlease specify the "importAttributesKeyword" generator option, whose value can be one of:\n - "with"        : `import { a } from "b" with { type: "json" };`\n - "assert"      : `import { a } from "b" assert { type: "json" };`\n - "with-legacy" : `import { a } from "b" with type: "json";`\n'));
        const useAssertKeyword = importAttributesKeyword === "assert" || !importAttributesKeyword && assertions;
        if (this.word(useAssertKeyword ? "assert" : "with"), this.space(), !useAssertKeyword && importAttributesKeyword !== "with")
          return void this.printList(attributes || assertions);
        const occurrenceCount = hasPreviousBrace ? 1 : 0;
        this.token("{", null, occurrenceCount), this.space(), this.printList(attributes || assertions, this.shouldPrintTrailingComma("}")), this.space(), this.token("}", null, occurrenceCount);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
      const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement } = _t;
      let warningShown = false;
      function maybePrintDecoratorsBeforeExport(printer, node) {
        isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node) && printer.printJoin(node.declaration.decorators);
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/statements.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BreakStatement = function(node) {
        this.word("break"), printStatementAfterKeyword(this, node.label);
      }, exports2.CatchClause = function(node) {
        this.word("catch"), this.space(), node.param && (this.tokenChar(40), this.print(node.param), this.print(node.param.typeAnnotation), this.tokenChar(41), this.space());
        this.print(node.body);
      }, exports2.ContinueStatement = function(node) {
        this.word("continue"), printStatementAfterKeyword(this, node.label);
      }, exports2.DebuggerStatement = function() {
        this.word("debugger"), this.semicolon();
      }, exports2.DoWhileStatement = function(node) {
        this.word("do"), this.space(), this.print(node.body), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.semicolon();
      }, exports2.ForOfStatement = exports2.ForInStatement = undefined, exports2.ForStatement = function(node) {
        this.word("for"), this.space(), this.tokenChar(40);
        {
          const exit = this.enterForStatementInit();
          this.tokenContext |= _index.TokenContext.forHead, this.print(node.init), exit();
        }
        this.tokenChar(59), node.test && (this.space(), this.print(node.test));
        this.token(";", false, 1), node.update && (this.space(), this.print(node.update));
        this.tokenChar(41), this.printBlock(node);
      }, exports2.IfStatement = function(node) {
        this.word("if"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.space();
        const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
        needsBlock && (this.tokenChar(123), this.newline(), this.indent());
        this.printAndIndentOnComments(node.consequent), needsBlock && (this.dedent(), this.newline(), this.tokenChar(125));
        node.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(node.alternate));
      }, exports2.LabeledStatement = function(node) {
        this.print(node.label), this.tokenChar(58), this.space(), this.print(node.body);
      }, exports2.ReturnStatement = function(node) {
        this.word("return"), printStatementAfterKeyword(this, node.argument);
      }, exports2.SwitchCase = function(node) {
        node.test ? (this.word("case"), this.space(), this.print(node.test), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58));
        node.consequent.length && (this.newline(), this.printSequence(node.consequent, true));
      }, exports2.SwitchStatement = function(node) {
        this.word("switch"), this.space(), this.tokenChar(40), this.print(node.discriminant), this.tokenChar(41), this.space(), this.tokenChar(123), this.printSequence(node.cases, true, undefined, function(leading, cas) {
          if (!leading && node.cases[node.cases.length - 1] === cas)
            return -1;
        }), this.rightBrace(node);
      }, exports2.ThrowStatement = function(node) {
        this.word("throw"), printStatementAfterKeyword(this, node.argument);
      }, exports2.TryStatement = function(node) {
        this.word("try"), this.space(), this.print(node.block), this.space(), node.handlers ? this.print(node.handlers[0]) : this.print(node.handler);
        node.finalizer && (this.space(), this.word("finally"), this.space(), this.print(node.finalizer));
      }, exports2.VariableDeclaration = function(node, parent) {
        node.declare && (this.word("declare"), this.space());
        const { kind } = node;
        kind === "await using" ? (this.word("await"), this.space(), this.word("using", true)) : this.word(kind, kind === "using");
        this.space();
        let hasInits = false;
        if (!isFor(parent))
          for (const declar of node.declarations)
            declar.init && (hasInits = true);
        if (this.printList(node.declarations, undefined, undefined, node.declarations.length > 1, hasInits ? function(occurrenceCount) {
          this.token(",", false, occurrenceCount), this.newline();
        } : undefined), isFor(parent)) {
          if (isForStatement(parent)) {
            if (parent.init === node)
              return;
          } else if (parent.left === node)
            return;
        }
        this.semicolon();
      }, exports2.VariableDeclarator = function(node) {
        this.print(node.id), node.definite && this.tokenChar(33);
        this.print(node.id.typeAnnotation), node.init && (this.space(), this.tokenChar(61), this.space(), this.print(node.init));
      }, exports2.WhileStatement = function(node) {
        this.word("while"), this.space(), this.tokenChar(40), this.print(node.test), this.tokenChar(41), this.printBlock(node);
      }, exports2.WithStatement = function(node) {
        this.word("with"), this.space(), this.tokenChar(40), this.print(node.object), this.tokenChar(41), this.printBlock(node);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
      const { isFor, isForStatement, isIfStatement, isStatement } = _t;
      function getLastStatement(statement) {
        const { body } = statement;
        return isStatement(body) === false ? statement : getLastStatement(body);
      }
      function ForXStatement(node) {
        this.word("for"), this.space();
        const isForOf = node.type === "ForOfStatement";
        isForOf && node.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40);
        {
          const exit = isForOf ? null : this.enterForStatementInit();
          this.tokenContext |= isForOf ? _index.TokenContext.forOfHead : _index.TokenContext.forInHead, this.print(node.left), exit == null || exit();
        }
        this.space(), this.word(isForOf ? "of" : "in"), this.space(), this.print(node.right), this.tokenChar(41), this.printBlock(node);
      }
      exports2.ForInStatement = ForXStatement, exports2.ForOfStatement = ForXStatement;
      function printStatementAfterKeyword(printer, node) {
        node && (printer.space(), printer.printTerminatorless(node)), printer.semicolon();
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/template-literals.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TaggedTemplateExpression = function(node) {
        this.print(node.tag), this.print(node.typeParameters), this.print(node.quasi);
      }, exports2.TemplateElement = function() {
        throw new Error("TemplateElement printing is handled in TemplateLiteral");
      }, exports2.TemplateLiteral = function(node) {
        const quasis = node.quasis;
        let partRaw = "`";
        for (let i = 0;i < quasis.length; i++)
          if (partRaw += quasis[i].value.raw, i + 1 < quasis.length && (this.token(partRaw + "${", true), this.print(node.expressions[i]), partRaw = "}", this.tokenMap)) {
            const token = this.tokenMap.findMatching(node, "}", i);
            token && this._catchUpTo(token.loc.start);
          }
        this.token(partRaw + "`", true);
      };
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArgumentPlaceholder = function() {
        this.tokenChar(63);
      }, exports2.ArrayPattern = exports2.ArrayExpression = function(node) {
        const elems = node.elements, len = elems.length;
        this.tokenChar(91);
        const exit = this.enterDelimited();
        for (let i = 0;i < elems.length; i++) {
          const elem = elems[i];
          elem ? (i > 0 && this.space(), this.print(elem), (i < len - 1 || this.shouldPrintTrailingComma("]")) && this.token(",", false, i)) : this.token(",", false, i);
        }
        exit(), this.tokenChar(93);
      }, exports2.BigIntLiteral = function(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== undefined)
          return void this.word(raw);
        this.word(node.value + "n");
      }, exports2.BooleanLiteral = function(node) {
        this.word(node.value ? "true" : "false");
      }, exports2.DecimalLiteral = function(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== undefined)
          return void this.word(raw);
        this.word(node.value + "m");
      }, exports2.Identifier = function(node) {
        var _node$loc;
        this.sourceIdentifierName(((_node$loc = node.loc) == null ? undefined : _node$loc.identifierName) || node.name), this.word(this.tokenMap ? this._getRawIdentifier(node) : node.name);
      }, exports2.NullLiteral = function() {
        this.word("null");
      }, exports2.NumericLiteral = function(node) {
        const raw = this.getPossibleRaw(node), opts = this.format.jsescOption, value2 = node.value, str = value2 + "";
        opts.numbers ? this.number(_jsesc(value2, opts), value2) : raw == null ? this.number(str, value2) : this.format.minified ? this.number(raw.length < str.length ? raw : str, value2) : this.number(raw, value2);
      }, exports2.ObjectPattern = exports2.ObjectExpression = function(node) {
        const props = node.properties;
        if (this.tokenChar(123), props.length) {
          const exit = this.enterDelimited();
          this.space(), this.printList(props, this.shouldPrintTrailingComma("}"), true, true), this.space(), exit();
        }
        this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
      }, exports2.ObjectMethod = function(node) {
        this.printJoin(node.decorators), this._methodHead(node), this.space(), this.print(node.body);
      }, exports2.ObjectProperty = function(node) {
        if (this.printJoin(node.decorators), node.computed)
          this.tokenChar(91), this.print(node.key), this.tokenChar(93);
        else {
          if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name)
            return void this.print(node.value);
          if (this.print(node.key), node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name)
            return;
        }
        this.tokenChar(58), this.space(), this.print(node.value);
      }, exports2.PipelineBareFunction = function(node) {
        this.print(node.callee);
      }, exports2.PipelinePrimaryTopicReference = function() {
        this.tokenChar(35);
      }, exports2.PipelineTopicExpression = function(node) {
        this.print(node.expression);
      }, exports2.RecordExpression = function(node) {
        const props = node.properties;
        let startToken, endToken;
        if (this.format.recordAndTupleSyntaxType === "bar")
          startToken = "{|", endToken = "|}";
        else {
          if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null)
            throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
          startToken = "#{", endToken = "}";
        }
        this.token(startToken), props.length && (this.space(), this.printList(props, this.shouldPrintTrailingComma(endToken), true, true), this.space());
        this.token(endToken);
      }, exports2.RegExpLiteral = function(node) {
        this.word(`/${node.pattern}/${node.flags}`);
      }, exports2.SpreadElement = exports2.RestElement = function(node) {
        this.token("..."), this.print(node.argument);
      }, exports2.StringLiteral = function(node) {
        const raw = this.getPossibleRaw(node);
        if (!this.format.minified && raw !== undefined)
          return void this.token(raw);
        const val = _jsesc(node.value, this.format.jsescOption);
        this.token(val);
      }, exports2.TopicReference = function() {
        const { topicToken } = this.format;
        if (!validTopicTokenSet.has(topicToken)) {
          const givenTopicTokenJSON = JSON.stringify(topicToken), validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
          throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
        }
        this.token(topicToken);
      }, exports2.TupleExpression = function(node) {
        const elems = node.elements, len = elems.length;
        let startToken, endToken;
        if (this.format.recordAndTupleSyntaxType === "bar")
          startToken = "[|", endToken = "|]";
        else {
          if (this.format.recordAndTupleSyntaxType !== "hash")
            throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
          startToken = "#[", endToken = "]";
        }
        this.token(startToken);
        for (let i = 0;i < elems.length; i++) {
          const elem = elems[i];
          elem && (i > 0 && this.space(), this.print(elem), (i < len - 1 || this.shouldPrintTrailingComma(endToken)) && this.token(",", false, i));
        }
        this.token(endToken);
      }, exports2._getRawIdentifier = function(node) {
        if (node === lastRawIdentNode)
          return lastRawIdentResult;
        lastRawIdentNode = node;
        const { name } = node, token = this.tokenMap.find(node, (tok) => tok.value === name);
        if (token)
          return lastRawIdentResult = this._originalCode.slice(token.start, token.end), lastRawIdentResult;
        return lastRawIdentResult = node.name;
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _jsesc = __webpack_require__2("./node_modules/.pnpm/jsesc@3.1.0/node_modules/jsesc/jsesc.js");
      const { isAssignmentPattern, isIdentifier } = _t;
      let lastRawIdentNode = null, lastRawIdentResult = "";
      const validTopicTokenSet = new Set(["^^", "@@", "^", "%", "#"]);
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/typescript.js": (__unused_webpack_module, exports2) => {
      function maybePrintTrailingCommaOrSemicolon(printer, node) {
        printer.tokenMap && node.start && node.end ? printer.tokenMap.endMatches(node, ",") ? printer.token(",") : printer.tokenMap.endMatches(node, ";") && printer.semicolon() : printer.semicolon();
      }
      function tsPrintUnionOrIntersectionType(printer, node, sep) {
        var _printer$tokenMap;
        let hasLeadingToken = 0;
        (_printer$tokenMap = printer.tokenMap) != null && _printer$tokenMap.startMatches(node, sep) && (hasLeadingToken = 1, printer.token(sep)), printer.printJoin(node.types, undefined, undefined, function(i) {
          this.space(), this.token(sep, null, i + hasLeadingToken), this.space();
        });
      }
      function tokenIfPlusMinus(self, tok) {
        tok !== true && self.token(tok);
      }
      function printBraced(printer, node, cb) {
        printer.token("{");
        const exit = printer.enterDelimited();
        cb(), exit(), printer.rightBrace(node);
      }
      function printModifiersList(printer, node, modifiers) {
        var _printer$tokenMap2;
        const modifiersSet = new Set;
        for (const modifier of modifiers)
          modifier && modifiersSet.add(modifier);
        (_printer$tokenMap2 = printer.tokenMap) == null || _printer$tokenMap2.find(node, (tok) => {
          if (modifiersSet.has(tok.value))
            return printer.token(tok.value), printer.space(), modifiersSet.delete(tok.value), modifiersSet.size === 0;
        });
        for (const modifier of modifiersSet)
          printer.word(modifier), printer.space();
      }
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TSAnyKeyword = function() {
        this.word("any");
      }, exports2.TSArrayType = function(node) {
        this.print(node.elementType, true), this.tokenChar(91), this.tokenChar(93);
      }, exports2.TSSatisfiesExpression = exports2.TSAsExpression = function(node) {
        const { type, expression, typeAnnotation } = node;
        this.print(expression, true), this.space(), this.word(type === "TSAsExpression" ? "as" : "satisfies"), this.space(), this.print(typeAnnotation);
      }, exports2.TSBigIntKeyword = function() {
        this.word("bigint");
      }, exports2.TSBooleanKeyword = function() {
        this.word("boolean");
      }, exports2.TSCallSignatureDeclaration = function(node) {
        this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
      }, exports2.TSInterfaceHeritage = exports2.TSExpressionWithTypeArguments = exports2.TSClassImplements = function(node) {
        this.print(node.expression), this.print(node.typeParameters);
      }, exports2.TSConditionalType = function(node) {
        this.print(node.checkType), this.space(), this.word("extends"), this.space(), this.print(node.extendsType), this.space(), this.tokenChar(63), this.space(), this.print(node.trueType), this.space(), this.tokenChar(58), this.space(), this.print(node.falseType);
      }, exports2.TSConstructSignatureDeclaration = function(node) {
        this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
      }, exports2.TSConstructorType = function(node) {
        node.abstract && (this.word("abstract"), this.space());
        this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(node);
      }, exports2.TSDeclareFunction = function(node, parent) {
        node.declare && (this.word("declare"), this.space());
        this._functionHead(node, parent), this.semicolon();
      }, exports2.TSDeclareMethod = function(node) {
        this._classMethodHead(node), this.semicolon();
      }, exports2.TSEnumDeclaration = function(node) {
        const { declare, const: isConst, id, members } = node;
        declare && (this.word("declare"), this.space());
        isConst && (this.word("const"), this.space());
        this.word("enum"), this.space(), this.print(id), this.space(), printBraced(this, node, () => {
          var _this$shouldPrintTrai;
          return this.printList(members, (_this$shouldPrintTrai = this.shouldPrintTrailingComma("}")) == null || _this$shouldPrintTrai, true, true);
        });
      }, exports2.TSEnumMember = function(node) {
        const { id, initializer } = node;
        this.print(id), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer));
      }, exports2.TSExportAssignment = function(node) {
        this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(node.expression), this.semicolon();
      }, exports2.TSExternalModuleReference = function(node) {
        this.token("require("), this.print(node.expression), this.tokenChar(41);
      }, exports2.TSFunctionType = function(node) {
        this.tsPrintFunctionOrConstructorType(node);
      }, exports2.TSImportEqualsDeclaration = function(node) {
        const { isExport, id, moduleReference } = node;
        isExport && (this.word("export"), this.space());
        this.word("import"), this.space(), this.print(id), this.space(), this.tokenChar(61), this.space(), this.print(moduleReference), this.semicolon();
      }, exports2.TSImportType = function(node) {
        const { argument, qualifier, typeParameters } = node;
        this.word("import"), this.tokenChar(40), this.print(argument), this.tokenChar(41), qualifier && (this.tokenChar(46), this.print(qualifier));
        typeParameters && this.print(typeParameters);
      }, exports2.TSIndexSignature = function(node) {
        const { readonly, static: isStatic } = node;
        isStatic && (this.word("static"), this.space());
        readonly && (this.word("readonly"), this.space());
        this.tokenChar(91), this._parameters(node.parameters, "]"), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
      }, exports2.TSIndexedAccessType = function(node) {
        this.print(node.objectType, true), this.tokenChar(91), this.print(node.indexType), this.tokenChar(93);
      }, exports2.TSInferType = function(node) {
        this.word("infer"), this.print(node.typeParameter);
      }, exports2.TSInstantiationExpression = function(node) {
        this.print(node.expression), this.print(node.typeParameters);
      }, exports2.TSInterfaceBody = function(node) {
        printBraced(this, node, () => this.printJoin(node.body, true, true));
      }, exports2.TSInterfaceDeclaration = function(node) {
        const { declare, id, typeParameters, extends: extendz, body } = node;
        declare && (this.word("declare"), this.space());
        this.word("interface"), this.space(), this.print(id), this.print(typeParameters), extendz != null && extendz.length && (this.space(), this.word("extends"), this.space(), this.printList(extendz));
        this.space(), this.print(body);
      }, exports2.TSIntersectionType = function(node) {
        tsPrintUnionOrIntersectionType(this, node, "&");
      }, exports2.TSIntrinsicKeyword = function() {
        this.word("intrinsic");
      }, exports2.TSLiteralType = function(node) {
        this.print(node.literal);
      }, exports2.TSMappedType = function(node) {
        const { nameType, optional, readonly, typeAnnotation } = node;
        this.tokenChar(123);
        const exit = this.enterDelimited();
        this.space(), readonly && (tokenIfPlusMinus(this, readonly), this.word("readonly"), this.space());
        this.tokenChar(91), this.word(node.typeParameter.name), this.space(), this.word("in"), this.space(), this.print(node.typeParameter.constraint), nameType && (this.space(), this.word("as"), this.space(), this.print(nameType));
        this.tokenChar(93), optional && (tokenIfPlusMinus(this, optional), this.tokenChar(63));
        typeAnnotation && (this.tokenChar(58), this.space(), this.print(typeAnnotation));
        this.space(), exit(), this.tokenChar(125);
      }, exports2.TSMethodSignature = function(node) {
        const { kind } = node;
        kind !== "set" && kind !== "get" || (this.word(kind), this.space());
        this.tsPrintPropertyOrMethodName(node), this.tsPrintSignatureDeclarationBase(node), maybePrintTrailingCommaOrSemicolon(this, node);
      }, exports2.TSModuleBlock = function(node) {
        printBraced(this, node, () => this.printSequence(node.body, true));
      }, exports2.TSModuleDeclaration = function(node) {
        const { declare, id, kind } = node;
        declare && (this.word("declare"), this.space());
        {
          if (node.global || (this.word(kind != null ? kind : id.type === "Identifier" ? "namespace" : "module"), this.space()), this.print(id), !node.body)
            return void this.semicolon();
          let body = node.body;
          for (;body.type === "TSModuleDeclaration"; )
            this.tokenChar(46), this.print(body.id), body = body.body;
          this.space(), this.print(body);
        }
      }, exports2.TSNamedTupleMember = function(node) {
        this.print(node.label), node.optional && this.tokenChar(63);
        this.tokenChar(58), this.space(), this.print(node.elementType);
      }, exports2.TSNamespaceExportDeclaration = function(node) {
        this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(node.id), this.semicolon();
      }, exports2.TSNeverKeyword = function() {
        this.word("never");
      }, exports2.TSNonNullExpression = function(node) {
        this.print(node.expression), this.tokenChar(33);
      }, exports2.TSNullKeyword = function() {
        this.word("null");
      }, exports2.TSNumberKeyword = function() {
        this.word("number");
      }, exports2.TSObjectKeyword = function() {
        this.word("object");
      }, exports2.TSOptionalType = function(node) {
        this.print(node.typeAnnotation), this.tokenChar(63);
      }, exports2.TSParameterProperty = function(node) {
        node.accessibility && (this.word(node.accessibility), this.space());
        node.readonly && (this.word("readonly"), this.space());
        this._param(node.parameter);
      }, exports2.TSParenthesizedType = function(node) {
        this.tokenChar(40), this.print(node.typeAnnotation), this.tokenChar(41);
      }, exports2.TSPropertySignature = function(node) {
        const { readonly } = node;
        readonly && (this.word("readonly"), this.space());
        this.tsPrintPropertyOrMethodName(node), this.print(node.typeAnnotation), maybePrintTrailingCommaOrSemicolon(this, node);
      }, exports2.TSQualifiedName = function(node) {
        this.print(node.left), this.tokenChar(46), this.print(node.right);
      }, exports2.TSRestType = function(node) {
        this.token("..."), this.print(node.typeAnnotation);
      }, exports2.TSStringKeyword = function() {
        this.word("string");
      }, exports2.TSSymbolKeyword = function() {
        this.word("symbol");
      }, exports2.TSThisType = function() {
        this.word("this");
      }, exports2.TSTupleType = function(node) {
        this.tokenChar(91), this.printList(node.elementTypes, this.shouldPrintTrailingComma("]")), this.tokenChar(93);
      }, exports2.TSTypeAliasDeclaration = function(node) {
        const { declare, id, typeParameters, typeAnnotation } = node;
        declare && (this.word("declare"), this.space());
        this.word("type"), this.space(), this.print(id), this.print(typeParameters), this.space(), this.tokenChar(61), this.space(), this.print(typeAnnotation), this.semicolon();
      }, exports2.TSTypeAnnotation = function(node, parent) {
        this.token(parent.type !== "TSFunctionType" && parent.type !== "TSConstructorType" || parent.typeAnnotation !== node ? ":" : "=>"), this.space(), node.optional && this.tokenChar(63);
        this.print(node.typeAnnotation);
      }, exports2.TSTypeAssertion = function(node) {
        const { typeAnnotation, expression } = node;
        this.tokenChar(60), this.print(typeAnnotation), this.tokenChar(62), this.space(), this.print(expression);
      }, exports2.TSTypeLiteral = function(node) {
        printBraced(this, node, () => this.printJoin(node.members, true, true));
      }, exports2.TSTypeOperator = function(node) {
        this.word(node.operator), this.space(), this.print(node.typeAnnotation);
      }, exports2.TSTypeParameter = function(node) {
        node.in && (this.word("in"), this.space());
        node.out && (this.word("out"), this.space());
        this.word(node.name), node.constraint && (this.space(), this.word("extends"), this.space(), this.print(node.constraint));
        node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default));
      }, exports2.TSTypeParameterDeclaration = exports2.TSTypeParameterInstantiation = function(node, parent) {
        this.tokenChar(60);
        let printTrailingSeparator = parent.type === "ArrowFunctionExpression" && node.params.length === 1;
        this.tokenMap && node.start != null && node.end != null && (printTrailingSeparator && (printTrailingSeparator = !!this.tokenMap.find(node, (t) => this.tokenMap.matchesOriginal(t, ","))), printTrailingSeparator || (printTrailingSeparator = this.shouldPrintTrailingComma(">")));
        this.printList(node.params, printTrailingSeparator), this.tokenChar(62);
      }, exports2.TSTypePredicate = function(node) {
        node.asserts && (this.word("asserts"), this.space());
        this.print(node.parameterName), node.typeAnnotation && (this.space(), this.word("is"), this.space(), this.print(node.typeAnnotation.typeAnnotation));
      }, exports2.TSTypeQuery = function(node) {
        this.word("typeof"), this.space(), this.print(node.exprName), node.typeParameters && this.print(node.typeParameters);
      }, exports2.TSTypeReference = function(node) {
        this.print(node.typeName, !!node.typeParameters), this.print(node.typeParameters);
      }, exports2.TSUndefinedKeyword = function() {
        this.word("undefined");
      }, exports2.TSUnionType = function(node) {
        tsPrintUnionOrIntersectionType(this, node, "|");
      }, exports2.TSUnknownKeyword = function() {
        this.word("unknown");
      }, exports2.TSVoidKeyword = function() {
        this.word("void");
      }, exports2.tsPrintClassMemberModifiers = function(node) {
        const isField = node.type === "ClassAccessorProperty" || node.type === "ClassProperty";
        printModifiersList(this, node, [isField && node.declare && "declare", node.accessibility]), node.static && (this.word("static"), this.space());
        printModifiersList(this, node, [node.override && "override", node.abstract && "abstract", isField && node.readonly && "readonly"]);
      }, exports2.tsPrintFunctionOrConstructorType = function(node) {
        const { typeParameters } = node, parameters = node.parameters;
        this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")"), this.space();
        const returnType = node.typeAnnotation;
        this.print(returnType);
      }, exports2.tsPrintPropertyOrMethodName = function(node) {
        node.computed && this.tokenChar(91);
        this.print(node.key), node.computed && this.tokenChar(93);
        node.optional && this.tokenChar(63);
      }, exports2.tsPrintSignatureDeclarationBase = function(node) {
        const { typeParameters } = node, parameters = node.parameters;
        this.print(typeParameters), this.tokenChar(40), this._parameters(parameters, ")");
        const returnType = node.typeAnnotation;
        this.print(returnType);
      };
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(ast, opts = {}, code) {
        const format = normalizeOptions(code, opts, ast), map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
        return new _printer.default(format, map, ast.tokens, typeof code == "string" ? code : null).generate(ast);
      };
      var _sourceMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js");
      function normalizeOptions(code, opts, ast) {
        if (opts.experimental_preserveFormat) {
          if (typeof code != "string")
            throw new Error("`experimental_preserveFormat` requires the original `code` to be passed to @babel/generator as a string");
          if (!opts.retainLines)
            throw new Error("`experimental_preserveFormat` requires `retainLines` to be set to `true`");
          if (opts.compact && opts.compact !== "auto")
            throw new Error("`experimental_preserveFormat` is not compatible with the `compact` option");
          if (opts.minified)
            throw new Error("`experimental_preserveFormat` is not compatible with the `minified` option");
          if (opts.jsescOption)
            throw new Error("`experimental_preserveFormat` is not compatible with the `jsescOption` option");
          if (!Array.isArray(ast.tokens))
            throw new Error("`experimental_preserveFormat` requires the AST to have attatched the token of the input code. Make sure to enable the `tokens: true` parser option.");
        }
        const format = { auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, shouldPrintComment: opts.shouldPrintComment, preserveFormat: opts.experimental_preserveFormat, retainLines: opts.retainLines, retainFunctionParens: opts.retainFunctionParens, comments: opts.comments == null || opts.comments, compact: opts.compact, minified: opts.minified, concise: opts.concise, indent: { adjustMultilineComment: true, style: "  " }, jsescOption: Object.assign({ quotes: "double", wrap: true, minimal: false }, opts.jsescOption), topicToken: opts.topicToken, importAttributesKeyword: opts.importAttributesKeyword };
        var _opts$recordAndTupleS;
        format.decoratorsBeforeExport = opts.decoratorsBeforeExport, format.jsescOption.json = opts.jsonCompatibleStrings, format.recordAndTupleSyntaxType = (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) != null ? _opts$recordAndTupleS : "hash", format.minified ? (format.compact = true, format.shouldPrintComment = format.shouldPrintComment || (() => format.comments)) : format.shouldPrintComment = format.shouldPrintComment || ((value2) => format.comments || value2.includes("@license") || value2.includes("@preserve")), format.compact === "auto" && (format.compact = typeof code == "string" && code.length > 500000, format.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of 500KB.`)), (format.compact || format.preserveFormat) && (format.indent.adjustMultilineComment = false);
        const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format;
        return auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore) && (format.auxiliaryCommentBefore = undefined), auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter) && (format.auxiliaryCommentAfter = undefined), format;
      }
      exports2.CodeGenerator = class {
        constructor(ast, opts = {}, code) {
          this._ast = undefined, this._format = undefined, this._map = undefined, this._ast = ast, this._format = normalizeOptions(code, opts, ast), this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
        }
        generate() {
          return new _printer.default(this._format, this._map).generate(this._ast);
        }
      };
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TokenContext = undefined, exports2.isLastChild = function(parent, child) {
        const visitorKeys = VISITOR_KEYS[parent.type];
        for (let i = visitorKeys.length - 1;i >= 0; i--) {
          const val = parent[visitorKeys[i]];
          if (val === child)
            return true;
          if (Array.isArray(val)) {
            let j = val.length - 1;
            for (;j >= 0 && val[j] === null; )
              j--;
            return j >= 0 && val[j] === child;
          }
          if (val)
            return false;
        }
        return false;
      }, exports2.needsParens = function(node, parent, tokenContext, inForInit, getRawIdentifier) {
        var _expandedParens$get;
        if (!parent)
          return false;
        if (isNewExpression(parent) && parent.callee === node && isOrHasCallExpression(node))
          return true;
        if (isDecorator(parent))
          return !(isDecoratorMemberExpression(node) || isCallExpression(node) && isDecoratorMemberExpression(node.callee) || isParenthesizedExpression(node));
        return (_expandedParens$get = expandedParens.get(node.type)) == null ? undefined : _expandedParens$get(node, parent, tokenContext, inForInit, getRawIdentifier);
      }, exports2.needsWhitespace = needsWhitespace, exports2.needsWhitespaceAfter = function(node, parent) {
        return needsWhitespace(node, parent, 2);
      }, exports2.needsWhitespaceBefore = function(node, parent) {
        return needsWhitespace(node, parent, 1);
      };
      var whitespace = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js"), parens = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { FLIPPED_ALIAS_KEYS, VISITOR_KEYS, isCallExpression, isDecorator, isExpressionStatement, isMemberExpression, isNewExpression, isParenthesizedExpression } = _t;
      exports2.TokenContext = { expressionStatement: 1, arrowBody: 2, exportDefault: 4, forHead: 8, forInHead: 16, forOfHead: 32, arrowFlowReturnType: 64 };
      function expandAliases(obj) {
        const map = new Map;
        function add(type, func) {
          const fn = map.get(type);
          map.set(type, fn ? function(node, parent, stack, inForInit, getRawIdentifier) {
            var _fn;
            return (_fn = fn(node, parent, stack, inForInit, getRawIdentifier)) != null ? _fn : func(node, parent, stack, inForInit, getRawIdentifier);
          } : func);
        }
        for (const type of Object.keys(obj)) {
          const aliases = FLIPPED_ALIAS_KEYS[type];
          if (aliases)
            for (const alias of aliases)
              add(alias, obj[type]);
          else
            add(type, obj[type]);
        }
        return map;
      }
      const expandedParens = expandAliases(parens), expandedWhitespaceNodes = expandAliases(whitespace.nodes);
      function isOrHasCallExpression(node) {
        return !!isCallExpression(node) || isMemberExpression(node) && isOrHasCallExpression(node.object);
      }
      function needsWhitespace(node, parent, type) {
        var _expandedWhitespaceNo;
        if (!node)
          return false;
        isExpressionStatement(node) && (node = node.expression);
        const flag = (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) == null ? undefined : _expandedWhitespaceNo(node, parent);
        return typeof flag == "number" && !!(flag & type);
      }
      function isDecoratorMemberExpression(node) {
        switch (node.type) {
          case "Identifier":
            return true;
          case "MemberExpression":
            return !node.computed && node.property.type === "Identifier" && isDecoratorMemberExpression(node.object);
          default:
            return false;
        }
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/parentheses.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.AssignmentExpression = function(node, parent, tokenContext) {
        return !(!needsParenBeforeExpressionBrace(tokenContext) || !isObjectPattern(node.left)) || ConditionalExpression(node, parent);
      }, exports2.Binary = Binary, exports2.BinaryExpression = function(node, parent, tokenContext, inForStatementInit) {
        return node.operator === "in" && inForStatementInit;
      }, exports2.ClassExpression = function(node, parent, tokenContext) {
        return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
      }, exports2.ArrowFunctionExpression = exports2.ConditionalExpression = ConditionalExpression, exports2.DoExpression = function(node, parent, tokenContext) {
        return !node.async && Boolean(tokenContext & _index.TokenContext.expressionStatement);
      }, exports2.FunctionExpression = function(node, parent, tokenContext) {
        return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
      }, exports2.FunctionTypeAnnotation = function(node, parent, tokenContext) {
        const parentType = parent.type;
        return parentType === "UnionTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "ArrayTypeAnnotation" || Boolean(tokenContext & _index.TokenContext.arrowFlowReturnType);
      }, exports2.Identifier = function(node, parent, tokenContext, _inForInit, getRawIdentifier) {
        var _node$extra;
        const parentType = parent.type;
        if ((_node$extra = node.extra) != null && _node$extra.parenthesized && parentType === "AssignmentExpression" && parent.left === node) {
          const rightType = parent.right.type;
          if ((rightType === "FunctionExpression" || rightType === "ClassExpression") && parent.right.id == null)
            return true;
        }
        if (getRawIdentifier && getRawIdentifier(node) !== node.name)
          return false;
        if (node.name === "let") {
          return !!((isMemberExpression(parent, { object: node, computed: true }) || isOptionalMemberExpression(parent, { object: node, computed: true, optional: false })) && tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.forHead | _index.TokenContext.forInHead)) || Boolean(tokenContext & _index.TokenContext.forOfHead);
        }
        return node.name === "async" && isForOfStatement(parent, { left: node, await: false });
      }, exports2.LogicalExpression = function(node, parent) {
        const parentType = parent.type;
        if (isTSTypeExpression(parentType))
          return true;
        if (parentType !== "LogicalExpression")
          return false;
        switch (node.operator) {
          case "||":
            return parent.operator === "??" || parent.operator === "&&";
          case "&&":
            return parent.operator === "??";
          case "??":
            return parent.operator !== "??";
        }
      }, exports2.NullableTypeAnnotation = function(node, parent) {
        return isArrayTypeAnnotation(parent);
      }, exports2.ObjectExpression = function(node, parent, tokenContext) {
        return needsParenBeforeExpressionBrace(tokenContext);
      }, exports2.OptionalIndexedAccessType = function(node, parent) {
        return isIndexedAccessType(parent) && parent.objectType === node;
      }, exports2.OptionalCallExpression = exports2.OptionalMemberExpression = function(node, parent) {
        return isCallExpression(parent) && parent.callee === node || isMemberExpression(parent) && parent.object === node;
      }, exports2.SequenceExpression = function(node, parent) {
        const parentType = parent.type;
        if (parentType === "SequenceExpression" || parentType === "ParenthesizedExpression" || parentType === "MemberExpression" && parent.property === node || parentType === "OptionalMemberExpression" && parent.property === node || parentType === "TemplateLiteral")
          return false;
        if (parentType === "ClassDeclaration")
          return true;
        if (parentType === "ForOfStatement")
          return parent.right === node;
        if (parentType === "ExportDefaultDeclaration")
          return true;
        return !isStatement(parent);
      }, exports2.TSSatisfiesExpression = exports2.TSAsExpression = function(node, parent) {
        if ((parent.type === "AssignmentExpression" || parent.type === "AssignmentPattern") && parent.left === node)
          return true;
        if (parent.type === "BinaryExpression" && (parent.operator === "|" || parent.operator === "&") && node === parent.left)
          return true;
        return Binary(node, parent);
      }, exports2.TSInferType = function(node, parent) {
        const parentType = parent.type;
        return parentType === "TSArrayType" || parentType === "TSOptionalType";
      }, exports2.TSInstantiationExpression = function(node, parent) {
        const parentType = parent.type;
        return (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression" || parentType === "TSInstantiationExpression") && !!parent.typeParameters;
      }, exports2.UnaryLike = exports2.TSTypeAssertion = UnaryLike, exports2.TSIntersectionType = exports2.TSUnionType = function(node, parent) {
        const parentType = parent.type;
        return parentType === "TSArrayType" || parentType === "TSOptionalType" || parentType === "TSIntersectionType" || parentType === "TSRestType";
      }, exports2.IntersectionTypeAnnotation = exports2.UnionTypeAnnotation = function(node, parent) {
        const parentType = parent.type;
        return parentType === "ArrayTypeAnnotation" || parentType === "NullableTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "UnionTypeAnnotation";
      }, exports2.UpdateExpression = function(node, parent) {
        return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
      }, exports2.AwaitExpression = exports2.YieldExpression = function(node, parent) {
        const parentType = parent.type;
        return parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "UnaryExpression" || parentType === "SpreadElement" || hasPostfixPart(node, parent) || parentType === "AwaitExpression" && isYieldExpression(node) || parentType === "ConditionalExpression" && node === parent.test || isClassExtendsClause(node, parent) || isTSTypeExpression(parentType);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js");
      const { isArrayTypeAnnotation, isBinaryExpression, isCallExpression, isForOfStatement, isIndexedAccessType, isMemberExpression, isObjectPattern, isOptionalMemberExpression, isYieldExpression, isStatement } = _t, PRECEDENCE = new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
      function getBinaryPrecedence(node, nodeType) {
        return nodeType === "BinaryExpression" || nodeType === "LogicalExpression" ? PRECEDENCE.get(node.operator) : nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" ? PRECEDENCE.get("in") : undefined;
      }
      function isTSTypeExpression(nodeType) {
        return nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" || nodeType === "TSTypeAssertion";
      }
      const isClassExtendsClause = (node, parent) => {
        const parentType = parent.type;
        return (parentType === "ClassDeclaration" || parentType === "ClassExpression") && parent.superClass === node;
      }, hasPostfixPart = (node, parent) => {
        const parentType = parent.type;
        return (parentType === "MemberExpression" || parentType === "OptionalMemberExpression") && parent.object === node || (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression") && parent.callee === node || parentType === "TaggedTemplateExpression" && parent.tag === node || parentType === "TSNonNullExpression";
      };
      function needsParenBeforeExpressionBrace(tokenContext) {
        return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.arrowBody));
      }
      function Binary(node, parent) {
        const parentType = parent.type;
        if (node.type === "BinaryExpression" && node.operator === "**" && parentType === "BinaryExpression" && parent.operator === "**")
          return parent.left === node;
        if (isClassExtendsClause(node, parent))
          return true;
        if (hasPostfixPart(node, parent) || parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "AwaitExpression")
          return true;
        const parentPos = getBinaryPrecedence(parent, parentType);
        if (parentPos != null) {
          const nodePos = getBinaryPrecedence(node, node.type);
          if (parentPos === nodePos && parentType === "BinaryExpression" && parent.right === node || parentPos > nodePos)
            return true;
        }
      }
      function UnaryLike(node, parent) {
        return hasPostfixPart(node, parent) || isBinaryExpression(parent) && parent.operator === "**" && parent.left === node || isClassExtendsClause(node, parent);
      }
      function ConditionalExpression(node, parent) {
        const parentType = parent.type;
        return !!(parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "ConditionalExpression" && parent.test === node || parentType === "AwaitExpression" || isTSTypeExpression(parentType)) || UnaryLike(node, parent);
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/whitespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.nodes = undefined;
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { FLIPPED_ALIAS_KEYS, isArrayExpression, isAssignmentExpression, isBinary, isBlockStatement, isCallExpression, isFunction, isIdentifier, isLiteral, isMemberExpression, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression, isStringLiteral } = _t;
      function crawlInternal(node, state) {
        return node ? (isMemberExpression(node) || isOptionalMemberExpression(node) ? (crawlInternal(node.object, state), node.computed && crawlInternal(node.property, state)) : isBinary(node) || isAssignmentExpression(node) ? (crawlInternal(node.left, state), crawlInternal(node.right, state)) : isCallExpression(node) || isOptionalCallExpression(node) ? (state.hasCall = true, crawlInternal(node.callee, state)) : isFunction(node) ? state.hasFunction = true : isIdentifier(node) && (state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee)), state) : state;
      }
      function crawl(node) {
        return crawlInternal(node, { hasCall: false, hasFunction: false, hasHelper: false });
      }
      function isHelper(node) {
        return !!node && (isMemberExpression(node) ? isHelper(node.object) || isHelper(node.property) : isIdentifier(node) ? node.name === "require" || node.name.charCodeAt(0) === 95 : isCallExpression(node) ? isHelper(node.callee) : !(!isBinary(node) && !isAssignmentExpression(node)) && (isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right)));
      }
      function isType(node) {
        return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
      }
      const nodes = exports2.nodes = { AssignmentExpression(node) {
        const state = crawl(node.right);
        if (state.hasCall && state.hasHelper || state.hasFunction)
          return state.hasFunction ? 3 : 2;
      }, SwitchCase: (node, parent) => (node.consequent.length || parent.cases[0] === node ? 1 : 0) | (node.consequent.length || parent.cases[parent.cases.length - 1] !== node ? 0 : 2), LogicalExpression(node) {
        if (isFunction(node.left) || isFunction(node.right))
          return 2;
      }, Literal(node) {
        if (isStringLiteral(node) && node.value === "use strict")
          return 2;
      }, CallExpression(node) {
        if (isFunction(node.callee) || isHelper(node))
          return 3;
      }, OptionalCallExpression(node) {
        if (isFunction(node.callee))
          return 3;
      }, VariableDeclaration(node) {
        for (let i = 0;i < node.declarations.length; i++) {
          const declar = node.declarations[i];
          let enabled = isHelper(declar.id) && !isType(declar.init);
          if (!enabled && declar.init) {
            const state = crawl(declar.init);
            enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
          }
          if (enabled)
            return 3;
        }
      }, IfStatement(node) {
        if (isBlockStatement(node.consequent))
          return 3;
      } };
      nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
        if (parent.properties[0] === node)
          return 1;
      }, nodes.ObjectTypeCallProperty = function(node, parent) {
        var _parent$properties;
        if (parent.callProperties[0] === node && ((_parent$properties = parent.properties) == null || !_parent$properties.length))
          return 1;
      }, nodes.ObjectTypeIndexer = function(node, parent) {
        var _parent$properties2, _parent$callPropertie;
        if (!(parent.indexers[0] !== node || (_parent$properties2 = parent.properties) != null && _parent$properties2.length || (_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length))
          return 1;
      }, nodes.ObjectTypeInternalSlot = function(node, parent) {
        var _parent$properties3, _parent$callPropertie2, _parent$indexers;
        if (!(parent.internalSlots[0] !== node || (_parent$properties3 = parent.properties) != null && _parent$properties3.length || (_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length || (_parent$indexers = parent.indexers) != null && _parent$indexers.length))
          return 1;
      }, [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
        [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
          const ret = amounts ? 3 : 0;
          nodes[type2] = () => ret;
        });
      });
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _buffer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/buffer.js"), n = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/node/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _tokenMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js"), generatorFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/generators/index.js");
      const { isExpression, isFunction, isStatement, isClassBody, isTSInterfaceBody, isTSEnumDeclaration } = _t, SCIENTIFIC_NOTATION = /e/i, ZERO_DECIMAL_INTEGER = /\.0+$/, HAS_NEWLINE = /[\n\r\u2028\u2029]/, HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
      function commentIsNewline(c) {
        return c.type === "CommentLine" || HAS_NEWLINE.test(c.value);
      }
      const { needsParens } = n;

      class Printer {
        constructor(format, map, tokens, originalCode) {
          this.inForStatementInit = false, this.tokenContext = 0, this._tokens = null, this._originalCode = null, this._currentNode = null, this._indent = 0, this._indentRepeat = 0, this._insideAux = false, this._noLineTerminator = false, this._noLineTerminatorAfterNode = null, this._printAuxAfterOnNextUserNode = false, this._printedComments = new Set, this._endsWithInteger = false, this._endsWithWord = false, this._endsWithDiv = false, this._lastCommentLine = 0, this._endsWithInnerRaw = false, this._indentInnerComments = true, this.tokenMap = null, this._boundGetRawIdentifier = this._getRawIdentifier.bind(this), this._printSemicolonBeforeNextNode = -1, this._printSemicolonBeforeNextToken = -1, this.format = format, this._tokens = tokens, this._originalCode = originalCode, this._indentRepeat = format.indent.style.length, this._inputMap = map == null ? undefined : map._inputMap, this._buf = new _buffer.default(map, format.indent.style[0]);
        }
        enterForStatementInit() {
          return this.inForStatementInit ? () => {
          } : (this.inForStatementInit = true, () => {
            this.inForStatementInit = false;
          });
        }
        enterDelimited() {
          const oldInForStatementInit = this.inForStatementInit, oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode;
          return oldInForStatementInit === false && oldNoLineTerminatorAfterNode === null ? () => {
          } : (this.inForStatementInit = false, this._noLineTerminatorAfterNode = null, () => {
            this.inForStatementInit = oldInForStatementInit, this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode;
          });
        }
        generate(ast) {
          return this.format.preserveFormat && (this.tokenMap = new _tokenMap.TokenMap(ast, this._tokens, this._originalCode)), this.print(ast), this._maybeAddAuxComment(), this._buf.get();
        }
        indent() {
          const { format } = this;
          format.preserveFormat || format.compact || format.concise || this._indent++;
        }
        dedent() {
          const { format } = this;
          format.preserveFormat || format.compact || format.concise || this._indent--;
        }
        semicolon(force = false) {
          if (this._maybeAddAuxComment(), force)
            return this._appendChar(59), void (this._noLineTerminator = false);
          if (this.tokenMap) {
            const node = this._currentNode;
            if (node.start != null && node.end != null) {
              if (!this.tokenMap.endMatches(node, ";"))
                return void (this._printSemicolonBeforeNextNode = this._buf.getCurrentLine());
              const indexes = this.tokenMap.getIndexes(this._currentNode);
              this._catchUpTo(this._tokens[indexes[indexes.length - 1]].loc.start);
            }
          }
          this._queue(59), this._noLineTerminator = false;
        }
        rightBrace(node) {
          this.format.minified && this._buf.removeLastSemicolon(), this.sourceWithOffset("end", node.loc, -1), this.tokenChar(125);
        }
        rightParens(node) {
          this.sourceWithOffset("end", node.loc, -1), this.tokenChar(41);
        }
        space(force = false) {
          const { format } = this;
          if (!format.compact && !format.preserveFormat) {
            if (force)
              this._space();
            else if (this._buf.hasContent()) {
              const lastCp = this.getLastChar();
              lastCp !== 32 && lastCp !== 10 && this._space();
            }
          }
        }
        word(str, noLineTerminatorAfter = false) {
          this.tokenContext = 0, this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str), (this._endsWithWord || this._endsWithDiv && str.charCodeAt(0) === 47) && this._space(), this._append(str, false), this._endsWithWord = true, this._noLineTerminator = noLineTerminatorAfter;
        }
        number(str, number) {
          this.word(str), this._endsWithInteger = Number.isInteger(number) && !function(str2) {
            if (str2.length > 2 && str2.charCodeAt(0) === 48) {
              const secondChar = str2.charCodeAt(1);
              return secondChar === 98 || secondChar === 111 || secondChar === 120;
            }
            return false;
          }(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
        }
        token(str, maybeNewline = false, occurrenceCount = 0) {
          this.tokenContext = 0, this._maybePrintInnerComments(str, occurrenceCount), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str, occurrenceCount);
          const lastChar = this.getLastChar(), strFirst = str.charCodeAt(0);
          (lastChar === 33 && (str === "--" || strFirst === 61) || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) && this._space(), this._append(str, maybeNewline), this._noLineTerminator = false;
        }
        tokenChar(char) {
          this.tokenContext = 0;
          const str = String.fromCharCode(char);
          this._maybePrintInnerComments(str), this._maybeAddAuxComment(), this.tokenMap && this._catchUpToCurrentToken(str);
          const lastChar = this.getLastChar();
          (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) && this._space(), this._appendChar(char), this._noLineTerminator = false;
        }
        newline(i = 1, force) {
          if (!(i <= 0)) {
            if (!force) {
              if (this.format.retainLines || this.format.compact)
                return;
              if (this.format.concise)
                return void this.space();
            }
            i > 2 && (i = 2), i -= this._buf.getNewlineCount();
            for (let j = 0;j < i; j++)
              this._newline();
          }
        }
        endsWith(char) {
          return this.getLastChar() === char;
        }
        getLastChar() {
          return this._buf.getLastChar();
        }
        endsWithCharAndNewline() {
          return this._buf.endsWithCharAndNewline();
        }
        removeTrailingNewline() {
          this._buf.removeTrailingNewline();
        }
        exactSource(loc, cb) {
          loc ? (this._catchUp("start", loc), this._buf.exactSource(loc, cb)) : cb();
        }
        source(prop, loc) {
          loc && (this._catchUp(prop, loc), this._buf.source(prop, loc));
        }
        sourceWithOffset(prop, loc, columnOffset) {
          loc && !this.format.preserveFormat && (this._catchUp(prop, loc), this._buf.sourceWithOffset(prop, loc, columnOffset));
        }
        sourceIdentifierName(identifierName, pos) {
          if (!this._buf._canMarkIdName)
            return;
          const sourcePosition = this._buf._sourcePosition;
          sourcePosition.identifierNamePos = pos, sourcePosition.identifierName = identifierName;
        }
        _space() {
          this._queue(32);
        }
        _newline() {
          this._queue(10);
        }
        _catchUpToCurrentToken(str, occurrenceCount = 0) {
          const token = this.tokenMap.findMatching(this._currentNode, str, occurrenceCount);
          token && this._catchUpTo(token.loc.start), this._printSemicolonBeforeNextToken !== -1 && this._printSemicolonBeforeNextToken === this._buf.getCurrentLine() && (this._buf.appendChar(59), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false), this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1;
        }
        _append(str, maybeNewline) {
          this._maybeIndent(str.charCodeAt(0)), this._buf.append(str, maybeNewline), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false;
        }
        _appendChar(char) {
          this._maybeIndent(char), this._buf.appendChar(char), this._endsWithWord = false, this._endsWithInteger = false, this._endsWithDiv = false;
        }
        _queue(char) {
          this._maybeIndent(char), this._buf.queue(char), this._endsWithWord = false, this._endsWithInteger = false;
        }
        _maybeIndent(firstChar) {
          this._indent && firstChar !== 10 && this.endsWith(10) && this._buf.queueIndentation(this._getIndent());
        }
        _shouldIndent(firstChar) {
          if (this._indent && firstChar !== 10 && this.endsWith(10))
            return true;
        }
        catchUp(line) {
          if (!this.format.retainLines)
            return;
          const count = line - this._buf.getCurrentLine();
          for (let i = 0;i < count; i++)
            this._newline();
        }
        _catchUp(prop, loc) {
          const { format } = this;
          if (!format.preserveFormat)
            return void (format.retainLines && loc != null && loc[prop] && this.catchUp(loc[prop].line));
          const pos = loc == null ? undefined : loc[prop];
          pos != null && this._catchUpTo(pos);
        }
        _catchUpTo({ line, column, index }) {
          const count = line - this._buf.getCurrentLine();
          if (count > 0 && this._noLineTerminator)
            return;
          for (let i = 0;i < count; i++)
            this._newline();
          const spacesCount = count > 0 ? column : column - this._buf.getCurrentColumn();
          if (spacesCount > 0) {
            const spaces = this._originalCode ? this._originalCode.slice(index - spacesCount, index).replace(/[^\t\x0B\f \xA0\u1680\u2000-\u200A\u202F\u205F\u3000\uFEFF]/gu, " ") : " ".repeat(spacesCount);
            this._append(spaces, false);
          }
        }
        _getIndent() {
          return this._indentRepeat * this._indent;
        }
        printTerminatorless(node) {
          this._noLineTerminator = true, this.print(node);
        }
        print(node, noLineTerminatorAfter, trailingCommentsLineOffset) {
          var _node$extra, _node$leadingComments, _node$leadingComments2;
          if (!node)
            return;
          this._endsWithInnerRaw = false;
          const nodeType = node.type, format = this.format, oldConcise = format.concise;
          node._compact && (format.concise = true);
          const printMethod = this[nodeType];
          if (printMethod === undefined)
            throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
          const parent = this._currentNode;
          this._currentNode = node, this.tokenMap && (this._printSemicolonBeforeNextToken = this._printSemicolonBeforeNextNode);
          const oldInAux = this._insideAux;
          this._insideAux = node.loc == null, this._maybeAddAuxComment(this._insideAux && !oldInAux);
          const parenthesized = (_node$extra = node.extra) == null ? undefined : _node$extra.parenthesized;
          let shouldPrintParens = parenthesized && format.preserveFormat || parenthesized && format.retainFunctionParens && nodeType === "FunctionExpression" || needsParens(node, parent, this.tokenContext, this.inForStatementInit, format.preserveFormat ? this._boundGetRawIdentifier : undefined);
          if (!shouldPrintParens && parenthesized && (_node$leadingComments = node.leadingComments) != null && _node$leadingComments.length && node.leadingComments[0].type === "CommentBlock") {
            switch (parent == null ? undefined : parent.type) {
              case "ExpressionStatement":
              case "VariableDeclarator":
              case "AssignmentExpression":
              case "ReturnStatement":
                break;
              case "CallExpression":
              case "OptionalCallExpression":
              case "NewExpression":
                if (parent.callee !== node)
                  break;
              default:
                shouldPrintParens = true;
            }
          }
          let oldNoLineTerminatorAfterNode, oldInForStatementInitWasTrue, indentParenthesized = false;
          var _node$trailingComment;
          (!shouldPrintParens && this._noLineTerminator && ((_node$leadingComments2 = node.leadingComments) != null && _node$leadingComments2.some(commentIsNewline) || this.format.retainLines && node.loc && node.loc.start.line > this._buf.getCurrentLine()) && (shouldPrintParens = true, indentParenthesized = true), shouldPrintParens) || (noLineTerminatorAfter || (noLineTerminatorAfter = parent && this._noLineTerminatorAfterNode === parent && n.isLastChild(parent, node)), noLineTerminatorAfter && ((_node$trailingComment = node.trailingComments) != null && _node$trailingComment.some(commentIsNewline) ? isExpression(node) && (shouldPrintParens = true) : (oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = node)));
          shouldPrintParens && (this.tokenChar(40), indentParenthesized && this.indent(), this._endsWithInnerRaw = false, this.inForStatementInit && (oldInForStatementInitWasTrue = true, this.inForStatementInit = false), oldNoLineTerminatorAfterNode = this._noLineTerminatorAfterNode, this._noLineTerminatorAfterNode = null), this._lastCommentLine = 0, this._printLeadingComments(node, parent);
          const loc = nodeType === "Program" || nodeType === "File" ? null : node.loc;
          this.exactSource(loc, printMethod.bind(this, node, parent)), shouldPrintParens ? (this._printTrailingComments(node, parent), indentParenthesized && (this.dedent(), this.newline()), this.tokenChar(41), this._noLineTerminator = noLineTerminatorAfter, oldInForStatementInitWasTrue && (this.inForStatementInit = true)) : noLineTerminatorAfter && !this._noLineTerminator ? (this._noLineTerminator = true, this._printTrailingComments(node, parent)) : this._printTrailingComments(node, parent, trailingCommentsLineOffset), this._currentNode = parent, format.concise = oldConcise, this._insideAux = oldInAux, oldNoLineTerminatorAfterNode !== undefined && (this._noLineTerminatorAfterNode = oldNoLineTerminatorAfterNode), this._endsWithInnerRaw = false;
        }
        _maybeAddAuxComment(enteredPositionlessNode) {
          enteredPositionlessNode && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
        }
        _printAuxBeforeComment() {
          if (this._printAuxAfterOnNextUserNode)
            return;
          this._printAuxAfterOnNextUserNode = true;
          const comment = this.format.auxiliaryCommentBefore;
          comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
        }
        _printAuxAfterComment() {
          if (!this._printAuxAfterOnNextUserNode)
            return;
          this._printAuxAfterOnNextUserNode = false;
          const comment = this.format.auxiliaryCommentAfter;
          comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
        }
        getPossibleRaw(node) {
          const extra = node.extra;
          if ((extra == null ? undefined : extra.raw) != null && extra.rawValue != null && node.value === extra.rawValue)
            return extra.raw;
        }
        printJoin(nodes, statement, indent, separator, printTrailingSeparator, addNewlines, iterator, trailingCommentsLineOffset) {
          if (nodes == null || !nodes.length)
            return;
          if (indent == null && this.format.retainLines) {
            var _nodes$0$loc;
            const startLine = (_nodes$0$loc = nodes[0].loc) == null ? undefined : _nodes$0$loc.start.line;
            startLine != null && startLine !== this._buf.getCurrentLine() && (indent = true);
          }
          indent && this.indent();
          const newlineOpts = { addNewlines, nextNodeStartLine: 0 }, boundSeparator = separator == null ? undefined : separator.bind(this), len = nodes.length;
          for (let i = 0;i < len; i++) {
            const node = nodes[i];
            var _node$trailingComment2;
            if (node) {
              if (statement && this._printNewline(i === 0, newlineOpts), this.print(node, undefined, trailingCommentsLineOffset || 0), iterator == null || iterator(node, i), boundSeparator != null && (i < len - 1 ? boundSeparator(i, false) : printTrailingSeparator && boundSeparator(i, true)), statement)
                if ((_node$trailingComment2 = node.trailingComments) != null && _node$trailingComment2.length || (this._lastCommentLine = 0), i + 1 === len)
                  this.newline(1);
                else {
                  var _nextNode$loc;
                  const nextNode = nodes[i + 1];
                  newlineOpts.nextNodeStartLine = ((_nextNode$loc = nextNode.loc) == null ? undefined : _nextNode$loc.start.line) || 0, this._printNewline(true, newlineOpts);
                }
            }
          }
          indent && this.dedent();
        }
        printAndIndentOnComments(node) {
          const indent = node.leadingComments && node.leadingComments.length > 0;
          indent && this.indent(), this.print(node), indent && this.dedent();
        }
        printBlock(parent) {
          const node = parent.body;
          node.type !== "EmptyStatement" && this.space(), this.print(node);
        }
        _printTrailingComments(node, parent, lineOffset) {
          const { innerComments, trailingComments } = node;
          innerComments != null && innerComments.length && this._printComments(2, innerComments, node, parent, lineOffset), trailingComments != null && trailingComments.length && this._printComments(2, trailingComments, node, parent, lineOffset);
        }
        _printLeadingComments(node, parent) {
          const comments = node.leadingComments;
          comments != null && comments.length && this._printComments(0, comments, node, parent);
        }
        _maybePrintInnerComments(nextTokenStr, nextTokenOccurrenceCount) {
          var _this$tokenMap;
          this._endsWithInnerRaw && this.printInnerComments((_this$tokenMap = this.tokenMap) == null ? undefined : _this$tokenMap.findMatching(this._currentNode, nextTokenStr, nextTokenOccurrenceCount));
          this._endsWithInnerRaw = true, this._indentInnerComments = true;
        }
        printInnerComments(nextToken) {
          const node = this._currentNode, comments = node.innerComments;
          if (comments == null || !comments.length)
            return;
          const hasSpace = this.endsWith(32), indent = this._indentInnerComments, printedCommentsCount = this._printedComments.size;
          indent && this.indent(), this._printComments(1, comments, node, undefined, undefined, nextToken), hasSpace && printedCommentsCount !== this._printedComments.size && this.space(), indent && this.dedent();
        }
        noIndentInnerCommentsHere() {
          this._indentInnerComments = false;
        }
        printSequence(nodes, indent, trailingCommentsLineOffset, addNewlines) {
          this.printJoin(nodes, true, indent != null && indent, undefined, undefined, addNewlines, undefined, trailingCommentsLineOffset);
        }
        printList(items, printTrailingSeparator, statement, indent, separator, iterator) {
          this.printJoin(items, statement, indent, separator != null ? separator : commaSeparator, printTrailingSeparator, undefined, iterator);
        }
        shouldPrintTrailingComma(listEnd) {
          if (!this.tokenMap)
            return null;
          const listEndIndex = this.tokenMap.findLastIndex(this._currentNode, (token) => this.tokenMap.matchesOriginal(token, listEnd));
          return listEndIndex <= 0 ? null : this.tokenMap.matchesOriginal(this._tokens[listEndIndex - 1], ",");
        }
        _printNewline(newLine, opts) {
          const format = this.format;
          if (format.retainLines || format.compact)
            return;
          if (format.concise)
            return void this.space();
          if (!newLine)
            return;
          const startLine = opts.nextNodeStartLine, lastCommentLine = this._lastCommentLine;
          if (startLine > 0 && lastCommentLine > 0) {
            const offset = startLine - lastCommentLine;
            if (offset >= 0)
              return void this.newline(offset || 1);
          }
          this._buf.hasContent() && this.newline(1);
        }
        _shouldPrintComment(comment, nextToken) {
          if (comment.ignore)
            return 0;
          if (this._printedComments.has(comment))
            return 0;
          if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value))
            return 2;
          if (nextToken && this.tokenMap) {
            const commentTok = this.tokenMap.find(this._currentNode, (token) => token.value === comment.value);
            if (commentTok && commentTok.start > nextToken.start)
              return 2;
          }
          return this._printedComments.add(comment), this.format.shouldPrintComment(comment.value) ? 1 : 0;
        }
        _printComment(comment, skipNewLines) {
          const noLineTerminator = this._noLineTerminator, isBlockComment = comment.type === "CommentBlock", printNewLines = isBlockComment && skipNewLines !== 1 && !this._noLineTerminator;
          printNewLines && this._buf.hasContent() && skipNewLines !== 2 && this.newline(1);
          const lastCharCode = this.getLastChar();
          let val;
          if (lastCharCode !== 91 && lastCharCode !== 123 && lastCharCode !== 40 && this.space(), isBlockComment) {
            if (val = `/*${comment.value}*/`, this.format.indent.adjustMultilineComment) {
              var _comment$loc;
              const offset = (_comment$loc = comment.loc) == null ? undefined : _comment$loc.start.column;
              if (offset) {
                const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                val = val.replace(newlineRegex, `
`);
              }
              if (this.format.concise)
                val = val.replace(/\n(?!$)/g, `
`);
              else {
                let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
                (this._shouldIndent(47) || this.format.retainLines) && (indentSize += this._getIndent()), val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
              }
            }
          } else
            val = noLineTerminator ? `/*${comment.value}*/` : `//${comment.value}`;
          if (this._endsWithDiv && this._space(), this.tokenMap) {
            const { _printSemicolonBeforeNextToken, _printSemicolonBeforeNextNode } = this;
            this._printSemicolonBeforeNextToken = -1, this._printSemicolonBeforeNextNode = -1, this.source("start", comment.loc), this._append(val, isBlockComment), this._printSemicolonBeforeNextNode = _printSemicolonBeforeNextNode, this._printSemicolonBeforeNextToken = _printSemicolonBeforeNextToken;
          } else
            this.source("start", comment.loc), this._append(val, isBlockComment);
          isBlockComment || noLineTerminator || this.newline(1, true), printNewLines && skipNewLines !== 3 && this.newline(1);
        }
        _printComments(type, comments, node, parent, lineOffset = 0, nextToken) {
          const nodeLoc = node.loc, len = comments.length;
          let hasLoc = !!nodeLoc;
          const nodeStartLine = hasLoc ? nodeLoc.start.line : 0, nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
          let lastLine = 0, leadingCommentNewline = 0;
          const maybeNewline = this._noLineTerminator ? function() {
          } : this.newline.bind(this);
          for (let i = 0;i < len; i++) {
            const comment = comments[i], shouldPrint = this._shouldPrintComment(comment, nextToken);
            if (shouldPrint === 2) {
              hasLoc = false;
              break;
            }
            if (hasLoc && comment.loc && shouldPrint === 1) {
              const commentStartLine = comment.loc.start.line, commentEndLine = comment.loc.end.line;
              if (type === 0) {
                let offset = 0;
                i === 0 ? !this._buf.hasContent() || comment.type !== "CommentLine" && commentStartLine === commentEndLine || (offset = leadingCommentNewline = 1) : offset = commentStartLine - lastLine, lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline)), lastLine = nodeStartLine);
              } else if (type === 1) {
                const offset = commentStartLine - (i === 0 ? nodeStartLine : lastLine);
                lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.min(1, nodeEndLine - lastLine)), lastLine = nodeEndLine);
              } else {
                const offset = commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);
                lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1);
              }
            } else {
              if (hasLoc = false, shouldPrint !== 1)
                continue;
              if (len === 1) {
                const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value), shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
                type === 0 ? this._printComment(comment, shouldSkipNewline && node.type !== "ObjectExpression" || singleLine && isFunction(parent, { body: node }) ? 1 : 0) : shouldSkipNewline && type === 2 ? this._printComment(comment, 1) : this._printComment(comment, 0);
              } else
                type !== 1 || node.type === "ObjectExpression" && node.properties.length > 1 || node.type === "ClassBody" || node.type === "TSInterfaceBody" ? this._printComment(comment, 0) : this._printComment(comment, i === 0 ? 2 : i === len - 1 ? 3 : 0);
            }
          }
          type === 2 && hasLoc && lastLine && (this._lastCommentLine = lastLine);
        }
      }
      Object.assign(Printer.prototype, generatorFunctions), Printer.prototype.Noop = function() {
      };
      exports2.default = Printer;
      function commaSeparator(occurrenceCount, last) {
        this.token(",", false, occurrenceCount), last || this.space();
      }
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/source-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _genMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.8/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"), _traceMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.25/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");
      exports2.default = class {
        constructor(opts, code) {
          var _opts$sourceFileName;
          this._map = undefined, this._rawMappings = undefined, this._sourceFileName = undefined, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn = 0, this._inputMap = undefined;
          const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
          if (this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? undefined : _opts$sourceFileName.replace(/\\/g, "/"), this._rawMappings = undefined, opts.inputSourceMap) {
            this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
            const resolvedSources = this._inputMap.resolvedSources;
            if (resolvedSources.length)
              for (let i = 0;i < resolvedSources.length; i++) {
                var _this$_inputMap$sourc;
                (0, _genMapping.setSourceContent)(map, resolvedSources[i], (_this$_inputMap$sourc = this._inputMap.sourcesContent) == null ? undefined : _this$_inputMap$sourc[i]);
              }
          }
          if (typeof code != "string" || opts.inputSourceMap) {
            if (typeof code == "object")
              for (const sourceFileName of Object.keys(code))
                (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
          } else
            (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
        }
        get() {
          return (0, _genMapping.toEncodedMap)(this._map);
        }
        getDecoded() {
          return (0, _genMapping.toDecodedMap)(this._map);
        }
        getRawMappings() {
          return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
        }
        mark(generated, line, column, identifierName, identifierNamePos, filename) {
          var _originalMapping;
          let originalMapping;
          if (this._rawMappings = undefined, line != null)
            if (this._inputMap) {
              if (originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, { line, column }), !originalMapping.name && identifierNamePos) {
                const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
                originalIdentifierMapping.name && (identifierName = originalIdentifierMapping.name);
              }
            } else
              originalMapping = { source: (filename == null ? undefined : filename.replace(/\\/g, "/")) || this._sourceFileName, line, column };
          (0, _genMapping.maybeAddMapping)(this._map, { name: identifierName, generated, source: (_originalMapping = originalMapping) == null ? undefined : _originalMapping.source, original: originalMapping });
        }
      };
    }, "./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/token-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TokenMap = undefined;
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { traverseFast, VISITOR_KEYS } = _t;
      exports2.TokenMap = class {
        constructor(ast, tokens, source) {
          this._tokens = undefined, this._source = undefined, this._nodesToTokenIndexes = new Map, this._nodesOccurrencesCountCache = new Map, this._tokensCache = new Map, this._tokens = tokens, this._source = source, traverseFast(ast, (node) => {
            const indexes = this._getTokensIndexesOfNode(node);
            indexes.length > 0 && this._nodesToTokenIndexes.set(node, indexes);
          }), this._tokensCache = null;
        }
        has(node) {
          return this._nodesToTokenIndexes.has(node);
        }
        getIndexes(node) {
          return this._nodesToTokenIndexes.get(node);
        }
        find(node, condition) {
          const indexes = this._nodesToTokenIndexes.get(node);
          if (indexes)
            for (let k = 0;k < indexes.length; k++) {
              const index = indexes[k], tok = this._tokens[index];
              if (condition(tok, index))
                return tok;
            }
          return null;
        }
        findLastIndex(node, condition) {
          const indexes = this._nodesToTokenIndexes.get(node);
          if (indexes)
            for (let k = indexes.length - 1;k >= 0; k--) {
              const index = indexes[k];
              if (condition(this._tokens[index], index))
                return index;
            }
          return -1;
        }
        findMatching(node, test, occurrenceCount = 0) {
          const indexes = this._nodesToTokenIndexes.get(node);
          if (indexes) {
            let i = 0;
            const count = occurrenceCount;
            if (count > 1) {
              const cache = this._nodesOccurrencesCountCache.get(node);
              cache && cache.test === test && cache.count < count && (i = cache.i + 1, occurrenceCount -= cache.count + 1);
            }
            for (;i < indexes.length; i++) {
              const tok = this._tokens[indexes[i]];
              if (this.matchesOriginal(tok, test)) {
                if (occurrenceCount === 0)
                  return count > 0 && this._nodesOccurrencesCountCache.set(node, { test, count, i }), tok;
                occurrenceCount--;
              }
            }
          }
          return null;
        }
        matchesOriginal(token, test) {
          return token.end - token.start === test.length && (token.value != null ? token.value === test : this._source.startsWith(test, token.start));
        }
        startMatches(node, test) {
          const indexes = this._nodesToTokenIndexes.get(node);
          if (!indexes)
            return false;
          const tok = this._tokens[indexes[0]];
          return tok.start === node.start && this.matchesOriginal(tok, test);
        }
        endMatches(node, test) {
          const indexes = this._nodesToTokenIndexes.get(node);
          if (!indexes)
            return false;
          const tok = this._tokens[indexes[indexes.length - 1]];
          return tok.end === node.end && this.matchesOriginal(tok, test);
        }
        _getTokensIndexesOfNode(node) {
          if (node.start == null || node.end == null)
            return [];
          const { first, last } = this._findTokensOfNode(node, 0, this._tokens.length - 1);
          let low = first;
          const children = function* (node2) {
            if (node2.type === "TemplateLiteral") {
              yield node2.quasis[0];
              for (let i = 1;i < node2.quasis.length; i++)
                yield node2.expressions[i - 1], yield node2.quasis[i];
              return;
            }
            const keys = VISITOR_KEYS[node2.type];
            for (const key of keys) {
              const child = node2[key];
              child && (Array.isArray(child) ? yield* child : yield child);
            }
          }(node);
          node.type !== "ExportNamedDeclaration" && node.type !== "ExportDefaultDeclaration" || !node.declaration || node.declaration.type !== "ClassDeclaration" || children.next();
          const indexes = [];
          for (const child of children) {
            if (child == null)
              continue;
            if (child.start == null || child.end == null)
              continue;
            const childTok = this._findTokensOfNode(child, low, last), high = childTok.first;
            for (let k = low;k < high; k++)
              indexes.push(k);
            low = childTok.last + 1;
          }
          for (let k = low;k <= last; k++)
            indexes.push(k);
          return indexes;
        }
        _findTokensOfNode(node, low, high) {
          const cached = this._tokensCache.get(node);
          if (cached)
            return cached;
          const first = this._findFirstTokenOfNode(node.start, low, high), last = this._findLastTokenOfNode(node.end, first, high);
          return this._tokensCache.set(node, { first, last }), { first, last };
        }
        _findFirstTokenOfNode(start, low, high) {
          for (;low <= high; ) {
            const mid = high + low >> 1;
            if (start < this._tokens[mid].start)
              high = mid - 1;
            else {
              if (!(start > this._tokens[mid].start))
                return mid;
              low = mid + 1;
            }
          }
          return low;
        }
        _findLastTokenOfNode(end, low, high) {
          for (;low <= high; ) {
            const mid = high + low >> 1;
            if (end < this._tokens[mid].end)
              high = mid - 1;
            else {
              if (!(end > this._tokens[mid].end))
                return mid;
              low = mid + 1;
            }
          }
          return high;
        }
      };
    }, "./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pathOrNode) {
        const node = pathOrNode.node || pathOrNode;
        if (isPureAnnotated(node))
          return;
        addComment(node, "leading", PURE_ANNOTATION);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { addComment } = _t, PURE_ANNOTATION = "#__PURE__", isPureAnnotated = ({ leadingComments }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value));
    }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildDecoratedClass = function(ref, path4, elements, file) {
        const { node, scope } = path4, initializeId = scope.generateUidIdentifier("initialize"), isDeclaration = node.id && path4.isDeclaration(), isStrict = path4.isInStrictMode(), { superClass } = node;
        node.type = "ClassDeclaration", node.id || (node.id = _core.types.cloneNode(ref));
        let superId;
        superClass && (superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super"), node.superClass = superId);
        const classDecorators = takeDecorators(node), definitions = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && element.node.type !== "TSIndexSignature").map((path22) => function(file2, classRef, superRef, path32) {
          const isMethod = path32.isClassMethod();
          if (path32.isPrivate())
            throw path32.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
          if (path32.node.type === "ClassAccessorProperty")
            throw path32.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
          if (path32.node.type === "StaticBlock")
            throw path32.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
          const { node: node2, scope: scope2 } = path32;
          path32.isTSDeclareMethod() || new _helperReplaceSupers.default({ methodPath: path32, objectRef: classRef, superRef, file: file2, refToPreserve: classRef }).replace();
          const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node2) ? node2.kind : "field")), prop("decorators", takeDecorators(node2)), prop("static", node2.static && _core.types.booleanLiteral(true)), prop("key", getKey(node2))].filter(Boolean);
          if (isMethod) {
            path32.ensureFunctionName != null || (path32.ensureFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName), path32.ensureFunctionName(false), properties.push(prop("value", _core.types.toExpression(path32.node)));
          } else
            _core.types.isClassProperty(node2) && node2.value ? properties.push((key = "value", body = _core.template.statements.ast`return ${node2.value}`, _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body)))) : properties.push(prop("value", scope2.buildUndefinedNode()));
          var key, body;
          return path32.remove(), _core.types.objectExpression(properties);
        }(file, node.id, superId, path22))), wrapperCall = _core.template.expression.ast`
    ${function(file2) {
          return file2.addHelper("decorate");
        }(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
        isStrict || wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
        let replacement = wrapperCall, classPathDesc = "arguments.1.body.body.0";
        isDeclaration && (replacement = _core.template.statement.ast`let ${ref} = ${wrapperCall}`, classPathDesc = "declarations.0.init." + classPathDesc);
        return { instanceNodes: [_core.template.statement.ast`
        ${_core.types.cloneNode(initializeId)}(this)
      `], wrapClass: (path22) => (path22.replaceWith(replacement), path22.get(classPathDesc)) };
      }, exports2.hasDecorators = function(node) {
        return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
      }, exports2.hasOwnDecorators = hasOwnDecorators;
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js");
      function hasOwnDecorators(node) {
        var _node$decorators;
        return !((_node$decorators = node.decorators) == null || !_node$decorators.length);
      }
      function prop(key, value2) {
        return value2 ? _core.types.objectProperty(_core.types.identifier(key), value2) : null;
      }
      function takeDecorators(node) {
        let result;
        return node.decorators && node.decorators.length > 0 && (result = _core.types.arrayExpression(node.decorators.map((decorator) => decorator.expression))), node.decorators = undefined, result;
      }
      function getKey(node) {
        return node.computed ? node.key : _core.types.isIdentifier(node.key) ? _core.types.stringLiteral(node.key.name) : _core.types.stringLiteral(String(node.key.value));
      }
    }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function({ assertVersion, assumption }, { loose }, version, inherits) {
        var _assumption, _assumption2;
        assertVersion(version === "2023-11" || version === "2023-05" || version === "2023-01" ? "^7.21.0" : version === "2021-12" ? "^7.16.0" : "^7.19.0");
        const VISITED = new WeakSet, constantSuper = (_assumption = assumption("constantSuper")) != null ? _assumption : loose, ignoreFunctionLength = (_assumption2 = assumption("ignoreFunctionLength")) != null ? _assumption2 : loose, namedEvaluationVisitor = function(isAnonymous, visitor) {
          function handleComputedProperty(propertyPath, key, state) {
            switch (key.type) {
              case "StringLiteral":
                return _core.types.stringLiteral(key.value);
              case "NumericLiteral":
              case "BigIntLiteral": {
                const keyValue = key.value + "";
                return propertyPath.get("key").replaceWith(_core.types.stringLiteral(keyValue)), _core.types.stringLiteral(keyValue);
              }
              default: {
                const ref = propertyPath.scope.maybeGenerateMemoised(key);
                return propertyPath.get("key").replaceWith(_core.types.assignmentExpression("=", ref, createToPropertyKeyCall(state, key))), _core.types.cloneNode(ref);
              }
            }
          }
          return { VariableDeclarator(path4, state) {
            const id = path4.node.id;
            if (id.type === "Identifier") {
              const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path4.get("init"));
              if (isAnonymous(initializer)) {
                const name = id.name;
                visitor(initializer, state, name);
              }
            }
          }, AssignmentExpression(path4, state) {
            const id = path4.node.left;
            if (id.type === "Identifier") {
              const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path4.get("right"));
              if (isAnonymous(initializer))
                switch (path4.node.operator) {
                  case "=":
                  case "&&=":
                  case "||=":
                  case "??=":
                    visitor(initializer, state, id.name);
                }
            }
          }, AssignmentPattern(path4, state) {
            const id = path4.node.left;
            if (id.type === "Identifier") {
              const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path4.get("right"));
              if (isAnonymous(initializer)) {
                const name = id.name;
                visitor(initializer, state, name);
              }
            }
          }, ObjectExpression(path4, state) {
            for (const propertyPath of path4.get("properties")) {
              if (!propertyPath.isObjectProperty())
                continue;
              const { node } = propertyPath, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(propertyPath.get("value"));
              if (isAnonymous(initializer)) {
                if (node.computed) {
                  const ref = handleComputedProperty(propertyPath, id, state);
                  visitor(initializer, state, ref);
                } else if (!isProtoKey(id))
                  if (id.type === "Identifier")
                    visitor(initializer, state, id.name);
                  else {
                    const className = _core.types.stringLiteral(id.value + "");
                    visitor(initializer, state, className);
                  }
              }
            }
          }, ClassPrivateProperty(path4, state) {
            const { node } = path4, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path4.get("value"));
            if (isAnonymous(initializer)) {
              const className = _core.types.stringLiteral("#" + node.key.id.name);
              visitor(initializer, state, className);
            }
          }, ClassAccessorProperty(path4, state) {
            const { node } = path4, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path4.get("value"));
            if (isAnonymous(initializer))
              if (node.computed) {
                const ref = handleComputedProperty(path4, id, state);
                visitor(initializer, state, ref);
              } else if (id.type === "Identifier")
                visitor(initializer, state, id.name);
              else if (id.type === "PrivateName") {
                const className = _core.types.stringLiteral("#" + id.id.name);
                visitor(initializer, state, className);
              } else {
                const className = _core.types.stringLiteral(id.value + "");
                visitor(initializer, state, className);
              }
          }, ClassProperty(path4, state) {
            const { node } = path4, id = node.key, initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path4.get("value"));
            if (isAnonymous(initializer))
              if (node.computed) {
                const ref = handleComputedProperty(path4, id, state);
                visitor(initializer, state, ref);
              } else if (id.type === "Identifier")
                visitor(initializer, state, id.name);
              else {
                const className = _core.types.stringLiteral(id.value + "");
                visitor(initializer, state, className);
              }
          } };
        }(isDecoratedAnonymousClassExpression, visitClass);
        function visitClass(path4, state, className) {
          var _node$id;
          if (VISITED.has(path4))
            return;
          const { node } = path4;
          className != null || (className = (_node$id = node.id) == null ? undefined : _node$id.name);
          const newPath = function(path22, state2, constantSuper2, ignoreFunctionLength2, className2, propertyVisitor, version2) {
            var _path$node$id, _classDecorationsId;
            const body = path22.get("body.body"), classDecorators = path22.node.decorators;
            let hasElementDecorators = false, hasComputedKeysSideEffects = false, elemDecsUseFnContext = false;
            const generateClassPrivateUid = function(classPath) {
              let generator;
              return () => (generator || (generator = function(classPath2) {
                const currentPrivateId = [], privateNames = new Set;
                return classPath2.traverse({ PrivateName(path32) {
                  privateNames.add(path32.node.id.name);
                } }), () => {
                  let reifiedId;
                  do {
                    incrementId(currentPrivateId), reifiedId = String.fromCharCode(...currentPrivateId);
                  } while (privateNames.has(reifiedId));
                  return _core.types.privateName(_core.types.identifier(reifiedId));
                };
              }(classPath)), generator());
            }(path22), classAssignments = [], scopeParent = path22.scope.parent, memoiseExpression = (expression, hint, assignments) => {
              const localEvaluatedId = generateLetUidIdentifier(scopeParent, hint);
              return assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression)), _core.types.cloneNode(localEvaluatedId);
            };
            let protoInitLocal, staticInitLocal;
            const classIdName = (_path$node$id = path22.node.id) == null ? undefined : _path$node$id.name, setClassName = typeof className2 == "object" ? className2 : undefined, usesFunctionContextOrYieldAwait = (decorator) => {
              try {
                return _core.types.traverseFast(decorator, (node2) => {
                  if (_core.types.isThisExpression(node2) || _core.types.isSuper(node2) || _core.types.isYieldExpression(node2) || _core.types.isAwaitExpression(node2) || _core.types.isIdentifier(node2, { name: "arguments" }) || classIdName && _core.types.isIdentifier(node2, { name: classIdName }) || _core.types.isMetaProperty(node2) && node2.meta.name !== "import")
                    throw null;
                }), false;
              } catch (_unused2) {
                return true;
              }
            }, instancePrivateNames = [];
            for (const element of body) {
              if (!isClassDecoratableElementPath(element))
                continue;
              const elementNode = element.node;
              if (!elementNode.static && _core.types.isPrivateName(elementNode.key) && instancePrivateNames.push(elementNode.key.id.name), isDecorated(elementNode)) {
                switch (elementNode.type) {
                  case "ClassProperty":
                    propertyVisitor.ClassProperty(element, state2);
                    break;
                  case "ClassPrivateProperty":
                    propertyVisitor.ClassPrivateProperty(element, state2);
                    break;
                  case "ClassAccessorProperty":
                    if (propertyVisitor.ClassAccessorProperty(element, state2), version2 === "2023-11")
                      break;
                  default:
                    if (elementNode.static)
                      staticInitLocal != null || (staticInitLocal = generateLetUidIdentifier(scopeParent, "initStatic"));
                    else
                      protoInitLocal != null || (protoInitLocal = generateLetUidIdentifier(scopeParent, "initProto"));
                }
                hasElementDecorators = true, elemDecsUseFnContext || (elemDecsUseFnContext = elementNode.decorators.some(usesFunctionContextOrYieldAwait));
              } else if (elementNode.type === "ClassAccessorProperty") {
                propertyVisitor.ClassAccessorProperty(element, state2);
                const { key, value: value2, static: isStatic, computed } = elementNode, newId = generateClassPrivateUid(), newField = generateClassProperty(newId, value2, isStatic), keyPath = element.get("key"), [newPath2] = element.replaceWith(newField);
                let getterKey, setterKey;
                computed && !keyPath.isConstantExpression() ? (getterKey = (0, _misc.memoiseComputedKey)(createToPropertyKeyCall(state2, key), scopeParent, scopeParent.generateUid("computedKey")), setterKey = _core.types.cloneNode(getterKey.left)) : (getterKey = _core.types.cloneNode(key), setterKey = _core.types.cloneNode(key)), assignIdForAnonymousClass(path22, className2), addProxyAccessorsFor(path22.node.id, newPath2, getterKey, setterKey, newId, computed, isStatic, version2);
              }
              "computed" in element.node && element.node.computed && (hasComputedKeysSideEffects || (hasComputedKeysSideEffects = !scopeParent.isStatic(element.node.key)));
            }
            if (!classDecorators && !hasElementDecorators)
              return path22.node.id || typeof className2 != "string" || (path22.node.id = _core.types.identifier(className2)), void (setClassName && path22.node.body.body.unshift(createStaticBlockFromExpressions([createSetFunctionNameCall(state2, setClassName)])));
            const elementDecoratorInfo = [];
            let constructorPath;
            const decoratedPrivateMethods = new Set;
            let classInitLocal, classIdLocal, decoratorReceiverId = null;
            function handleDecorators(decorators) {
              let hasSideEffects = false, usesFnContext = false;
              const decoratorsThis = [];
              for (const decorator of decorators) {
                const { expression } = decorator;
                let object;
                if ((version2 === "2023-11" || version2 === "2023-05") && _core.types.isMemberExpression(expression))
                  if (_core.types.isSuper(expression.object))
                    object = _core.types.thisExpression();
                  else if (scopeParent.isStatic(expression.object))
                    object = _core.types.cloneNode(expression.object);
                  else {
                    decoratorReceiverId != null || (decoratorReceiverId = generateLetUidIdentifier(scopeParent, "obj")), object = _core.types.assignmentExpression("=", _core.types.cloneNode(decoratorReceiverId), expression.object), expression.object = _core.types.cloneNode(decoratorReceiverId);
                  }
                decoratorsThis.push(object), hasSideEffects || (hasSideEffects = !scopeParent.isStatic(expression)), usesFnContext || (usesFnContext = usesFunctionContextOrYieldAwait(decorator));
              }
              return { hasSideEffects, usesFnContext, decoratorsThis };
            }
            const willExtractSomeElemDecs = hasComputedKeysSideEffects || elemDecsUseFnContext || version2 !== "2023-11";
            let classDecorationsId, lastInstancePrivateName, needsDeclaraionForClassBinding = false, classDecorationsFlag = 0, classDecorations = [], computedKeyAssignments = [];
            if (classDecorators) {
              classInitLocal = generateLetUidIdentifier(scopeParent, "initClass"), needsDeclaraionForClassBinding = path22.isClassDeclaration(), { id: classIdLocal, path: path22 } = function(path32, className3) {
                const id = path32.node.id, scope = path32.scope;
                if (path32.type === "ClassDeclaration") {
                  const className4 = id.name, varId = scope.generateUidIdentifierBasedOnNode(id), classId = _core.types.identifier(className4);
                  return scope.rename(className4, varId.name), path32.get("id").replaceWith(classId), { id: _core.types.cloneNode(varId), path: path32 };
                }
                {
                  let varId;
                  id ? (className3 = id.name, varId = generateLetUidIdentifier(scope.parent, className3), scope.rename(className3, varId.name)) : varId = generateLetUidIdentifier(scope.parent, typeof className3 == "string" ? className3 : "decorated_class");
                  const newClassExpr = _core.types.classExpression(typeof className3 == "string" ? _core.types.identifier(className3) : null, path32.node.superClass, path32.node.body), [newPath2] = path32.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
                  return { id: _core.types.cloneNode(varId), path: newPath2.get("expressions.0") };
                }
              }(path22, className2), path22.node.decorators = null;
              const classDecsUsePrivateName = classDecorators.some(usesPrivateField), { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(classDecorators), { haveThis, decs } = generateDecorationList(classDecorators, decoratorsThis, version2);
              if (classDecorationsFlag = haveThis ? 1 : 0, classDecorations = decs, (usesFnContext || hasSideEffects && willExtractSomeElemDecs || classDecsUsePrivateName) && (classDecorationsId = memoiseExpression(_core.types.arrayExpression(classDecorations), "classDecs", classAssignments)), !hasElementDecorators)
                for (const element of path22.get("body.body")) {
                  const { node: node2 } = element;
                  if ("computed" in node2 && node2.computed)
                    if (element.isClassProperty({ static: true })) {
                      if (!element.get("key").isConstantExpression()) {
                        const key = node2.key, maybeAssignment = (0, _misc.memoiseComputedKey)(key, scopeParent, scopeParent.generateUid("computedKey"));
                        maybeAssignment != null && (node2.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment));
                      }
                    } else
                      computedKeyAssignments.length > 0 && (prependExpressionsToComputedKey(computedKeyAssignments, element), computedKeyAssignments = []);
                }
            } else
              assignIdForAnonymousClass(path22, className2), classIdLocal = _core.types.cloneNode(path22.node.id);
            let needsInstancePrivateBrandCheck = false, fieldInitializerExpressions = [], staticFieldInitializerExpressions = [];
            if (hasElementDecorators) {
              if (protoInitLocal) {
                const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
                fieldInitializerExpressions.push(protoInitCall);
              }
              for (const element of body) {
                if (!isClassDecoratableElementPath(element)) {
                  staticFieldInitializerExpressions.length > 0 && element.isStaticBlock() && (prependExpressionsToStaticBlock(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []);
                  continue;
                }
                const { node: node2 } = element, decorators = node2.decorators, hasDecorators = !(decorators == null || !decorators.length), isComputed = "computed" in node2 && node2.computed;
                let decoratorsArray, decoratorsHaveThis, name = "computedKey";
                if (node2.key.type === "PrivateName" ? name = node2.key.id.name : isComputed || node2.key.type !== "Identifier" || (name = node2.key.name), hasDecorators) {
                  const { hasSideEffects, usesFnContext, decoratorsThis } = handleDecorators(decorators), { decs, haveThis } = generateDecorationList(decorators, decoratorsThis, version2);
                  decoratorsHaveThis = haveThis, decoratorsArray = decs.length === 1 ? decs[0] : _core.types.arrayExpression(decs), (usesFnContext || hasSideEffects && willExtractSomeElemDecs) && (decoratorsArray = memoiseExpression(decoratorsArray, name + "Decs", computedKeyAssignments));
                }
                if (isComputed && !element.get("key").isConstantExpression()) {
                  const key2 = node2.key, maybeAssignment = (0, _misc.memoiseComputedKey)(hasDecorators ? createToPropertyKeyCall(state2, key2) : key2, scopeParent, scopeParent.generateUid("computedKey"));
                  maybeAssignment != null && (classDecorators && element.isClassProperty({ static: true }) ? (node2.key = _core.types.cloneNode(maybeAssignment.left), computedKeyAssignments.push(maybeAssignment)) : node2.key = maybeAssignment);
                }
                const { key, static: isStatic } = node2, isPrivate = key.type === "PrivateName", kind = getElementKind(element);
                let locals;
                if (isPrivate && !isStatic && (hasDecorators && (needsInstancePrivateBrandCheck = true), !_core.types.isClassPrivateProperty(node2) && lastInstancePrivateName || (lastInstancePrivateName = key)), element.isClassMethod({ kind: "constructor" }) && (constructorPath = element), hasDecorators) {
                  let privateMethods, nameExpr;
                  if (nameExpr = isComputed ? getComputedKeyMemoiser(element.get("key")) : key.type === "PrivateName" ? _core.types.stringLiteral(key.id.name) : key.type === "Identifier" ? _core.types.stringLiteral(key.name) : _core.types.cloneNode(key), kind === ACCESSOR) {
                    const { value: value2 } = element.node, params = version2 === "2023-11" && isStatic ? [] : [_core.types.thisExpression()];
                    value2 && params.push(_core.types.cloneNode(value2));
                    const newId = generateClassPrivateUid(), newFieldInitId = generateLetUidIdentifier(scopeParent, `init_${name}`), newField = generateClassProperty(newId, _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params), isStatic), [newPath2] = element.replaceWith(newField);
                    if (isPrivate) {
                      privateMethods = extractProxyAccessorsFor(newId, version2);
                      const getId = generateLetUidIdentifier(scopeParent, `get_${name}`), setId = generateLetUidIdentifier(scopeParent, `set_${name}`);
                      addCallAccessorsFor(version2, newPath2, key, getId, setId, isStatic), locals = [newFieldInitId, getId, setId];
                    } else
                      assignIdForAnonymousClass(path22, className2), addProxyAccessorsFor(path22.node.id, newPath2, _core.types.cloneNode(key), _core.types.isAssignmentExpression(key) ? _core.types.cloneNode(key.left) : _core.types.cloneNode(key), newId, isComputed, isStatic, version2), locals = [newFieldInitId];
                  } else if (kind === FIELD) {
                    const initId = generateLetUidIdentifier(scopeParent, `init_${name}`), valuePath = element.get("value"), args = version2 === "2023-11" && isStatic ? [] : [_core.types.thisExpression()];
                    valuePath.node && args.push(valuePath.node), valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), args)), locals = [initId], isPrivate && (privateMethods = extractProxyAccessorsFor(key, version2));
                  } else if (isPrivate) {
                    const callId = generateLetUidIdentifier(scopeParent, `call_${name}`);
                    locals = [callId];
                    if (new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path22.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace(), privateMethods = [createFunctionExpressionFromPrivateMethod(element.node)], kind === GETTER || kind === SETTER)
                      movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(callId), isStatic);
                    else {
                      const node3 = element.node;
                      path22.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(callId), [], node3.static)), decoratedPrivateMethods.add(key.id.name), element.remove();
                    }
                  }
                  elementDecoratorInfo.push({ kind, decoratorsArray, decoratorsHaveThis, name: nameExpr, isStatic, privateMethods, locals }), element.node && (element.node.decorators = null);
                }
                if (isComputed && computedKeyAssignments.length > 0 && (classDecorators && element.isClassProperty({ static: true }) || (prependExpressionsToComputedKey(computedKeyAssignments, kind === ACCESSOR ? element.getNextSibling() : element), computedKeyAssignments = [])), fieldInitializerExpressions.length > 0 && !isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(fieldInitializerExpressions, element), fieldInitializerExpressions = []), staticFieldInitializerExpressions.length > 0 && isStatic && (kind === FIELD || kind === ACCESSOR) && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), hasDecorators && version2 === "2023-11" && (kind === FIELD || kind === ACCESSOR)) {
                  const initExtraId = generateLetUidIdentifier(scopeParent, `init_extra_${name}`);
                  locals.push(initExtraId);
                  const initExtraCall = _core.types.callExpression(_core.types.cloneNode(initExtraId), isStatic ? [] : [_core.types.thisExpression()]);
                  isStatic ? staticFieldInitializerExpressions.push(initExtraCall) : fieldInitializerExpressions.push(initExtraCall);
                }
              }
            }
            if (computedKeyAssignments.length > 0) {
              const elements = path22.get("body.body");
              let lastComputedElement;
              for (let i = elements.length - 1;i >= 0; i--) {
                const path32 = elements[i], node2 = path32.node;
                if (node2.computed) {
                  if (classDecorators && _core.types.isClassProperty(node2, { static: true }))
                    continue;
                  lastComputedElement = path32;
                  break;
                }
              }
              lastComputedElement != null && (function(expressions, fieldPath) {
                const key = fieldPath.get("key"), completion = getComputedKeyLastElement(key);
                if (completion.isConstantExpression())
                  prependExpressionsToComputedKey(expressions, fieldPath);
                else {
                  const scopeParent2 = key.scope.parent, maybeAssignment = (0, _misc.memoiseComputedKey)(completion.node, scopeParent2, scopeParent2.generateUid("computedKey"));
                  if (maybeAssignment) {
                    const expressionSequence = [...expressions, _core.types.cloneNode(maybeAssignment.left)], completionParent = completion.parentPath;
                    completionParent.isSequenceExpression() ? completionParent.pushContainer("expressions", expressionSequence) : completion.replaceWith(maybeSequenceExpression([_core.types.cloneNode(maybeAssignment), ...expressionSequence]));
                  } else
                    prependExpressionsToComputedKey(expressions, fieldPath);
                }
              }(computedKeyAssignments, lastComputedElement), computedKeyAssignments = []);
            }
            if (fieldInitializerExpressions.length > 0) {
              const isDerivedClass = !!path22.node.superClass;
              constructorPath ? isDerivedClass ? function(expressions, constructorPath2, protoInitLocal2) {
                constructorPath2.traverse({ CallExpression: { exit(path32) {
                  if (!path32.get("callee").isSuper())
                    return;
                  const newNodes = [path32.node, ...expressions.map((expr) => _core.types.cloneNode(expr))];
                  path32.isCompletionRecord() && newNodes.push(_core.types.thisExpression()), path32.replaceWith(function(expressions2, protoInitLocal3) {
                    if (protoInitLocal3) {
                      if (expressions2.length >= 2 && isProtoInitCallExpression(expressions2[1], protoInitLocal3)) {
                        const mergedSuperCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal3), [expressions2[0]]);
                        expressions2.splice(0, 2, mergedSuperCall);
                      }
                      expressions2.length >= 2 && _core.types.isThisExpression(expressions2[expressions2.length - 1]) && isProtoInitCallExpression(expressions2[expressions2.length - 2], protoInitLocal3) && expressions2.splice(expressions2.length - 1, 1);
                    }
                    return maybeSequenceExpression(expressions2);
                  }(newNodes, protoInitLocal2)), path32.skip();
                } }, ClassMethod(path32) {
                  path32.node.kind === "constructor" && path32.skip();
                } });
              }(fieldInitializerExpressions, constructorPath, protoInitLocal) : function(expressions, constructorPath2) {
                constructorPath2.node.body.body.unshift(_core.types.expressionStatement(maybeSequenceExpression(expressions)));
              }(fieldInitializerExpressions, constructorPath) : path22.node.body.body.unshift(createConstructorFromExpressions(fieldInitializerExpressions, isDerivedClass)), fieldInitializerExpressions = [];
            }
            staticFieldInitializerExpressions.length > 0 && (path22.node.body.body.push(createStaticBlockFromExpressions(staticFieldInitializerExpressions)), staticFieldInitializerExpressions = []);
            const sortedElementDecoratorInfo = (info = elementDecoratorInfo, [...info.filter((el) => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter((el) => el.isStatic && el.kind === FIELD), ...info.filter((el) => !el.isStatic && el.kind === FIELD)]), elementDecorations = function(decorationInfo, version3) {
              return _core.types.arrayExpression(decorationInfo.map((el) => {
                let flag = el.kind;
                return el.isStatic && (flag += version3 === "2023-11" || version3 === "2023-05" ? STATIC : STATIC_OLD_VERSION), el.decoratorsHaveThis && (flag += DECORATORS_HAVE_THIS), _core.types.arrayExpression([el.decoratorsArray, _core.types.numericLiteral(flag), el.name, ...el.privateMethods || []]);
              }));
            }(version2 === "2023-11" ? elementDecoratorInfo : sortedElementDecoratorInfo, version2), elementLocals = function(decorationInfo) {
              const localIds = [];
              for (const el of decorationInfo) {
                const { locals } = el;
                Array.isArray(locals) ? localIds.push(...locals) : locals !== undefined && localIds.push(locals);
              }
              return localIds;
            }(sortedElementDecoratorInfo);
            var info;
            protoInitLocal && elementLocals.push(protoInitLocal);
            staticInitLocal && elementLocals.push(staticInitLocal);
            const classLocals = [];
            let classInitInjected = false;
            const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []);
            let originalClassPath = path22;
            const originalClass = path22.node, staticClosures = [];
            if (classDecorators) {
              classLocals.push(classIdLocal, classInitLocal);
              const statics = [];
              if (path22.get("body.body").forEach((element) => {
                if (element.isStaticBlock()) {
                  if (hasInstancePrivateAccess(element, instancePrivateNames)) {
                    const staticBlockClosureId = memoiseExpression((block = element.node, _core.types.functionExpression(null, [], _core.types.blockStatement(block.body))), "staticBlock", staticClosures);
                    staticFieldInitializerExpressions.push(_core.types.callExpression(_core.types.memberExpression(staticBlockClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
                  } else
                    staticFieldInitializerExpressions.push(function(block2) {
                      return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block2.body)), []);
                    }(element.node));
                  element.remove();
                } else {
                  var block;
                  if ((element.isClassProperty() || element.isClassPrivateProperty()) && element.node.static) {
                    const valuePath = element.get("value");
                    if (hasInstancePrivateAccess(valuePath, instancePrivateNames)) {
                      const fieldValueClosureId = memoiseExpression(function(value2) {
                        return _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(value2)]));
                      }(valuePath.node), "fieldValue", staticClosures);
                      valuePath.replaceWith(_core.types.callExpression(_core.types.memberExpression(fieldValueClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
                    }
                    staticFieldInitializerExpressions.length > 0 && (prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element), staticFieldInitializerExpressions = []), element.node.static = false, statics.push(element.node), element.remove();
                  } else if (element.isClassPrivateMethod({ static: true })) {
                    if (hasInstancePrivateAccess(element, instancePrivateNames)) {
                      new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path22.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace();
                      const privateMethodDelegateId = memoiseExpression(createFunctionExpressionFromPrivateMethod(element.node), element.get("key.id").node.name, staticClosures);
                      ignoreFunctionLength2 ? (element.node.params = [_core.types.restElement(_core.types.identifier("arg"))], element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arg")]))])) : (element.node.params = element.node.params.map((p, i) => _core.types.isRestElement(p) ? _core.types.restElement(_core.types.identifier("arg")) : _core.types.identifier("_" + i)), element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arguments")]))]));
                    }
                    element.node.static = false, statics.push(element.node), element.remove();
                  }
                }
              }), statics.length > 0 || staticFieldInitializerExpressions.length > 0) {
                const staticsClass = _core.template.expression.ast`
        class extends ${state2.addHelper("identity")} {}
      `;
                staticsClass.body.body = [_core.types.classProperty(_core.types.toExpression(originalClass), undefined, undefined, undefined, true, true), ...statics];
                const constructorBody = [], newExpr = _core.types.newExpression(staticsClass, []);
                staticFieldInitializerExpressions.length > 0 && constructorBody.push(...staticFieldInitializerExpressions), classInitCall && (classInitInjected = true, constructorBody.push(classInitCall)), constructorBody.length > 0 ? (constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)])), staticsClass.body.body.push(createConstructorFromExpressions(constructorBody, false))) : newExpr.arguments.push(_core.types.cloneNode(classIdLocal));
                const [newPath2] = path22.replaceWith(newExpr);
                originalClassPath = newPath2.get("callee").get("body").get("body.0.key");
              }
            }
            !classInitInjected && classInitCall && path22.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
            let { superClass } = originalClass;
            if (superClass && (version2 === "2023-11" || version2 === "2023-05")) {
              const id = path22.scope.maybeGenerateMemoised(superClass);
              id && (originalClass.superClass = _core.types.assignmentExpression("=", id, superClass), superClass = id);
            }
            const applyDecoratorWrapper = _core.types.staticBlock([]);
            originalClass.body.body.unshift(applyDecoratorWrapper);
            const applyDecsBody = applyDecoratorWrapper.body;
            if (computedKeyAssignments.length > 0) {
              const elements = originalClassPath.get("body.body");
              let firstPublicElement;
              for (const path32 of elements)
                if ((path32.isClassProperty() || path32.isClassMethod()) && path32.node.kind !== "constructor") {
                  firstPublicElement = path32;
                  break;
                }
              firstPublicElement != null ? (function(path32) {
                const { node: node2 } = path32;
                node2.computed = true, _core.types.isIdentifier(node2.key) && (node2.key = _core.types.stringLiteral(node2.key.name));
              }(firstPublicElement), prependExpressionsToComputedKey(computedKeyAssignments, firstPublicElement)) : (originalClass.body.body.unshift(_core.types.classProperty(_core.types.sequenceExpression([...computedKeyAssignments, _core.types.stringLiteral("_")]), undefined, undefined, undefined, true, true)), applyDecsBody.push(_core.types.expressionStatement(_core.types.unaryExpression("delete", _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier("_")))))), computedKeyAssignments = [];
            }
            applyDecsBody.push(_core.types.expressionStatement(function(elementLocals2, classLocals2, elementDecorations2, classDecorations2, classDecorationsFlag2, maybePrivateBrandName, setClassName2, superClass2, state3, version3) {
              let lhs, rhs;
              const args = [setClassName2 ? createSetFunctionNameCall(state3, setClassName2) : _core.types.thisExpression(), classDecorations2, elementDecorations2];
              version3 !== "2023-11" && args.splice(1, 2, elementDecorations2, classDecorations2);
              if (version3 === "2021-12" || version3 === "2022-03" && !state3.availableHelper("applyDecs2203R"))
                return lhs = _core.types.arrayPattern([...elementLocals2, ...classLocals2]), rhs = _core.types.callExpression(state3.addHelper(version3 === "2021-12" ? "applyDecs" : "applyDecs2203"), args), _core.types.assignmentExpression("=", lhs, rhs);
              version3 === "2022-03" ? rhs = _core.types.callExpression(state3.addHelper("applyDecs2203R"), args) : version3 === "2023-01" ? (maybePrivateBrandName && args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)), rhs = _core.types.callExpression(state3.addHelper("applyDecs2301"), args)) : version3 === "2023-05" && ((maybePrivateBrandName || superClass2 || classDecorationsFlag2.value !== 0) && args.push(classDecorationsFlag2), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass2 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass2 && args.push(superClass2), rhs = _core.types.callExpression(state3.addHelper("applyDecs2305"), args));
              version3 === "2023-11" && ((maybePrivateBrandName || superClass2 || classDecorationsFlag2.value !== 0) && args.push(classDecorationsFlag2), maybePrivateBrandName ? args.push(createPrivateBrandCheckClosure(maybePrivateBrandName)) : superClass2 && args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0))), superClass2 && args.push(superClass2), rhs = _core.types.callExpression(state3.addHelper("applyDecs2311"), args));
              elementLocals2.length > 0 ? classLocals2.length > 0 ? lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals2)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals2))]) : (lhs = _core.types.arrayPattern(elementLocals2), rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), false, false)) : (lhs = _core.types.arrayPattern(classLocals2), rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), false, false));
              return _core.types.assignmentExpression("=", lhs, rhs);
            }(elementLocals, classLocals, elementDecorations, (_classDecorationsId = classDecorationsId) != null ? _classDecorationsId : _core.types.arrayExpression(classDecorations), _core.types.numericLiteral(classDecorationsFlag), needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, setClassName, _core.types.cloneNode(superClass), state2, version2))), staticInitLocal && applyDecsBody.push(_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()])));
            staticClosures.length > 0 && applyDecsBody.push(...staticClosures.map((expr) => _core.types.expressionStatement(expr)));
            if (path22.insertBefore(classAssignments.map((expr) => _core.types.expressionStatement(expr))), needsDeclaraionForClassBinding) {
              if (scopeParent.getBinding(classIdLocal.name).constantViolations.length) {
                const classOuterBindingDelegateLocal = scopeParent.generateUidIdentifier("t" + classIdLocal.name), classOuterBindingLocal = classIdLocal;
                path22.replaceWithMultiple([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classOuterBindingLocal)), _core.types.variableDeclarator(classOuterBindingDelegateLocal)]), _core.types.blockStatement([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]), path22.node, _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingDelegateLocal), _core.types.cloneNode(classIdLocal)))]), _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingLocal), _core.types.cloneNode(classOuterBindingDelegateLocal)))]);
              } else
                path22.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]));
            }
            decoratedPrivateMethods.size > 0 && function(path32, decoratedPrivateMethods2) {
              const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path42, state3) {
                if (!state3.privateNamesMap.has(path42.node.id.name))
                  return;
                const parentPath = path42.parentPath, parentParentPath = parentPath.parentPath;
                if (parentParentPath.node.type === "AssignmentExpression" && parentParentPath.node.left === parentPath.node || parentParentPath.node.type === "UpdateExpression" || parentParentPath.node.type === "RestElement" || parentParentPath.node.type === "ArrayPattern" || parentParentPath.node.type === "ObjectProperty" && parentParentPath.node.value === parentPath.node && parentParentPath.parentPath.type === "ObjectPattern" || parentParentPath.node.type === "ForOfStatement" && parentParentPath.node.left === parentPath.node)
                  throw path42.buildCodeFrameError(`Decorated private methods are read-only, but "#${path42.node.id.name}" is updated via this expression.`);
              } }), privateNamesMap = new Map;
              for (const name of decoratedPrivateMethods2)
                privateNamesMap.set(name, null);
              path32.traverse(privateNameVisitor, { privateNamesMap });
            }(path22, decoratedPrivateMethods);
            return path22.scope.crawl(), path22;
          }(path4, state, constantSuper, ignoreFunctionLength, className, namedEvaluationVisitor, version);
          newPath ? VISITED.add(newPath) : VISITED.add(path4);
        }
        return { name: "proposal-decorators", inherits, visitor: Object.assign({ ExportDefaultDeclaration(path4, state) {
          const { declaration } = path4.node;
          if ((declaration == null ? undefined : declaration.type) === "ClassDeclaration" && isDecorated(declaration)) {
            const isAnonymous = !declaration.id;
            path4.splitExportDeclaration != null || (path4.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration);
            const updatedVarDeclarationPath = path4.splitExportDeclaration();
            isAnonymous && visitClass(updatedVarDeclarationPath, state, _core.types.stringLiteral("default"));
          }
        }, ExportNamedDeclaration(path4) {
          const { declaration } = path4.node;
          (declaration == null ? undefined : declaration.type) === "ClassDeclaration" && isDecorated(declaration) && (path4.splitExportDeclaration != null || (path4.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), path4.splitExportDeclaration());
        }, Class(path4, state) {
          visitClass(path4, state, undefined);
        } }, namedEvaluationVisitor) };
      };
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js");
      function incrementId(id, idx = id.length - 1) {
        if (idx === -1)
          return void id.unshift(65);
        const current = id[idx];
        current === 90 ? id[idx] = 97 : current === 122 ? (id[idx] = 65, incrementId(id, idx - 1)) : id[idx] = current + 1;
      }
      function generateClassProperty(key, value2, isStatic) {
        return key.type === "PrivateName" ? _core.types.classPrivateProperty(key, value2, undefined, isStatic) : _core.types.classProperty(key, value2, undefined, undefined, isStatic);
      }
      function assignIdForAnonymousClass(path4, className) {
        path4.node.id || (path4.node.id = typeof className == "string" ? _core.types.identifier(className) : path4.scope.generateUidIdentifier("Class"));
      }
      function addProxyAccessorsFor(className, element, getterKey, setterKey, targetKey, isComputed, isStatic, version) {
        const thisArg = version !== "2023-11" && version !== "2023-05" || !isStatic ? _core.types.thisExpression() : className, getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)))]), setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
        let getter, setter;
        getterKey.type === "PrivateName" ? (getter = _core.types.classPrivateMethod("get", getterKey, [], getterBody, isStatic), setter = _core.types.classPrivateMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isStatic)) : (getter = _core.types.classMethod("get", getterKey, [], getterBody, isComputed, isStatic), setter = _core.types.classMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isComputed, isStatic)), element.insertAfter(setter), element.insertAfter(getter);
      }
      function extractProxyAccessorsFor(targetKey, version) {
        return version !== "2023-11" && version !== "2023-05" && version !== "2023-01" ? [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `] : [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
      }
      function getComputedKeyLastElement(path4) {
        if ((path4 = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path4)).isSequenceExpression()) {
          const expressions = path4.get("expressions");
          return getComputedKeyLastElement(expressions[expressions.length - 1]);
        }
        return path4;
      }
      function getComputedKeyMemoiser(path4) {
        const element = getComputedKeyLastElement(path4);
        if (element.isConstantExpression())
          return _core.types.cloneNode(path4.node);
        if (element.isIdentifier() && path4.scope.hasUid(element.node.name))
          return _core.types.cloneNode(path4.node);
        if (element.isAssignmentExpression() && element.get("left").isIdentifier())
          return _core.types.cloneNode(element.node.left);
        throw new Error(`Internal Error: the computed key ${path4.toString()} has not yet been memoised.`);
      }
      function prependExpressionsToComputedKey(expressions, fieldPath) {
        const key = fieldPath.get("key");
        key.isSequenceExpression() ? expressions.push(...key.node.expressions) : expressions.push(key.node), key.replaceWith(maybeSequenceExpression(expressions));
      }
      function prependExpressionsToFieldInitializer(expressions, fieldPath) {
        const initializer = fieldPath.get("value");
        initializer.node ? expressions.push(initializer.node) : expressions.length > 0 && (expressions[expressions.length - 1] = _core.types.unaryExpression("void", expressions[expressions.length - 1])), initializer.replaceWith(maybeSequenceExpression(expressions));
      }
      function prependExpressionsToStaticBlock(expressions, blockPath) {
        blockPath.unshiftContainer("body", _core.types.expressionStatement(maybeSequenceExpression(expressions)));
      }
      function isProtoInitCallExpression(expression, protoInitCall) {
        return _core.types.isCallExpression(expression) && _core.types.isIdentifier(expression.callee, { name: protoInitCall.name });
      }
      function createConstructorFromExpressions(expressions, isDerivedClass) {
        const body = [_core.types.expressionStatement(maybeSequenceExpression(expressions))];
        return isDerivedClass && body.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))]))), _core.types.classMethod("constructor", _core.types.identifier("constructor"), isDerivedClass ? [_core.types.restElement(_core.types.identifier("args"))] : [], _core.types.blockStatement(body));
      }
      function createStaticBlockFromExpressions(expressions) {
        return _core.types.staticBlock([_core.types.expressionStatement(maybeSequenceExpression(expressions))]);
      }
      const FIELD = 0, ACCESSOR = 1, METHOD = 2, GETTER = 3, SETTER = 4, STATIC_OLD_VERSION = 5, STATIC = 8, DECORATORS_HAVE_THIS = 16;
      function getElementKind(element) {
        switch (element.node.type) {
          case "ClassProperty":
          case "ClassPrivateProperty":
            return FIELD;
          case "ClassAccessorProperty":
            return ACCESSOR;
          case "ClassMethod":
          case "ClassPrivateMethod":
            return element.node.kind === "get" ? GETTER : element.node.kind === "set" ? SETTER : METHOD;
        }
      }
      function generateDecorationList(decorators, decoratorsThis, version) {
        const decsCount = decorators.length, haveOneThis = decoratorsThis.some(Boolean), decs = [];
        for (let i = 0;i < decsCount; i++)
          version !== "2023-11" && version !== "2023-05" || !haveOneThis || decs.push(decoratorsThis[i] || _core.types.unaryExpression("void", _core.types.numericLiteral(0))), decs.push(decorators[i].expression);
        return { haveThis: haveOneThis, decs };
      }
      function addCallAccessorsFor(version, element, key, getId, setId, isStatic) {
        element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), version === "2023-11" && isStatic ? [] : [_core.types.thisExpression()]))]), isStatic)), element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), version === "2023-11" && isStatic ? [_core.types.identifier("v")] : [_core.types.thisExpression(), _core.types.identifier("v")]))]), isStatic));
      }
      function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
        let params, block;
        element.node.kind === "set" ? (params = [_core.types.identifier("v")], block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))]) : (params = [], block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))]), element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
      }
      function isClassDecoratableElementPath(path4) {
        const { type } = path4;
        return type !== "TSDeclareMethod" && type !== "TSIndexSignature" && type !== "StaticBlock";
      }
      function maybeSequenceExpression(exprs) {
        return exprs.length === 0 ? _core.types.unaryExpression("void", _core.types.numericLiteral(0)) : exprs.length === 1 ? exprs[0] : _core.types.sequenceExpression(exprs);
      }
      function createFunctionExpressionFromPrivateMethod(node) {
        const { params, body, generator: isGenerator, async: isAsync } = node;
        return _core.types.functionExpression(undefined, params, body, isGenerator, isAsync);
      }
      function createSetFunctionNameCall(state, className) {
        return _core.types.callExpression(state.addHelper("setFunctionName"), [_core.types.thisExpression(), className]);
      }
      function createToPropertyKeyCall(state, propertyKey) {
        return _core.types.callExpression(state.addHelper("toPropertyKey"), [propertyKey]);
      }
      function createPrivateBrandCheckClosure(brandName) {
        return _core.types.arrowFunctionExpression([_core.types.identifier("_")], _core.types.binaryExpression("in", _core.types.cloneNode(brandName), _core.types.identifier("_")));
      }
      function usesPrivateField(expression) {
        try {
          return _core.types.traverseFast(expression, (node) => {
            if (_core.types.isPrivateName(node))
              throw null;
          }), false;
        } catch (_unused) {
          return true;
        }
      }
      function hasInstancePrivateAccess(path4, privateNames) {
        let containsInstancePrivateAccess = false;
        if (privateNames.length > 0) {
          const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({ PrivateName(path22, state) {
            state.privateNamesMap.has(path22.node.id.name) && (containsInstancePrivateAccess = true, path22.stop());
          } }), privateNamesMap = new Map;
          for (const name of privateNames)
            privateNamesMap.set(name, null);
          path4.traverse(privateNameVisitor, { privateNamesMap });
        }
        return containsInstancePrivateAccess;
      }
      function isProtoKey(node) {
        return node.type === "Identifier" ? node.name === "__proto__" : node.value === "__proto__";
      }
      function isDecorated(node) {
        return node.decorators && node.decorators.length > 0;
      }
      function shouldTransformElement(node) {
        switch (node.type) {
          case "ClassAccessorProperty":
            return true;
          case "ClassMethod":
          case "ClassProperty":
          case "ClassPrivateMethod":
          case "ClassPrivateProperty":
            return isDecorated(node);
          default:
            return false;
        }
      }
      function isDecoratedAnonymousClassExpression(path4) {
        return path4.isClassExpression({ id: null }) && (isDecorated(node = path4.node) || node.body.body.some(shouldTransformElement));
        var node;
      }
      function generateLetUidIdentifier(scope, name) {
        const id = scope.generateUidIdentifier(name);
        return scope.push({ id, kind: "let" }), _core.types.cloneNode(id);
      }
    }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.FEATURES = undefined, exports2.enableFeature = function(file, feature, loose) {
        hasFeature(file, feature) && !canIgnoreLoose(file, feature) || (file.set(featuresKey, file.get(featuresKey) | feature), loose === "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" ? (setLoose(file, feature, true), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : loose === "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" ? (setLoose(file, feature, false), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : setLoose(file, feature, loose));
        let resolvedLoose;
        for (const [mask, name] of featuresSameLoose) {
          if (!hasFeature(file, mask))
            continue;
          if (canIgnoreLoose(file, mask))
            continue;
          const loose2 = isLoose(file, mask);
          if (resolvedLoose === !loose2)
            throw new Error(`'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled).

` + getBabelShowConfigForHint(file));
          resolvedLoose = loose2;
          var higherPriorityPluginName = name;
        }
        if (resolvedLoose !== undefined)
          for (const [mask, name] of featuresSameLoose)
            hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose && (setLoose(file, mask, resolvedLoose), console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.
The "loose" option must be the same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods and @babel/plugin-transform-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
\t["${name}", { "loose": ${resolvedLoose} }]
to the "plugins" section of your Babel config.

` + getBabelShowConfigForHint(file)));
      }, exports2.isLoose = isLoose, exports2.shouldTransform = function(path4, file) {
        let decoratorPath = null, publicFieldPath = null, privateFieldPath = null, privateMethodPath = null, staticBlockPath = null;
        (0, _decorators.hasOwnDecorators)(path4.node) && (decoratorPath = path4.get("decorators.0"));
        for (const el of path4.get("body.body"))
          !decoratorPath && (0, _decorators.hasOwnDecorators)(el.node) && (decoratorPath = el.get("decorators.0")), !publicFieldPath && el.isClassProperty() && (publicFieldPath = el), !privateFieldPath && el.isClassPrivateProperty() && (privateFieldPath = el), !privateMethodPath && el.isClassPrivateMethod != null && el.isClassPrivateMethod() && (privateMethodPath = el), !staticBlockPath && el.isStaticBlock != null && el.isStaticBlock() && (staticBlockPath = el);
        if (decoratorPath && privateFieldPath)
          throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
        if (decoratorPath && privateMethodPath)
          throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
        if (decoratorPath && !hasFeature(file, FEATURES.decorators))
          throw path4.buildCodeFrameError(`Decorators are not enabled.
If you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-transform-class-properties" and enable loose mode, like so:
\t["@babel/plugin-proposal-decorators", { "version": "legacy" }]
\t["@babel/plugin-transform-class-properties", { "loose": true }]`);
        if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods))
          throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-transform-private-methods` to your configuration.");
        if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods))
          throw path4.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-transform-class-properties` to your configuration.");
        if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks))
          throw path4.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-transform-class-static-block` to your configuration.");
        if (decoratorPath || privateMethodPath || staticBlockPath)
          return true;
        if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields))
          return true;
        return false;
      };
      var _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js");
      const FEATURES = exports2.FEATURES = Object.freeze({ fields: 2, privateMethods: 4, decorators: 8, privateIn: 16, staticBlocks: 32 }), featuresSameLoose = new Map([[FEATURES.fields, "@babel/plugin-transform-class-properties"], [FEATURES.privateMethods, "@babel/plugin-transform-private-methods"], [FEATURES.privateIn, "@babel/plugin-transform-private-property-in-object"]]), featuresKey = "@babel/plugin-class-features/featuresKey", looseKey = "@babel/plugin-class-features/looseKey";
      var looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing", canIgnoreLoose = function(file, feature) {
        return !!(file.get(looseLowPriorityKey) & feature);
      };
      function getBabelShowConfigForHint(file) {
        let { filename } = file.opts;
        return filename && filename !== "unknown" || (filename = "[name of the input file]"), `If you already set the same 'loose' mode for these plugins in your config, it's possible that they are enabled multiple times with different options.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded configuration:
\tnpx cross-env BABEL_SHOW_CONFIG_FOR=${filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
      }
      function hasFeature(file, feature) {
        return !!(file.get(featuresKey) & feature);
      }
      function isLoose(file, feature) {
        return !!(file.get(looseKey) & feature);
      }
      function setLoose(file, feature, loose) {
        loose ? file.set(looseKey, file.get(looseKey) | feature) : file.set(looseKey, file.get(looseKey) & ~feature), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
      }
    }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildCheckInRHS = buildCheckInRHS, exports2.buildFieldsInitNodes = function(ref, superRef, props, privateNamesMap, file, setPublicClassFields, privateFieldsAsSymbolsOrProperties, noUninitializedPrivateFieldAccess, constantSuper, innerBindingRef) {
        var _ref;
        let injectSuperRef, classRefFlags = 0;
        const staticNodes = [], instanceNodes = [];
        let lastInstanceNodeReturnsThis = false;
        const pureStaticNodes = [];
        let classBindingNode = null;
        const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => (injectSuperRef != null || (injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef)), injectSuperRef), classRefForInnerBinding = (_ref = ref) != null ? _ref : props[0].scope.generateUidIdentifier((innerBindingRef == null ? undefined : innerBindingRef.name) || "Class");
        ref != null || (ref = _core.types.cloneNode(innerBindingRef));
        for (const prop of props) {
          prop.isClassProperty() && ts.assertFieldTransformed(prop);
          const isStatic = !(_core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node)) && prop.node.static, isInstance = !isStatic, isPrivate = prop.isPrivate(), isPublic = !isPrivate, isField = prop.isProperty(), isMethod = !isField, isStaticBlock = prop.isStaticBlock == null ? undefined : prop.isStaticBlock();
          if (isStatic && (classRefFlags |= 1), isStatic || isMethod && isPrivate || isStaticBlock) {
            new _helperReplaceSupers.default({ methodPath: prop, constantSuper, file, refToPreserve: innerBindingRef, getSuperRef, getObjectRef: () => (classRefFlags |= 2, isStatic || isStaticBlock ? classRefForInnerBinding : _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier("prototype"))) }).replace();
            replaceThisContext(prop, classRefForInnerBinding, innerBindingRef) && (classRefFlags |= 2);
          }
          switch (lastInstanceNodeReturnsThis = false, true) {
            case isStaticBlock: {
              const blockBody = prop.node.body;
              blockBody.length === 1 && _core.types.isExpressionStatement(blockBody[0]) ? staticNodes.push(inheritPropComments(blockBody[0], prop)) : staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
              break;
            }
            case (isStatic && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
              staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
              break;
            case (isStatic && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
              newHelpers(file) ? staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess)) : staticNodes.push(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
              break;
            case (isStatic && isPublic && isField && setPublicClassFields):
              if (!isNameOrLength(prop.node)) {
                staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
                break;
              }
            case (isStatic && isPublic && isField && !setPublicClassFields):
              staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file));
              break;
            case (isInstance && isPrivate && isField && privateFieldsAsSymbolsOrProperties):
              instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
              break;
            case (isInstance && isPrivate && isField && !privateFieldsAsSymbolsOrProperties):
              instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));
              break;
            case (isInstance && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
              instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
              break;
            case (isInstance && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
              instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
              break;
            case (isStatic && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties):
              newHelpers(file) || staticNodes.unshift(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
              break;
            case (isStatic && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties):
              staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
              break;
            case (isInstance && isPublic && isField && setPublicClassFields):
              instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
              break;
            case (isInstance && isPublic && isField && !setPublicClassFields):
              lastInstanceNodeReturnsThis = true, instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file));
              break;
            default:
              throw new Error("Unreachable.");
          }
        }
        2 & classRefFlags && innerBindingRef != null && (classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef))));
        return { staticNodes: staticNodes.filter(Boolean), instanceNodes: instanceNodes.filter(Boolean), lastInstanceNodeReturnsThis, pureStaticNodes: pureStaticNodes.filter(Boolean), classBindingNode, wrapClass(path4) {
          for (const prop of props)
            prop.node.leadingComments = null, prop.remove();
          return injectSuperRef && (path4.scope.push({ id: _core.types.cloneNode(injectSuperRef) }), path4.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path4.node.superClass))), classRefFlags !== 0 && (path4.isClassExpression() ? (path4.scope.push({ id: ref }), path4.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path4.node))) : (innerBindingRef == null && (path4.node.id = ref), classBindingNode != null && path4.scope.push({ id: classRefForInnerBinding }))), path4;
        } };
      }, exports2.buildPrivateNamesMap = function(className, privateFieldsAsSymbolsOrProperties, props, file) {
        const privateNamesMap = new Map;
        let classBrandId;
        for (const prop of props)
          if (prop.isPrivate()) {
            const { name } = prop.node.key.id;
            let update = privateNamesMap.get(name);
            if (!update) {
              const isMethod = !prop.isProperty(), isStatic = prop.node.static;
              let id, initAdded = false;
              if (!privateFieldsAsSymbolsOrProperties && newHelpers(file) && isMethod && !isStatic)
                initAdded = !!classBrandId, classBrandId != null || (classBrandId = prop.scope.generateUidIdentifier(`${className}_brand`)), id = classBrandId;
              else
                id = prop.scope.generateUidIdentifier(name);
              update = { id, static: isStatic, method: isMethod, initAdded }, privateNamesMap.set(name, update);
            }
            if (prop.isClassPrivateMethod())
              if (prop.node.kind === "get") {
                const { body } = prop.node.body;
                let $;
                body.length === 1 && _core.types.isReturnStatement($ = body[0]) && _core.types.isCallExpression($ = $.argument) && $.arguments.length === 1 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($ = $.callee) ? (update.getId = _core.types.cloneNode($), update.getterDeclared = true) : update.getId = prop.scope.generateUidIdentifier(`get_${name}`);
              } else if (prop.node.kind === "set") {
                const { params } = prop.node, { body } = prop.node.body;
                let $;
                body.length === 1 && _core.types.isExpressionStatement($ = body[0]) && _core.types.isCallExpression($ = $.expression) && $.arguments.length === 2 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($.arguments[1], { name: params[0].name }) && _core.types.isIdentifier($ = $.callee) ? (update.setId = _core.types.cloneNode($), update.setterDeclared = true) : update.setId = prop.scope.generateUidIdentifier(`set_${name}`);
              } else
                prop.node.kind === "method" && (update.methodId = prop.scope.generateUidIdentifier(name));
            privateNamesMap.set(name, update);
          }
        return privateNamesMap;
      }, exports2.buildPrivateNamesNodes = function(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {
        const initNodes = [], injectedIds = new Set;
        for (const [name, value2] of privateNamesMap) {
          const { static: isStatic, method: isMethod, getId, setId } = value2, isGetterOrSetter = getId || setId, id = _core.types.cloneNode(value2.id);
          let init;
          if (privateFieldsAsProperties)
            init = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]);
          else if (privateFieldsAsSymbols)
            init = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]);
          else if (!isStatic) {
            if (injectedIds.has(id.name))
              continue;
            injectedIds.add(id.name), init = _core.types.newExpression(_core.types.identifier(!isMethod || isGetterOrSetter && !newHelpers(state) ? "WeakMap" : "WeakSet"), []);
          }
          init && (privateFieldsAsSymbols || (0, _helperAnnotateAsPure.default)(init), initNodes.push(_core.template.statement.ast`var ${id} = ${init}`));
        }
        return initNodes;
      }, exports2.privateNameVisitorFactory = privateNameVisitorFactory, exports2.transformPrivateNamesUsage = function(ref, path4, privateNamesMap, { privateFieldsAsProperties, noUninitializedPrivateFieldAccess, noDocumentAll, innerBinding }, state) {
        if (!privateNamesMap.size)
          return;
        const body = path4.get("body"), handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
        (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({ privateNamesMap, classRef: ref, file: state }, handler, { noDocumentAll, noUninitializedPrivateFieldAccess, innerBinding })), body.traverse(privateInVisitor, { privateNamesMap, classRef: ref, file: state, privateFieldsAsProperties, innerBinding });
      };
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), ts = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js"), newHelpers = (file) => file.availableHelper("classPrivateFieldGet2");
      function privateNameVisitorFactory(visitor) {
        const nestedVisitor = _traverse.visitors.environmentVisitor(Object.assign({}, visitor)), privateNameVisitor2 = Object.assign({}, visitor, { Class(path4) {
          const { privateNamesMap } = this, body = path4.get("body.body"), visiblePrivateNames = new Map(privateNamesMap), redeclared = [];
          for (const prop of body) {
            if (!prop.isPrivate())
              continue;
            const { name } = prop.node.key.id;
            visiblePrivateNames.delete(name), redeclared.push(name);
          }
          redeclared.length && (path4.get("body").traverse(nestedVisitor, Object.assign({}, this, { redeclared })), path4.traverse(privateNameVisitor2, Object.assign({}, this, { privateNamesMap: visiblePrivateNames })), path4.skipKey("body"));
        } });
        return privateNameVisitor2;
      }
      const privateNameVisitor = privateNameVisitorFactory({ PrivateName(path4, { noDocumentAll }) {
        const { privateNamesMap, redeclared } = this, { node, parentPath } = path4;
        if (!parentPath.isMemberExpression({ property: node }) && !parentPath.isOptionalMemberExpression({ property: node }))
          return;
        const { name } = node.id;
        privateNamesMap.has(name) && (redeclared != null && redeclared.includes(name) || this.handle(parentPath, noDocumentAll));
      } });
      function unshadow(name, scope, innerBinding) {
        for (;(_scope = scope) != null && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding); ) {
          var _scope;
          scope.rename(name), scope = scope.parent;
        }
      }
      function buildCheckInRHS(rhs, file, inRHSIsObject) {
        return inRHSIsObject || file.availableHelper == null || !file.availableHelper("checkInRHS") ? rhs : _core.types.callExpression(file.addHelper("checkInRHS"), [rhs]);
      }
      const privateInVisitor = privateNameVisitorFactory({ BinaryExpression(path4, { file }) {
        const { operator, left, right } = path4.node;
        if (operator !== "in")
          return;
        if (!_core.types.isPrivateName(left))
          return;
        const { privateFieldsAsProperties, privateNamesMap, redeclared } = this, { name } = left.id;
        if (!privateNamesMap.has(name))
          return;
        if (redeclared != null && redeclared.includes(name))
          return;
        if (unshadow(this.classRef.name, path4.scope, this.innerBinding), privateFieldsAsProperties) {
          const { id: id2 } = privateNamesMap.get(name);
          return void path4.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id2)})
      `);
        }
        const { id, static: isStatic } = privateNamesMap.get(name);
        isStatic ? path4.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`) : path4.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);
      } });
      function readOnlyError(file, name) {
        return _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
      }
      function writeOnlyError(file, name) {
        return file.availableHelper("writeOnlyError") ? _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)]) : (console.warn("@babel/helpers is outdated, update it to silence this warning."), _core.types.buildUndefinedNode());
      }
      function buildStaticPrivateFieldAccess(expr, noUninitializedPrivateFieldAccess) {
        return noUninitializedPrivateFieldAccess ? expr : _core.types.memberExpression(expr, _core.types.identifier("_"));
      }
      function autoInherits(fn) {
        return function(member) {
          return _core.types.inherits(fn.apply(this, arguments), member.node);
        };
      }
      const privateNameHandlerSpec = { memoise(member, count) {
        const { scope } = member, { object } = member.node, memo = scope.maybeGenerateMemoised(object);
        memo && this.memoiser.set(object, memo, count);
      }, receiver(member) {
        const { object } = member.node;
        return this.memoiser.has(object) ? _core.types.cloneNode(this.memoiser.get(object)) : _core.types.cloneNode(object);
      }, get: autoInherits(function(member) {
        const { classRef, privateNamesMap, file, innerBinding, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, methodId, getId, setId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
        if (isStatic) {
          if (unshadow(classRef.name, member.scope, innerBinding), !newHelpers(file)) {
            const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
            return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]);
          }
          const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
          if (!isMethod)
            return buildStaticPrivateFieldAccess(skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]), noUninitializedPrivateFieldAccess);
          if (getId)
            return skipCheck ? _core.types.callExpression(cloneId(getId), [receiver]) : _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(classRef), receiver, cloneId(getId)]);
          if (setId) {
            const err = _core.types.buildUndefinedNode();
            return skipCheck ? err : _core.types.sequenceExpression([_core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), err]);
          }
          return skipCheck ? cloneId(id) : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]);
        }
        return isMethod ? isGetterOrSetter ? getId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(id), this.receiver(member), cloneId(getId)]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]) : _core.types.sequenceExpression([this.receiver(member), writeOnlyError(file, name)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(id), this.receiver(member), cloneId(methodId)]) : _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), cloneId(methodId)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldGet2"), [cloneId(id), this.receiver(member)]) : _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]);
      }), boundGet(member) {
        return this.memoise(member, 1), _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
      }, set: autoInherits(function(member, value2) {
        const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId, getId } = privateNamesMap.get(name), isGetterOrSetter = getId || setId, cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
        if (isStatic) {
          if (!newHelpers(file)) {
            const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
            return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id), value2]);
          }
          const receiver = this.receiver(member), skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
          if (isMethod && !setId) {
            const err = readOnlyError(file, name);
            return skipCheck ? _core.types.sequenceExpression([value2, err]) : _core.types.sequenceExpression([value2, _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), readOnlyError(file, name)]);
          }
          return setId ? skipCheck ? _core.types.callExpression(_core.types.cloneNode(setId), [receiver, value2]) : _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(classRef), cloneId(setId), receiver, value2]) : _core.types.assignmentExpression("=", buildStaticPrivateFieldAccess(cloneId(id), noUninitializedPrivateFieldAccess), skipCheck ? value2 : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, value2]));
        }
        return isMethod ? setId ? newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(id), cloneId(setId), this.receiver(member), value2]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value2]) : _core.types.sequenceExpression([this.receiver(member), value2, readOnlyError(file, name)]) : newHelpers(file) ? _core.types.callExpression(file.addHelper("classPrivateFieldSet2"), [cloneId(id), this.receiver(member), value2]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value2]);
      }), destructureSet(member) {
        const { classRef, privateNamesMap, file, noUninitializedPrivateFieldAccess } = this, privateName = member.node.property, { name } = privateName.id, { id, static: isStatic, method: isMethod, setId } = privateNamesMap.get(name), cloneId = (id2) => _core.types.inherits(_core.types.cloneNode(id2), privateName);
        if (!newHelpers(file)) {
          if (isStatic) {
            try {
              var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
            } catch (_unused) {
              throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
            }
            return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]), _core.types.identifier("value"));
          }
          return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), cloneId(id)]), _core.types.identifier("value"));
        }
        if (isMethod && !setId)
          return _core.types.memberExpression(_core.types.sequenceExpression([member.node.object, readOnlyError(file, name)]), _core.types.identifier("_"));
        if (isStatic && !isMethod) {
          const getCall = this.get(member);
          if (!noUninitializedPrivateFieldAccess || !_core.types.isCallExpression(getCall))
            return getCall;
          const ref = getCall.arguments.pop();
          return getCall.arguments.push(_core.template.expression.ast`(_) => ${ref} = _`), _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), [getCall]), _core.types.identifier("_"));
        }
        const setCall = this.set(member, _core.types.identifier("_"));
        if (!_core.types.isCallExpression(setCall) || !_core.types.isIdentifier(setCall.arguments[setCall.arguments.length - 1], { name: "_" }))
          throw member.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. Please report it at https://github.com/babel/babel/issues.");
        let args;
        return args = _core.types.isMemberExpression(setCall.callee, { computed: false }) && _core.types.isIdentifier(setCall.callee.property) && setCall.callee.property.name === "call" ? [setCall.callee.object, _core.types.arrayExpression(setCall.arguments.slice(1, -1)), setCall.arguments[0]] : [setCall.callee, _core.types.arrayExpression(setCall.arguments.slice(0, -1))], _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), args), _core.types.identifier("_"));
      }, call(member, args) {
        return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
      }, optionalCall(member, args) {
        return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
      }, delete() {
        throw new Error("Internal Babel error: deleting private elements is a parsing error.");
      } }, privateNameHandlerLoose = { get(member) {
        const { privateNamesMap, file } = this, { object } = member.node, { name } = member.node.property.id;
        return _core.template.expression`BASE(REF, PROP)[PROP]`({ BASE: file.addHelper("classPrivateFieldLooseBase"), REF: _core.types.cloneNode(object), PROP: _core.types.cloneNode(privateNamesMap.get(name).id) });
      }, set() {
        throw new Error("private name handler with loose = true don't need set()");
      }, boundGet(member) {
        return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
      }, simpleSet(member) {
        return this.get(member);
      }, destructureSet(member) {
        return this.get(member);
      }, call(member, args) {
        return _core.types.callExpression(this.get(member), args);
      }, optionalCall(member, args) {
        return _core.types.optionalCallExpression(this.get(member), args, true);
      }, delete() {
        throw new Error("Internal Babel error: deleting private elements is a parsing error.");
      } };
      function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
        const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
        return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      });
    `, prop);
      }
      function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {
        const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
        if (!state.availableHelper("classPrivateFieldInitSpec"))
          return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value2},
        })`, prop);
        const helper = state.addHelper("classPrivateFieldInitSpec");
        return inheritLoc(inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(helper, [_core.types.thisExpression(), inheritLoc(_core.types.cloneNode(id), prop.node.key), newHelpers(state) ? value2 : _core.template.expression.ast`{ writable: true, value: ${value2} }`])), prop), prop.node);
      }
      function buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess) {
        const privateName = privateNamesMap.get(prop.node.key.id.name), value2 = noUninitializedPrivateFieldAccess ? prop.node.value : _core.template.expression.ast`{
        _: ${prop.node.value || _core.types.buildUndefinedNode()}
      }`;
        return inheritPropComments(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(_core.types.cloneNode(privateName.id), value2)]), prop);
      }
      var buildPrivateStaticFieldInitSpecOld = function(prop, privateNamesMap) {
        const privateName = privateNamesMap.get(prop.node.key.id.name), { id, getId, setId, initAdded } = privateName, isGetterOrSetter = getId || setId;
        if (!prop.isProperty() && (initAdded || !isGetterOrSetter))
          return;
        if (isGetterOrSetter)
          return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
          var ${_core.types.cloneNode(id)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          }
        `, prop);
        const value2 = prop.node.value || prop.scope.buildUndefinedNode();
        return inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${value2}
        };
      `, prop);
      };
      function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
        const privateName = privateNamesMap.get(prop.node.key.id.name), { methodId, id, getId, setId, initAdded } = privateName;
        if (initAdded)
          return;
        if (methodId)
          return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
        return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop)) : undefined;
      }
      function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {
        const privateName = privateNamesMap.get(prop.node.key.id.name);
        if (!privateName.initAdded) {
          if (!newHelpers(state)) {
            if (privateName.getId || privateName.setId)
              return function(ref2, prop2, privateNamesMap2, state2) {
                const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id, getId, setId } = privateName2;
                if (privateNamesMap2.set(prop2.node.key.id.name, Object.assign({}, privateName2, { initAdded: true })), !state2.availableHelper("classPrivateFieldInitSpec"))
                  return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref2}, {
            get: ${getId ? getId.name : prop2.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop2.scope.buildUndefinedNode()}
          });
        `, prop2);
                const helper = state2.addHelper("classPrivateFieldInitSpec");
                return inheritLoc(inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId ? getId.name : prop2.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop2.scope.buildUndefinedNode()}
      },
    )`, prop2), prop2.node);
              }(ref, prop, privateNamesMap, state);
          }
          return function(ref2, prop2, privateNamesMap2, state2) {
            const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id } = privateName2;
            if (!state2.availableHelper("classPrivateMethodInitSpec"))
              return inheritPropComments(_core.template.statement.ast`${id}.add(${ref2})`, prop2);
            const helper = state2.addHelper("classPrivateMethodInitSpec");
            return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop2);
          }(ref, prop, privateNamesMap, state);
        }
      }
      function buildPublicFieldInitLoose(ref, prop) {
        const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
        return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value2)), prop);
      }
      function buildPublicFieldInitSpec(ref, prop, state) {
        const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
        return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value2])), prop);
      }
      function buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {
        const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, initAdded } = privateName;
        if (initAdded)
          return;
        return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop)) : inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
      }
      function buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties = false) {
        const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, getterDeclared, setterDeclared, static: isStatic } = privateName, { params, body, generator, async } = prop.node, isGetter = getId && params.length === 0, isSetter = setId && params.length > 0;
        if (isGetter && getterDeclared || isSetter && setterDeclared)
          return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), null;
        if (newHelpers(file) && (isGetter || isSetter) && !privateFieldsAsSymbolsOrProperties) {
          const scope = prop.get("body").scope, thisArg = scope.generateUidIdentifier("this"), state = { thisRef: thisArg, argumentsPath: [] };
          if (prop.traverse(thisContextVisitor, state), state.argumentsPath.length) {
            const argumentsId = scope.generateUidIdentifier("arguments");
            scope.push({ id: argumentsId, init: _core.template.expression.ast`[].slice.call(arguments, 1)` });
            for (const path4 of state.argumentsPath)
              path4.replaceWith(_core.types.cloneNode(argumentsId));
          }
          params.unshift(_core.types.cloneNode(thisArg));
        }
        let declId = methodId;
        return isGetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { getterDeclared: true, initAdded: true })), declId = getId) : isSetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { setterDeclared: true, initAdded: true })), declId = setId) : isStatic && !privateFieldsAsSymbolsOrProperties && (declId = id), inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async), prop);
      }
      const thisContextVisitor = _traverse.visitors.environmentVisitor({ Identifier(path4, state) {
        state.argumentsPath && path4.node.name === "arguments" && state.argumentsPath.push(path4);
      }, UnaryExpression(path4) {
        const { node } = path4;
        if (node.operator === "delete") {
          const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node.argument);
          _core.types.isThisExpression(argument) && path4.replaceWith(_core.types.booleanLiteral(true));
        }
      }, ThisExpression(path4, state) {
        state.needsClassRef = true, path4.replaceWith(_core.types.cloneNode(state.thisRef));
      }, MetaProperty(path4) {
        const { node, scope } = path4;
        node.meta.name === "new" && node.property.name === "target" && path4.replaceWith(scope.buildUndefinedNode());
      } }), innerReferencesVisitor = { ReferencedIdentifier(path4, state) {
        path4.scope.bindingIdentifierEquals(path4.node.name, state.innerBinding) && (state.needsClassRef = true, path4.node.name = state.thisRef.name);
      } };
      function replaceThisContext(path4, ref, innerBindingRef) {
        var _state$thisRef;
        const state = { thisRef: ref, needsClassRef: false, innerBinding: innerBindingRef };
        return path4.isMethod() || path4.traverse(thisContextVisitor, state), innerBindingRef != null && (_state$thisRef = state.thisRef) != null && _state$thisRef.name && state.thisRef.name !== innerBindingRef.name && path4.traverse(innerReferencesVisitor, state), state.needsClassRef;
      }
      function isNameOrLength({ key, computed }) {
        return key.type === "Identifier" ? !computed && (key.name === "name" || key.name === "length") : key.type === "StringLiteral" && (key.value === "name" || key.value === "length");
      }
      function inheritPropComments(node, prop) {
        return _core.types.inheritLeadingComments(node, prop.node), _core.types.inheritInnerComments(node, prop.node), node;
      }
      function inheritLoc(node, original) {
        return node.start = original.start, node.end = original.end, node.loc = original.loc, node;
      }
    }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "FEATURES", { enumerable: true, get: function() {
        return _features.FEATURES;
      } }), Object.defineProperty(exports2, "buildCheckInRHS", { enumerable: true, get: function() {
        return _fields.buildCheckInRHS;
      } }), exports2.createClassFeaturePlugin = function({ name, feature, loose, manipulateOptions, api, inherits, decoratorVersion }) {
        var _api$assumption;
        if (feature & _features.FEATURES.decorators && (decoratorVersion === "2023-11" || decoratorVersion === "2023-05" || decoratorVersion === "2023-01" || decoratorVersion === "2022-03" || decoratorVersion === "2021-12"))
          return (0, _decorators.default)(api, { loose }, decoratorVersion, inherits);
        api != null || (api = { assumption: () => {
        } });
        const setPublicClassFields = api.assumption("setPublicClassFields"), privateFieldsAsSymbols = api.assumption("privateFieldsAsSymbols"), privateFieldsAsProperties = api.assumption("privateFieldsAsProperties"), noUninitializedPrivateFieldAccess = (_api$assumption = api.assumption("noUninitializedPrivateFieldAccess")) != null && _api$assumption, constantSuper = api.assumption("constantSuper"), noDocumentAll = api.assumption("noDocumentAll");
        if (privateFieldsAsProperties && privateFieldsAsSymbols)
          throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');
        const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
        if (loose === true) {
          const explicit = [];
          setPublicClassFields !== undefined && explicit.push('"setPublicClassFields"'), privateFieldsAsProperties !== undefined && explicit.push('"privateFieldsAsProperties"'), privateFieldsAsSymbols !== undefined && explicit.push('"privateFieldsAsSymbols"'), explicit.length !== 0 && console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:
\t"assumptions": {
\t\t"setPublicClassFields": true,
\t\t"privateFieldsAsSymbols": true
\t}`);
        }
        return { name, manipulateOptions, inherits, pre(file) {
          (0, _features.enableFeature)(file, feature, loose), typeof file.get(versionKey) != "number" && file.get(versionKey) && !_semver.lt(file.get(versionKey), "7.25.9") || file.set(versionKey, "7.25.9");
        }, visitor: { Class(path4, { file }) {
          var _ref;
          if (file.get(versionKey) !== "7.25.9")
            return;
          if (!(0, _features.shouldTransform)(path4, file))
            return;
          const pathIsClassDeclaration = path4.isClassDeclaration();
          pathIsClassDeclaration && (0, _typescript.assertFieldTransformed)(path4);
          const loose2 = (0, _features.isLoose)(file, feature);
          let constructor;
          const isDecorated = (0, _decorators2.hasDecorators)(path4.node), props = [], elements = [], computedPaths = [], privateNames = new Set, body = path4.get("body");
          for (const path22 of body.get("body")) {
            if ((path22.isClassProperty() || path22.isClassMethod()) && path22.node.computed && computedPaths.push(path22), path22.isPrivate()) {
              const { name: name2 } = path22.node.key.id, getName = `get ${name2}`, setName = `set ${name2}`;
              if (path22.isClassPrivateMethod()) {
                if (path22.node.kind === "get") {
                  if (privateNames.has(getName) || privateNames.has(name2) && !privateNames.has(setName))
                    throw path22.buildCodeFrameError("Duplicate private field");
                  privateNames.add(getName).add(name2);
                } else if (path22.node.kind === "set") {
                  if (privateNames.has(setName) || privateNames.has(name2) && !privateNames.has(getName))
                    throw path22.buildCodeFrameError("Duplicate private field");
                  privateNames.add(setName).add(name2);
                }
              } else {
                if (privateNames.has(name2) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name2) && (privateNames.has(getName) || privateNames.has(setName)))
                  throw path22.buildCodeFrameError("Duplicate private field");
                privateNames.add(name2);
              }
            }
            path22.isClassMethod({ kind: "constructor" }) ? constructor = path22 : (elements.push(path22), (path22.isProperty() || path22.isPrivate() || path22.isStaticBlock != null && path22.isStaticBlock()) && props.push(path22));
          }
          if (!props.length && !isDecorated)
            return;
          const innerBinding = path4.node.id;
          let ref;
          innerBinding && pathIsClassDeclaration || (path4.ensureFunctionName != null || (path4.ensureFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.ensureFunctionName), path4.ensureFunctionName(false), ref = path4.scope.generateUidIdentifier((innerBinding == null ? undefined : innerBinding.name) || "Class"));
          const classRefForDefine = (_ref = ref) != null ? _ref : _core.types.cloneNode(innerBinding), privateNamesMap = (0, _fields.buildPrivateNamesMap)(classRefForDefine.name, privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose2, props, file), privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, privateFieldsAsProperties != null ? privateFieldsAsProperties : loose2, privateFieldsAsSymbols != null && privateFieldsAsSymbols, file);
          let keysNodes, staticNodes, instanceNodes, lastInstanceNodeReturnsThis, pureStaticNodes, classBindingNode, wrapClass;
          (0, _fields.transformPrivateNamesUsage)(classRefForDefine, path4, privateNamesMap, { privateFieldsAsProperties: privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose2, noUninitializedPrivateFieldAccess, noDocumentAll, innerBinding }, file), isDecorated ? (staticNodes = pureStaticNodes = keysNodes = [], { instanceNodes, wrapClass } = (0, _decorators2.buildDecoratedClass)(classRefForDefine, path4, elements, file)) : (keysNodes = (0, _misc.extractComputedKeys)(path4, computedPaths, file), { staticNodes, pureStaticNodes, instanceNodes, lastInstanceNodeReturnsThis, classBindingNode, wrapClass } = (0, _fields.buildFieldsInitNodes)(ref, path4.node.superClass, props, privateNamesMap, file, setPublicClassFields != null ? setPublicClassFields : loose2, privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose2, noUninitializedPrivateFieldAccess, constantSuper != null ? constantSuper : loose2, innerBinding)), instanceNodes.length > 0 && (0, _misc.injectInitialization)(path4, constructor, instanceNodes, (referenceVisitor, state) => {
            if (!isDecorated)
              for (const prop of props)
                _core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node) || prop.node.static || prop.traverse(referenceVisitor, state);
          }, lastInstanceNodeReturnsThis);
          const wrappedPath = wrapClass(path4);
          wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]), staticNodes.length > 0 && wrappedPath.insertAfter(staticNodes), pureStaticNodes.length > 0 && wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes), classBindingNode != null && pathIsClassDeclaration && wrappedPath.insertAfter(classBindingNode);
        }, ExportDefaultDeclaration(path4, { file }) {
          {
            if (file.get(versionKey) !== "7.25.9")
              return;
            const decl = path4.get("declaration");
            if (decl.isClassDeclaration() && (0, _decorators2.hasDecorators)(decl.node))
              if (decl.node.id)
                path4.splitExportDeclaration != null || (path4.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), path4.splitExportDeclaration();
              else
                decl.node.type = "ClassExpression";
          }
        } } };
      }, Object.defineProperty(exports2, "enableFeature", { enumerable: true, get: function() {
        return _features.enableFeature;
      } }), Object.defineProperty(exports2, "injectInitialization", { enumerable: true, get: function() {
        return _misc.injectInitialization;
      } });
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"), _semver = __webpack_require__2("./node_modules/.pnpm/semver@6.3.1/node_modules/semver/semver.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _decorators2 = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/decorators-2018-09.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"), _features = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"), _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
      const versionKey = "@babel/plugin-class-features/version";
    }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.extractComputedKeys = function(path4, computedPaths, file) {
        const { scope } = path4, declarations = [], state = { classBinding: path4.node.id && scope.getBinding(path4.node.id.name), file };
        for (const computedPath of computedPaths) {
          const computedKey = computedPath.get("key");
          computedKey.isReferencedIdentifier() ? handleClassTDZ(computedKey, state) : computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
          const computedNode = computedPath.node;
          if (!computedKey.isConstantExpression()) {
            const assignment = memoiseComputedKey(computedKey.node, scope, scope.generateUidBasedOnNode(computedKey.node));
            assignment && (declarations.push(_core.types.expressionStatement(assignment)), computedNode.key = _core.types.cloneNode(assignment.left));
          }
        }
        return declarations;
      }, exports2.injectInitialization = function(path4, constructor, nodes, renamer, lastReturnsThis) {
        if (!nodes.length)
          return;
        const isDerived = !!path4.node.superClass;
        if (!constructor) {
          const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
          isDerived && (newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))], newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)), [constructor] = path4.get("body").unshiftContainer("body", newConstructor);
        }
        renamer && renamer(referenceVisitor, { scope: constructor.scope });
        if (isDerived) {
          const bareSupers = [];
          constructor.traverse(findBareSupers, bareSupers);
          let isFirst = true;
          for (const bareSuper of bareSupers)
            if (isFirst ? isFirst = false : nodes = nodes.map((n) => _core.types.cloneNode(n)), bareSuper.parentPath.isExpressionStatement())
              bareSuper.insertAfter(nodes);
            else {
              const allNodes = [bareSuper.node, ...nodes.map((n) => _core.types.toExpression(n))];
              lastReturnsThis || allNodes.push(_core.types.thisExpression()), bareSuper.replaceWith(_core.types.sequenceExpression(allNodes));
            }
        } else
          constructor.get("body").unshiftContainer("body", nodes);
      }, exports2.memoiseComputedKey = memoiseComputedKey;
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
      const findBareSupers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").visitors.environmentVisitor({ Super(path4) {
        const { node, parentPath } = path4;
        parentPath.isCallExpression({ callee: node }) && this.push(parentPath);
      } }), referenceVisitor = { "TSTypeAnnotation|TypeAnnotation"(path4) {
        path4.skip();
      }, ReferencedIdentifier(path4, { scope }) {
        scope.hasOwnBinding(path4.node.name) && (scope.rename(path4.node.name), path4.skip());
      } };
      function handleClassTDZ(path4, state) {
        if (state.classBinding && state.classBinding === path4.scope.getBinding(path4.node.name)) {
          const classNameTDZError = state.file.addHelper("classNameTDZError"), throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path4.node.name)]);
          path4.replaceWith(_core.types.sequenceExpression([throwNode, path4.node])), path4.skip();
        }
      }
      const classFieldDefinitionEvaluationTDZVisitor = { ReferencedIdentifier: handleClassTDZ };
      function memoiseComputedKey(keyNode, scope, hint) {
        if (_core.types.isIdentifier(keyNode) && scope.hasUid(keyNode.name))
          return;
        if (_core.types.isAssignmentExpression(keyNode, { operator: "=" }) && _core.types.isIdentifier(keyNode.left) && scope.hasUid(keyNode.left.name))
          return _core.types.cloneNode(keyNode);
        {
          const ident = _core.types.identifier(hint);
          return scope.push({ id: ident, kind: "let" }), _core.types.assignmentExpression("=", _core.types.cloneNode(ident), keyNode);
        }
      }
    }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertFieldTransformed = function(path4) {
        if (path4.node.declare)
          throw path4.buildCodeFrameError(`TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.
If you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:
 - @babel/plugin-transform-class-properties
 - @babel/plugin-transform-private-methods
 - @babel/plugin-proposal-decorators`);
      };
    }, "./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = Object.create(null);
        return e && Object.keys(e).forEach(function(k) {
          if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : { enumerable: true, get: function() {
              return e[k];
            } });
          }
        }), n.default = e, Object.freeze(n);
      }
      Object.defineProperty(exports2, "__esModule", { value: true });
      var _t__namespace = _interopNamespace(__webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"));
      function willPathCastToBoolean(path4) {
        const maybeWrapped = path4, { node, parentPath } = maybeWrapped;
        if (parentPath.isLogicalExpression()) {
          const { operator, right } = parentPath.node;
          if (operator === "&&" || operator === "||" || operator === "??" && node === right)
            return willPathCastToBoolean(parentPath);
        }
        if (parentPath.isSequenceExpression()) {
          const { expressions } = parentPath.node;
          return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
        }
        return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
      }
      const { LOGICAL_OPERATORS, arrowFunctionExpression, assignmentExpression, binaryExpression, booleanLiteral, callExpression, cloneNode, conditionalExpression, identifier, isMemberExpression, isOptionalCallExpression, isOptionalMemberExpression, isUpdateExpression, logicalExpression, memberExpression, nullLiteral, optionalCallExpression, optionalMemberExpression, sequenceExpression, updateExpression } = _t__namespace;

      class AssignmentMemoiser {
        constructor() {
          this._map = undefined, this._map = new WeakMap;
        }
        has(key) {
          return this._map.has(key);
        }
        get(key) {
          if (!this.has(key))
            return;
          const record = this._map.get(key), { value: value2 } = record;
          return record.count--, record.count === 0 ? assignmentExpression("=", value2, key) : value2;
        }
        set(key, value2, count) {
          return this._map.set(key, { count, value: value2 });
        }
      }
      function toNonOptional(path4, base) {
        const { node } = path4;
        if (isOptionalMemberExpression(node))
          return memberExpression(base, node.property, node.computed);
        if (path4.isOptionalCallExpression()) {
          const callee = path4.get("callee");
          if (path4.node.optional && callee.isOptionalMemberExpression()) {
            const object = callee.node.object, context = path4.scope.maybeGenerateMemoised(object);
            return callee.get("object").replaceWith(assignmentExpression("=", context, object)), callExpression(memberExpression(base, identifier("call")), [context, ...path4.node.arguments]);
          }
          return callExpression(base, path4.node.arguments);
        }
        return path4.node;
      }
      const handle = { memoise() {
      }, handle(member, noDocumentAll) {
        const { node, parent, parentPath, scope } = member;
        if (member.isOptionalMemberExpression()) {
          if (function(path4) {
            for (;path4 && !path4.isProgram(); ) {
              const { parentPath: parentPath2, container, listKey } = path4, parentNode = parentPath2.node;
              if (listKey) {
                if (container !== parentNode[listKey])
                  return true;
              } else if (container !== parentNode)
                return true;
              path4 = parentPath2;
            }
            return false;
          }(member))
            return;
          const endPath = member.find(({ node: node2, parent: parent2 }) => isOptionalMemberExpression(parent2) ? parent2.optional || parent2.object !== node2 : !isOptionalCallExpression(parent2) || (node2 !== member.node && parent2.optional || parent2.callee !== node2));
          if (scope.path.isPattern())
            return void endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
          const willEndPathCastToBoolean = willPathCastToBoolean(endPath), rootParentPath = endPath.parentPath;
          if (rootParentPath.isUpdateExpression({ argument: node }))
            throw member.buildCodeFrameError("can't handle update expression");
          const isAssignment = rootParentPath.isAssignmentExpression({ left: endPath.node }), isDeleteOperation = rootParentPath.isUnaryExpression({ operator: "delete" });
          if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName())
            throw member.buildCodeFrameError("can't delete a private class element");
          let startingOptional = member;
          for (;; )
            if (startingOptional.isOptionalMemberExpression()) {
              if (startingOptional.node.optional)
                break;
              startingOptional = startingOptional.get("object");
            } else {
              if (!startingOptional.isOptionalCallExpression())
                throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
              if (startingOptional.node.optional)
                break;
              startingOptional = startingOptional.get("callee");
            }
          const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee, baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode), baseRef = baseNeedsMemoised != null ? baseNeedsMemoised : startingNode, parentIsOptionalCall = parentPath.isOptionalCallExpression({ callee: node }), isOptionalCall = (parent2) => parentIsOptionalCall, parentIsCall = parentPath.isCallExpression({ callee: node });
          startingOptional.replaceWith(toNonOptional(startingOptional, baseRef)), isOptionalCall() ? parent.optional ? parentPath.replaceWith(this.optionalCall(member, parent.arguments)) : parentPath.replaceWith(this.call(member, parent.arguments)) : parentIsCall ? member.replaceWith(this.boundGet(member)) : this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isAssignmentExpression() ? handleAssignment(this, member, parentPath) : member.replaceWith(this.get(member));
          let context, regular = member.node;
          for (let current = member;current !== endPath; ) {
            const parentPath2 = current.parentPath;
            if (parentPath2 === endPath && isOptionalCall() && parent.optional) {
              regular = parentPath2.node;
              break;
            }
            regular = toNonOptional(parentPath2, regular), current = parentPath2;
          }
          const endParentPath = endPath.parentPath;
          if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({ callee: endPath.node, optional: true })) {
            const { object } = regular;
            context = member.scope.maybeGenerateMemoised(object), context && (regular.object = assignmentExpression("=", context, object));
          }
          let replacementPath = endPath;
          (isDeleteOperation || isAssignment) && (replacementPath = endParentPath, regular = endParentPath.node);
          const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);
          if (willEndPathCastToBoolean) {
            let nonNullishCheck;
            nonNullishCheck = noDocumentAll ? binaryExpression("!=", baseMemoised, nullLiteral()) : logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
          } else {
            let nullishCheck;
            nullishCheck = noDocumentAll ? binaryExpression("==", baseMemoised, nullLiteral()) : logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
          }
          if (context) {
            const endParent = endParentPath.node;
            endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode(context), ...endParent.arguments], false));
          }
        } else {
          if (isUpdateExpression(parent, { argument: node })) {
            if (this.simpleSet)
              return void member.replaceWith(this.simpleSet(member));
            const { operator, prefix } = parent;
            this.memoise(member, 2);
            const ref = scope.generateUidIdentifierBasedOnNode(node);
            scope.push({ id: ref });
            const seq = [assignmentExpression("=", cloneNode(ref), this.get(member))];
            if (prefix) {
              seq.push(updateExpression(operator, cloneNode(ref), prefix));
              const value2 = sequenceExpression(seq);
              return void parentPath.replaceWith(this.set(member, value2));
            }
            {
              const ref2 = scope.generateUidIdentifierBasedOnNode(node);
              scope.push({ id: ref2 }), seq.push(assignmentExpression("=", cloneNode(ref2), updateExpression(operator, cloneNode(ref), prefix)), cloneNode(ref));
              const value2 = sequenceExpression(seq);
              return void parentPath.replaceWith(sequenceExpression([this.set(member, value2), cloneNode(ref2)]));
            }
          }
          if (parentPath.isAssignmentExpression({ left: node }))
            handleAssignment(this, member, parentPath);
          else {
            if (!parentPath.isCallExpression({ callee: node }))
              return parentPath.isOptionalCallExpression({ callee: node }) ? scope.path.isPattern() ? void parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), [])) : void parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments)) : void (this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isForXStatement({ left: node }) || parentPath.isObjectProperty({ value: node }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isObjectProperty({ value: parent }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement() ? member.replaceWith(this.destructureSet(member)) : parentPath.isTaggedTemplateExpression() ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member)));
            parentPath.replaceWith(this.call(member, parentPath.node.arguments));
          }
        }
      } };
      function handleAssignment(state, member, parentPath) {
        if (state.simpleSet)
          return void member.replaceWith(state.simpleSet(member));
        const { operator, right: value2 } = parentPath.node;
        if (operator === "=")
          parentPath.replaceWith(state.set(member, value2));
        else {
          const operatorTrunc = operator.slice(0, -1);
          LOGICAL_OPERATORS.includes(operatorTrunc) ? (state.memoise(member, 1), parentPath.replaceWith(logicalExpression(operatorTrunc, state.get(member), state.set(member, value2)))) : (state.memoise(member, 2), parentPath.replaceWith(state.set(member, binaryExpression(operatorTrunc, state.get(member), value2))));
        }
      }
      exports2.default = function(path4, visitor, state) {
        path4.traverse(visitor, Object.assign({}, handle, state, { memoiser: new AssignmentMemoiser }));
      };
    }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { callExpression, cloneNode, expressionStatement, identifier, importDeclaration, importDefaultSpecifier, importNamespaceSpecifier, importSpecifier, memberExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
      exports2.default = class {
        constructor(importedSource, scope, hub) {
          this._statements = [], this._resultName = null, this._importedSource = undefined, this._scope = scope, this._hub = hub, this._importedSource = importedSource;
        }
        done() {
          return { statements: this._statements, resultName: this._resultName };
        }
        import() {
          return this._statements.push(importDeclaration([], stringLiteral(this._importedSource))), this;
        }
        require() {
          return this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)]))), this;
        }
        namespace(name = "namespace") {
          const local = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
          return _assert(statement.type === "ImportDeclaration"), _assert(statement.specifiers.length === 0), statement.specifiers = [importNamespaceSpecifier(local)], this._resultName = cloneNode(local), this;
        }
        default(name) {
          const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
          return _assert(statement.type === "ImportDeclaration"), _assert(statement.specifiers.length === 0), statement.specifiers = [importDefaultSpecifier(id)], this._resultName = cloneNode(id), this;
        }
        named(name, importName) {
          if (importName === "default")
            return this.default(name);
          const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
          return _assert(statement.type === "ImportDeclaration"), _assert(statement.specifiers.length === 0), statement.specifiers = [importSpecifier(id, identifier(importName))], this._resultName = cloneNode(id), this;
        }
        var(name) {
          const id = this._scope.generateUidIdentifier(name);
          let statement = this._statements[this._statements.length - 1];
          return statement.type !== "ExpressionStatement" && (_assert(this._resultName), statement = expressionStatement(this._resultName), this._statements.push(statement)), this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]), this._resultName = cloneNode(id), this;
        }
        defaultInterop() {
          return this._interop(this._hub.addHelper("interopRequireDefault"));
        }
        wildcardInterop() {
          return this._interop(this._hub.addHelper("interopRequireWildcard"));
        }
        _interop(callee) {
          const statement = this._statements[this._statements.length - 1];
          return statement.type === "ExpressionStatement" ? statement.expression = callExpression(callee, [statement.expression]) : statement.type === "VariableDeclaration" ? (_assert(statement.declarations.length === 1), statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init])) : _assert.fail("Unexpected type."), this;
        }
        prop(name) {
          const statement = this._statements[this._statements.length - 1];
          return statement.type === "ExpressionStatement" ? statement.expression = memberExpression(statement.expression, identifier(name)) : statement.type === "VariableDeclaration" ? (_assert(statement.declarations.length === 1), statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name))) : _assert.fail("Unexpected type:" + statement.type), this;
        }
        read(name) {
          this._resultName = memberExpression(this._resultName, identifier(name));
        }
      };
    }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _importBuilder = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-builder.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
      const { identifier, importSpecifier, numericLiteral, sequenceExpression, isImportDeclaration } = _t;
      function isValueImport(node) {
        return node.importKind !== "type" && node.importKind !== "typeof";
      }
      function hasNamespaceImport(node) {
        return node.specifiers.length === 1 && node.specifiers[0].type === "ImportNamespaceSpecifier" || node.specifiers.length === 2 && node.specifiers[1].type === "ImportNamespaceSpecifier";
      }
      function hasDefaultImport(node) {
        return node.specifiers.length > 0 && node.specifiers[0].type === "ImportDefaultSpecifier";
      }
      function maybeAppendImportSpecifiers(target, source) {
        return target.specifiers.length ? !source.specifiers.length || !hasNamespaceImport(target) && !hasNamespaceImport(source) && (hasDefaultImport(source) && (hasDefaultImport(target) ? source.specifiers[0] = importSpecifier(source.specifiers[0].local, identifier("default")) : target.specifiers.unshift(source.specifiers.shift())), target.specifiers.push(...source.specifiers), true) : (target.specifiers = source.specifiers, true);
      }
      exports2.default = class {
        constructor(path4, importedSource, opts) {
          this._defaultOpts = { importedSource: null, importedType: "commonjs", importedInterop: "babel", importingInterop: "babel", ensureLiveReference: false, ensureNoContext: false, importPosition: "before" };
          const programPath = path4.find((p) => p.isProgram());
          this._programPath = programPath, this._programScope = programPath.scope, this._hub = programPath.hub, this._defaultOpts = this._applyDefaults(importedSource, opts, true);
        }
        addDefault(importedSourceIn, opts) {
          return this.addNamed("default", importedSourceIn, opts);
        }
        addNamed(importName, importedSourceIn, opts) {
          return _assert(typeof importName == "string"), this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
        }
        addNamespace(importedSourceIn, opts) {
          return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
        }
        addSideEffect(importedSourceIn, opts) {
          return this._generateImport(this._applyDefaults(importedSourceIn, opts), undefined);
        }
        _applyDefaults(importedSource, opts, isInit = false) {
          let newOpts;
          return typeof importedSource == "string" ? newOpts = Object.assign({}, this._defaultOpts, { importedSource }, opts) : (_assert(!opts, "Unexpected secondary arguments."), newOpts = Object.assign({}, this._defaultOpts, importedSource)), !isInit && opts && (opts.nameHint !== undefined && (newOpts.nameHint = opts.nameHint), opts.blockHoist !== undefined && (newOpts.blockHoist = opts.blockHoist)), newOpts;
        }
        _generateImport(opts, importName) {
          const isDefault = importName === "default", isNamed = !!importName && !isDefault, isNamespace = importName === null, { importedSource, importedType, importedInterop, importingInterop, ensureLiveReference, ensureNoContext, nameHint, importPosition, blockHoist } = opts;
          let name = nameHint || importName;
          const isMod = (0, _isModule.default)(this._programPath), isModuleForNode = isMod && importingInterop === "node", isModuleForBabel = isMod && importingInterop === "babel";
          if (importPosition === "after" && !isMod)
            throw new Error('"importPosition": "after" is only supported in modules');
          const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
          if (importedType === "es6") {
            if (!isModuleForNode && !isModuleForBabel)
              throw new Error("Cannot import an ES6 module from CommonJS");
            builder.import(), isNamespace ? builder.namespace(nameHint || importedSource) : (isDefault || isNamed) && builder.named(name, importName);
          } else {
            if (importedType !== "commonjs")
              throw new Error(`Unexpected interopType "${importedType}"`);
            if (importedInterop === "babel")
              if (isModuleForNode) {
                name = name !== "default" ? name : importedSource;
                const es6Default = `${importedSource}$es6Default`;
                builder.import(), isNamespace ? builder.default(es6Default).var(name || importedSource).wildcardInterop() : isDefault ? ensureLiveReference ? builder.default(es6Default).var(name || importedSource).defaultInterop().read("default") : builder.default(es6Default).var(name).defaultInterop().prop(importName) : isNamed && builder.default(es6Default).read(importName);
              } else
                isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource).wildcardInterop() : (isDefault || isNamed) && ensureLiveReference ? isDefault ? (name = name !== "default" ? name : importedSource, builder.var(name).read(importName), builder.defaultInterop()) : builder.var(importedSource).read(importName) : isDefault ? builder.var(name).defaultInterop().prop(importName) : isNamed && builder.var(name).prop(importName));
            else if (importedInterop === "compiled")
              isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : (isDefault || isNamed) && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : (isDefault || isNamed) && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.prop(importName).var(name)));
            else {
              if (importedInterop !== "uncompiled")
                throw new Error(`Unknown importedInterop "${importedInterop}".`);
              if (isDefault && ensureLiveReference)
                throw new Error("No live reference for commonjs default");
              isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : isDefault ? builder.var(name) : isNamed && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.var(name).prop(importName)));
            }
          }
          const { statements, resultName } = builder.done();
          return this._insertStatements(statements, importPosition, blockHoist), (isDefault || isNamed) && ensureNoContext && resultName.type !== "Identifier" ? sequenceExpression([numericLiteral(0), resultName]) : resultName;
        }
        _insertStatements(statements, importPosition = "before", blockHoist = 3) {
          if (importPosition === "after") {
            if (this._insertStatementsAfter(statements))
              return;
          } else if (this._insertStatementsBefore(statements, blockHoist))
            return;
          this._programPath.unshiftContainer("body", statements);
        }
        _insertStatementsBefore(statements, blockHoist) {
          if (statements.length === 1 && isImportDeclaration(statements[0]) && isValueImport(statements[0])) {
            const firstImportDecl = this._programPath.get("body").find((p) => p.isImportDeclaration() && isValueImport(p.node));
            if ((firstImportDecl == null ? undefined : firstImportDecl.node.source.value) === statements[0].source.value && maybeAppendImportSpecifiers(firstImportDecl.node, statements[0]))
              return true;
          }
          statements.forEach((node) => {
            node._blockHoist = blockHoist;
          });
          const targetPath = this._programPath.get("body").find((p) => {
            const val = p.node._blockHoist;
            return Number.isFinite(val) && val < 4;
          });
          return !!targetPath && (targetPath.insertBefore(statements), true);
        }
        _insertStatementsAfter(statements) {
          const statementsSet = new Set(statements), importDeclarations = new Map;
          for (const statement of statements)
            if (isImportDeclaration(statement) && isValueImport(statement)) {
              const source = statement.source.value;
              importDeclarations.has(source) || importDeclarations.set(source, []), importDeclarations.get(source).push(statement);
            }
          let lastImportPath = null;
          for (const bodyStmt of this._programPath.get("body"))
            if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {
              lastImportPath = bodyStmt;
              const source = bodyStmt.node.source.value, newImports = importDeclarations.get(source);
              if (!newImports)
                continue;
              for (const decl of newImports)
                statementsSet.has(decl) && maybeAppendImportSpecifiers(bodyStmt.node, decl) && statementsSet.delete(decl);
            }
          return statementsSet.size === 0 || (lastImportPath && lastImportPath.insertAfter(Array.from(statementsSet)), !!lastImportPath);
        }
      };
    }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ImportInjector", { enumerable: true, get: function() {
        return _importInjector.default;
      } }), exports2.addDefault = function(path4, importedSource, opts) {
        return new _importInjector.default(path4).addDefault(importedSource, opts);
      }, exports2.addNamed = function(path4, name, importedSource, opts) {
        return new _importInjector.default(path4).addNamed(name, importedSource, opts);
      }, exports2.addNamespace = function(path4, importedSource, opts) {
        return new _importInjector.default(path4).addNamespace(importedSource, opts);
      }, exports2.addSideEffect = function(path4, importedSource, opts) {
        return new _importInjector.default(path4).addSideEffect(importedSource, opts);
      }, Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
        return _isModule.default;
      } });
      var _importInjector = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/import-injector.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js");
    }, "./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/is-module.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path4) {
        return path4.node.sourceType === "module";
      };
    }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildDynamicImport = function(node, deferToThen, wrapWithPromise, builder) {
        const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;
        if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && specifier.quasis.length === 0)
          return deferToThen ? _core.template.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      ` : builder(specifier);
        const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({ raw: "" }), _core.types.templateElement({ raw: "" })], [_core.types.identifier("specifier")]);
        return deferToThen ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(_core.types.identifier("s"))})
      )(${specifier})
    ` : wrapWithPromise ? _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    ` : _core.template.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `;
      };
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
      exports2.getDynamicImportSource = function(node) {
        const [source] = node.arguments;
        return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\`\${${source}}\``;
      };
    }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getModuleName;
      {
        const originalGetModuleName = getModuleName;
        exports2.default = getModuleName = function(rootOpts, pluginOpts) {
          var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
          return originalGetModuleName(rootOpts, { moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId, moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds, getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId, moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot });
        };
      }
      function getModuleName(rootOpts, pluginOpts) {
        const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
        if (!moduleIds)
          return null;
        if (moduleId != null && !getModuleId)
          return moduleId;
        let moduleName = moduleRoot != null ? moduleRoot + "/" : "";
        if (filenameRelative) {
          const sourceRootReplacer = sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
          moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.\w*$/, "");
        }
        return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
      }
    }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "buildDynamicImport", { enumerable: true, get: function() {
        return _dynamicImport.buildDynamicImport;
      } }), exports2.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = false, wrapReference = Lazy.wrapReference) {
        var _wrapReference;
        const statements = [], srcNamespaceId = _core.types.identifier(sourceMetadata.name);
        for (const localName of sourceMetadata.importsNamespace)
          localName !== sourceMetadata.name && statements.push(_core.template.statement`var NAME = SOURCE;`({ NAME: localName, SOURCE: _core.types.cloneNode(srcNamespaceId) }));
        const srcNamespace = (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) != null ? _wrapReference : srcNamespaceId;
        constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference));
        for (const exportName of sourceMetadata.reexportNamespace)
          statements.push((_core.types.isIdentifier(srcNamespace) ? _core.template.statement`EXPORTS.NAME = NAMESPACE;` : _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `)({ EXPORTS: metadata.exportName, NAME: exportName, NAMESPACE: _core.types.cloneNode(srcNamespace) }));
        if (sourceMetadata.reexportAll) {
          const statement = function(metadata2, namespace, constantReexports2) {
            return (constantReexports2 ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({ NAMESPACE: namespace, EXPORTS: metadata2.exportName, VERIFY_NAME_LIST: metadata2.exportNameListName ? _core.template`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata2.exportNameListName }) : null });
          }(metadata, _core.types.cloneNode(srcNamespace), constantReexports);
          statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
        }
        return statements;
      }, exports2.ensureStatementsHoisted = function(statements) {
        statements.forEach((header) => {
          header._blockHoist = 3;
        });
      }, Object.defineProperty(exports2, "getModuleName", { enumerable: true, get: function() {
        return _getModuleName.default;
      } }), Object.defineProperty(exports2, "hasExports", { enumerable: true, get: function() {
        return _normalizeAndLoadMetadata.hasExports;
      } }), Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
        return _helperModuleImports.isModule;
      } }), Object.defineProperty(exports2, "isSideEffectImport", { enumerable: true, get: function() {
        return _normalizeAndLoadMetadata.isSideEffectImport;
      } }), exports2.rewriteModuleStatementsAndPrepareHeader = function(path4, { exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, getWrapperPayload = Lazy.toGetWrapperPayload(lazy != null && lazy), wrapReference = Lazy.wrapReference, esNamespaceOnly, filename, constantReexports = arguments[1].loose, enumerableModuleMeta = arguments[1].loose, noIncompleteNsImportDetection }) {
        (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path4), "Cannot process module statements in a script"), path4.node.sourceType = "script";
        const meta = (0, _normalizeAndLoadMetadata.default)(path4, exportName, { importInterop, initializeReexports: constantReexports, getWrapperPayload, esNamespaceOnly, filename });
        allowTopLevelThis || (0, _rewriteThis.default)(path4);
        if ((0, _rewriteLiveReferences.default)(path4, meta, wrapReference), strictMode !== false) {
          path4.node.directives.some((directive) => directive.value.value === "use strict") || path4.unshiftContainer("directives", _core.types.directive(_core.types.directiveLiteral("use strict")));
        }
        const headers = [];
        (0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta2 = false) {
          return (enumerableModuleMeta2 ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
        }(meta, enumerableModuleMeta));
        const nameList = function(programPath, metadata) {
          const exportedVars = Object.create(null);
          for (const data of metadata.local.values())
            for (const name2 of data.names)
              exportedVars[name2] = true;
          let hasReexport = false;
          for (const data of metadata.source.values()) {
            for (const exportName2 of data.reexports.keys())
              exportedVars[exportName2] = true;
            for (const exportName2 of data.reexportNamespace)
              exportedVars[exportName2] = true;
            hasReexport = hasReexport || !!data.reexportAll;
          }
          if (!hasReexport || Object.keys(exportedVars).length === 0)
            return null;
          const name = programPath.scope.generateUidIdentifier("exportNames");
          return delete exportedVars.default, { name: name.name, statement: _core.types.variableDeclaration("var", [_core.types.variableDeclarator(name, _core.types.valueToNode(exportedVars))]) };
        }(path4, meta);
        nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
        return headers.push(...function(programPath, metadata, wrapReference2, constantReexports2 = false, noIncompleteNsImportDetection2 = false) {
          const initStatements = [];
          for (const [localName, data] of metadata.local)
            if (data.kind === "import")
              ;
            else if (data.kind === "hoisted")
              initStatements.push([data.names[0], buildInitStatement(metadata, data.names, _core.types.identifier(localName))]);
            else if (!noIncompleteNsImportDetection2)
              for (const exportName2 of data.names)
                initStatements.push([exportName2, null]);
          for (const data of metadata.source.values()) {
            if (!constantReexports2) {
              const reexportsStatements = buildReexportsFromMeta(metadata, data, false, wrapReference2), reexports = [...data.reexports.keys()];
              for (let i = 0;i < reexportsStatements.length; i++)
                initStatements.push([reexports[i], reexportsStatements[i]]);
            }
            if (!noIncompleteNsImportDetection2)
              for (const exportName2 of data.reexportNamespace)
                initStatements.push([exportName2, null]);
          }
          initStatements.sort(([a], [b]) => a < b ? -1 : b < a ? 1 : 0);
          const results = [];
          if (noIncompleteNsImportDetection2)
            for (const [, initStatement] of initStatements)
              results.push(initStatement);
          else {
            const chunkSize = 100;
            for (let i = 0;i < initStatements.length; i += chunkSize) {
              let uninitializedExportNames = [];
              for (let j = 0;j < chunkSize && i + j < initStatements.length; j++) {
                const [exportName2, initStatement] = initStatements[i + j];
                initStatement !== null ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName2);
              }
              uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
            }
          }
          return results;
        }(path4, meta, wrapReference, constantReexports, noIncompleteNsImportDetection)), { meta, headers };
      }, Object.defineProperty(exports2, "rewriteThis", { enumerable: true, get: function() {
        return _rewriteThis.default;
      } }), exports2.wrapInterop = function(programPath, expr, type) {
        if (type === "none")
          return null;
        if (type === "node-namespace")
          return _core.types.callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, _core.types.booleanLiteral(true)]);
        if (type === "node-default")
          return null;
        let helper;
        if (type === "default")
          helper = "interopRequireDefault";
        else {
          if (type !== "namespace")
            throw new Error(`Unknown interop: ${type}`);
          helper = "interopRequireWildcard";
        }
        return _core.types.callExpression(programPath.hub.addHelper(helper), [expr]);
      };
      var _assert = __webpack_require__2("assert"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), Lazy = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js"), _getModuleName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
      exports2.getDynamicImportSource = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js").getDynamicImportSource;
      const ReexportTemplate = { constant: ({ exports: exports3, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports3}.${exportName} = ${namespaceImport};
    `, constantComputed: ({ exports: exports3, exportName, namespaceImport }) => _core.template.statement.ast`
      ${exports3}["${exportName}"] = ${namespaceImport};
    `, spec: ({ exports: exports3, exportName, namespaceImport }) => _core.template.statement.ast`
      Object.defineProperty(${exports3}, "${exportName}", {
        enumerable: true,
        get: function() {
          return ${namespaceImport};
        },
      });
    ` };
      function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
        var _wrapReference2;
        let namespace = _core.types.identifier(metadata.name);
        namespace = (_wrapReference2 = wrapReference(namespace, metadata.wrap)) != null ? _wrapReference2 : namespace;
        const { stringSpecifiers } = meta;
        return Array.from(metadata.reexports, ([exportName, importName]) => {
          let namespaceImport = _core.types.cloneNode(namespace);
          importName === "default" && metadata.interop === "node-default" || (namespaceImport = stringSpecifiers.has(importName) ? _core.types.memberExpression(namespaceImport, _core.types.stringLiteral(importName), true) : _core.types.memberExpression(namespaceImport, _core.types.identifier(importName)));
          const astNodes = { exports: meta.exportName, exportName, namespaceImport };
          return constantReexports || _core.types.isIdentifier(namespaceImport) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
        });
      }
      const InitTemplate = { computed: ({ exports: exports3, name, value: value2 }) => _core.template.expression.ast`${exports3}["${name}"] = ${value2}`, default: ({ exports: exports3, name, value: value2 }) => _core.template.expression.ast`${exports3}.${name} = ${value2}`, define: ({ exports: exports3, name, value: value2 }) => _core.template.expression.ast`
      Object.defineProperty(${exports3}, "${name}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${name}"] = ${value2}` };
      function buildInitStatement(metadata, exportNames, initExpr) {
        const { stringSpecifiers, exportName: exports3 } = metadata;
        return _core.types.expressionStatement(exportNames.reduce((value2, name) => {
          const params = { exports: exports3, name, value: value2 };
          return name === "__proto__" ? InitTemplate.define(params) : stringSpecifiers.has(name) ? InitTemplate.computed(params) : InitTemplate.default(params);
        }, initExpr));
      }
    }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/lazy-modules.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.toGetWrapperPayload = function(lazy) {
        return (source, metadata) => {
          if (lazy === false)
            return null;
          if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll)
            return null;
          if (lazy === true)
            return source.includes(".") ? null : "lazy";
          if (Array.isArray(lazy))
            return lazy.includes(source) ? "lazy" : null;
          if (typeof lazy == "function")
            return lazy(source) ? "lazy" : null;
          throw new Error(".lazy must be a boolean, string array, or function");
        };
      }, exports2.wrapReference = function(ref, payload) {
        return payload === "lazy" ? _core.types.callExpression(ref, []) : null;
      };
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js");
    }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, exportName, { importInterop, initializeReexports = false, getWrapperPayload, esNamespaceOnly = false, filename }) {
        exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
        const stringSpecifiers = new Set;
        (function(programPath2) {
          programPath2.get("body").forEach((child) => {
            child.isExportDefaultDeclaration() && (child.splitExportDeclaration != null || (child.splitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js").NodePath.prototype.splitExportDeclaration), child.splitExportDeclaration());
          });
        })(programPath);
        const { local, sources, hasExports } = function(programPath2, { getWrapperPayload: getWrapperPayload2, initializeReexports: initializeReexports2 }, stringSpecifiers2) {
          const localData = function(programPath3, initializeReexports3, stringSpecifiers3) {
            const bindingKindLookup = new Map;
            programPath3.get("body").forEach((child) => {
              let kind;
              if (child.isImportDeclaration())
                kind = "import";
              else {
                if (child.isExportDefaultDeclaration() && (child = child.get("declaration")), child.isExportNamedDeclaration()) {
                  if (child.node.declaration)
                    child = child.get("declaration");
                  else if (initializeReexports3 && child.node.source && child.get("source").isStringLiteral())
                    return void child.get("specifiers").forEach((spec) => {
                      assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
                    });
                }
                if (child.isFunctionDeclaration())
                  kind = "hoisted";
                else if (child.isClassDeclaration())
                  kind = "block";
                else if (child.isVariableDeclaration({ kind: "var" }))
                  kind = "var";
                else {
                  if (!child.isVariableDeclaration())
                    return;
                  kind = "block";
                }
              }
              Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
                bindingKindLookup.set(name, kind);
              });
            });
            const localMetadata = new Map, getLocalMetadata = (idPath) => {
              const localName = idPath.node.name;
              let metadata = localMetadata.get(localName);
              if (!metadata) {
                const kind = bindingKindLookup.get(localName);
                if (kind === undefined)
                  throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
                metadata = { names: [], kind }, localMetadata.set(localName, metadata);
              }
              return metadata;
            };
            return programPath3.get("body").forEach((child) => {
              if (!child.isExportNamedDeclaration() || !initializeReexports3 && child.node.source) {
                if (child.isExportDefaultDeclaration()) {
                  const declaration = child.get("declaration");
                  if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                    throw declaration.buildCodeFrameError("Unexpected default expression export.");
                  getLocalMetadata(declaration.get("id")).names.push("default");
                }
              } else if (child.node.declaration) {
                const declaration = child.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
                Object.keys(ids).forEach((name) => {
                  if (name === "__esModule")
                    throw declaration.buildCodeFrameError('Illegal export "__esModule".');
                  getLocalMetadata(ids[name]).names.push(name);
                });
              } else
                child.get("specifiers").forEach((spec) => {
                  const local2 = spec.get("local"), exported = spec.get("exported"), localMetadata2 = getLocalMetadata(local2), exportName2 = getExportSpecifierName(exported, stringSpecifiers3);
                  if (exportName2 === "__esModule")
                    throw exported.buildCodeFrameError('Illegal export "__esModule".');
                  localMetadata2.names.push(exportName2);
                });
            }), localMetadata;
          }(programPath2, initializeReexports2, stringSpecifiers2), importNodes = new Map, sourceData = new Map, getData = (sourceNode, node) => {
            const source = sourceNode.value;
            let data = sourceData.get(source);
            return data ? importNodes.get(source).push(node) : (data = { name: programPath2.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name, interop: "none", loc: null, imports: new Map, importsNamespace: new Set, reexports: new Map, reexportNamespace: new Set, reexportAll: null, wrap: null, get lazy() {
              return this.wrap === "lazy";
            }, referenced: false }, sourceData.set(source, data), importNodes.set(source, [node])), data;
          };
          let hasExports2 = false;
          programPath2.get("body").forEach((child) => {
            if (child.isImportDeclaration()) {
              const data = getData(child.node.source, child.node);
              data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                if (spec.isImportDefaultSpecifier()) {
                  const localName = spec.get("local").node.name;
                  data.imports.set(localName, "default");
                  const reexport = localData.get(localName);
                  reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                    data.reexports.set(name, "default");
                  }), data.referenced = true);
                } else if (spec.isImportNamespaceSpecifier()) {
                  const localName = spec.get("local").node.name;
                  data.importsNamespace.add(localName);
                  const reexport = localData.get(localName);
                  reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                    data.reexportNamespace.add(name);
                  }), data.referenced = true);
                } else if (spec.isImportSpecifier()) {
                  const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers2), localName = spec.get("local").node.name;
                  data.imports.set(localName, importName);
                  const reexport = localData.get(localName);
                  reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                    data.reexports.set(name, importName);
                  }), data.referenced = true);
                }
              });
            } else if (child.isExportAllDeclaration()) {
              hasExports2 = true;
              const data = getData(child.node.source, child.node);
              data.loc || (data.loc = child.node.loc), data.reexportAll = { loc: child.node.loc }, data.referenced = true;
            } else if (child.isExportNamedDeclaration() && child.node.source) {
              hasExports2 = true;
              const data = getData(child.node.source, child.node);
              data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                assertExportSpecifier(spec);
                const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers2), exportName2 = getExportSpecifierName(spec.get("exported"), stringSpecifiers2);
                if (data.reexports.set(exportName2, importName), data.referenced = true, exportName2 === "__esModule")
                  throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
              });
            } else
              (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) && (hasExports2 = true);
          });
          for (const metadata of sourceData.values()) {
            let needsDefault = false, needsNamed = false;
            metadata.importsNamespace.size > 0 && (needsDefault = true, needsNamed = true), metadata.reexportAll && (needsNamed = true);
            for (const importName of metadata.imports.values())
              importName === "default" ? needsDefault = true : needsNamed = true;
            for (const importName of metadata.reexports.values())
              importName === "default" ? needsDefault = true : needsNamed = true;
            needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
          }
          if (getWrapperPayload2)
            for (const [source, metadata] of sourceData)
              metadata.wrap = getWrapperPayload2(source, metadata, importNodes.get(source));
          return { hasExports: hasExports2, local: localData, sources: sourceData };
        }(programPath, { initializeReexports, getWrapperPayload }, stringSpecifiers);
        (function(programPath2) {
          programPath2.get("body").forEach((child) => {
            if (child.isImportDeclaration())
              child.remove();
            else if (child.isExportNamedDeclaration())
              child.node.declaration ? (child.node.declaration._blockHoist = child.node._blockHoist, child.replaceWith(child.node.declaration)) : child.remove();
            else if (child.isExportDefaultDeclaration()) {
              const declaration = child.get("declaration");
              if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                throw declaration.buildCodeFrameError("Unexpected default expression export.");
              declaration._blockHoist = child.node._blockHoist, child.replaceWith(declaration);
            } else
              child.isExportAllDeclaration() && child.remove();
          });
        })(programPath);
        for (const [source, metadata] of sources) {
          const { importsNamespace, imports } = metadata;
          if (importsNamespace.size > 0 && imports.size === 0) {
            const [nameOfnamespace] = importsNamespace;
            metadata.name = nameOfnamespace;
          }
          const resolvedInterop = resolveImportInterop(importInterop, source, filename);
          resolvedInterop === "none" ? metadata.interop = "none" : resolvedInterop === "node" && metadata.interop === "namespace" ? metadata.interop = "node-namespace" : resolvedInterop === "node" && metadata.interop === "default" ? metadata.interop = "node-default" : esNamespaceOnly && metadata.interop === "namespace" && (metadata.interop = "default");
        }
        return { exportName, exportNameListName: null, hasExports, local, source: sources, stringSpecifiers };
      }, exports2.hasExports = function(metadata) {
        return metadata.hasExports;
      }, exports2.isSideEffectImport = function(source) {
        return source.imports.size === 0 && source.importsNamespace.size === 0 && source.reexports.size === 0 && source.reexportNamespace.size === 0 && !source.reexportAll;
      }, exports2.validateImportInteropOption = validateImportInteropOption;
      var _path = __webpack_require__2("path"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
      function validateImportInteropOption(importInterop) {
        if (typeof importInterop != "function" && importInterop !== "none" && importInterop !== "babel" && importInterop !== "node")
          throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
        return importInterop;
      }
      function resolveImportInterop(importInterop, source, filename) {
        return typeof importInterop == "function" ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
      }
      function getExportSpecifierName(path4, stringSpecifiers) {
        if (path4.isIdentifier())
          return path4.node.name;
        if (path4.isStringLiteral()) {
          const stringValue = path4.node.value;
          return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
        }
        throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path4.node.type}`);
      }
      function assertExportSpecifier(path4) {
        if (!path4.isExportSpecifier())
          throw path4.isExportNamespaceSpecifier() ? path4.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.") : path4.buildCodeFrameError("Unexpected export specifier type");
      }
    }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, metadata, wrapReference) {
        const imported = new Map, exported = new Map, requeueInParent = (path4) => {
          programPath.requeue(path4);
        };
        for (const [source, data] of metadata.source) {
          for (const [localName, importName] of data.imports)
            imported.set(localName, [source, importName, null]);
          for (const localName of data.importsNamespace)
            imported.set(localName, [source, null, localName]);
        }
        for (const [local, data] of metadata.local) {
          let exportMeta = exported.get(local);
          exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data.names);
        }
        const rewriteBindingInitVisitorState = { metadata, requeueInParent, scope: programPath.scope, exported };
        programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
        const rewriteReferencesVisitorState = { seen: new WeakSet, metadata, requeueInParent, scope: programPath.scope, imported, exported, buildImportReference([source, importName, localName], identNode) {
          const meta = metadata.source.get(source);
          if (meta.referenced = true, localName) {
            var _wrapReference;
            if (meta.wrap)
              identNode = (_wrapReference = wrapReference(identNode, meta.wrap)) != null ? _wrapReference : identNode;
            return identNode;
          }
          let namespace = _core.types.identifier(meta.name);
          var _wrapReference2;
          meta.wrap && (namespace = (_wrapReference2 = wrapReference(namespace, meta.wrap)) != null ? _wrapReference2 : namespace);
          if (importName === "default" && meta.interop === "node-default")
            return namespace;
          const computed = metadata.stringSpecifiers.has(importName);
          return _core.types.memberExpression(namespace, computed ? _core.types.stringLiteral(importName) : _core.types.identifier(importName), computed);
        } };
        programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
      };
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
      const rewriteBindingInitVisitor = { Scope(path4) {
        path4.skip();
      }, ClassDeclaration(path4) {
        const { requeueInParent, exported, metadata } = this, { id } = path4.node;
        if (!id)
          throw new Error("Expected class to have a name");
        const localName = id.name, exportNames = exported.get(localName) || [];
        if (exportNames.length > 0) {
          const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, _core.types.identifier(localName), path4.scope));
          statement._blockHoist = path4.node._blockHoist, requeueInParent(path4.insertAfter(statement)[0]);
        }
      }, VariableDeclaration(path4) {
        const { requeueInParent, exported, metadata } = this, isVar = path4.node.kind === "var";
        for (const decl of path4.get("declarations")) {
          const { id } = decl.node;
          let { init } = decl.node;
          if (!_core.types.isIdentifier(id) || !exported.has(id.name) || _core.types.isArrowFunctionExpression(init) || _core.types.isFunctionExpression(init) && !init.id || _core.types.isClassExpression(init) && !init.id) {
            for (const localName of Object.keys(decl.getOuterBindingIdentifiers()))
              if (exported.has(localName)) {
                const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), _core.types.identifier(localName), path4.scope));
                statement._blockHoist = path4.node._blockHoist, requeueInParent(path4.insertAfter(statement)[0]);
              }
          } else {
            if (!init) {
              if (isVar)
                continue;
              init = path4.scope.buildUndefinedNode();
            }
            decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init, path4.scope), requeueInParent(decl.get("init"));
          }
        }
      } }, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
        const exportsObjectName = metadata.exportName;
        for (let currentScope = scope;currentScope != null; currentScope = currentScope.parent)
          currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
        return (exportNames || []).reduce((expr, exportName) => {
          const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
          return _core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.identifier(exportsObjectName), computed ? _core.types.stringLiteral(exportName) : _core.types.identifier(exportName), computed), expr);
        }, localExpr);
      }, buildImportThrow = (localName) => _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = { ReferencedIdentifier(path4) {
        const { seen, buildImportReference, scope, imported, requeueInParent } = this;
        if (seen.has(path4.node))
          return;
        seen.add(path4.node);
        const localName = path4.node.name, importData = imported.get(localName);
        if (importData) {
          if (function(path22) {
            do {
              switch (path22.parent.type) {
                case "TSTypeAnnotation":
                case "TSTypeAliasDeclaration":
                case "TSTypeReference":
                case "TypeAnnotation":
                case "TypeAlias":
                  return true;
                case "ExportSpecifier":
                  return path22.parentPath.parent.exportKind === "type";
                default:
                  if (path22.parentPath.isStatement() || path22.parentPath.isExpression())
                    return false;
              }
            } while (path22 = path22.parentPath);
          }(path4))
            throw path4.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
          const localBinding = path4.scope.getBinding(localName);
          if (scope.getBinding(localName) !== localBinding)
            return;
          const ref = buildImportReference(importData, path4.node);
          if (ref.loc = path4.node.loc, (path4.parentPath.isCallExpression({ callee: path4.node }) || path4.parentPath.isOptionalCallExpression({ callee: path4.node }) || path4.parentPath.isTaggedTemplateExpression({ tag: path4.node })) && _core.types.isMemberExpression(ref))
            path4.replaceWith(_core.types.sequenceExpression([_core.types.numericLiteral(0), ref]));
          else if (path4.isJSXIdentifier() && _core.types.isMemberExpression(ref)) {
            const { object, property } = ref;
            path4.replaceWith(_core.types.jsxMemberExpression(_core.types.jsxIdentifier(object.name), _core.types.jsxIdentifier(property.name)));
          } else
            path4.replaceWith(ref);
          requeueInParent(path4), path4.skip();
        }
      }, UpdateExpression(path4) {
        const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
        if (seen.has(path4.node))
          return;
        seen.add(path4.node);
        const arg = path4.get("argument");
        if (arg.isMemberExpression())
          return;
        const update = path4.node;
        if (arg.isIdentifier()) {
          const localName = arg.node.name;
          if (scope.getBinding(localName) !== path4.scope.getBinding(localName))
            return;
          const exportedNames = exported.get(localName), importData = imported.get(localName);
          if ((exportedNames == null ? undefined : exportedNames.length) > 0 || importData)
            if (importData)
              path4.replaceWith(_core.types.assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
            else if (update.prefix)
              path4.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.cloneNode(update), path4.scope));
            else {
              const ref = scope.generateDeclaredUidIdentifier(localName);
              path4.replaceWith(_core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(ref), _core.types.cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path4.scope), _core.types.cloneNode(ref)]));
            }
        }
        requeueInParent(path4), path4.skip();
      }, AssignmentExpression: { exit(path4) {
        const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
        if (seen.has(path4.node))
          return;
        seen.add(path4.node);
        const left = path4.get("left");
        if (!left.isMemberExpression())
          if (left.isIdentifier()) {
            const localName = left.node.name;
            if (scope.getBinding(localName) !== path4.scope.getBinding(localName))
              return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((exportedNames == null ? undefined : exportedNames.length) > 0 || importData) {
              const assignment = path4.node;
              importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = _core.types.sequenceExpression([assignment.right, buildImportThrow(localName)]));
              const { operator } = assignment;
              let newExpr;
              newExpr = operator === "=" ? assignment : operator === "&&=" || operator === "||=" || operator === "??=" ? _core.types.assignmentExpression("=", assignment.left, _core.types.logicalExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)) : _core.types.assignmentExpression("=", assignment.left, _core.types.binaryExpression(operator.slice(0, -1), _core.types.cloneNode(assignment.left), assignment.right)), path4.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, newExpr, path4.scope)), requeueInParent(path4), path4.skip();
            }
          } else {
            const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path4.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
            id && (path4.node.right = _core.types.sequenceExpression([path4.node.right, buildImportThrow(id)]));
            const items = [];
            if (programScopeIds.forEach((localName) => {
              const exportedNames = exported.get(localName) || [];
              exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path4.scope));
            }), items.length > 0) {
              let node = _core.types.sequenceExpression(items);
              path4.parentPath.isExpressionStatement() && (node = _core.types.expressionStatement(node), node._blockHoist = path4.parentPath.node._blockHoist);
              requeueInParent(path4.insertAfter(node)[0]);
            }
          }
      } }, ForXStatement(path4) {
        const { scope, node } = path4, { left } = node, { exported, imported, scope: programScope } = this;
        if (!_core.types.isVariableDeclaration(left)) {
          let importConstViolationName, didTransformExport = false;
          const loopBodyScope = path4.get("body").scope;
          for (const name of Object.keys(_core.types.getOuterBindingIdentifiers(left)))
            programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = true, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
          if (!didTransformExport && !importConstViolationName)
            return;
          path4.ensureBlock();
          const bodyPath = path4.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
          path4.get("left").replaceWith(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(newLoopId))])), scope.registerDeclaration(path4.get("left")), didTransformExport && bodyPath.unshiftContainer("body", _core.types.expressionStatement(_core.types.assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", _core.types.expressionStatement(buildImportThrow(importConstViolationName)));
        }
      } };
    }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath) {
        rewriteThisVisitor || (rewriteThisVisitor = _traverse.visitors.environmentVisitor({ ThisExpression(path4) {
          path4.replaceWith(_core.types.unaryExpression("void", _core.types.numericLiteral(0), true));
        } }), rewriteThisVisitor.noScope = true);
        (0, _traverse.default)(programPath.node, rewriteThisVisitor);
      };
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
      let rewriteThisVisitor;
    }, "./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(callee, thisNode, args, optional) {
        return args.length === 1 && isSpreadElement(args[0]) && isIdentifier(args[0].argument, { name: "arguments" }) ? optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), false, true), [thisNode, args[0].argument], false) : callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]) : optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("call"), false, true), [thisNode, ...args], false) : callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { callExpression, identifier, isIdentifier, isSpreadElement, memberExpression, optionalCallExpression, optionalMemberExpression } = _t;
    }, "./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.declare = declare, exports2.declarePreset = undefined;
      const apiPolyfills = { assertVersion: (api) => (range) => {
        (function(range2, version) {
          if (typeof range2 == "number") {
            if (!Number.isInteger(range2))
              throw new Error("Expected string or integer value.");
            range2 = `^${range2}.0.0-0`;
          }
          if (typeof range2 != "string")
            throw new Error("Expected string or integer value.");
          const limit = Error.stackTraceLimit;
          typeof limit == "number" && limit < 25 && (Error.stackTraceLimit = 25);
          let err;
          err = version.slice(0, 2) === "7." ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range2}", but was loaded with "${version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
          typeof limit == "number" && (Error.stackTraceLimit = limit);
          throw Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version, range: range2 });
        })(range, api.version);
      } };
      function declare(builder) {
        return (api, options, dirname2) => {
          var _clonedApi2;
          let clonedApi;
          for (const name of Object.keys(apiPolyfills)) {
            api[name] || (clonedApi != null || (clonedApi = copyApiObject(api)), clonedApi[name] = apiPolyfills[name](clonedApi));
          }
          return builder((_clonedApi2 = clonedApi) != null ? _clonedApi2 : api, options || {}, dirname2);
        };
      }
      Object.assign(apiPolyfills, { targets: () => () => ({}), assumption: () => () => {
      }, addExternalDependency: () => () => {
      } });
      exports2.declarePreset = declare;
      function copyApiObject(api) {
        let proto = null;
        return typeof api.version == "string" && /^7\./.test(api.version) && (proto = Object.getPrototypeOf(api), !proto || hasOwnProperty.call(proto, "version") && hasOwnProperty.call(proto, "transform") && hasOwnProperty.call(proto, "template") && hasOwnProperty.call(proto, "types") || (proto = null)), Object.assign({}, proto, api);
      }
    }, "./node_modules/.pnpm/@babel+helper-replace-supers@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-replace-supers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.25.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.25.9/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js");
      const { assignmentExpression, callExpression, cloneNode, identifier, memberExpression, sequenceExpression, stringLiteral, thisExpression } = _core.types;
      exports2.environmentVisitor = _traverse.visitors.environmentVisitor({}), exports2.skipAllButComputedKey = function(path4) {
        path4.skip(), path4.node.computed && path4.context.maybeQueue(path4.get("key"));
      };
      const visitor = _traverse.visitors.environmentVisitor({ Super(path4, state) {
        const { node, parentPath } = path4;
        parentPath.isMemberExpression({ object: node }) && state.handle(parentPath);
      } }), unshadowSuperBindingVisitor = _traverse.visitors.environmentVisitor({ Scopable(path4, { refName }) {
        const binding = path4.scope.getOwnBinding(refName);
        binding && binding.identifier.name === refName && path4.scope.rename(refName);
      } }), specHandlers = { memoise(superMember, count) {
        const { scope, node } = superMember, { computed, property } = node;
        if (!computed)
          return;
        const memo = scope.maybeGenerateMemoised(property);
        memo && this.memoiser.set(property, memo, count);
      }, prop(superMember) {
        const { computed, property } = superMember.node;
        return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
      }, _getPrototypeOfExpression() {
        const objectRef = cloneNode(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
        return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
      }, get(superMember) {
        const objectRef = cloneNode(this.getObjectRef());
        return callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), ...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]]);
      }, _call(superMember, args, optional) {
        const objectRef = cloneNode(this.getObjectRef());
        let argsNode;
        argsNode = args.length === 1 && _core.types.isSpreadElement(args[0]) && (_core.types.isIdentifier(args[0].argument) || _core.types.isArrayExpression(args[0].argument)) ? args[0].argument : _core.types.arrayExpression(args);
        const call = _core.types.callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), _core.types.numericLiteral(2 | (this.isStatic || this.isPrivateMethod ? 0 : 1))]);
        return optional ? _core.types.optionalCallExpression(call, [argsNode], true) : callExpression(call, [argsNode]);
      }, set(superMember, value2) {
        const objectRef = cloneNode(this.getObjectRef());
        return callExpression(this.file.addHelper("superPropSet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), value2, thisExpression(), _core.types.numericLiteral(superMember.isInStrictMode() ? 1 : 0), ...this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)]]);
      }, destructureSet(superMember) {
        throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
      }, call(superMember, args) {
        return this._call(superMember, args, false);
      }, optionalCall(superMember, args) {
        return this._call(superMember, args, true);
      }, delete(superMember) {
        return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
      } }, specHandlers_old = { memoise(superMember, count) {
        const { scope, node } = superMember, { computed, property } = node;
        if (!computed)
          return;
        const memo = scope.maybeGenerateMemoised(property);
        memo && this.memoiser.set(property, memo, count);
      }, prop(superMember) {
        const { computed, property } = superMember.node;
        return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
      }, _getPrototypeOfExpression() {
        const objectRef = cloneNode(this.getObjectRef()), targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
        return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
      }, get(superMember) {
        return this._get(superMember);
      }, _get(superMember) {
        const proto = this._getPrototypeOfExpression();
        return callExpression(this.file.addHelper("get"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), thisExpression()]);
      }, set(superMember, value2) {
        const proto = this._getPrototypeOfExpression();
        return callExpression(this.file.addHelper("set"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), value2, thisExpression(), _core.types.booleanLiteral(superMember.isInStrictMode())]);
      }, destructureSet(superMember) {
        throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
      }, call(superMember, args) {
        return (0, _helperOptimiseCallExpression.default)(this._get(superMember), thisExpression(), args, false);
      }, optionalCall(superMember, args) {
        return (0, _helperOptimiseCallExpression.default)(this._get(superMember), cloneNode(thisExpression()), args, true);
      }, delete(superMember) {
        return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
      } }, looseHandlers = Object.assign({}, specHandlers, { prop(superMember) {
        const { property } = superMember.node;
        return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : cloneNode(property);
      }, get(superMember) {
        const { isStatic, getSuperRef } = this, { computed } = superMember.node, prop = this.prop(superMember);
        let object;
        var _getSuperRef, _getSuperRef2;
        isStatic ? object = (_getSuperRef = getSuperRef()) != null ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype")) : object = memberExpression((_getSuperRef2 = getSuperRef()) != null ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
        return memberExpression(object, prop, computed);
      }, set(superMember, value2) {
        const { computed } = superMember.node, prop = this.prop(superMember);
        return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value2);
      }, destructureSet(superMember) {
        const { computed } = superMember.node, prop = this.prop(superMember);
        return memberExpression(thisExpression(), prop, computed);
      }, call(superMember, args) {
        return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
      }, optionalCall(superMember, args) {
        return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
      } });
      exports2.default = class {
        constructor(opts) {
          var _opts$constantSuper;
          const path4 = opts.methodPath;
          this.methodPath = path4, this.isDerivedConstructor = path4.isClassMethod({ kind: "constructor" }) && !!opts.superRef, this.isStatic = path4.isObjectMethod() || path4.node.static || (path4.isStaticBlock == null ? undefined : path4.isStaticBlock()), this.isPrivateMethod = path4.isPrivate() && path4.isMethod(), this.file = opts.file, this.constantSuper = (_opts$constantSuper = opts.constantSuper) != null ? _opts$constantSuper : opts.isLoose, this.opts = opts;
        }
        getObjectRef() {
          return cloneNode(this.opts.objectRef || this.opts.getObjectRef());
        }
        getSuperRef() {
          return this.opts.superRef ? cloneNode(this.opts.superRef) : this.opts.getSuperRef ? cloneNode(this.opts.getSuperRef()) : undefined;
        }
        replace() {
          const { methodPath } = this;
          this.opts.refToPreserve && methodPath.traverse(unshadowSuperBindingVisitor, { refName: this.opts.refToPreserve.name });
          const handler = this.constantSuper ? looseHandlers : this.file.availableHelper("superPropSet") ? specHandlers : specHandlers_old;
          visitor.shouldSkip = (path4) => {
            if (path4.parentPath === methodPath && (path4.parentKey === "decorators" || path4.parentKey === "key"))
              return true;
          }, (0, _helperMemberExpressionToFunctions.default)(methodPath, visitor, Object.assign({ file: this.file, scope: this.methodPath.scope, isDerivedConstructor: this.isDerivedConstructor, isStatic: this.isStatic, isPrivateMethod: this.isPrivateMethod, getObjectRef: this.getObjectRef.bind(this), getSuperRef: this.getSuperRef.bind(this), boundGet: handler.get }, handler));
        }
      };
    }, "./node_modules/.pnpm/@babel+helper-simple-access@7.25.9/node_modules/@babel/helper-simple-access/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.A = function(path4, bindingNames) {
        var _arguments$;
        path4.traverse(simpleAssignmentVisitor, { scope: path4.scope, bindingNames, seen: new WeakSet, includeUpdateExpression: (_arguments$ = arguments[2]) == null || _arguments$ });
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { LOGICAL_OPERATORS, assignmentExpression, binaryExpression, cloneNode, identifier, logicalExpression, numericLiteral, sequenceExpression, unaryExpression } = _t, simpleAssignmentVisitor = { AssignmentExpression: { exit(path4) {
        const { scope, seen, bindingNames } = this;
        if (path4.node.operator === "=")
          return;
        if (seen.has(path4.node))
          return;
        seen.add(path4.node);
        const left = path4.get("left");
        if (!left.isIdentifier())
          return;
        const localName = left.node.name;
        if (!bindingNames.has(localName))
          return;
        if (scope.getBinding(localName) !== path4.scope.getBinding(localName))
          return;
        const operator = path4.node.operator.slice(0, -1);
        LOGICAL_OPERATORS.includes(operator) ? path4.replaceWith(logicalExpression(operator, path4.node.left, assignmentExpression("=", cloneNode(path4.node.left), path4.node.right))) : (path4.node.right = binaryExpression(operator, cloneNode(path4.node.left), path4.node.right), path4.node.operator = "=");
      } } };
      simpleAssignmentVisitor.UpdateExpression = { exit(path4) {
        if (!this.includeUpdateExpression)
          return;
        const { scope, bindingNames } = this, arg = path4.get("argument");
        if (!arg.isIdentifier())
          return;
        const localName = arg.node.name;
        if (bindingNames.has(localName) && scope.getBinding(localName) === path4.scope.getBinding(localName))
          if (path4.parentPath.isExpressionStatement() && !path4.isCompletionRecord()) {
            const operator = path4.node.operator === "++" ? "+=" : "-=";
            path4.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
          } else if (path4.node.prefix)
            path4.replaceWith(assignmentExpression("=", identifier(localName), binaryExpression(path4.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
          else {
            const old = path4.scope.generateUidIdentifierBasedOnNode(arg.node, "old"), varName = old.name;
            path4.scope.push({ id: old });
            const binary = binaryExpression(path4.node.operator[0], identifier(varName), numericLiteral(1));
            path4.replaceWith(sequenceExpression([assignmentExpression("=", identifier(varName), unaryExpression("+", arg.node)), assignmentExpression("=", cloneNode(arg.node), binary), identifier(varName)]));
          }
      } };
    }, "./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isTransparentExprWrapper = isTransparentExprWrapper, exports2.skipTransparentExprWrapperNodes = function(node) {
        for (;isTransparentExprWrapper(node); )
          node = node.expression;
        return node;
      }, exports2.skipTransparentExprWrappers = function(path4) {
        for (;isTransparentExprWrapper(path4.node); )
          path4 = path4.get("expression");
        return path4;
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { isParenthesizedExpression, isTSAsExpression, isTSNonNullExpression, isTSSatisfiesExpression, isTSTypeAssertion, isTypeCastExpression } = _t;
      function isTransparentExprWrapper(node) {
        return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
      }
    }, "./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.readCodePoint = readCodePoint, exports2.readInt = readInt, exports2.readStringContents = function(type, input, pos, lineStart, curLine, errors) {
        const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
        let out = "", firstInvalidLoc = null, chunkStart = pos;
        const { length } = input;
        for (;; ) {
          if (pos >= length) {
            errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
            break;
          }
          const ch = input.charCodeAt(pos);
          if (isStringEnd(type, ch, input, pos)) {
            out += input.slice(chunkStart, pos);
            break;
          }
          if (ch === 92) {
            out += input.slice(chunkStart, pos);
            const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
            res.ch !== null || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
          } else
            ch === 8232 || ch === 8233 ? (++curLine, lineStart = ++pos) : ch === 10 || ch === 13 ? type === "template" ? (out += input.slice(chunkStart, pos) + `
`, ++pos, ch === 13 && input.charCodeAt(pos) === 10 && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
        }
        return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
      };
      var _isDigit = function(code) {
        return code >= 48 && code <= 57;
      };
      const forbiddenNumericSeparatorSiblings = { decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => ch === 48 || ch === 49, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
      function isStringEnd(type, ch, input, pos) {
        return type === "template" ? ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123 : ch === (type === "double" ? 34 : 39);
      }
      function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
        const throwOnInvalid = !inTemplate;
        pos++;
        const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
        switch (ch) {
          case 110:
            return res(`
`);
          case 114:
            return res("\r");
          case 120: {
            let code;
            return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(code === null ? null : String.fromCharCode(code));
          }
          case 117: {
            let code;
            return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(code === null ? null : String.fromCodePoint(code));
          }
          case 116:
            return res("\t");
          case 98:
            return res("\b");
          case 118:
            return res("\v");
          case 102:
            return res("\f");
          case 13:
            input.charCodeAt(pos) === 10 && ++pos;
          case 10:
            lineStart = pos, ++curLine;
          case 8232:
          case 8233:
            return res("");
          case 56:
          case 57:
            if (inTemplate)
              return res(null);
            errors.strictNumericEscape(pos - 1, lineStart, curLine);
          default:
            if (ch >= 48 && ch <= 55) {
              const startPos = pos - 1;
              let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
              octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
              const next = input.charCodeAt(pos);
              if (octalStr !== "0" || next === 56 || next === 57) {
                if (inTemplate)
                  return res(null);
                errors.strictNumericEscape(startPos, lineStart, curLine);
              }
              return res(String.fromCharCode(octal));
            }
            return res(String.fromCharCode(ch));
        }
      }
      function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
        const initialPos = pos;
        let n;
        return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), n === null && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
      }
      function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
        const start = pos, forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
        let invalid = false, total = 0;
        for (let i = 0, e = len == null ? 1 / 0 : len;i < e; ++i) {
          const code = input.charCodeAt(pos);
          let val;
          if (code !== 95 || allowNumSeparator === "bail") {
            if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix) {
              if (val <= 9 && bailOnError)
                return { n: null, pos };
              if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix))
                val = 0;
              else {
                if (!forceLen)
                  break;
                val = 0, invalid = true;
              }
            }
            ++pos, total = total * radix + val;
          } else {
            const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
            if (allowNumSeparator) {
              if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                if (bailOnError)
                  return { n: null, pos };
                errors.unexpectedNumericSeparator(pos, lineStart, curLine);
              }
            } else {
              if (bailOnError)
                return { n: null, pos };
              errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
            }
            ++pos;
          }
        }
        return pos === start || len != null && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
      }
      function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
        let code;
        if (input.charCodeAt(pos) === 123) {
          if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, code !== null && code > 1114111) {
            if (!throwOnInvalid)
              return { code: null, pos };
            errors.invalidCodePoint(pos, lineStart, curLine);
          }
        } else
          ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
        return { code, pos };
      }
    }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIdentifierChar = isIdentifierChar, exports2.isIdentifierName = function(name) {
        let isFirst = true;
        for (let i = 0;i < name.length; i++) {
          let cp = name.charCodeAt(i);
          if ((64512 & cp) == 55296 && i + 1 < name.length) {
            const trail = name.charCodeAt(++i);
            (64512 & trail) == 56320 && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
          }
          if (isFirst) {
            if (isFirst = false, !isIdentifierStart(cp))
              return false;
          } else if (!isIdentifierChar(cp))
            return false;
        }
        return !isFirst;
      }, exports2.isIdentifierStart = isIdentifierStart;
      let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
      const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code, set) {
        let pos = 65536;
        for (let i = 0, length = set.length;i < length; i += 2) {
          if (pos += set[i], pos > code)
            return false;
          if (pos += set[i + 1], pos >= code)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code) {
        return code < 65 ? code === 36 : code <= 90 || (code < 97 ? code === 95 : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes)));
      }
      function isIdentifierChar(code) {
        return code < 48 ? code === 36 : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? code === 95 : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes))));
      }
    }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "isIdentifierChar", { enumerable: true, get: function() {
        return _identifier.isIdentifierChar;
      } }), Object.defineProperty(exports2, "isIdentifierName", { enumerable: true, get: function() {
        return _identifier.isIdentifierName;
      } }), Object.defineProperty(exports2, "isIdentifierStart", { enumerable: true, get: function() {
        return _identifier.isIdentifierStart;
      } }), Object.defineProperty(exports2, "isKeyword", { enumerable: true, get: function() {
        return _keyword.isKeyword;
      } }), Object.defineProperty(exports2, "isReservedWord", { enumerable: true, get: function() {
        return _keyword.isReservedWord;
      } }), Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", { enumerable: true, get: function() {
        return _keyword.isStrictBindOnlyReservedWord;
      } }), Object.defineProperty(exports2, "isStrictBindReservedWord", { enumerable: true, get: function() {
        return _keyword.isStrictBindReservedWord;
      } }), Object.defineProperty(exports2, "isStrictReservedWord", { enumerable: true, get: function() {
        return _keyword.isStrictReservedWord;
      } });
      var _identifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/identifier.js"), _keyword = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js");
    }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/keyword.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isKeyword = function(word) {
        return keywords.has(word);
      }, exports2.isReservedWord = isReservedWord, exports2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord, exports2.isStrictBindReservedWord = function(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
      }, exports2.isStrictReservedWord = isStrictReservedWord;
      const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
      function isReservedWord(word, inModule) {
        return inModule && word === "await" || word === "enum";
      }
      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
      }
      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word);
      }
    }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.findSuggestion = function(str, arr) {
        const distances = arr.map((el) => function(a, b) {
          let i, j, t = [], u = [];
          const m = a.length, n = b.length;
          if (!m)
            return n;
          if (!n)
            return m;
          for (j = 0;j <= n; j++)
            t[j] = j;
          for (i = 1;i <= m; i++) {
            for (u = [i], j = 1;j <= n; j++)
              u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
            t = u;
          }
          return u[n];
        }(el, str));
        return arr[distances.indexOf(min(...distances))];
      };
      const { min } = Math;
    }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "OptionValidator", { enumerable: true, get: function() {
        return _validator.OptionValidator;
      } }), Object.defineProperty(exports2, "findSuggestion", { enumerable: true, get: function() {
        return _findSuggestion.findSuggestion;
      } });
      var _validator = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js"), _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
    }, "./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.OptionValidator = undefined;
      var _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
      exports2.OptionValidator = class {
        constructor(descriptor) {
          this.descriptor = descriptor;
        }
        validateTopLevelOptions(options, TopLevelOptionShape) {
          const validOptionNames = Object.keys(TopLevelOptionShape);
          for (const option of Object.keys(options))
            if (!validOptionNames.includes(option))
              throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
        }
        validateBooleanOption(name, value2, defaultValue) {
          return value2 === undefined ? defaultValue : (this.invariant(typeof value2 == "boolean", `'${name}' option must be a boolean.`), value2);
        }
        validateStringOption(name, value2, defaultValue) {
          return value2 === undefined ? defaultValue : (this.invariant(typeof value2 == "string", `'${name}' option must be a string.`), value2);
        }
        invariant(condition, message) {
          if (!condition)
            throw new Error(this.formatMessage(message));
        }
        formatMessage(message) {
          return `${this.descriptor}: ${message}`;
        }
      };
    }, "./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
      function helper(minVersion, source, metadata) {
        return Object.freeze({ minVersion, ast: () => _template.default.program.ast(source, { preserveComments: true }), metadata });
      }
      const helpers = exports2.default = { __proto__: null, OverloadYield: helper("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", { globals: [], locals: { _OverloadYield: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_OverloadYield", dependencies: {} }), applyDecoratedDescriptor: helper("7.0.0-beta.0", 'function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((function(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,("value"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initializer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}', { globals: ["Object"], locals: { _applyDecoratedDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_applyDecoratedDescriptor", dependencies: {} }), applyDecs2311: helper("7.24.0", 'function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for("Symbol.metadata"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if("function"!=typeof e&&(r||void 0!==e))throw new TypeError(t+" must "+(n||"be")+" a function"+(r?"":" or undefined"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError("Attempted to access private element on non-instance")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?"get":j||D?"set":"value";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,"get"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?"":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error("Decorating two elements with the same name ("+P[F].name+") is not supported yet");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],"A decorator","be",!0),z=n?h[O-1]:void 0,A={},H={kind:["field","accessor","method","getter","setter","class"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError("attempted to call addInitializer after decoration was finished");b(t,"An initializer","be",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,"class decorators","return")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I("get",0,d):function(e){return e[r]}),E||S||(c.set=f?I("set",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.get,set:P.set}:P[F],H),A.v=1,D){if("object"==typeof N&&N)(c=b(N.get,"accessor.get"))&&(P.get=c),(c=b(N.set,"accessor.set"))&&(P.set=c),(c=b(N.init,"accessor.init"))&&k.unshift(c);else if(void 0!==N)throw new TypeError("accessor decorators must return an object with get, set, or init properties or undefined")}else b(N,(l?"field":"method")+" decorators","return")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I("get",s),I("set",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?"#"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}', { globals: ["Symbol", "Object", "TypeError", "Error"], locals: { applyDecs2311: ["body.0.id"] }, exportBindingAssignments: [], exportName: "applyDecs2311", dependencies: { checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.consequent.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"], toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.alternate.callee"] } }), arrayLikeToArray: helper("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}", { globals: ["Array"], locals: { _arrayLikeToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayLikeToArray", dependencies: {} }), arrayWithHoles: helper("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", { globals: ["Array"], locals: { _arrayWithHoles: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayWithHoles", dependencies: {} }), arrayWithoutHoles: helper("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", { globals: ["Array"], locals: { _arrayWithoutHoles: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_arrayWithoutHoles", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"] } }), assertClassBrand: helper("7.24.0", 'function _assertClassBrand(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}', { globals: ["TypeError"], locals: { _assertClassBrand: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_assertClassBrand", dependencies: {} }), assertThisInitialized: helper("7.0.0-beta.0", `function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}`, { globals: ["ReferenceError"], locals: { _assertThisInitialized: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_assertThisInitialized", dependencies: {} }), asyncGeneratorDelegate: helper("7.0.0-beta.0", 'function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump("next",t)},"function"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump("throw",t)}),"function"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump("return",t)}),e}', { globals: ["Promise", "Symbol"], locals: { _asyncGeneratorDelegate: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_asyncGeneratorDelegate", dependencies: { OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"] } }), asyncIterator: helper("7.15.9", 'function _asyncIterator(r){var n,t,o,e=2;for("undefined"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t="@@asyncIterator",o="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}', { globals: ["Symbol", "TypeError", "Object", "Promise"], locals: { _asyncIterator: ["body.0.id"], AsyncFromSyncIterator: ["body.1.id", "body.0.body.body.1.body.body.1.consequent.argument.callee", "body.1.body.body.1.argument.expressions.1.left.object", "body.1.body.body.1.argument.expressions.2.callee", "body.1.body.body.1.argument.expressions.0.left"] }, exportBindingAssignments: [], exportName: "_asyncIterator", dependencies: {} }), asyncToGenerator: helper("7.0.0-beta.0", 'function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,"next",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,"throw",n)}_next(void 0)}))}}', { globals: ["Promise"], locals: { asyncGeneratorStep: ["body.0.id", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.callee", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"], _asyncToGenerator: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_asyncToGenerator", dependencies: {} }), awaitAsyncGenerator: helper("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", { globals: [], locals: { _awaitAsyncGenerator: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_awaitAsyncGenerator", dependencies: { OverloadYield: ["body.0.body.body.0.argument.callee"] } }), callSuper: helper("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", { globals: ["Reflect"], locals: { _callSuper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_callSuper", dependencies: { getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.consequent.arguments.2.object.callee"], isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"], possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"] } }), checkInRHS: helper("7.20.5", `function _checkInRHS(e){if(Object(e)!==e)throw TypeError("right-hand side of 'in' should be an object, got "+(null!==e?typeof e:"null"));return e}`, { globals: ["Object", "TypeError"], locals: { _checkInRHS: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_checkInRHS", dependencies: {} }), checkPrivateRedeclaration: helper("7.14.1", 'function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}', { globals: ["TypeError"], locals: { _checkPrivateRedeclaration: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_checkPrivateRedeclaration", dependencies: {} }), classCallCheck: helper("7.0.0-beta.0", 'function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a function")}', { globals: ["TypeError"], locals: { _classCallCheck: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCallCheck", dependencies: {} }), classNameTDZError: helper("7.0.0-beta.0", `function _classNameTDZError(e){throw new ReferenceError('Class "'+e+'" cannot be referenced in computed property keys.')}`, { globals: ["ReferenceError"], locals: { _classNameTDZError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classNameTDZError", dependencies: {} }), classPrivateFieldGet2: helper("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", { globals: [], locals: { _classPrivateFieldGet2: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldGet2", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] } }), classPrivateFieldInitSpec: helper("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", { globals: [], locals: { _classPrivateFieldInitSpec: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldInitSpec", dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] } }), classPrivateFieldLooseBase: helper("7.0.0-beta.0", 'function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}', { globals: ["TypeError"], locals: { _classPrivateFieldBase: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldBase", dependencies: {} }), classPrivateFieldLooseKey: helper("7.0.0-beta.0", 'var id=0;function _classPrivateFieldKey(e){return"__private_"+id+++"_"+e}', { globals: [], locals: { id: ["body.0.declarations.0.id", "body.1.body.body.0.argument.left.left.right.argument", "body.1.body.body.0.argument.left.left.right.argument"], _classPrivateFieldKey: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldKey", dependencies: {} }), classPrivateFieldSet2: helper("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", { globals: [], locals: { _classPrivateFieldSet2: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldSet2", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] } }), classPrivateGetter: helper("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", { globals: [], locals: { _classPrivateGetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateGetter", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"] } }), classPrivateMethodInitSpec: helper("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", { globals: [], locals: { _classPrivateMethodInitSpec: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodInitSpec", dependencies: { checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"] } }), classPrivateSetter: helper("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", { globals: [], locals: { _classPrivateSetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateSetter", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"] } }), classStaticPrivateMethodGet: helper("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", { globals: [], locals: { _classStaticPrivateMethodGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateMethodGet", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] } }), construct: helper("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", { globals: ["Reflect"], locals: { _construct: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_construct", dependencies: { isNativeReflectConstruct: ["body.0.body.body.0.test.callee"], setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"] } }), createClass: helper("7.0.0-beta.0", 'function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}', { globals: ["Object"], locals: { _defineProperties: ["body.0.id", "body.1.body.body.0.argument.expressions.0.right.callee", "body.1.body.body.0.argument.expressions.1.right.callee"], _createClass: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_createClass", dependencies: { toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"] } }), createForOfIteratorHelper: helper("7.9.0", 'function _createForOfIteratorHelper(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var n=0,F=function(){};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,u=!1;return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}', { globals: ["Symbol", "Array", "TypeError"], locals: { _createForOfIteratorHelper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createForOfIteratorHelper", dependencies: { unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"] } }), createForOfIteratorHelperLoose: helper("7.9.0", 'function _createForOfIteratorHelperLoose(r,e){var t="undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["Symbol", "Array", "TypeError"], locals: { _createForOfIteratorHelperLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createForOfIteratorHelperLoose", dependencies: { unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"] } }), createSuper: helper("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,e)}}", { globals: ["Reflect"], locals: { _createSuper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_createSuper", dependencies: { getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.consequent.body.0.declarations.0.init.object.callee"], isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"], possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"] } }), decorate: helper("7.1.5", 'function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.initializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return e};var e={elementsDefinitionOrder:[["method"],["field"]],initializeInstanceElements:function(e,r){["method","field"].forEach((function(t){r.forEach((function(r){r.kind===t&&"own"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){var t=e.prototype;["method","field"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&("static"===o||"prototype"===o)){var n="static"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if("field"===r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.element),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);return i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw new TypeError("Duplicated element ("+e.key+")");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPlacement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elements){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError("Duplicated element ("+e[s].key+")")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),"field"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=this.toElementDescriptor(e);return this.disallowProperty(e,"finisher","An element descriptor"),this.disallowProperty(e,"extras","An element descriptor"),r}),this)},toElementDescriptor:function(e){var r=e.kind+"";if("method"!==r&&"field"!==r)throw new TypeError(\'An element descriptor\\\'s .kind property must be either "method" or "field", but a decorator created an element descriptor with .kind "\'+r+\'"\');var t=toPropertyKey(e.key),i=e.placement+"";if("static"!==i&&"prototype"!==i&&"own"!==i)throw new TypeError(\'An element descriptor\\\'s .placement property must be one of "static", "prototype" or "own", but a decorator created an element descriptor with .placement "\'+i+\'"\');var o=e.descriptor;this.disallowProperty(e,"elements","An element descriptor");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return"field"!==r?this.disallowProperty(e,"initializer","A method descriptor"):(this.disallowProperty(o,"get","The property descriptor of a field descriptor"),this.disallowProperty(o,"set","The property descriptor of a field descriptor"),this.disallowProperty(o,"value","The property descriptor of a field descriptor"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_optionalCallableProperty(e,"finisher"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:"class",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:"Descriptor",configurable:!0}),r},toClassDescriptor:function(e){var r=e.kind+"";if("class"!==r)throw new TypeError(\'A class descriptor\\\'s .kind property must be "class", but a decorator created a class descriptor with .kind "\'+r+\'"\');this.disallowProperty(e,"key","A class descriptor"),this.disallowProperty(e,"placement","A class descriptor"),this.disallowProperty(e,"descriptor","A class descriptor"),this.disallowProperty(e,"initializer","A class descriptor"),this.disallowProperty(e,"extras","A class descriptor");var t=_optionalCallableProperty(e,"finisher");return{elements:this.toElementDescriptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if("function"!=typeof i)throw new TypeError("Finishers must return a constructor.");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw new TypeError(t+" can\'t have a ."+r+" property.")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);"method"===e.kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:"get"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:"set"===e.kind?r={set:e.value,configurable:!0,enumerable:!1}:"field"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:"field"===e.kind?"field":"method",key:t,placement:e.static?"static":"field"===e.kind?"own":"prototype",descriptor:r};return e.decorators&&(i.decorators=e.decorators),"field"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.descriptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return"method"===e.kind&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if("method"===o.kind&&(i=r.find(isSameElement)))if(_isDataDescriptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError("Duplicated methods ("+o.key+") can\'t be decorated.");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError("Decorators can\'t be placed on different accessors with for the same property ("+o.key+").");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&"function"!=typeof t)throw new TypeError("Expected \'"+r+"\' to be a function");return t}', { globals: ["Object", "TypeError", "Symbol", "ReferenceError"], locals: { _decorate: ["body.0.id"], _getDecoratorsApi: ["body.1.id", "body.0.body.body.0.declarations.0.init.callee", "body.1.body.body.0.expression.left"], _createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"], _coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"], _coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"], _hasDecorators: ["body.5.id", "body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.body.body.0.test.argument.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.right.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"], _isDataDescriptor: ["body.6.id", "body.4.body.body.0.body.body.1.consequent.test.left.callee", "body.4.body.body.0.body.body.1.consequent.test.right.callee"], _optionalCallableProperty: ["body.7.id", "body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties.1.value.callee", "body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"] }, exportBindingAssignments: [], exportName: "_decorate", dependencies: { toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"], toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.body.0.declarations.1.init.callee"] } }), defaults: helper("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.getOwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", { globals: ["Object"], locals: { _defaults: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defaults", dependencies: {} }), defineAccessor: helper("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}", { globals: ["Object"], locals: { _defineAccessor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineAccessor", dependencies: {} }), defineProperty: helper("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}", { globals: ["Object"], locals: { _defineProperty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineProperty", dependencies: { toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"] } }), extends: helper("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", { globals: ["Object"], locals: { _extends: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_extends", dependencies: {} }), get: helper("7.0.0-beta.0", 'function _get(){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=superPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,arguments)}', { globals: ["Reflect", "Object"], locals: { _get: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_get", dependencies: { superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"] } }), getPrototypeOf: helper("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", { globals: ["Object"], locals: { _getPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_getPrototypeOf", dependencies: {} }), identity: helper("7.17.0", "function _identity(t){return t}", { globals: [], locals: { _identity: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_identity", dependencies: {} }), importDeferProxy: helper("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}", { globals: ["Proxy", "Reflect"], locals: { _importDeferProxy: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_importDeferProxy", dependencies: {} }), inherits: helper("7.0.0-beta.0", 'function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&setPrototypeOf(t,e)}', { globals: ["TypeError", "Object"], locals: { _inherits: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_inherits", dependencies: { setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"] } }), inheritsLoose: helper("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setPrototypeOf(t,o)}", { globals: ["Object"], locals: { _inheritsLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_inheritsLoose", dependencies: { setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"] } }), initializerDefineProperty: helper("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", { globals: ["Object"], locals: { _initializerDefineProperty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_initializerDefineProperty", dependencies: {} }), initializerWarningHelper: helper("7.0.0-beta.0", 'function _initializerWarningHelper(r,e){throw Error("Decorating class property failed. Please ensure that transform-class-properties is enabled and runs after the decorators transform.")}', { globals: ["Error"], locals: { _initializerWarningHelper: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_initializerWarningHelper", dependencies: {} }), instanceof: helper("7.0.0-beta.0", 'function _instanceof(n,e){return null!=e&&"undefined"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](n):n instanceof e}', { globals: ["Symbol"], locals: { _instanceof: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_instanceof", dependencies: {} }), interopRequireDefault: helper("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", { globals: [], locals: { _interopRequireDefault: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_interopRequireDefault", dependencies: {} }), interopRequireWildcard: helper("7.14.0", 'function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}', { globals: ["WeakMap", "Object"], locals: { _getRequireWildcardCache: ["body.0.id", "body.1.body.body.2.declarations.0.init.callee", "body.0.body.body.2.argument.callee.left"], _interopRequireWildcard: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_interopRequireWildcard", dependencies: {} }), isNativeFunction: helper("7.0.0-beta.0", 'function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf("[native code]")}catch(n){return"function"==typeof t}}', { globals: ["Function"], locals: { _isNativeFunction: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_isNativeFunction", dependencies: {} }), isNativeReflectConstruct: helper("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", { globals: ["Boolean", "Reflect"], locals: { _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"] }, exportBindingAssignments: ["body.0.body.body.1.argument.callee"], exportName: "_isNativeReflectConstruct", dependencies: {} }), iterableToArray: helper("7.0.0-beta.0", 'function _iterableToArray(r){if("undefined"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r["@@iterator"])return Array.from(r)}', { globals: ["Symbol", "Array"], locals: { _iterableToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_iterableToArray", dependencies: {} }), iterableToArrayLimit: helper("7.0.0-beta.0", 'function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}', { globals: ["Symbol", "Object"], locals: { _iterableToArrayLimit: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_iterableToArrayLimit", dependencies: {} }), jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:""+E,ref:null,props:r,_owner:null}}', { globals: ["Symbol", "Array"], locals: { REACT_ELEMENT_TYPE: ["body.0.declarations.0.id", "body.1.body.body.0.expression.left", "body.1.body.body.4.argument.properties.0.value", "body.1.body.body.0.expression.right.left"], _createRawReactElement: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_createRawReactElement", dependencies: {} }), maybeArrayLike: helper("7.9.0", 'function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&"number"==typeof a.length){var y=a.length;return arrayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}', { globals: ["Array"], locals: { _maybeArrayLike: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_maybeArrayLike", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"] } }), newArrowCheck: helper("7.0.0-beta.0", 'function _newArrowCheck(n,r){if(n!==r)throw new TypeError("Cannot instantiate an arrow function")}', { globals: ["TypeError"], locals: { _newArrowCheck: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_newArrowCheck", dependencies: {} }), nonIterableRest: helper("7.0.0-beta.0", 'function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["TypeError"], locals: { _nonIterableRest: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nonIterableRest", dependencies: {} }), nonIterableSpread: helper("7.0.0-beta.0", 'function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}', { globals: ["TypeError"], locals: { _nonIterableSpread: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nonIterableSpread", dependencies: {} }), nullishReceiverError: helper("7.22.6", 'function _nullishReceiverError(r){throw new TypeError("Cannot set property of null or undefined.")}', { globals: ["TypeError"], locals: { _nullishReceiverError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_nullishReceiverError", dependencies: {} }), objectDestructuringEmpty: helper("7.0.0-beta.0", 'function _objectDestructuringEmpty(t){if(null==t)throw new TypeError("Cannot destructure "+t)}', { globals: ["TypeError"], locals: { _objectDestructuringEmpty: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectDestructuringEmpty", dependencies: {} }), objectSpread2: helper("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", { globals: ["Object"], locals: { ownKeys: ["body.0.id", "body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee", "body.1.body.body.0.body.body.1.expression.alternate.alternate.callee.object.callee"], _objectSpread2: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_objectSpread2", dependencies: { defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"] } }), objectWithoutProperties: helper("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}", { globals: ["Object"], locals: { _objectWithoutProperties: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectWithoutProperties", dependencies: { objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"] } }), objectWithoutPropertiesLoose: helper("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}", { globals: [], locals: { _objectWithoutPropertiesLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectWithoutPropertiesLoose", dependencies: {} }), possibleConstructorReturn: helper("7.0.0-beta.0", 'function _possibleConstructorReturn(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return assertThisInitialized(t)}', { globals: ["TypeError"], locals: { _possibleConstructorReturn: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_possibleConstructorReturn", dependencies: { assertThisInitialized: ["body.0.body.body.2.argument.callee"] } }), readOnlyError: helper("7.0.0-beta.0", `function _readOnlyError(r){throw new TypeError('"'+r+'" is read-only')}`, { globals: ["TypeError"], locals: { _readOnlyError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_readOnlyError", dependencies: {} }), regeneratorRuntime: helper("7.18.0", `function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}`, { globals: ["Object", "Symbol", "Error", "TypeError", "isNaN", "Promise"], locals: { _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.expression.left"] }, exportBindingAssignments: ["body.0.body.body.0.expression"], exportName: "_regeneratorRuntime", dependencies: {} }), set: helper("7.0.0-beta.0", 'function set(e,r,t,o){return set="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOwnPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}function _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError("failed to set property");return t}', { globals: ["Reflect", "Object", "TypeError"], locals: { set: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.0.test.left.argument.callee", "body.0.body.body.0.argument.expressions.0.left"], _set: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_set", dependencies: { superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"], defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"] } }), setFunctionName: helper("7.23.6", 'function setFunctionName(e,t,n){"symbol"==typeof t&&(t=(t=t.description)?"["+t+"]":"");try{Object.defineProperty(e,"name",{configurable:!0,value:n?n+" "+t:t})}catch(e){}return e}', { globals: ["Object"], locals: { setFunctionName: ["body.0.id"] }, exportBindingAssignments: [], exportName: "setFunctionName", dependencies: {} }), setPrototypeOf: helper("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", { globals: ["Object"], locals: { _setPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_setPrototypeOf", dependencies: {} }), skipFirstGeneratorNext: helper("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.next(),r}}", { globals: [], locals: { _skipFirstGeneratorNext: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_skipFirstGeneratorNext", dependencies: {} }), slicedToArray: helper("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableToArray(r,e)||nonIterableRest()}", { globals: [], locals: { _slicedToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_slicedToArray", dependencies: { arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableRest: ["body.0.body.body.0.argument.right.callee"] } }), superPropBase: helper("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return t}", { globals: [], locals: { _superPropBase: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropBase", dependencies: { getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"] } }), superPropGet: helper("7.25.0", 'function _superPropGet(t,o,e,r){var p=get(getPrototypeOf(1&r?t.prototype:t),o,e);return 2&r&&"function"==typeof p?function(t){return p.apply(e,t)}:p}', { globals: [], locals: { _superPropGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropGet", dependencies: { get: ["body.0.body.body.0.declarations.0.init.callee"], getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"] } }), superPropSet: helper("7.25.0", "function _superPropSet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", { globals: [], locals: { _superPropSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_superPropSet", dependencies: { set: ["body.0.body.body.0.argument.callee"], getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"] } }), taggedTemplateLiteral: helper("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}", { globals: ["Object"], locals: { _taggedTemplateLiteral: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_taggedTemplateLiteral", dependencies: {} }), taggedTemplateLiteralLoose: helper("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", { globals: [], locals: { _taggedTemplateLiteralLoose: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_taggedTemplateLiteralLoose", dependencies: {} }), tdz: helper("7.5.5", 'function _tdzError(e){throw new ReferenceError(e+" is not defined - temporal dead zone")}', { globals: ["ReferenceError"], locals: { _tdzError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_tdzError", dependencies: {} }), temporalRef: helper("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", { globals: [], locals: { _temporalRef: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_temporalRef", dependencies: { temporalUndefined: ["body.0.body.body.0.argument.test.right"], tdz: ["body.0.body.body.0.argument.consequent.callee"] } }), temporalUndefined: helper("7.0.0-beta.0", "function _temporalUndefined(){}", { globals: [], locals: { _temporalUndefined: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_temporalUndefined", dependencies: {} }), toArray: helper("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableRest()}", { globals: [], locals: { _toArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toArray", dependencies: { arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableRest: ["body.0.body.body.0.argument.right.callee"] } }), toConsumableArray: helper("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableSpread()}", { globals: [], locals: { _toConsumableArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toConsumableArray", dependencies: { arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"], iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"], unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"], nonIterableSpread: ["body.0.body.body.0.argument.right.callee"] } }), toPrimitive: helper("7.1.5", 'function toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}', { globals: ["Symbol", "TypeError", "String", "Number"], locals: { toPrimitive: ["body.0.id"] }, exportBindingAssignments: [], exportName: "toPrimitive", dependencies: {} }), toPropertyKey: helper("7.1.5", 'function toPropertyKey(t){var i=toPrimitive(t,"string");return"symbol"==typeof i?i:i+""}', { globals: [], locals: { toPropertyKey: ["body.0.id"] }, exportBindingAssignments: [], exportName: "toPropertyKey", dependencies: { toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"] } }), toSetter: helper("7.24.0", 'function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},"_",{set:function(o){e[r]=o,t.apply(n,e)}})}', { globals: ["Object"], locals: { _toSetter: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_toSetter", dependencies: {} }), typeof: helper("7.0.0-beta.0", 'function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}', { globals: ["Symbol"], locals: { _typeof: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"], exportName: "_typeof", dependencies: {} }), unsupportedIterableToArray: helper("7.9.0", 'function _unsupportedIterableToArray(r,a){if(r){if("string"==typeof r)return arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}', { globals: ["Array"], locals: { _unsupportedIterableToArray: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_unsupportedIterableToArray", dependencies: { arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument.expressions.1.alternate.consequent.callee"] } }), usingCtx: helper("7.23.9", 'function _usingCtx(){var r="function"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return n.name="SuppressedError",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(r)var o=e[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for("Symbol.dispose")],r))var t=o;if("function"!=typeof o)throw new TypeError("Object is not disposable.");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)return s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}catch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n,next()}return next()}}}', { globals: ["SuppressedError", "Error", "Object", "TypeError", "Symbol", "Promise"], locals: { _usingCtx: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_usingCtx", dependencies: {} }), wrapAsyncGenerator: helper("7.0.0-beta.0", 'function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,arguments))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i="return"===r?"return":"next";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?"return":"normal",t)}),(function(e){resume("throw",e)}))}catch(e){settle("throw",e)}}function settle(e,n){switch(e){case"return":r.resolve({value:n,done:!0});break;case"throw":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},"function"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke("next",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke("throw",e)},AsyncGenerator.prototype.return=function(e){return this._invoke("return",e)};', { globals: ["Promise", "Symbol"], locals: { _wrapAsyncGenerator: ["body.0.id"], AsyncGenerator: ["body.1.id", "body.0.body.body.0.argument.body.body.0.argument.callee", "body.2.expression.expressions.0.left.object.object", "body.2.expression.expressions.1.left.object.object", "body.2.expression.expressions.2.left.object.object", "body.2.expression.expressions.3.left.object.object"] }, exportBindingAssignments: [], exportName: "_wrapAsyncGenerator", dependencies: { OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"] } }), wrapNativeSuper: helper("7.0.0-beta.0", 'function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(t){if(null===t||!isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}', { globals: ["Map", "TypeError", "Object"], locals: { _wrapNativeSuper: ["body.0.id", "body.0.body.body.1.argument.expressions.1.callee", "body.0.body.body.1.argument.expressions.0.left"] }, exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"], exportName: "_wrapNativeSuper", dependencies: { getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"], setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"], isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"], construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"] } }), wrapRegExp: helper("7.19.0", 'function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if("number"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if("string"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/g,(function(e,r){var t=o[r];return"$"+(Array.isArray(t)?t.join("$"):t)})))}if("function"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}', { globals: ["RegExp", "WeakMap", "Object", "Symbol", "Array"], locals: { _wrapRegExp: ["body.0.id", "body.0.body.body.4.argument.expressions.3.callee.object", "body.0.body.body.0.expression.left"] }, exportBindingAssignments: ["body.0.body.body.0.expression"], exportName: "_wrapRegExp", dependencies: { setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"], inherits: ["body.0.body.body.4.argument.expressions.0.callee"] } }), writeOnlyError: helper("7.12.13", `function _writeOnlyError(r){throw new TypeError('"'+r+'" is write-only')}`, { globals: ["TypeError"], locals: { _writeOnlyError: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_writeOnlyError", dependencies: {} }) };
      Object.assign(helpers, { AwaitValue: helper("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", { globals: [], locals: { _AwaitValue: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_AwaitValue", dependencies: {} }), applyDecs: helper("7.17.8", 'function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,"getMetadata"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,"constructor"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,"setMetadata"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for("Symbol.metadata")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for("Symbol.metadata")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,"addInitializer"),old_assertCallable(a,"An initializer"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var d,u,f={kind:c,name:l?"#"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error("attempted to call "+t+" after decoration was finished")}function old_assertMetadataKey(e){if("symbol"!=typeof e)throw new TypeError("Metadata keys must be symbols, received: "+e)}function old_assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if("object"!==a||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&old_assertCallable(t.get,"accessor.get"),void 0!==t.set&&old_assertCallable(t.set,"accessor.set"),void 0!==t.init&&old_assertCallable(t.init,"accessor.init"),void 0!==t.initializer&&old_assertCallable(t.initializer,"accessor.initializer")}else if("function"!==a)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(".initializer has been renamed to .init as of March 2022"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u="get"):3===o?(c={get:a[3]},u="get"):4===o?(c={set:a[3]},u="set"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],"#"+r,"set"),setFunctionName(a[3],"#"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),"function"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:"function"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if("function"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:"class",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}', { globals: ["Object", "Map", "Symbol", "Array", "Error", "TypeError", "console"], locals: { old_createMetadataMethodsForProperty: ["body.0.id", "body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"], old_convertMetadataMapToFinal: ["body.1.id", "body.13.body.body.1.argument.expressions.1.callee", "body.13.body.body.1.argument.expressions.3.callee"], old_createAddInitializerMethod: ["body.2.id", "body.3.body.body.3.test.expressions.0.right.right.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"], old_memberDec: ["body.3.id", "body.9.body.body.1.consequent.expression.left.right.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.left.right.right.callee"], old_assertNotFinished: ["body.4.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee", "body.2.body.body.0.argument.body.body.0.expression.expressions.0.callee"], old_assertMetadataKey: ["body.5.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"], old_assertCallable: ["body.6.id", "body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.0.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.2.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.3.right.callee"], old_assertValidReturnValue: ["body.7.id", "body.9.body.body.1.consequent.expression.right.expressions.0.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.0.callee", "body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressions.0.callee"], old_getInit: ["body.8.id", "body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"], old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"], old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"], old_pushInitializers: ["body.11.id", "body.10.body.body.1.expression.expressions.0.callee", "body.10.body.body.1.expression.expressions.1.callee"], old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"], applyDecs: ["body.13.id"] }, exportBindingAssignments: [], exportName: "applyDecs", dependencies: { setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2203: helper("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:s?"#"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),"function"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:"function"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:"class",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"], applyDecs2203Impl: ["body.1.declarations.0.id", "body.2.body.body.0.argument.callee.right.left", "body.2.body.body.0.argument.callee.left"], applyDecs2203: ["body.2.id"] }, exportBindingAssignments: [], exportName: "applyDecs2203", dependencies: {} }), applyDecs2203R: helper("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c="accessor";break;case 2:c="method";break;case 3:c="getter";break;case 4:c="setter";break;default:c="field"}var l,u,f={kind:c,name:o?"#"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u="get"):3===a?(c={get:r[3]},u="get"):4===a?(c={set:r[3]},u="set"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],"#"+n,"set"),setFunctionName(r[3],"#"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),"function"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:"function"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"], applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"] }, exportBindingAssignments: ["body.1.body.body.0.argument.callee"], exportName: "applyDecs2203R", dependencies: { setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2301: helper("7.21.0", 'function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished")}(t),assertCallable(r,"An initializer"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u="accessor";break;case 2:u="method";break;case 3:u="getter";break;case 4:u="setter";break;default:u="field"}var l,f,p={kind:u,name:s?"#"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if("function"!=typeof e)throw new TypeError(t+" must be a function")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if("object"!==r||null===t)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==t.get&&assertCallable(t.get,"accessor.get"),void 0!==t.set&&assertCallable(t.set,"accessor.set"),void 0!==t.init&&assertCallable(t.init,"accessor.init")}else if("function"!==r)throw new TypeError((0===e?"field":10===e?"class":"method")+" decorators must return a function or void 0")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f="get"):3===a?(u={get:r[3]},f="get"):4===a?(u={set:r[3]},f="set"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,"#"+n,"set"),setFunctionName(u[f||"value"],"#"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),"function"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:"function"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if("function"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:"class",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}', { globals: ["Error", "TypeError", "Object", "Map", "Array"], locals: { applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"], applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"] }, exportBindingAssignments: ["body.1.body.body.0.argument.callee"], exportName: "applyDecs2301", dependencies: { checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"], toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"] } }), applyDecs2305: helper("7.21.0", 'function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if("function"!=typeof e&&(n||void 0!==e))throw new TypeError(t+" must "+(r||"be")+" a function"+(n?"":" or undefined"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError("Attempted to access private element on non-instance")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?"get":4===o||d?"set":"value";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,"get"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?"":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:["field","accessor","method","getter","setter","class"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error("attempted to call addInitializer after decoration was finished");s(t,"An initializer","be",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),"class decorators","return"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,"get",m)),3!==o&&(F=i(w,"set",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if("object"==typeof P&&P)(y=s(P.get,"accessor.get"))&&(w.get=y),(y=s(P.set,"accessor.set"))&&(w.set=y),(y=s(P.init,"accessor.init"))&&S.push(y);else if(void 0!==P)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0")}else s(P,(p?"field":"method")+" decorators","return")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,"get"),i(w,"set")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for("Symbol.metadata"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for("Symbol.metadata")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+"/"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?"#"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}', { globals: ["TypeError", "Array", "Object", "Error", "Symbol", "Map"], locals: { applyDecs2305: ["body.0.id"] }, exportBindingAssignments: [], exportName: "applyDecs2305", dependencies: { checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"], setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"], toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alternate.callee"] } }), classApplyDescriptorDestructureSet: helper("7.13.10", 'function _classApplyDescriptorDestructureSet(e,t){if(t.set)return"__destrObj"in t||(t.__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError("attempted to set read only private field");return t}', { globals: ["TypeError"], locals: { _classApplyDescriptorDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorDestructureSet", dependencies: {} }), classApplyDescriptorGet: helper("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", { globals: [], locals: { _classApplyDescriptorGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorGet", dependencies: {} }), classApplyDescriptorSet: helper("7.13.10", 'function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=l}}', { globals: ["TypeError"], locals: { _classApplyDescriptorSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classApplyDescriptorSet", dependencies: {} }), classCheckPrivateStaticAccess: helper("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", { globals: [], locals: { _classCheckPrivateStaticAccess: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCheckPrivateStaticAccess", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.callee"] } }), classCheckPrivateStaticFieldDescriptor: helper("7.13.10", 'function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new TypeError("attempted to "+e+" private static field before its declaration")}', { globals: ["TypeError"], locals: { _classCheckPrivateStaticFieldDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classCheckPrivateStaticFieldDescriptor", dependencies: {} }), classExtractFieldDescriptor: helper("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", { globals: [], locals: { _classExtractFieldDescriptor: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classExtractFieldDescriptor", dependencies: { classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"] } }), classPrivateFieldDestructureSet: helper("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorDestructureSet(e,r)}", { globals: [], locals: { _classPrivateFieldDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldDestructureSet", dependencies: { classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateFieldGet: helper("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorGet(e,r)}", { globals: [], locals: { _classPrivateFieldGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldGet", dependencies: { classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateFieldSet: helper("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescriptorSet(e,s,r),r}", { globals: [], locals: { _classPrivateFieldSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateFieldSet", dependencies: { classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"], classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"] } }), classPrivateMethodGet: helper("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", { globals: [], locals: { _classPrivateMethodGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodGet", dependencies: { assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"] } }), classPrivateMethodSet: helper("7.1.6", 'function _classPrivateMethodSet(){throw new TypeError("attempted to reassign private method")}', { globals: ["TypeError"], locals: { _classPrivateMethodSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classPrivateMethodSet", dependencies: {} }), classStaticPrivateFieldDestructureSet: helper("7.13.10", 'function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t),classCheckPrivateStaticFieldDescriptor(s,"set"),classApplyDescriptorDestructureSet(t,s)}', { globals: [], locals: { _classStaticPrivateFieldDestructureSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldDestructureSet", dependencies: { classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateFieldSpecGet: helper("7.0.2", 'function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPrivateStaticFieldDescriptor(r,"get"),classApplyDescriptorGet(t,r)}', { globals: [], locals: { _classStaticPrivateFieldSpecGet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldSpecGet", dependencies: { classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateFieldSpecSet: helper("7.0.2", 'function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPrivateStaticFieldDescriptor(r,"set"),classApplyDescriptorSet(s,r,e),e}', { globals: [], locals: { _classStaticPrivateFieldSpecSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateFieldSpecSet", dependencies: { classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"], assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"], classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"] } }), classStaticPrivateMethodSet: helper("7.3.2", 'function _classStaticPrivateMethodSet(){throw new TypeError("attempted to set read only static private field")}', { globals: ["TypeError"], locals: { _classStaticPrivateMethodSet: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_classStaticPrivateMethodSet", dependencies: {} }), defineEnumerableProperties: helper("7.0.0-beta.0", 'function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}', { globals: ["Object"], locals: { _defineEnumerableProperties: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_defineEnumerableProperties", dependencies: {} }), dispose: helper("7.22.0", 'function dispose_SuppressedError(r,e){return"undefined"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}', { globals: ["SuppressedError", "Error", "Object", "Promise"], locals: { dispose_SuppressedError: ["body.0.id", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee", "body.0.body.body.0.argument.expressions.0.consequent.left", "body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"], _dispose: ["body.1.id"] }, exportBindingAssignments: [], exportName: "_dispose", dependencies: {} }), objectSpread: helper("7.0.0-beta.0", 'function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments[r]):{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}', { globals: ["Object"], locals: { _objectSpread: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_objectSpread", dependencies: { defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"] } }), using: helper("7.22.0", 'function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError("using declarations can only be used with objects, functions, null, or undefined.");if(e)var r=n[Symbol.asyncDispose||Symbol.for("Symbol.asyncDispose")];if(null==r&&(r=n[Symbol.dispose||Symbol.for("Symbol.dispose")]),"function"!=typeof r)throw new TypeError("Property [Symbol.dispose] is not a function.");return o.push({v:n,d:r,a:e}),n}', { globals: ["Object", "TypeError", "Symbol"], locals: { _using: ["body.0.id"] }, exportBindingAssignments: [], exportName: "_using", dependencies: {} }) });
    }, "./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined, exports2.get = get, exports2.getDependencies = function(name) {
        return loadHelper(name).getDependencies();
      }, exports2.list = undefined, exports2.minVersion = function(name) {
        return loadHelper(name).minVersion;
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _helpersGenerated = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.26.0/node_modules/@babel/helpers/lib/helpers-generated.js");
      const { cloneNode, identifier } = _t;
      function deep(obj, path4, value2) {
        try {
          const parts = path4.split(".");
          let last = parts.shift();
          for (;parts.length > 0; )
            obj = obj[last], last = parts.shift();
          if (!(arguments.length > 2))
            return obj[last];
          obj[last] = value2;
        } catch (e) {
          throw e.message += ` (when accessing ${path4})`, e;
        }
      }
      const helperData = Object.create(null);
      function loadHelper(name) {
        if (!helperData[name]) {
          const helper = _helpersGenerated.default[name];
          if (!helper)
            throw Object.assign(new ReferenceError(`Unknown helper ${name}`), { code: "BABEL_HELPER_UNKNOWN", helper: name });
          helperData[name] = { minVersion: helper.minVersion, build(getDependency, bindingName, localBindings, adjustAst) {
            const ast = helper.ast();
            return function(ast2, metadata, bindingName2, localBindings2, getDependency2, adjustAst2) {
              const { locals, dependencies, exportBindingAssignments, exportName } = metadata, bindings = new Set(localBindings2 || []);
              bindingName2 && bindings.add(bindingName2);
              for (const [name2, paths] of (Object.entries || ((o) => Object.keys(o).map((k) => [k, o[k]])))(locals)) {
                let newName = name2;
                if (bindingName2 && name2 === exportName)
                  newName = bindingName2;
                else
                  for (;bindings.has(newName); )
                    newName = "_" + newName;
                if (newName !== name2)
                  for (const path4 of paths)
                    deep(ast2, path4, identifier(newName));
              }
              for (const [name2, paths] of (Object.entries || ((o) => Object.keys(o).map((k) => [k, o[k]])))(dependencies)) {
                const ref = typeof getDependency2 == "function" && getDependency2(name2) || identifier(name2);
                for (const path4 of paths)
                  deep(ast2, path4, cloneNode(ref));
              }
              adjustAst2 == null || adjustAst2(ast2, exportName, (map) => {
                exportBindingAssignments.forEach((p) => deep(ast2, p, map(deep(ast2, p))));
              });
            }(ast, helper.metadata, bindingName, localBindings, getDependency, adjustAst), { nodes: ast.body, globals: helper.metadata.globals };
          }, getDependencies: () => Object.keys(helper.metadata.dependencies) };
        }
        return helperData[name];
      }
      function get(name, getDependency, bindingName, localBindings, adjustAst) {
        if (typeof bindingName == "object") {
          const id = bindingName;
          bindingName = (id == null ? undefined : id.type) === "Identifier" ? id.name : undefined;
        }
        return loadHelper(name).build(getDependency, bindingName, localBindings, adjustAst);
      }
      exports2.ensure = (name) => {
        loadHelper(name);
      };
      exports2.list = Object.keys(_helpersGenerated.default).map((name) => name.replace(/^_/, ""));
      exports2.default = get;
    }, "./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports2) => {
      function _objectWithoutPropertiesLoose(r, e) {
        if (r == null)
          return {};
        var t = {};
        for (var n in r)
          if ({}.hasOwnProperty.call(r, n)) {
            if (e.includes(n))
              continue;
            t[n] = r[n];
          }
        return t;
      }
      Object.defineProperty(exports2, "__esModule", { value: true });

      class Position {
        constructor(line, col, index) {
          this.line = undefined, this.column = undefined, this.index = undefined, this.line = line, this.column = col, this.index = index;
        }
      }

      class SourceLocation {
        constructor(start, end) {
          this.start = undefined, this.end = undefined, this.filename = undefined, this.identifierName = undefined, this.start = start, this.end = end;
        }
      }
      function createPositionWithColumnOffset(position, columnOffset) {
        const { line, column, index } = position;
        return new Position(line, column + columnOffset, index + columnOffset);
      }
      const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
      var ModuleErrors = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code } };
      const NodeDescriptions = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, toNodeDescription = (node) => node.type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];
      var StandardErrors = { AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accessor must not have any formal parameters.", BadSetterArity: "A 'set' accessor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.", DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.', DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", DynamicImportPhaseRequiresImportExpressions: ({ phase }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`, ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForInUsing: "For-in loop may not start with 'using' declaration.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedImportAssert` parser plugin to suppress this error.", ImportBindingIsString: ({ importName }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`, ImportCallArity: "`import()` requires exactly one or two arguments.", ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", ImportReflectionHasAssertion: "`import module x` cannot have assertions.", ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.', IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`, InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`, InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsOptionalChaining: ({ ancestor }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`, LetInLexicalBinding: "'let' is disallowed as a lexically bound name.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`, ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`, PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.", SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.', StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", UsingDeclarationExport: "Using declaration cannot be exported.", UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.", VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." };
      const UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
      var PipelineOperatorErrors = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' };
      const _excluded = ["message"];
      function defineHidden(obj, key, value2) {
        Object.defineProperty(obj, key, { enumerable: false, configurable: true, value: value2 });
      }
      function toParseErrorConstructor({ toMessage, code: code2, reasonCode, syntaxPlugin }) {
        const hasMissingPlugin = reasonCode === "MissingPlugin" || reasonCode === "MissingOneOfPlugins";
        {
          const oldReasonCodes = { AccessorCannotDeclareThisParameter: "AccesorCannotDeclareThisParameter", AccessorCannotHaveTypeParameters: "AccesorCannotHaveTypeParameters", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference", SetAccessorCannotHaveOptionalParameter: "SetAccesorCannotHaveOptionalParameter", SetAccessorCannotHaveRestParameter: "SetAccesorCannotHaveRestParameter", SetAccessorCannotHaveReturnType: "SetAccesorCannotHaveReturnType" };
          oldReasonCodes[reasonCode] && (reasonCode = oldReasonCodes[reasonCode]);
        }
        return function constructor(loc, details) {
          const error = new SyntaxError;
          return error.code = code2, error.reasonCode = reasonCode, error.loc = loc, error.pos = loc.index, error.syntaxPlugin = syntaxPlugin, hasMissingPlugin && (error.missingPlugin = details.missingPlugin), defineHidden(error, "clone", function(overrides = {}) {
            var _overrides$loc;
            const { line, column, index } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
            return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));
          }), defineHidden(error, "details", details), Object.defineProperty(error, "message", { configurable: true, get() {
            const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
            return this.message = message, message;
          }, set(value2) {
            Object.defineProperty(this, "message", { value: value2, writable: true });
          } }), error;
        };
      }
      function ParseErrorEnum(argument, syntaxPlugin) {
        if (Array.isArray(argument))
          return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
        const ParseErrorConstructors = {};
        for (const reasonCode of Object.keys(argument)) {
          const template = argument[reasonCode], _ref = typeof template == "string" ? { message: () => template } : typeof template == "function" ? { message: template } : template, { message } = _ref, rest = _objectWithoutPropertiesLoose(_ref, _excluded), toMessage = typeof message == "string" ? () => message : message;
          ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({ code: "BABEL_PARSER_SYNTAX_ERROR", reasonCode, toMessage }, syntaxPlugin ? { syntaxPlugin } : {}, rest));
        }
        return ParseErrorConstructors;
      }
      const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({ StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty } = Object, toUnenumerable = (object, key) => {
        object && defineProperty(object, key, { enumerable: false, value: object[key] });
      };
      function toESTreeLocation(node) {
        return toUnenumerable(node.loc.start, "index"), toUnenumerable(node.loc.end, "index"), node;
      }

      class TokContext {
        constructor(token, preserveSpace) {
          this.token = undefined, this.preserveSpace = undefined, this.token = token, this.preserveSpace = !!preserveSpace;
        }
      }
      const types = { brace: new TokContext("{"), j_oTag: new TokContext("<tag"), j_cTag: new TokContext("</tag"), j_expr: new TokContext("<tag>...</tag>", true) };
      types.template = new TokContext("`", true);

      class ExportedTokenType {
        constructor(label, conf = {}) {
          this.label = undefined, this.keyword = undefined, this.beforeExpr = undefined, this.startsExpr = undefined, this.rightAssociative = undefined, this.isLoop = undefined, this.isAssign = undefined, this.prefix = undefined, this.postfix = undefined, this.binop = undefined, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop != null ? conf.binop : null, this.updateContext = null;
        }
      }
      const keywords$1 = new Map;
      function createKeyword(name, options = {}) {
        options.keyword = name;
        const token = createToken(name, options);
        return keywords$1.set(name, token), token;
      }
      function createBinop(name, binop) {
        return createToken(name, { beforeExpr: true, binop });
      }
      let tokenTypeCounter = -1;
      const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
      function createToken(name, options = {}) {
        var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
        return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1), tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null && _options$beforeExpr), tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null && _options$startsExpr), tokenPrefixes.push((_options$prefix = options.prefix) != null && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
      }
      function createKeywordLike(name, options = {}) {
        var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
        return ++tokenTypeCounter, keywords$1.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1), tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null && _options$beforeExpr2), tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null && _options$startsExpr2), tokenPrefixes.push((_options$prefix2 = options.prefix) != null && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
      }
      const tt = { bracketL: createToken("[", { beforeExpr: true, startsExpr: true }), bracketHashL: createToken("#[", { beforeExpr: true, startsExpr: true }), bracketBarL: createToken("[|", { beforeExpr: true, startsExpr: true }), bracketR: createToken("]"), bracketBarR: createToken("|]"), braceL: createToken("{", { beforeExpr: true, startsExpr: true }), braceBarL: createToken("{|", { beforeExpr: true, startsExpr: true }), braceHashL: createToken("#{", { beforeExpr: true, startsExpr: true }), braceR: createToken("}"), braceBarR: createToken("|}"), parenL: createToken("(", { beforeExpr: true, startsExpr: true }), parenR: createToken(")"), comma: createToken(",", { beforeExpr: true }), semi: createToken(";", { beforeExpr: true }), colon: createToken(":", { beforeExpr: true }), doubleColon: createToken("::", { beforeExpr: true }), dot: createToken("."), question: createToken("?", { beforeExpr: true }), questionDot: createToken("?."), arrow: createToken("=>", { beforeExpr: true }), template: createToken("template"), ellipsis: createToken("...", { beforeExpr: true }), backQuote: createToken("`", { startsExpr: true }), dollarBraceL: createToken("${", { beforeExpr: true, startsExpr: true }), templateTail: createToken("...`", { startsExpr: true }), templateNonTail: createToken("...${", { beforeExpr: true, startsExpr: true }), at: createToken("@"), hash: createToken("#", { startsExpr: true }), interpreterDirective: createToken("#!..."), eq: createToken("=", { beforeExpr: true, isAssign: true }), assign: createToken("_=", { beforeExpr: true, isAssign: true }), slashAssign: createToken("_=", { beforeExpr: true, isAssign: true }), xorAssign: createToken("_=", { beforeExpr: true, isAssign: true }), moduloAssign: createToken("_=", { beforeExpr: true, isAssign: true }), incDec: createToken("++/--", { prefix: true, postfix: true, startsExpr: true }), bang: createToken("!", { beforeExpr: true, prefix: true, startsExpr: true }), tilde: createToken("~", { beforeExpr: true, prefix: true, startsExpr: true }), doubleCaret: createToken("^^", { startsExpr: true }), doubleAt: createToken("@@", { startsExpr: true }), pipeline: createBinop("|>", 0), nullishCoalescing: createBinop("??", 1), logicalOR: createBinop("||", 1), logicalAND: createBinop("&&", 2), bitwiseOR: createBinop("|", 3), bitwiseXOR: createBinop("^", 4), bitwiseAND: createBinop("&", 5), equality: createBinop("==/!=/===/!==", 6), lt: createBinop("</>/<=/>=", 7), gt: createBinop("</>/<=/>=", 7), relational: createBinop("</>/<=/>=", 7), bitShift: createBinop("<</>>/>>>", 8), bitShiftL: createBinop("<</>>/>>>", 8), bitShiftR: createBinop("<</>>/>>>", 8), plusMin: createToken("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: createToken("%", { binop: 10, startsExpr: true }), star: createToken("*", { binop: 10 }), slash: createBinop("/", 10), exponent: createToken("**", { beforeExpr: true, binop: 11, rightAssociative: true }), _in: createKeyword("in", { beforeExpr: true, binop: 7 }), _instanceof: createKeyword("instanceof", { beforeExpr: true, binop: 7 }), _break: createKeyword("break"), _case: createKeyword("case", { beforeExpr: true }), _catch: createKeyword("catch"), _continue: createKeyword("continue"), _debugger: createKeyword("debugger"), _default: createKeyword("default", { beforeExpr: true }), _else: createKeyword("else", { beforeExpr: true }), _finally: createKeyword("finally"), _function: createKeyword("function", { startsExpr: true }), _if: createKeyword("if"), _return: createKeyword("return", { beforeExpr: true }), _switch: createKeyword("switch"), _throw: createKeyword("throw", { beforeExpr: true, prefix: true, startsExpr: true }), _try: createKeyword("try"), _var: createKeyword("var"), _const: createKeyword("const"), _with: createKeyword("with"), _new: createKeyword("new", { beforeExpr: true, startsExpr: true }), _this: createKeyword("this", { startsExpr: true }), _super: createKeyword("super", { startsExpr: true }), _class: createKeyword("class", { startsExpr: true }), _extends: createKeyword("extends", { beforeExpr: true }), _export: createKeyword("export"), _import: createKeyword("import", { startsExpr: true }), _null: createKeyword("null", { startsExpr: true }), _true: createKeyword("true", { startsExpr: true }), _false: createKeyword("false", { startsExpr: true }), _typeof: createKeyword("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: createKeyword("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: createKeyword("delete", { beforeExpr: true, prefix: true, startsExpr: true }), _do: createKeyword("do", { isLoop: true, beforeExpr: true }), _for: createKeyword("for", { isLoop: true }), _while: createKeyword("while", { isLoop: true }), _as: createKeywordLike("as", { startsExpr: true }), _assert: createKeywordLike("assert", { startsExpr: true }), _async: createKeywordLike("async", { startsExpr: true }), _await: createKeywordLike("await", { startsExpr: true }), _defer: createKeywordLike("defer", { startsExpr: true }), _from: createKeywordLike("from", { startsExpr: true }), _get: createKeywordLike("get", { startsExpr: true }), _let: createKeywordLike("let", { startsExpr: true }), _meta: createKeywordLike("meta", { startsExpr: true }), _of: createKeywordLike("of", { startsExpr: true }), _sent: createKeywordLike("sent", { startsExpr: true }), _set: createKeywordLike("set", { startsExpr: true }), _source: createKeywordLike("source", { startsExpr: true }), _static: createKeywordLike("static", { startsExpr: true }), _using: createKeywordLike("using", { startsExpr: true }), _yield: createKeywordLike("yield", { startsExpr: true }), _asserts: createKeywordLike("asserts", { startsExpr: true }), _checks: createKeywordLike("checks", { startsExpr: true }), _exports: createKeywordLike("exports", { startsExpr: true }), _global: createKeywordLike("global", { startsExpr: true }), _implements: createKeywordLike("implements", { startsExpr: true }), _intrinsic: createKeywordLike("intrinsic", { startsExpr: true }), _infer: createKeywordLike("infer", { startsExpr: true }), _is: createKeywordLike("is", { startsExpr: true }), _mixins: createKeywordLike("mixins", { startsExpr: true }), _proto: createKeywordLike("proto", { startsExpr: true }), _require: createKeywordLike("require", { startsExpr: true }), _satisfies: createKeywordLike("satisfies", { startsExpr: true }), _keyof: createKeywordLike("keyof", { startsExpr: true }), _readonly: createKeywordLike("readonly", { startsExpr: true }), _unique: createKeywordLike("unique", { startsExpr: true }), _abstract: createKeywordLike("abstract", { startsExpr: true }), _declare: createKeywordLike("declare", { startsExpr: true }), _enum: createKeywordLike("enum", { startsExpr: true }), _module: createKeywordLike("module", { startsExpr: true }), _namespace: createKeywordLike("namespace", { startsExpr: true }), _interface: createKeywordLike("interface", { startsExpr: true }), _type: createKeywordLike("type", { startsExpr: true }), _opaque: createKeywordLike("opaque", { startsExpr: true }), name: createToken("name", { startsExpr: true }), placeholder: createToken("%%", { startsExpr: true }), string: createToken("string", { startsExpr: true }), num: createToken("num", { startsExpr: true }), bigint: createToken("bigint", { startsExpr: true }), decimal: createToken("decimal", { startsExpr: true }), regexp: createToken("regexp", { startsExpr: true }), privateName: createToken("#name", { startsExpr: true }), eof: createToken("eof"), jsxName: createToken("jsxName"), jsxText: createToken("jsxText", { beforeExpr: true }), jsxTagStart: createToken("jsxTagStart", { startsExpr: true }), jsxTagEnd: createToken("jsxTagEnd") };
      function tokenIsIdentifier(token) {
        return token >= 93 && token <= 133;
      }
      function tokenIsKeywordOrIdentifier(token) {
        return token >= 58 && token <= 133;
      }
      function tokenIsLiteralPropertyName(token) {
        return token >= 58 && token <= 137;
      }
      function tokenCanStartExpression(token) {
        return tokenStartsExprs[token];
      }
      function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
        return token >= 129 && token <= 131;
      }
      function tokenIsKeyword(token) {
        return token >= 58 && token <= 92;
      }
      function tokenLabelName(token) {
        return tokenLabels[token];
      }
      function tokenOperatorPrecedence(token) {
        return tokenBinops[token];
      }
      function tokenIsTemplate(token) {
        return token >= 24 && token <= 25;
      }
      function getExportedToken(token) {
        return tokenTypes[token];
      }
      tokenTypes[8].updateContext = (context) => {
        context.pop();
      }, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
        context.push(types.brace);
      }, tokenTypes[22].updateContext = (context) => {
        context[context.length - 1] === types.template ? context.pop() : context.push(types.template);
      }, tokenTypes[143].updateContext = (context) => {
        context.push(types.j_expr, types.j_oTag);
      };
      let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
      const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code2, set) {
        let pos = 65536;
        for (let i = 0, length = set.length;i < length; i += 2) {
          if (pos += set[i], pos > code2)
            return false;
          if (pos += set[i + 1], pos >= code2)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code2) {
        return code2 < 65 ? code2 === 36 : code2 <= 90 || (code2 < 97 ? code2 === 95 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes)));
      }
      function isIdentifierChar(code2) {
        return code2 < 48 ? code2 === 36 : code2 < 58 || !(code2 < 65) && (code2 <= 90 || (code2 < 97 ? code2 === 95 : code2 <= 122 || (code2 <= 65535 ? code2 >= 170 && nonASCIIidentifier.test(String.fromCharCode(code2)) : isInAstralSet(code2, astralIdentifierStartCodes) || isInAstralSet(code2, astralIdentifierCodes))));
      }
      const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
      function isReservedWord(word, inModule) {
        return inModule && word === "await" || word === "enum";
      }
      function isStrictReservedWord(word, inModule) {
        return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
      }
      function isStrictBindOnlyReservedWord(word) {
        return reservedWordsStrictBindSet.has(word);
      }
      function isStrictBindReservedWord(word, inModule) {
        return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
      }
      const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);

      class Scope {
        constructor(flags) {
          this.flags = 0, this.names = new Map, this.firstLexicalName = "", this.flags = flags;
        }
      }

      class ScopeHandler {
        constructor(parser, inModule) {
          this.parser = undefined, this.scopeStack = [], this.inModule = undefined, this.undefinedExports = new Map, this.parser = parser, this.inModule = inModule;
        }
        get inTopLevel() {
          return (1 & this.currentScope().flags) > 0;
        }
        get inFunction() {
          return (2 & this.currentVarScopeFlags()) > 0;
        }
        get allowSuper() {
          return (16 & this.currentThisScopeFlags()) > 0;
        }
        get allowDirectSuper() {
          return (32 & this.currentThisScopeFlags()) > 0;
        }
        get inClass() {
          return (64 & this.currentThisScopeFlags()) > 0;
        }
        get inClassAndNotInNonArrowFunction() {
          const flags = this.currentThisScopeFlags();
          return (64 & flags) > 0 && !(2 & flags);
        }
        get inStaticBlock() {
          for (let i = this.scopeStack.length - 1;; i--) {
            const { flags } = this.scopeStack[i];
            if (128 & flags)
              return true;
            if (451 & flags)
              return false;
          }
        }
        get inNonArrowFunction() {
          return (2 & this.currentThisScopeFlags()) > 0;
        }
        get treatFunctionsAsVar() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }
        createScope(flags) {
          return new Scope(flags);
        }
        enter(flags) {
          this.scopeStack.push(this.createScope(flags));
        }
        exit() {
          return this.scopeStack.pop().flags;
        }
        treatFunctionsAsVarInScope(scope) {
          return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
        }
        declareName(name, bindingType, loc) {
          let scope = this.currentScope();
          if (8 & bindingType || 16 & bindingType) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            let type = scope.names.get(name) || 0;
            16 & bindingType ? type |= 4 : (scope.firstLexicalName || (scope.firstLexicalName = name), type |= 2), scope.names.set(name, type), 8 & bindingType && this.maybeExportDefined(scope, name);
          } else if (4 & bindingType)
            for (let i = this.scopeStack.length - 1;i >= 0 && (scope = this.scopeStack[i], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.names.set(name, 1 | (scope.names.get(name) || 0)), this.maybeExportDefined(scope, name), !(387 & scope.flags)); --i)
              ;
          this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
        }
        maybeExportDefined(scope, name) {
          this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
        }
        checkRedeclarationInScope(scope, name, bindingType, loc) {
          this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name });
        }
        isRedeclaredInScope(scope, name, bindingType) {
          if (!(1 & bindingType))
            return false;
          if (8 & bindingType)
            return scope.names.has(name);
          const type = scope.names.get(name);
          return 16 & bindingType ? (2 & type) > 0 || !this.treatFunctionsAsVarInScope(scope) && (1 & type) > 0 : (2 & type) > 0 && !(8 & scope.flags && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (4 & type) > 0;
        }
        checkLocalExport(id) {
          const { name } = id;
          this.scopeStack[0].names.has(name) || this.undefinedExports.set(name, id.loc.start);
        }
        currentScope() {
          return this.scopeStack[this.scopeStack.length - 1];
        }
        currentVarScopeFlags() {
          for (let i = this.scopeStack.length - 1;; i--) {
            const { flags } = this.scopeStack[i];
            if (387 & flags)
              return flags;
          }
        }
        currentThisScopeFlags() {
          for (let i = this.scopeStack.length - 1;; i--) {
            const { flags } = this.scopeStack[i];
            if (451 & flags && !(4 & flags))
              return flags;
          }
        }
      }

      class FlowScope extends Scope {
        constructor(...args) {
          super(...args), this.declareFunctions = new Set;
        }
      }

      class FlowScopeHandler extends ScopeHandler {
        createScope(flags) {
          return new FlowScope(flags);
        }
        declareName(name, bindingType, loc) {
          const scope = this.currentScope();
          if (2048 & bindingType)
            return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
          super.declareName(name, bindingType, loc);
        }
        isRedeclaredInScope(scope, name, bindingType) {
          if (super.isRedeclaredInScope(scope, name, bindingType))
            return true;
          if (2048 & bindingType && !scope.declareFunctions.has(name)) {
            const type = scope.names.get(name);
            return (4 & type) > 0 || (2 & type) > 0;
          }
          return false;
        }
        checkLocalExport(id) {
          this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
        }
      }

      class BaseParser {
        constructor() {
          this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
        }
        sourceToOffsetPos(sourcePos) {
          return sourcePos + this.startIndex;
        }
        offsetToSourcePos(offsetPos) {
          return offsetPos - this.startIndex;
        }
        hasPlugin(pluginConfig) {
          if (typeof pluginConfig == "string")
            return this.plugins.has(pluginConfig);
          {
            const [pluginName, pluginOptions] = pluginConfig;
            if (!this.hasPlugin(pluginName))
              return false;
            const actualOptions = this.plugins.get(pluginName);
            for (const key of Object.keys(pluginOptions))
              if ((actualOptions == null ? undefined : actualOptions[key]) !== pluginOptions[key])
                return false;
            return true;
          }
        }
        getPluginOption(plugin, name) {
          var _this$plugins$get;
          return (_this$plugins$get = this.plugins.get(plugin)) == null ? undefined : _this$plugins$get[name];
        }
      }
      function setTrailingComments(node, comments) {
        node.trailingComments === undefined ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
      }
      function setInnerComments(node, comments) {
        node.innerComments === undefined ? node.innerComments = comments : node.innerComments.unshift(...comments);
      }
      function adjustInnerComments(node, elements, commentWS) {
        let lastElement = null, i = elements.length;
        for (;lastElement === null && i > 0; )
          lastElement = elements[--i];
        lastElement === null || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
      }

      class CommentsParser extends BaseParser {
        addComment(comment) {
          this.filename && (comment.loc.filename = this.filename);
          const { commentsLen } = this.state;
          this.comments.length !== commentsLen && (this.comments.length = commentsLen), this.comments.push(comment), this.state.commentsLen++;
        }
        processComment(node) {
          const { commentStack } = this.state, commentStackLength = commentStack.length;
          if (commentStackLength === 0)
            return;
          let i = commentStackLength - 1;
          const lastCommentWS = commentStack[i];
          lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i--);
          const { start: nodeStart } = node;
          for (;i >= 0; i--) {
            const commentWS = commentStack[i], commentEnd = commentWS.end;
            if (!(commentEnd > nodeStart)) {
              commentEnd === nodeStart && (commentWS.trailingNode = node);
              break;
            }
            commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i, 1);
          }
        }
        finalizeComment(commentWS) {
          const { comments } = commentWS;
          if (commentWS.leadingNode !== null || commentWS.trailingNode !== null)
            commentWS.leadingNode !== null && setTrailingComments(commentWS.leadingNode, comments), commentWS.trailingNode !== null && function(node, comments2) {
              node.leadingComments === undefined ? node.leadingComments = comments2 : node.leadingComments.unshift(...comments2);
            }(commentWS.trailingNode, comments);
          else {
            const { containingNode: node, start: commentStart } = commentWS;
            if (this.input.charCodeAt(this.offsetToSourcePos(commentStart) - 1) === 44)
              switch (node.type) {
                case "ObjectExpression":
                case "ObjectPattern":
                case "RecordExpression":
                  adjustInnerComments(node, node.properties, commentWS);
                  break;
                case "CallExpression":
                case "OptionalCallExpression":
                  adjustInnerComments(node, node.arguments, commentWS);
                  break;
                case "FunctionDeclaration":
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                case "ObjectMethod":
                case "ClassMethod":
                case "ClassPrivateMethod":
                  adjustInnerComments(node, node.params, commentWS);
                  break;
                case "ArrayExpression":
                case "ArrayPattern":
                case "TupleExpression":
                  adjustInnerComments(node, node.elements, commentWS);
                  break;
                case "ExportNamedDeclaration":
                case "ImportDeclaration":
                  adjustInnerComments(node, node.specifiers, commentWS);
                  break;
                default:
                  setInnerComments(node, comments);
              }
            else
              setInnerComments(node, comments);
          }
        }
        finalizeRemainingComments() {
          const { commentStack } = this.state;
          for (let i = commentStack.length - 1;i >= 0; i--)
            this.finalizeComment(commentStack[i]);
          this.state.commentStack = [];
        }
        resetPreviousNodeTrailingComments(node) {
          const { commentStack } = this.state, { length } = commentStack;
          if (length === 0)
            return;
          const commentWS = commentStack[length - 1];
          commentWS.leadingNode === node && (commentWS.leadingNode = null);
        }
        resetPreviousIdentifierLeadingComments(node) {
          const { commentStack } = this.state, { length } = commentStack;
          length !== 0 && (commentStack[length - 1].trailingNode === node ? commentStack[length - 1].trailingNode = null : length >= 2 && commentStack[length - 2].trailingNode === node && (commentStack[length - 2].trailingNode = null));
        }
        takeSurroundingComments(node, start, end) {
          const { commentStack } = this.state, commentStackLength = commentStack.length;
          if (commentStackLength === 0)
            return;
          let i = commentStackLength - 1;
          for (;i >= 0; i--) {
            const commentWS = commentStack[i], commentEnd = commentWS.end;
            if (commentWS.start === end)
              commentWS.leadingNode = node;
            else if (commentEnd === start)
              commentWS.trailingNode = node;
            else if (commentEnd < start)
              break;
          }
        }
      }
      const lineBreakG = new RegExp(/\r\n|[\r\n\u2028\u2029]/.source, "g");
      function isNewLine(code2) {
        switch (code2) {
          case 10:
          case 13:
          case 8232:
          case 8233:
            return true;
          default:
            return false;
        }
      }
      function hasNewLine(input, start, end) {
        for (let i = start;i < end; i++)
          if (isNewLine(input.charCodeAt(i)))
            return true;
        return false;
      }
      const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
      function isWhitespace(code2) {
        switch (code2) {
          case 9:
          case 11:
          case 12:
          case 32:
          case 160:
          case 5760:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }

      class State {
        constructor() {
          this.flags = 1024, this.startIndex = undefined, this.curLine = undefined, this.lineStart = undefined, this.startLoc = undefined, this.endLoc = undefined, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.labels = [], this.commentsLen = 0, this.commentStack = [], this.pos = 0, this.type = 140, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.context = [types.brace], this.firstInvalidTemplateEscapePos = null, this.strictErrors = new Map, this.tokensLength = 0;
        }
        get strict() {
          return (1 & this.flags) > 0;
        }
        set strict(v) {
          v ? this.flags |= 1 : this.flags &= -2;
        }
        init({ strictMode, sourceType, startIndex, startLine, startColumn }) {
          this.strict = strictMode !== false && (strictMode === true || sourceType === "module"), this.startIndex = startIndex, this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position(startLine, startColumn, startIndex);
        }
        get maybeInArrowParameters() {
          return (2 & this.flags) > 0;
        }
        set maybeInArrowParameters(v) {
          v ? this.flags |= 2 : this.flags &= -3;
        }
        get inType() {
          return (4 & this.flags) > 0;
        }
        set inType(v) {
          v ? this.flags |= 4 : this.flags &= -5;
        }
        get noAnonFunctionType() {
          return (8 & this.flags) > 0;
        }
        set noAnonFunctionType(v) {
          v ? this.flags |= 8 : this.flags &= -9;
        }
        get hasFlowComment() {
          return (16 & this.flags) > 0;
        }
        set hasFlowComment(v) {
          v ? this.flags |= 16 : this.flags &= -17;
        }
        get isAmbientContext() {
          return (32 & this.flags) > 0;
        }
        set isAmbientContext(v) {
          v ? this.flags |= 32 : this.flags &= -33;
        }
        get inAbstractClass() {
          return (64 & this.flags) > 0;
        }
        set inAbstractClass(v) {
          v ? this.flags |= 64 : this.flags &= -65;
        }
        get inDisallowConditionalTypesContext() {
          return (128 & this.flags) > 0;
        }
        set inDisallowConditionalTypesContext(v) {
          v ? this.flags |= 128 : this.flags &= -129;
        }
        get soloAwait() {
          return (256 & this.flags) > 0;
        }
        set soloAwait(v) {
          v ? this.flags |= 256 : this.flags &= -257;
        }
        get inFSharpPipelineDirectBody() {
          return (512 & this.flags) > 0;
        }
        set inFSharpPipelineDirectBody(v) {
          v ? this.flags |= 512 : this.flags &= -513;
        }
        get canStartJSXElement() {
          return (1024 & this.flags) > 0;
        }
        set canStartJSXElement(v) {
          v ? this.flags |= 1024 : this.flags &= -1025;
        }
        get containsEsc() {
          return (2048 & this.flags) > 0;
        }
        set containsEsc(v) {
          v ? this.flags |= 2048 : this.flags &= -2049;
        }
        get hasTopLevelAwait() {
          return (4096 & this.flags) > 0;
        }
        set hasTopLevelAwait(v) {
          v ? this.flags |= 4096 : this.flags &= -4097;
        }
        curPosition() {
          return new Position(this.curLine, this.pos - this.lineStart, this.pos + this.startIndex);
        }
        clone() {
          const state = new State;
          return state.flags = this.flags, state.startIndex = this.startIndex, state.curLine = this.curLine, state.lineStart = this.lineStart, state.startLoc = this.startLoc, state.endLoc = this.endLoc, state.errors = this.errors.slice(), state.potentialArrowAt = this.potentialArrowAt, state.noArrowAt = this.noArrowAt.slice(), state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice(), state.topicContext = this.topicContext, state.labels = this.labels.slice(), state.commentsLen = this.commentsLen, state.commentStack = this.commentStack.slice(), state.pos = this.pos, state.type = this.type, state.value = this.value, state.start = this.start, state.end = this.end, state.lastTokEndLoc = this.lastTokEndLoc, state.lastTokStartLoc = this.lastTokStartLoc, state.context = this.context.slice(), state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos, state.strictErrors = this.strictErrors, state.tokensLength = this.tokensLength, state;
        }
      }
      var _isDigit = function(code2) {
        return code2 >= 48 && code2 <= 57;
      };
      const forbiddenNumericSeparatorSiblings = { decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => ch === 48 || ch === 49, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
      function readStringContents(type, input, pos, lineStart, curLine, errors) {
        const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
        let out = "", firstInvalidLoc = null, chunkStart = pos;
        const { length } = input;
        for (;; ) {
          if (pos >= length) {
            errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
            break;
          }
          const ch = input.charCodeAt(pos);
          if (isStringEnd(type, ch, input, pos)) {
            out += input.slice(chunkStart, pos);
            break;
          }
          if (ch === 92) {
            out += input.slice(chunkStart, pos);
            const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
            res.ch !== null || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
          } else
            ch === 8232 || ch === 8233 ? (++curLine, lineStart = ++pos) : ch === 10 || ch === 13 ? type === "template" ? (out += input.slice(chunkStart, pos) + `
`, ++pos, ch === 13 && input.charCodeAt(pos) === 10 && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
        }
        return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
      }
      function isStringEnd(type, ch, input, pos) {
        return type === "template" ? ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123 : ch === (type === "double" ? 34 : 39);
      }
      function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
        const throwOnInvalid = !inTemplate;
        pos++;
        const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
        switch (ch) {
          case 110:
            return res(`
`);
          case 114:
            return res("\r");
          case 120: {
            let code2;
            return { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(code2 === null ? null : String.fromCharCode(code2));
          }
          case 117: {
            let code2;
            return { code: code2, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(code2 === null ? null : String.fromCodePoint(code2));
          }
          case 116:
            return res("\t");
          case 98:
            return res("\b");
          case 118:
            return res("\v");
          case 102:
            return res("\f");
          case 13:
            input.charCodeAt(pos) === 10 && ++pos;
          case 10:
            lineStart = pos, ++curLine;
          case 8232:
          case 8233:
            return res("");
          case 56:
          case 57:
            if (inTemplate)
              return res(null);
            errors.strictNumericEscape(pos - 1, lineStart, curLine);
          default:
            if (ch >= 48 && ch <= 55) {
              const startPos = pos - 1;
              let octalStr = /^[0-7]+/.exec(input.slice(startPos, pos + 2))[0], octal = parseInt(octalStr, 8);
              octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
              const next = input.charCodeAt(pos);
              if (octalStr !== "0" || next === 56 || next === 57) {
                if (inTemplate)
                  return res(null);
                errors.strictNumericEscape(startPos, lineStart, curLine);
              }
              return res(String.fromCharCode(octal));
            }
            return res(String.fromCharCode(ch));
        }
      }
      function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
        const initialPos = pos;
        let n;
        return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), n === null && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
      }
      function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
        const start = pos, forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
        let invalid = false, total = 0;
        for (let i = 0, e = len == null ? 1 / 0 : len;i < e; ++i) {
          const code2 = input.charCodeAt(pos);
          let val;
          if (code2 !== 95 || allowNumSeparator === "bail") {
            if (val = code2 >= 97 ? code2 - 97 + 10 : code2 >= 65 ? code2 - 65 + 10 : _isDigit(code2) ? code2 - 48 : 1 / 0, val >= radix) {
              if (val <= 9 && bailOnError)
                return { n: null, pos };
              if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix))
                val = 0;
              else {
                if (!forceLen)
                  break;
                val = 0, invalid = true;
              }
            }
            ++pos, total = total * radix + val;
          } else {
            const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
            if (allowNumSeparator) {
              if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                if (bailOnError)
                  return { n: null, pos };
                errors.unexpectedNumericSeparator(pos, lineStart, curLine);
              }
            } else {
              if (bailOnError)
                return { n: null, pos };
              errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
            }
            ++pos;
          }
        }
        return pos === start || len != null && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
      }
      function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
        let code2;
        if (input.charCodeAt(pos) === 123) {
          if (++pos, { code: code2, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, code2 !== null && code2 > 1114111) {
            if (!throwOnInvalid)
              return { code: null, pos };
            errors.invalidCodePoint(pos, lineStart, curLine);
          }
        } else
          ({ code: code2, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
        return { code: code2, pos };
      }
      function buildPosition(pos, lineStart, curLine) {
        return new Position(curLine, pos - lineStart, pos);
      }
      const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);

      class Token {
        constructor(state) {
          const startIndex = state.startIndex || 0;
          this.type = state.type, this.value = state.value, this.start = startIndex + state.start, this.end = startIndex + state.end, this.loc = new SourceLocation(state.startLoc, state.endLoc);
        }
      }

      class Tokenizer extends CommentsParser {
        constructor(options, input) {
          super(), this.isLookahead = undefined, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), { radix }), true), numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (pos, lineStart, curLine) => {
            this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
          }, unterminated: (pos, lineStart, curLine) => {
            throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
          } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape), unterminated: (pos, lineStart, curLine) => {
            throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
          } }), this.state = new State, this.state.init(options), this.input = input, this.length = input.length, this.comments = [], this.isLookahead = false;
        }
        pushToken(token) {
          this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
        }
        next() {
          this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token(this.state)), this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
        }
        eat(type) {
          return !!this.match(type) && (this.next(), true);
        }
        match(type) {
          return this.state.type === type;
        }
        createLookaheadState(state) {
          return { pos: state.pos, value: null, type: state.type, start: state.start, end: state.end, context: [this.curContext()], inType: state.inType, startLoc: state.startLoc, lastTokEndLoc: state.lastTokEndLoc, curLine: state.curLine, lineStart: state.lineStart, curPosition: state.curPosition };
        }
        lookahead() {
          const old = this.state;
          this.state = this.createLookaheadState(old), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
          const curr = this.state;
          return this.state = old, curr;
        }
        nextTokenStart() {
          return this.nextTokenStartSince(this.state.pos);
        }
        nextTokenStartSince(pos) {
          return skipWhiteSpace.lastIndex = pos, skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
        }
        lookaheadCharCode() {
          return this.input.charCodeAt(this.nextTokenStart());
        }
        nextTokenInLineStart() {
          return this.nextTokenInLineStartSince(this.state.pos);
        }
        nextTokenInLineStartSince(pos) {
          return skipWhiteSpaceInLine.lastIndex = pos, skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
        }
        lookaheadInLineCharCode() {
          return this.input.charCodeAt(this.nextTokenInLineStart());
        }
        codePointAtPos(pos) {
          let cp = this.input.charCodeAt(pos);
          if ((64512 & cp) == 55296 && ++pos < this.input.length) {
            const trail = this.input.charCodeAt(pos);
            (64512 & trail) == 56320 && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
          }
          return cp;
        }
        setStrict(strict) {
          this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at)), this.state.strictErrors.clear());
        }
        curContext() {
          return this.state.context[this.state.context.length - 1];
        }
        nextToken() {
          this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(140) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
        }
        skipBlockComment(commentEnd) {
          let startLoc;
          this.isLookahead || (startLoc = this.state.curPosition());
          const start = this.state.pos, end = this.input.indexOf(commentEnd, start + 2);
          if (end === -1)
            throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
          for (this.state.pos = end + commentEnd.length, lineBreakG.lastIndex = start + 2;lineBreakG.test(this.input) && lineBreakG.lastIndex <= end; )
            ++this.state.curLine, this.state.lineStart = lineBreakG.lastIndex;
          if (this.isLookahead)
            return;
          const comment = { type: "CommentBlock", value: this.input.slice(start + 2, end), start: this.sourceToOffsetPos(start), end: this.sourceToOffsetPos(end + commentEnd.length), loc: new SourceLocation(startLoc, this.state.curPosition()) };
          return this.options.tokens && this.pushToken(comment), comment;
        }
        skipLineComment(startSkip) {
          const start = this.state.pos;
          let startLoc;
          this.isLookahead || (startLoc = this.state.curPosition());
          let ch = this.input.charCodeAt(this.state.pos += startSkip);
          if (this.state.pos < this.length)
            for (;!isNewLine(ch) && ++this.state.pos < this.length; )
              ch = this.input.charCodeAt(this.state.pos);
          if (this.isLookahead)
            return;
          const end = this.state.pos, comment = { type: "CommentLine", value: this.input.slice(start + startSkip, end), start: this.sourceToOffsetPos(start), end: this.sourceToOffsetPos(end), loc: new SourceLocation(startLoc, this.state.curPosition()) };
          return this.options.tokens && this.pushToken(comment), comment;
        }
        skipSpace() {
          const spaceStart = this.state.pos, comments = [];
          loop:
            for (;this.state.pos < this.length; ) {
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 32:
                case 160:
                case 9:
                  ++this.state.pos;
                  break;
                case 13:
                  this.input.charCodeAt(this.state.pos + 1) === 10 && ++this.state.pos;
                case 10:
                case 8232:
                case 8233:
                  ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.state.pos + 1)) {
                    case 42: {
                      const comment = this.skipBlockComment("*/");
                      comment !== undefined && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    case 47: {
                      const comment = this.skipLineComment(2);
                      comment !== undefined && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      break;
                    }
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (isWhitespace(ch))
                    ++this.state.pos;
                  else if (ch === 45 && !this.inModule && this.options.annexB) {
                    const pos = this.state.pos;
                    if (this.input.charCodeAt(pos + 1) !== 45 || this.input.charCodeAt(pos + 2) !== 62 || !(spaceStart === 0 || this.state.lineStart > spaceStart))
                      break loop;
                    {
                      const comment = this.skipLineComment(3);
                      comment !== undefined && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                    }
                  } else {
                    if (ch !== 60 || this.inModule || !this.options.annexB)
                      break loop;
                    {
                      const pos = this.state.pos;
                      if (this.input.charCodeAt(pos + 1) !== 33 || this.input.charCodeAt(pos + 2) !== 45 || this.input.charCodeAt(pos + 3) !== 45)
                        break loop;
                      {
                        const comment = this.skipLineComment(4);
                        comment !== undefined && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      }
                    }
                  }
              }
            }
          if (comments.length > 0) {
            const end = this.state.pos, commentWhitespace = { start: this.sourceToOffsetPos(spaceStart), end: this.sourceToOffsetPos(end), comments, leadingNode: null, trailingNode: null, containingNode: null };
            this.state.commentStack.push(commentWhitespace);
          }
        }
        finishToken(type, val) {
          this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
          const prevType = this.state.type;
          this.state.type = type, this.state.value = val, this.isLookahead || this.updateContext(prevType);
        }
        replaceToken(type) {
          this.state.type = type, this.updateContext();
        }
        readToken_numberSign() {
          if (this.state.pos === 0 && this.readToken_interpreter())
            return;
          const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
          if (next >= 48 && next <= 57)
            throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
          if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
            if (this.expectPlugin("recordAndTuple"), this.getPluginOption("recordAndTuple", "syntaxType") === "bar")
              throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
            this.state.pos += 2, next === 123 ? this.finishToken(7) : this.finishToken(1);
          } else
            isIdentifierStart(next) ? (++this.state.pos, this.finishToken(139, this.readWord1(next))) : next === 92 ? (++this.state.pos, this.finishToken(139, this.readWord1())) : this.finishOp(27, 1);
        }
        readToken_dot() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          next >= 48 && next <= 57 ? this.readNumber(true) : next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46 ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
        }
        readToken_slash() {
          this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(31, 2) : this.finishOp(56, 1);
        }
        readToken_interpreter() {
          if (this.state.pos !== 0 || this.length < 2)
            return false;
          let ch = this.input.charCodeAt(this.state.pos + 1);
          if (ch !== 33)
            return false;
          const start = this.state.pos;
          for (this.state.pos += 1;!isNewLine(ch) && ++this.state.pos < this.length; )
            ch = this.input.charCodeAt(this.state.pos);
          const value2 = this.input.slice(start + 2, this.state.pos);
          return this.finishToken(28, value2), true;
        }
        readToken_mult_modulo(code2) {
          let type = code2 === 42 ? 55 : 54, width = 1, next = this.input.charCodeAt(this.state.pos + 1);
          code2 === 42 && next === 42 && (width++, next = this.input.charCodeAt(this.state.pos + 2), type = 57), next !== 61 || this.state.inType || (width++, type = code2 === 37 ? 33 : 30), this.finishOp(type, width);
        }
        readToken_pipe_amp(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next !== code2) {
            if (code2 === 124) {
              if (next === 62)
                return void this.finishOp(39, 2);
              if (this.hasPlugin("recordAndTuple") && next === 125) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                  throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                return this.state.pos += 2, void this.finishToken(9);
              }
              if (this.hasPlugin("recordAndTuple") && next === 93) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                  throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
                return this.state.pos += 2, void this.finishToken(4);
              }
            }
            next !== 61 ? this.finishOp(code2 === 124 ? 43 : 45, 1) : this.finishOp(30, 2);
          } else
            this.input.charCodeAt(this.state.pos + 2) === 61 ? this.finishOp(30, 3) : this.finishOp(code2 === 124 ? 41 : 42, 2);
        }
        readToken_caret() {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next !== 61 || this.state.inType)
            if (next === 94 && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
              this.finishOp(37, 2);
              this.input.codePointAt(this.state.pos) === 94 && this.unexpected();
            } else
              this.finishOp(44, 1);
          else
            this.finishOp(32, 2);
        }
        readToken_atSign() {
          this.input.charCodeAt(this.state.pos + 1) === 64 && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
        }
        readToken_plus_min(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          next !== code2 ? next === 61 ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
        }
        readToken_lt() {
          const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
          if (next === 60)
            return this.input.charCodeAt(pos + 2) === 61 ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
          next !== 61 ? this.finishOp(47, 1) : this.finishOp(49, 2);
        }
        readToken_gt() {
          const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
          if (next === 62) {
            const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
            return this.input.charCodeAt(pos + size) === 61 ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
          }
          next !== 61 ? this.finishOp(48, 1) : this.finishOp(49, 2);
        }
        readToken_eq_excl(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (next !== 61)
            return code2 === 61 && next === 62 ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(code2 === 61 ? 29 : 35, 1);
          this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        }
        readToken_question() {
          const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
          next === 63 ? next2 === 61 ? this.finishOp(30, 3) : this.finishOp(40, 2) : next !== 46 || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
        }
        getTokenFromCode(code2) {
          switch (code2) {
            case 46:
              return void this.readToken_dot();
            case 40:
              return ++this.state.pos, void this.finishToken(10);
            case 41:
              return ++this.state.pos, void this.finishToken(11);
            case 59:
              return ++this.state.pos, void this.finishToken(13);
            case 44:
              return ++this.state.pos, void this.finishToken(12);
            case 91:
              if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                  throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                this.state.pos += 2, this.finishToken(2);
              } else
                ++this.state.pos, this.finishToken(0);
              return;
            case 93:
              return ++this.state.pos, void this.finishToken(3);
            case 123:
              if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                  throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
                this.state.pos += 2, this.finishToken(6);
              } else
                ++this.state.pos, this.finishToken(5);
              return;
            case 125:
              return ++this.state.pos, void this.finishToken(8);
            case 58:
              return void (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58 ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
            case 63:
              return void this.readToken_question();
            case 96:
              return void this.readTemplateToken();
            case 48: {
              const next = this.input.charCodeAt(this.state.pos + 1);
              if (next === 120 || next === 88)
                return void this.readRadixNumber(16);
              if (next === 111 || next === 79)
                return void this.readRadixNumber(8);
              if (next === 98 || next === 66)
                return void this.readRadixNumber(2);
            }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return void this.readNumber(false);
            case 34:
            case 39:
              return void this.readString(code2);
            case 47:
              return void this.readToken_slash();
            case 37:
            case 42:
              return void this.readToken_mult_modulo(code2);
            case 124:
            case 38:
              return void this.readToken_pipe_amp(code2);
            case 94:
              return void this.readToken_caret();
            case 43:
            case 45:
              return void this.readToken_plus_min(code2);
            case 60:
              return void this.readToken_lt();
            case 62:
              return void this.readToken_gt();
            case 61:
            case 33:
              return void this.readToken_eq_excl(code2);
            case 126:
              return void this.finishOp(36, 1);
            case 64:
              return void this.readToken_atSign();
            case 35:
              return void this.readToken_numberSign();
            case 92:
              return void this.readWord();
            default:
              if (isIdentifierStart(code2))
                return void this.readWord(code2);
          }
          throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), { unexpected: String.fromCodePoint(code2) });
        }
        finishOp(type, size) {
          const str = this.input.slice(this.state.pos, this.state.pos + size);
          this.state.pos += size, this.finishToken(type, str);
        }
        readRegexp() {
          const startLoc = this.state.startLoc, start = this.state.start + 1;
          let escaped, inClass, { pos } = this.state;
          for (;; ++pos) {
            if (pos >= this.length)
              throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
            const ch = this.input.charCodeAt(pos);
            if (isNewLine(ch))
              throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
            if (escaped)
              escaped = false;
            else {
              if (ch === 91)
                inClass = true;
              else if (ch === 93 && inClass)
                inClass = false;
              else if (ch === 47 && !inClass)
                break;
              escaped = ch === 92;
            }
          }
          const content = this.input.slice(start, pos);
          ++pos;
          let mods = "";
          const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
          for (;pos < this.length; ) {
            const cp = this.codePointAtPos(pos), char = String.fromCharCode(cp);
            if (VALID_REGEX_FLAGS.has(cp))
              cp === 118 ? mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()) : cp === 117 && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, nextPos()), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, nextPos());
            else {
              if (!isIdentifierChar(cp) && cp !== 92)
                break;
              this.raise(Errors.MalformedRegExpFlags, nextPos());
            }
            ++pos, mods += char;
          }
          this.state.pos = pos, this.finishToken(138, { pattern: content, flags: mods });
        }
        readInt(radix, len, forceLen = false, allowNumSeparator = true) {
          const { n, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
          return this.state.pos = pos, n;
        }
        readRadixNumber(radix) {
          const start = this.state.pos, startLoc = this.state.curPosition();
          let isBigInt = false;
          this.state.pos += 2;
          const val = this.readInt(radix);
          val == null && this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), { radix });
          const next = this.input.charCodeAt(this.state.pos);
          if (next === 110)
            ++this.state.pos, isBigInt = true;
          else if (next === 109)
            throw this.raise(Errors.InvalidDecimal, startLoc);
          if (isIdentifierStart(this.codePointAtPos(this.state.pos)))
            throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
          if (isBigInt) {
            const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, "");
            this.finishToken(136, str);
          } else
            this.finishToken(135, val);
        }
        readNumber(startsWithDot) {
          const start = this.state.pos, startLoc = this.state.curPosition();
          let isFloat = false, isBigInt = false, hasExponent = false, isOctal = false;
          startsWithDot || this.readInt(10) !== null || this.raise(Errors.InvalidNumber, this.state.curPosition());
          const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
          if (hasLeadingZero) {
            const integer = this.input.slice(start, this.state.pos);
            if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc), !this.state.strict) {
              const underscorePos = integer.indexOf("_");
              underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
            }
            isOctal = hasLeadingZero && !/[89]/.test(integer);
          }
          let next = this.input.charCodeAt(this.state.pos);
          if (next !== 46 || isOctal || (++this.state.pos, this.readInt(10), isFloat = true, next = this.input.charCodeAt(this.state.pos)), next !== 69 && next !== 101 || isOctal || (next = this.input.charCodeAt(++this.state.pos), next !== 43 && next !== 45 || ++this.state.pos, this.readInt(10) === null && this.raise(Errors.InvalidOrMissingExponent, startLoc), isFloat = true, hasExponent = true, next = this.input.charCodeAt(this.state.pos)), next === 110 && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, startLoc), ++this.state.pos, isBigInt = true), next === 109) {
            this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, startLoc), ++this.state.pos;
            var isDecimal = true;
          }
          if (isIdentifierStart(this.codePointAtPos(this.state.pos)))
            throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
          const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
          if (isBigInt)
            return void this.finishToken(136, str);
          if (isDecimal)
            return void this.finishToken(137, str);
          const val = isOctal ? parseInt(str, 8) : parseFloat(str);
          this.finishToken(135, val);
        }
        readCodePoint(throwOnInvalid) {
          const { code: code2, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
          return this.state.pos = pos, code2;
        }
        readString(quote) {
          const { str, pos, curLine, lineStart } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
          this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(134, str);
        }
        readTemplateContinuation() {
          this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
        }
        readTemplateToken() {
          const opening = this.input[this.state.pos], { str, firstInvalidLoc, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
          this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, firstInvalidLoc && (this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, this.sourceToOffsetPos(firstInvalidLoc.pos))), this.input.codePointAt(pos) === 96 ? this.finishToken(24, firstInvalidLoc ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, firstInvalidLoc ? null : opening + str + "${"));
        }
        recordStrictModeErrors(toParseError, at) {
          const index = at.index;
          this.state.strict && !this.state.strictErrors.has(index) ? this.raise(toParseError, at) : this.state.strictErrors.set(index, [toParseError, at]);
        }
        readWord1(firstCode) {
          this.state.containsEsc = false;
          let word = "";
          const start = this.state.pos;
          let chunkStart = this.state.pos;
          for (firstCode !== undefined && (this.state.pos += firstCode <= 65535 ? 1 : 2);this.state.pos < this.length; ) {
            const ch = this.codePointAtPos(this.state.pos);
            if (isIdentifierChar(ch))
              this.state.pos += ch <= 65535 ? 1 : 2;
            else {
              if (ch !== 92)
                break;
              {
                this.state.containsEsc = true, word += this.input.slice(chunkStart, this.state.pos);
                const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
                if (this.input.charCodeAt(++this.state.pos) !== 117) {
                  this.raise(Errors.MissingUnicodeEscape, this.state.curPosition()), chunkStart = this.state.pos - 1;
                  continue;
                }
                ++this.state.pos;
                const esc = this.readCodePoint(true);
                esc !== null && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, escStart), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
              }
            }
          }
          return word + this.input.slice(chunkStart, this.state.pos);
        }
        readWord(firstCode) {
          const word = this.readWord1(firstCode), type = keywords$1.get(word);
          type !== undefined ? this.finishToken(type, tokenLabelName(type)) : this.finishToken(132, word);
        }
        checkKeywordEscapes() {
          const { type } = this.state;
          tokenIsKeyword(type) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, { reservedWord: tokenLabelName(type) });
        }
        raise(toParseError, at, details = {}) {
          const error = toParseError(at instanceof Position ? at : at.loc.start, details);
          if (!this.options.errorRecovery)
            throw error;
          return this.isLookahead || this.state.errors.push(error), error;
        }
        raiseOverwrite(toParseError, at, details = {}) {
          const loc = at instanceof Position ? at : at.loc.start, pos = loc.index, errors = this.state.errors;
          for (let i = errors.length - 1;i >= 0; i--) {
            const error = errors[i];
            if (error.loc.index === pos)
              return errors[i] = toParseError(loc, details);
            if (error.loc.index < pos)
              break;
          }
          return this.raise(toParseError, at, details);
        }
        updateContext(prevType) {
        }
        unexpected(loc, type) {
          throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, { expected: type ? tokenLabelName(type) : null });
        }
        expectPlugin(pluginName, loc) {
          if (this.hasPlugin(pluginName))
            return true;
          throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, { missingPlugin: [pluginName] });
        }
        expectOnePlugin(pluginNames) {
          if (!pluginNames.some((name) => this.hasPlugin(name)))
            throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, { missingPlugin: pluginNames });
        }
        errorBuilder(error) {
          return (pos, lineStart, curLine) => {
            this.raise(error, buildPosition(pos, lineStart, curLine));
          };
        }
      }

      class ClassScope {
        constructor() {
          this.privateNames = new Set, this.loneAccessors = new Map, this.undefinedPrivateNames = new Map;
        }
      }

      class ClassScopeHandler {
        constructor(parser) {
          this.parser = undefined, this.stack = [], this.undefinedPrivateNames = new Map, this.parser = parser;
        }
        current() {
          return this.stack[this.stack.length - 1];
        }
        enter() {
          this.stack.push(new ClassScope);
        }
        exit() {
          const oldClassScope = this.stack.pop(), current = this.current();
          for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames))
            current ? current.undefinedPrivateNames.has(name) || current.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
        }
        declarePrivateName(name, elementType, loc) {
          const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
          let redefined = privateNames.has(name);
          if (3 & elementType) {
            const accessor = redefined && loneAccessors.get(name);
            if (accessor) {
              redefined = (3 & accessor) === (3 & elementType) || (4 & accessor) !== (4 & elementType), redefined || loneAccessors.delete(name);
            } else
              redefined || loneAccessors.set(name, elementType);
          }
          redefined && this.parser.raise(Errors.PrivateNameRedeclaration, loc, { identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
        }
        usePrivateName(name, loc) {
          let classScope;
          for (classScope of this.stack)
            if (classScope.privateNames.has(name))
              return;
          classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, { identifierName: name });
        }
      }

      class ExpressionScope {
        constructor(type = 0) {
          this.type = type;
        }
        canBeArrowParameterDeclaration() {
          return this.type === 2 || this.type === 1;
        }
        isCertainlyParameterDeclaration() {
          return this.type === 3;
        }
      }

      class ArrowHeadParsingScope extends ExpressionScope {
        constructor(type) {
          super(type), this.declarationErrors = new Map;
        }
        recordDeclarationError(ParsingErrorClass, at) {
          const index = at.index;
          this.declarationErrors.set(index, [ParsingErrorClass, at]);
        }
        clearDeclarationError(index) {
          this.declarationErrors.delete(index);
        }
        iterateErrors(iterator) {
          this.declarationErrors.forEach(iterator);
        }
      }

      class ExpressionScopeHandler {
        constructor(parser) {
          this.parser = undefined, this.stack = [new ExpressionScope], this.parser = parser;
        }
        enter(scope) {
          this.stack.push(scope);
        }
        exit() {
          this.stack.pop();
        }
        recordParameterInitializerError(toParseError, node) {
          const origin = node.loc.start, { stack } = this;
          let i = stack.length - 1, scope = stack[i];
          for (;!scope.isCertainlyParameterDeclaration(); ) {
            if (!scope.canBeArrowParameterDeclaration())
              return;
            scope.recordDeclarationError(toParseError, origin), scope = stack[--i];
          }
          this.parser.raise(toParseError, origin);
        }
        recordArrowParameterBindingError(error, node) {
          const { stack } = this, scope = stack[stack.length - 1], origin = node.loc.start;
          if (scope.isCertainlyParameterDeclaration())
            this.parser.raise(error, origin);
          else {
            if (!scope.canBeArrowParameterDeclaration())
              return;
            scope.recordDeclarationError(error, origin);
          }
        }
        recordAsyncArrowParametersError(at) {
          const { stack } = this;
          let i = stack.length - 1, scope = stack[i];
          for (;scope.canBeArrowParameterDeclaration(); )
            scope.type === 2 && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at), scope = stack[--i];
        }
        validateAsPattern() {
          const { stack } = this, currentScope = stack[stack.length - 1];
          currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
            this.parser.raise(toParseError, loc);
            let i = stack.length - 2, scope = stack[i];
            for (;scope.canBeArrowParameterDeclaration(); )
              scope.clearDeclarationError(loc.index), scope = stack[--i];
          });
        }
      }
      function newExpressionScope() {
        return new ExpressionScope;
      }

      class ProductionParameterHandler {
        constructor() {
          this.stacks = [];
        }
        enter(flags) {
          this.stacks.push(flags);
        }
        exit() {
          this.stacks.pop();
        }
        currentFlags() {
          return this.stacks[this.stacks.length - 1];
        }
        get hasAwait() {
          return (2 & this.currentFlags()) > 0;
        }
        get hasYield() {
          return (1 & this.currentFlags()) > 0;
        }
        get hasReturn() {
          return (4 & this.currentFlags()) > 0;
        }
        get hasIn() {
          return (8 & this.currentFlags()) > 0;
        }
      }
      function functionFlags(isAsync, isGenerator) {
        return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
      }

      class UtilParser extends Tokenizer {
        addExtra(node, key, value2, enumerable = true) {
          if (!node)
            return;
          let { extra } = node;
          extra == null && (extra = {}, node.extra = extra), enumerable ? extra[key] = value2 : Object.defineProperty(extra, key, { enumerable, value: value2 });
        }
        isContextual(token) {
          return this.state.type === token && !this.state.containsEsc;
        }
        isUnparsedContextual(nameStart, name) {
          const nameEnd = nameStart + name.length;
          if (this.input.slice(nameStart, nameEnd) === name) {
            const nextCh = this.input.charCodeAt(nameEnd);
            return !(isIdentifierChar(nextCh) || (64512 & nextCh) == 55296);
          }
          return false;
        }
        isLookaheadContextual(name) {
          const next = this.nextTokenStart();
          return this.isUnparsedContextual(next, name);
        }
        eatContextual(token) {
          return !!this.isContextual(token) && (this.next(), true);
        }
        expectContextual(token, toParseError) {
          if (!this.eatContextual(token)) {
            if (toParseError != null)
              throw this.raise(toParseError, this.state.startLoc);
            this.unexpected(null, token);
          }
        }
        canInsertSemicolon() {
          return this.match(140) || this.match(8) || this.hasPrecedingLineBreak();
        }
        hasPrecedingLineBreak() {
          return hasNewLine(this.input, this.offsetToSourcePos(this.state.lastTokEndLoc.index), this.state.start);
        }
        hasFollowingLineBreak() {
          return hasNewLine(this.input, this.state.end, this.nextTokenStart());
        }
        isLineTerminator() {
          return this.eat(13) || this.canInsertSemicolon();
        }
        semicolon(allowAsi = true) {
          (allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
        }
        expect(type, loc) {
          this.eat(type) || this.unexpected(loc, type);
        }
        tryParse(fn, oldState = this.state.clone()) {
          const abortSignal = { node: null };
          try {
            const node = fn((node2 = null) => {
              throw abortSignal.node = node2, abortSignal;
            });
            if (this.state.errors.length > oldState.errors.length) {
              const failState = this.state;
              return this.state = oldState, this.state.tokensLength = failState.tokensLength, { node, error: failState.errors[oldState.errors.length], thrown: false, aborted: false, failState };
            }
            return { node, error: null, thrown: false, aborted: false, failState: null };
          } catch (error) {
            const failState = this.state;
            if (this.state = oldState, error instanceof SyntaxError)
              return { node: null, error, thrown: true, aborted: false, failState };
            if (error === abortSignal)
              return { node: abortSignal.node, error: null, thrown: false, aborted: true, failState };
            throw error;
          }
        }
        checkExpressionErrors(refExpressionErrors, andThrow) {
          if (!refExpressionErrors)
            return false;
          const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
          if (!andThrow)
            return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
          shorthandAssignLoc != null && this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), doubleProtoLoc != null && this.raise(Errors.DuplicateProto, doubleProtoLoc), privateKeyLoc != null && this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), optionalParametersLoc != null && this.unexpected(optionalParametersLoc);
        }
        isLiteralPropertyName() {
          return tokenIsLiteralPropertyName(this.state.type);
        }
        isPrivateName(node) {
          return node.type === "PrivateName";
        }
        getPrivateNameSV(node) {
          return node.id.name;
        }
        hasPropertyAsPrivateName(node) {
          return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
        }
        isObjectProperty(node) {
          return node.type === "ObjectProperty";
        }
        isObjectMethod(node) {
          return node.type === "ObjectMethod";
        }
        initializeScopes(inModule = this.options.sourceType === "module") {
          const oldLabels = this.state.labels;
          this.state.labels = [];
          const oldExportedIdentifiers = this.exportedIdentifiers;
          this.exportedIdentifiers = new Set;
          const oldInModule = this.inModule;
          this.inModule = inModule;
          const oldScope = this.scope, ScopeHandler2 = this.getScopeHandler();
          this.scope = new ScopeHandler2(this, inModule);
          const oldProdParam = this.prodParam;
          this.prodParam = new ProductionParameterHandler;
          const oldClassScope = this.classScope;
          this.classScope = new ClassScopeHandler(this);
          const oldExpressionScope = this.expressionScope;
          return this.expressionScope = new ExpressionScopeHandler(this), () => {
            this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
          };
        }
        enterInitialScopes() {
          let paramFlags = 0;
          this.inModule && (paramFlags |= 2), this.scope.enter(1), this.prodParam.enter(paramFlags);
        }
        checkDestructuringPrivate(refExpressionErrors) {
          const { privateKeyLoc } = refExpressionErrors;
          privateKeyLoc !== null && this.expectPlugin("destructuringPrivate", privateKeyLoc);
        }
      }

      class ExpressionErrors {
        constructor() {
          this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
        }
      }

      class Node {
        constructor(parser, pos, loc) {
          this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation(loc), parser != null && parser.options.ranges && (this.range = [pos, 0]), parser != null && parser.filename && (this.loc.filename = parser.filename);
        }
      }
      const NodePrototype = Node.prototype;
      function cloneIdentifier(node) {
        const { type, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
        return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, type === "Placeholder" && (cloned.expectedNode = node.expectedNode), cloned;
      }
      function cloneStringLiteral(node) {
        const { type, start, end, loc, range, extra } = node;
        if (type === "Placeholder")
          return function(node2) {
            return cloneIdentifier(node2);
          }(node);
        const cloned = Object.create(NodePrototype);
        return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, node.raw !== undefined ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
      }
      NodePrototype.__clone = function() {
        const newNode = new Node(undefined, this.start, this.loc.start), keys = Object.keys(this);
        for (let i = 0, length = keys.length;i < length; i++) {
          const key = keys[i];
          key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments" && (newNode[key] = this[key]);
        }
        return newNode;
      };

      class NodeUtils extends UtilParser {
        startNode() {
          const loc = this.state.startLoc;
          return new Node(this, loc.index, loc);
        }
        startNodeAt(loc) {
          return new Node(this, loc.index, loc);
        }
        startNodeAtNode(type) {
          return this.startNodeAt(type.loc.start);
        }
        finishNode(node, type) {
          return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
        }
        finishNodeAt(node, type, endLoc) {
          return node.type = type, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
        }
        resetStartLocation(node, startLoc) {
          node.start = startLoc.index, node.loc.start = startLoc, this.options.ranges && (node.range[0] = startLoc.index);
        }
        resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
          node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
        }
        resetStartLocationFromNode(node, locationNode) {
          this.resetStartLocation(node, locationNode.loc.start);
        }
      }
      const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), FlowErrors = ParseErrorEnum`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`, EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`, EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`, EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`, EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`, EnumStringMemberInconsistentlyInitialized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
      function hasTypeImportKind(node) {
        return node.importKind === "type" || node.importKind === "typeof";
      }
      const exportSuggestions = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
      const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
      const entities = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" }, JsxErrors = ParseErrorEnum`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
      function isFragment(object) {
        return !!object && (object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment");
      }
      function getQualifiedJSXName(object) {
        if (object.type === "JSXIdentifier")
          return object.name;
        if (object.type === "JSXNamespacedName")
          return object.namespace.name + ":" + object.name.name;
        if (object.type === "JSXMemberExpression")
          return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
        throw new Error("Node had unexpected type: " + object.type);
      }

      class TypeScriptScope extends Scope {
        constructor(...args) {
          super(...args), this.tsNames = new Map;
        }
      }

      class TypeScriptScopeHandler extends ScopeHandler {
        constructor(...args) {
          super(...args), this.importsStack = [];
        }
        createScope(flags) {
          return this.importsStack.push(new Set), new TypeScriptScope(flags);
        }
        enter(flags) {
          flags === 256 && this.importsStack.push(new Set), super.enter(flags);
        }
        exit() {
          const flags = super.exit();
          return flags === 256 && this.importsStack.pop(), flags;
        }
        hasImport(name, allowShadow) {
          const len = this.importsStack.length;
          if (this.importsStack[len - 1].has(name))
            return true;
          if (!allowShadow && len > 1) {
            for (let i = 0;i < len - 1; i++)
              if (this.importsStack[i].has(name))
                return true;
          }
          return false;
        }
        declareName(name, bindingType, loc) {
          if (4096 & bindingType)
            return this.hasImport(name, true) && this.parser.raise(Errors.VarRedeclaration, loc, { identifierName: name }), void this.importsStack[this.importsStack.length - 1].add(name);
          const scope = this.currentScope();
          let type = scope.tsNames.get(name) || 0;
          if (1024 & bindingType)
            return this.maybeExportDefined(scope, name), void scope.tsNames.set(name, 16 | type);
          super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), type |= 1), 256 & bindingType && (type |= 2), 512 & bindingType && (type |= 4), 128 & bindingType && (type |= 8), type && scope.tsNames.set(name, type);
        }
        isRedeclaredInScope(scope, name, bindingType) {
          const type = scope.tsNames.get(name);
          if ((2 & type) > 0) {
            if (256 & bindingType) {
              return !!(512 & bindingType) !== (4 & type) > 0;
            }
            return true;
          }
          return 128 & bindingType && (8 & type) > 0 ? !!(2 & scope.names.get(name)) && !!(1 & bindingType) : !!(2 & bindingType && (1 & type) > 0) || super.isRedeclaredInScope(scope, name, bindingType);
        }
        checkLocalExport(id) {
          const { name } = id;
          if (this.hasImport(name))
            return;
          for (let i = this.scopeStack.length - 1;i >= 0; i--) {
            const type = this.scopeStack[i].tsNames.get(name);
            if ((1 & type) > 0 || (16 & type) > 0)
              return;
          }
          super.checkLocalExport(id);
        }
      }
      const unwrapParenthesizedExpression = (node) => node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;

      class LValParser extends NodeUtils {
        toAssignable(node, isLHS = false) {
          var _node$extra, _node$extra3;
          let parenthesized;
          switch ((node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? parenthesized.type === "Identifier" ? this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node) : parenthesized.type === "MemberExpression" || this.isOptionalMemberExpression(parenthesized) || this.raise(Errors.InvalidParenthesizedAssignment, node) : this.raise(Errors.InvalidParenthesizedAssignment, node)), node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern";
              for (let i = 0, length = node.properties.length, last = length - 1;i < length; i++) {
                var _node$extra2;
                const prop = node.properties[i], isLast = i === last;
                this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
              }
              break;
            case "ObjectProperty": {
              const { key, value: value2 } = node;
              this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
              break;
            }
            case "SpreadElement":
              throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
            case "ArrayExpression":
              node.type = "ArrayPattern", this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? undefined : _node$extra3.trailingCommaLoc, isLHS);
              break;
            case "AssignmentExpression":
              node.operator !== "=" && this.raise(Errors.MissingEqInAssignment, node.left.loc.end), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(parenthesized, isLHS);
          }
        }
        toAssignableObjectExpressionProp(prop, isLast, isLHS) {
          if (prop.type === "ObjectMethod")
            this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
          else if (prop.type === "SpreadElement") {
            prop.type = "RestElement";
            const arg = prop.argument;
            this.checkToRestConversion(arg, false), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, prop);
          } else
            this.toAssignable(prop, isLHS);
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          const end = exprList.length - 1;
          for (let i = 0;i <= end; i++) {
            const elt = exprList[i];
            if (elt) {
              if (elt.type === "SpreadElement") {
                elt.type = "RestElement";
                const arg = elt.argument;
                this.checkToRestConversion(arg, true), this.toAssignable(arg, isLHS);
              } else
                this.toAssignable(elt, isLHS);
              elt.type === "RestElement" && (i < end ? this.raise(Errors.RestTrailingComma, elt) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, trailingCommaLoc));
            }
          }
        }
        isAssignable(node, isBinding) {
          switch (node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              return true;
            case "ObjectExpression": {
              const last = node.properties.length - 1;
              return node.properties.every((prop, i) => prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop));
            }
            case "ObjectProperty":
              return this.isAssignable(node.value);
            case "SpreadElement":
              return this.isAssignable(node.argument);
            case "ArrayExpression":
              return node.elements.every((element) => element === null || this.isAssignable(element));
            case "AssignmentExpression":
              return node.operator === "=";
            case "ParenthesizedExpression":
              return this.isAssignable(node.expression);
            case "MemberExpression":
            case "OptionalMemberExpression":
              return !isBinding;
            default:
              return false;
          }
        }
        toReferencedList(exprList, isParenthesizedExpr) {
          return exprList;
        }
        toReferencedListDeep(exprList, isParenthesizedExpr) {
          this.toReferencedList(exprList, isParenthesizedExpr);
          for (const expr of exprList)
            (expr == null ? undefined : expr.type) === "ArrayExpression" && this.toReferencedListDeep(expr.elements);
        }
        parseSpread(refExpressionErrors) {
          const node = this.startNode();
          return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined), this.finishNode(node, "SpreadElement");
        }
        parseRestBinding() {
          const node = this.startNode();
          return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
        }
        parseBindingAtom() {
          switch (this.state.type) {
            case 0: {
              const node = this.startNode();
              return this.next(), node.elements = this.parseBindingList(3, 93, 1), this.finishNode(node, "ArrayPattern");
            }
            case 5:
              return this.parseObjectLike(8, true);
          }
          return this.parseIdentifier();
        }
        parseBindingList(close, closeCharCode, flags) {
          const allowEmpty = 1 & flags, elts = [];
          let first = true;
          for (;!this.eat(close); )
            if (first ? first = false : this.expect(12), allowEmpty && this.match(12))
              elts.push(null);
            else {
              if (this.eat(close))
                break;
              if (this.match(21)) {
                let rest = this.parseRestBinding();
                if ((this.hasPlugin("flow") || 2 & flags) && (rest = this.parseFunctionParamType(rest)), elts.push(rest), !this.checkCommaAfterRest(closeCharCode)) {
                  this.expect(close);
                  break;
                }
              } else {
                const decorators = [];
                for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);this.match(26); )
                  decorators.push(this.parseDecorator());
                elts.push(this.parseAssignableListItem(flags, decorators));
              }
            }
          return elts;
        }
        parseBindingRestProperty(prop) {
          return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
        }
        parseBindingProperty() {
          const { type, startLoc } = this.state;
          if (type === 21)
            return this.parseBindingRestProperty(this.startNode());
          const prop = this.startNode();
          return type === 139 ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = false, this.parseObjPropValue(prop, startLoc, false, false, true, false);
        }
        parseAssignableListItem(flags, decorators) {
          const left = this.parseMaybeDefault();
          (this.hasPlugin("flow") || 2 & flags) && this.parseFunctionParamType(left);
          const elt = this.parseMaybeDefault(left.loc.start, left);
          return decorators.length && (left.decorators = decorators), elt;
        }
        parseFunctionParamType(param) {
          return param;
        }
        parseMaybeDefault(startLoc, left) {
          var _left;
          if (startLoc != null || (startLoc = this.state.startLoc), left = (_left = left) != null ? _left : this.parseBindingAtom(), !this.eat(29))
            return left;
          const node = this.startNodeAt(startLoc);
          return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          switch (type) {
            case "AssignmentPattern":
              return "left";
            case "RestElement":
              return "argument";
            case "ObjectProperty":
              return "value";
            case "ParenthesizedExpression":
              return "expression";
            case "ArrayPattern":
              return "elements";
            case "ObjectPattern":
              return "properties";
          }
          return false;
        }
        isOptionalMemberExpression(expression) {
          return expression.type === "OptionalMemberExpression";
        }
        checkLVal(expression, ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {
          var _expression$extra;
          const type = expression.type;
          if (this.isObjectMethod(expression))
            return;
          const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
          if (isOptionalMemberExpression || type === "MemberExpression")
            return isOptionalMemberExpression && (this.expectPlugin("optionalChainingAssign", expression.loc.start), ancestor.type !== "AssignmentExpression" && this.raise(Errors.InvalidLhsOptionalChaining, expression, { ancestor })), void (binding !== 64 && this.raise(Errors.InvalidPropertyBindingPattern, expression));
          if (type === "Identifier") {
            this.checkIdentifier(expression, binding, strictModeChanged);
            const { name } = expression;
            return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, expression) : checkClashes.add(name)));
          }
          const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
          if (validity === true)
            return;
          if (validity === false) {
            const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
            return void this.raise(ParseErrorClass, expression, { ancestor });
          }
          let key, isParenthesizedExpression;
          typeof validity == "string" ? (key = validity, isParenthesizedExpression = type === "ParenthesizedExpression") : [key, isParenthesizedExpression] = validity;
          const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? { type } : ancestor, val = expression[key];
          if (Array.isArray(val))
            for (const child of val)
              child && this.checkLVal(child, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
          else
            val && this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
        }
        checkIdentifier(at, bindingType, strictModeChanged = false) {
          this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name)) && (bindingType === 64 ? this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name }) : this.raise(Errors.StrictEvalArgumentsBinding, at, { bindingName: at.name })), 8192 & bindingType && at.name === "let" && this.raise(Errors.LetInLexicalBinding, at), 64 & bindingType || this.declareNameFromIdentifier(at, bindingType);
        }
        declareNameFromIdentifier(identifier, binding) {
          this.scope.declareName(identifier.name, binding, identifier.loc.start);
        }
        checkToRestConversion(node, allowPattern) {
          switch (node.type) {
            case "ParenthesizedExpression":
              this.checkToRestConversion(node.expression, allowPattern);
              break;
            case "Identifier":
            case "MemberExpression":
              break;
            case "ArrayExpression":
            case "ObjectExpression":
              if (allowPattern)
                break;
            default:
              this.raise(Errors.InvalidRestAssignmentPattern, node);
          }
        }
        checkCommaAfterRest(close) {
          return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc), true);
        }
      }
      function assert(x) {
        if (!x)
          throw new Error("Assert fail");
      }
      const TSErrors = ParseErrorEnum`typescript`({ AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`, AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.", AccessorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccessorCannotHaveTypeParameters: "An accessor cannot have type parameters.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`, EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier", IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccessorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccessorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccessorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.` });
      function tsIsAccessModifier(modifier) {
        return modifier === "private" || modifier === "public" || modifier === "protected";
      }
      function tsIsVarianceAnnotations(modifier) {
        return modifier === "in" || modifier === "out";
      }
      function isPossiblyLiteralEnum(expression) {
        if (expression.type !== "MemberExpression")
          return false;
        const { computed, property } = expression;
        return (!computed || property.type === "StringLiteral" || !(property.type !== "TemplateLiteral" || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
      }
      function isValidAmbientConstInitializer(expression, estree) {
        var _expression$extra;
        const { type } = expression;
        if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized)
          return false;
        if (estree) {
          if (type === "Literal") {
            const { value: value2 } = expression;
            if (typeof value2 == "string" || typeof value2 == "boolean")
              return true;
          }
        } else if (type === "StringLiteral" || type === "BooleanLiteral")
          return true;
        return !(!isNumber(expression, estree) && !function(expression2, estree2) {
          if (expression2.type === "UnaryExpression") {
            const { operator, argument } = expression2;
            if (operator === "-" && isNumber(argument, estree2))
              return true;
          }
          return false;
        }(expression, estree)) || (type === "TemplateLiteral" && expression.expressions.length === 0 || !!isPossiblyLiteralEnum(expression));
      }
      function isNumber(expression, estree) {
        return estree ? expression.type === "Literal" && (typeof expression.value == "number" || ("bigint" in expression)) : expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
      }
      function isUncomputedMemberExpressionChain(expression) {
        return expression.type === "Identifier" || expression.type === "MemberExpression" && !expression.computed && isUncomputedMemberExpressionChain(expression.object);
      }
      const PlaceholderErrors = ParseErrorEnum`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." });
      const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"], TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
      const mixinPlugins = { estree: (superClass) => class extends superClass {
        parse() {
          const file = toESTreeLocation(super.parse());
          return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
        }
        parseRegExpLiteral({ pattern, flags }) {
          let regex = null;
          try {
            regex = new RegExp(pattern, flags);
          } catch (_) {
          }
          const node = this.estreeParseLiteral(regex);
          return node.regex = { pattern, flags }, node;
        }
        parseBigIntLiteral(value2) {
          let bigInt;
          try {
            bigInt = BigInt(value2);
          } catch (_unused) {
            bigInt = null;
          }
          const node = this.estreeParseLiteral(bigInt);
          return node.bigint = String(node.value || value2), node;
        }
        parseDecimalLiteral(value2) {
          const node = this.estreeParseLiteral(null);
          return node.decimal = String(node.value || value2), node;
        }
        estreeParseLiteral(value2) {
          return this.parseLiteral(value2, "Literal");
        }
        parseStringLiteral(value2) {
          return this.estreeParseLiteral(value2);
        }
        parseNumericLiteral(value2) {
          return this.estreeParseLiteral(value2);
        }
        parseNullLiteral() {
          return this.estreeParseLiteral(null);
        }
        parseBooleanLiteral(value2) {
          return this.estreeParseLiteral(value2);
        }
        directiveToStmt(directive) {
          const expression = directive.value;
          delete directive.value, expression.type = "Literal", expression.raw = expression.extra.raw, expression.value = expression.extra.expressionValue;
          const stmt = directive;
          return stmt.type = "ExpressionStatement", stmt.expression = expression, stmt.directive = expression.extra.rawValue, delete expression.extra, stmt;
        }
        initFunction(node, isAsync) {
          super.initFunction(node, isAsync), node.expression = false;
        }
        checkDeclaration(node) {
          node != null && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
        }
        getObjectOrClassMethodParams(method) {
          return method.value.params;
        }
        isValidDirective(stmt) {
          var _stmt$expression$extr;
          return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value == "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
        }
        parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
          super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
          const directiveStatements = node.directives.map((d) => this.directiveToStmt(d));
          node.body = directiveStatements.concat(node.body), delete node.directives;
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
        }
        parsePrivateName() {
          const node = super.parsePrivateName();
          return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
        }
        convertPrivateNameToPrivateIdentifier(node) {
          const name = super.getPrivateNameSV(node);
          return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
        }
        isPrivateName(node) {
          return this.getPluginOption("estree", "classFeatures") ? node.type === "PrivateIdentifier" : super.isPrivateName(node);
        }
        getPrivateNameSV(node) {
          return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
        }
        parseLiteral(value2, type) {
          const node = super.parseLiteral(value2, type);
          return node.raw = node.extra.raw, delete node.extra, node;
        }
        parseFunctionBody(node, allowExpression, isMethod = false) {
          super.parseFunctionBody(node, allowExpression, isMethod), node.expression = node.body.type !== "BlockStatement";
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
          let funcNode = this.startNode();
          return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, type === "ClassPrivateMethod" && (node.computed = false), this.finishNode(node, "MethodDefinition");
        }
        nameIsConstructor(key) {
          return key.type === "Literal" ? key.value === "constructor" : super.nameIsConstructor(key);
        }
        parseClassProperty(...args) {
          const propertyNode = super.parseClassProperty(...args);
          return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
        }
        parseClassPrivateProperty(...args) {
          const propertyNode = super.parseClassPrivateProperty(...args);
          return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = false, propertyNode) : propertyNode;
        }
        parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
          const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
          return node && (node.type = "Property", node.kind === "method" && (node.kind = "init"), node.shorthand = false), node;
        }
        parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
          const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
          return node && (node.kind = "init", node.type = "Property"), node;
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
        }
        isAssignable(node, isBinding) {
          return node != null && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
        }
        toAssignable(node, isLHS = false) {
          if (node != null && this.isObjectProperty(node)) {
            const { key, value: value2 } = node;
            this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
          } else
            super.toAssignable(node, isLHS);
        }
        toAssignableObjectExpressionProp(prop, isLast, isLHS) {
          prop.type !== "Property" || prop.kind !== "get" && prop.kind !== "set" ? prop.type === "Property" && prop.method ? this.raise(Errors.PatternHasMethod, prop.key) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS) : this.raise(Errors.PatternHasAccessor, prop.key);
        }
        finishCallExpression(unfinished, optional) {
          const node = super.finishCallExpression(unfinished, optional);
          var _ref, _ref2;
          node.callee.type === "Import" && (node.type = "ImportExpression", node.source = node.arguments[0], node.options = (_ref = node.arguments[1]) != null ? _ref : null, node.attributes = (_ref2 = node.arguments[1]) != null ? _ref2 : null, delete node.arguments, delete node.callee);
          return node;
        }
        toReferencedArguments(node) {
          node.type !== "ImportExpression" && super.toReferencedArguments(node);
        }
        parseExport(unfinished, decorators) {
          const exportStartLoc = this.state.lastTokStartLoc, node = super.parseExport(unfinished, decorators);
          switch (node.type) {
            case "ExportAllDeclaration":
              node.exported = null;
              break;
            case "ExportNamedDeclaration":
              node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier" && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
            case "ExportDefaultDeclaration": {
              var _declaration$decorato;
              const { declaration } = node;
              (declaration == null ? undefined : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? undefined : _declaration$decorato.length) > 0 && declaration.start === node.start && this.resetStartLocation(node, exportStartLoc);
            }
          }
          return node;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          const node = super.parseSubscript(base, startLoc, noCalls, state);
          if (state.optionalChainMember) {
            if (node.type !== "OptionalMemberExpression" && node.type !== "OptionalCallExpression" || (node.type = node.type.substring(8)), state.stop) {
              const chain = this.startNodeAtNode(node);
              return chain.expression = node, this.finishNode(chain, "ChainExpression");
            }
          } else
            node.type !== "MemberExpression" && node.type !== "CallExpression" || (node.optional = false);
          return node;
        }
        isOptionalMemberExpression(node) {
          return node.type === "ChainExpression" ? node.expression.type === "MemberExpression" : super.isOptionalMemberExpression(node);
        }
        hasPropertyAsPrivateName(node) {
          return node.type === "ChainExpression" && (node = node.expression), super.hasPropertyAsPrivateName(node);
        }
        isObjectProperty(node) {
          return node.type === "Property" && node.kind === "init" && !node.method;
        }
        isObjectMethod(node) {
          return node.type === "Property" && (node.method || node.kind === "get" || node.kind === "set");
        }
        finishNodeAt(node, type, endLoc) {
          return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
        }
        resetStartLocation(node, startLoc) {
          super.resetStartLocation(node, startLoc), toESTreeLocation(node);
        }
        resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
          super.resetEndLocation(node, endLoc), toESTreeLocation(node);
        }
      }, jsx: (superClass) => class extends superClass {
        jsxReadToken() {
          let out = "", chunkStart = this.state.pos;
          for (;; ) {
            if (this.state.pos >= this.length)
              throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
              case 60:
              case 123:
                return this.state.pos === this.state.start ? void (ch === 60 && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(143)) : super.getTokenFromCode(ch)) : (out += this.input.slice(chunkStart, this.state.pos), void this.finishToken(142, out));
              case 38:
                out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
                break;
              default:
                isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(true), chunkStart = this.state.pos) : ++this.state.pos;
            }
          }
        }
        jsxReadNewLine(normalizeCRLF) {
          const ch = this.input.charCodeAt(this.state.pos);
          let out;
          return ++this.state.pos, ch === 13 && this.input.charCodeAt(this.state.pos) === 10 ? (++this.state.pos, out = normalizeCRLF ? `
` : `\r
`) : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
        }
        jsxReadString(quote) {
          let out = "", chunkStart = ++this.state.pos;
          for (;; ) {
            if (this.state.pos >= this.length)
              throw this.raise(Errors.UnterminatedString, this.state.startLoc);
            const ch = this.input.charCodeAt(this.state.pos);
            if (ch === quote)
              break;
            ch === 38 ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(false), chunkStart = this.state.pos) : ++this.state.pos;
          }
          out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(134, out);
        }
        jsxReadEntity() {
          const startPos = ++this.state.pos;
          if (this.codePointAtPos(this.state.pos) === 35) {
            ++this.state.pos;
            let radix = 10;
            this.codePointAtPos(this.state.pos) === 120 && (radix = 16, ++this.state.pos);
            const codePoint = this.readInt(radix, undefined, false, "bail");
            if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59)
              return ++this.state.pos, String.fromCodePoint(codePoint);
          } else {
            let count = 0, semi = false;
            for (;count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) === 59); )
              ++this.state.pos;
            if (semi) {
              const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
              if (++this.state.pos, entity)
                return entity;
            }
          }
          return this.state.pos = startPos, "&";
        }
        jsxReadWord() {
          let ch;
          const start = this.state.pos;
          do {
            ch = this.input.charCodeAt(++this.state.pos);
          } while (isIdentifierChar(ch) || ch === 45);
          this.finishToken(141, this.input.slice(start, this.state.pos));
        }
        jsxParseIdentifier() {
          const node = this.startNode();
          return this.match(141) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
        }
        jsxParseNamespacedName() {
          const startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
          if (!this.eat(14))
            return name;
          const node = this.startNodeAt(startLoc);
          return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
        }
        jsxParseElementName() {
          const startLoc = this.state.startLoc;
          let node = this.jsxParseNamespacedName();
          if (node.type === "JSXNamespacedName")
            return node;
          for (;this.eat(16); ) {
            const newNode = this.startNodeAt(startLoc);
            newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
          }
          return node;
        }
        jsxParseAttributeValue() {
          let node;
          switch (this.state.type) {
            case 5:
              return node = this.startNode(), this.setContext(types.brace), this.next(), node = this.jsxParseExpressionContainer(node, types.j_oTag), node.expression.type === "JSXEmptyExpression" && this.raise(JsxErrors.AttributeIsEmpty, node), node;
            case 143:
            case 134:
              return this.parseExprAtom();
            default:
              throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
          }
        }
        jsxParseEmptyExpression() {
          const node = this.startNodeAt(this.state.lastTokEndLoc);
          return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
        }
        jsxParseSpreadChild(node) {
          return this.next(), node.expression = this.parseExpression(), this.setContext(types.j_expr), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadChild");
        }
        jsxParseExpressionContainer(node, previousContext) {
          if (this.match(8))
            node.expression = this.jsxParseEmptyExpression();
          else {
            const expression = this.parseExpression();
            node.expression = expression;
          }
          return this.setContext(previousContext), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
        }
        jsxParseAttribute() {
          const node = this.startNode();
          return this.match(5) ? (this.setContext(types.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
        }
        jsxParseOpeningElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          return this.eat(144) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
        }
        jsxParseOpeningElementAfterName(node) {
          const attributes = [];
          for (;!this.match(56) && !this.match(144); )
            attributes.push(this.jsxParseAttribute());
          return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(144), this.finishNode(node, "JSXOpeningElement");
        }
        jsxParseClosingElementAt(startLoc) {
          const node = this.startNodeAt(startLoc);
          return this.eat(144) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(144), this.finishNode(node, "JSXClosingElement"));
        }
        jsxParseElementAt(startLoc) {
          const node = this.startNodeAt(startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startLoc);
          let closingElement = null;
          if (!openingElement.selfClosing) {
            contents:
              for (;; )
                switch (this.state.type) {
                  case 143:
                    if (startLoc = this.state.startLoc, this.next(), this.eat(56)) {
                      closingElement = this.jsxParseClosingElementAt(startLoc);
                      break contents;
                    }
                    children.push(this.jsxParseElementAt(startLoc));
                    break;
                  case 142:
                    children.push(this.parseLiteral(this.state.value, "JSXText"));
                    break;
                  case 5: {
                    const node2 = this.startNode();
                    this.setContext(types.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node2)) : children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                    break;
                  }
                  default:
                    this.unexpected();
                }
            isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null ? this.raise(JsxErrors.MissingClosingTagFragment, closingElement) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, closingElement, { openingTagName: getQualifiedJSXName(openingElement.name) });
          }
          if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47))
            throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
          return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
        }
        jsxParseElement() {
          const startLoc = this.state.startLoc;
          return this.next(), this.jsxParseElementAt(startLoc);
        }
        setContext(newContext) {
          const { context } = this.state;
          context[context.length - 1] = newContext;
        }
        parseExprAtom(refExpressionErrors) {
          return this.match(143) ? this.jsxParseElement() : this.match(47) && this.input.charCodeAt(this.state.pos) !== 33 ? (this.replaceToken(143), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
        }
        skipSpace() {
          this.curContext().preserveSpace || super.skipSpace();
        }
        getTokenFromCode(code2) {
          const context = this.curContext();
          if (context !== types.j_expr) {
            if (context === types.j_oTag || context === types.j_cTag) {
              if (isIdentifierStart(code2))
                return void this.jsxReadWord();
              if (code2 === 62)
                return ++this.state.pos, void this.finishToken(144);
              if ((code2 === 34 || code2 === 39) && context === types.j_oTag)
                return void this.jsxReadString(code2);
            }
            if (code2 === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33)
              return ++this.state.pos, void this.finishToken(143);
            super.getTokenFromCode(code2);
          } else
            this.jsxReadToken();
        }
        updateContext(prevType) {
          const { context, type } = this.state;
          if (type === 56 && prevType === 143)
            context.splice(-2, 2, types.j_cTag), this.state.canStartJSXElement = false;
          else if (type === 143)
            context.push(types.j_oTag);
          else if (type === 144) {
            const out = context[context.length - 1];
            out === types.j_oTag && prevType === 56 || out === types.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types.j_expr) : (this.setContext(types.j_expr), this.state.canStartJSXElement = true);
          } else
            this.state.canStartJSXElement = tokenBeforeExprs[type];
        }
      }, flow: (superClass) => class extends superClass {
        constructor(...args) {
          super(...args), this.flowPragma = undefined;
        }
        getScopeHandler() {
          return FlowScopeHandler;
        }
        shouldParseTypes() {
          return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
        }
        finishToken(type, val) {
          type !== 134 && type !== 13 && type !== 28 && this.flowPragma === undefined && (this.flowPragma = null), super.finishToken(type, val);
        }
        addComment(comment) {
          if (this.flowPragma === undefined) {
            const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
            if (matches)
              if (matches[1] === "flow")
                this.flowPragma = "flow";
              else {
                if (matches[1] !== "noflow")
                  throw new Error("Unexpected flow pragma");
                this.flowPragma = "noflow";
              }
            else
              ;
          }
          super.addComment(comment);
        }
        flowParseTypeInitialiser(tok) {
          const oldInType = this.state.inType;
          this.state.inType = true, this.expect(tok || 14);
          const type = this.flowParseType();
          return this.state.inType = oldInType, type;
        }
        flowParsePredicate() {
          const node = this.startNode(), moduloLoc = this.state.startLoc;
          return this.next(), this.expectContextual(110), this.state.lastTokStartLoc.index > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
        }
        flowParseTypeAndPredicateInitialiser() {
          const oldInType = this.state.inType;
          this.state.inType = true, this.expect(14);
          let type = null, predicate = null;
          return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type, predicate];
        }
        flowParseDeclareClass(node) {
          return this.next(), this.flowParseInterfaceish(node, true), this.finishNode(node, "DeclareClass");
        }
        flowParseDeclareFunction(node) {
          this.next();
          const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
          this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
          const tmp = this.flowParseFunctionTypeParams();
          return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
        }
        flowParseDeclare(node, insideModule) {
          return this.match(80) ? this.flowParseDeclareClass(node) : this.match(68) ? this.flowParseDeclareFunction(node) : this.match(74) ? this.flowParseDeclareVariable(node) : this.eatContextual(127) ? this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc), this.flowParseDeclareModule(node)) : this.isContextual(130) ? this.flowParseDeclareTypeAlias(node) : this.isContextual(131) ? this.flowParseDeclareOpaqueType(node) : this.isContextual(129) ? this.flowParseDeclareInterface(node) : this.match(82) ? this.flowParseDeclareExportDeclaration(node, insideModule) : void this.unexpected();
        }
        flowParseDeclareVariable(node) {
          return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
        }
        flowParseDeclareModule(node) {
          this.scope.enter(0), this.match(134) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
          const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
          for (this.expect(5);!this.match(8); ) {
            let bodyNode2 = this.startNode();
            this.match(83) ? (this.next(), this.isContextual(130) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc), super.parseImport(bodyNode2)) : (this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode2 = this.flowParseDeclare(bodyNode2, true)), body.push(bodyNode2);
          }
          this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
          let kind = null, hasModuleExport = false;
          return body.forEach((bodyElement) => {
            !function(bodyElement2) {
              return bodyElement2.type === "DeclareExportAllDeclaration" || bodyElement2.type === "DeclareExportDeclaration" && (!bodyElement2.declaration || bodyElement2.declaration.type !== "TypeAlias" && bodyElement2.declaration.type !== "InterfaceDeclaration");
            }(bodyElement) ? bodyElement.type === "DeclareModuleExports" && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement), kind === "ES" && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "CommonJS", hasModuleExport = true) : (kind === "CommonJS" && this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement), kind = "ES");
          }), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
        }
        flowParseDeclareExportDeclaration(node, insideModule) {
          if (this.expect(82), this.eat(65))
            return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = true, this.finishNode(node, "DeclareExportDeclaration");
          if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
            const label = this.state.value;
            throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, { unsupportedExportKind: label, suggestion: exportSuggestions[label] });
          }
          return this.match(74) || this.match(68) || this.match(80) || this.isContextual(131) ? (node.declaration = this.flowParseDeclare(this.startNode()), node.default = false, this.finishNode(node, "DeclareExportDeclaration")) : this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131) ? ((node = this.parseExport(node, null)).type === "ExportNamedDeclaration" && (node.type = "ExportDeclaration", node.default = false, delete node.exportKind), node.type = "Declare" + node.type, node) : void this.unexpected();
        }
        flowParseDeclareModuleExports(node) {
          return this.next(), this.expectContextual(111), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
        }
        flowParseDeclareTypeAlias(node) {
          this.next();
          const finished = this.flowParseTypeAlias(node);
          return finished.type = "DeclareTypeAlias", finished;
        }
        flowParseDeclareOpaqueType(node) {
          this.next();
          const finished = this.flowParseOpaqueType(node, true);
          return finished.type = "DeclareOpaqueType", finished;
        }
        flowParseDeclareInterface(node) {
          return this.next(), this.flowParseInterfaceish(node, false), this.finishNode(node, "DeclareInterface");
        }
        flowParseInterfaceish(node, isClass) {
          if (node.id = this.flowParseRestrictedIdentifier(!isClass, true), this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], this.eat(81))
            do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (!isClass && this.eat(12));
          if (isClass) {
            if (node.implements = [], node.mixins = [], this.eatContextual(117))
              do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            if (this.eatContextual(113))
              do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
          }
          node.body = this.flowParseObjectType({ allowStatic: isClass, allowExact: false, allowSpread: false, allowProto: isClass, allowInexact: false });
        }
        flowParseInterfaceExtends() {
          const node = this.startNode();
          return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
        }
        flowParseInterface(node) {
          return this.flowParseInterfaceish(node, false), this.finishNode(node, "InterfaceDeclaration");
        }
        checkNotUnderscore(word) {
          word === "_" && this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
        }
        checkReservedType(word, startLoc, declaration) {
          reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, { reservedType: word });
        }
        flowParseRestrictedIdentifier(liberal, declaration) {
          return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
        }
        flowParseTypeAlias(node) {
          return node.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
        }
        flowParseOpaqueType(node, declare) {
          return this.expectContextual(130), node.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
        }
        flowParseTypeParameter(requireDefault = false) {
          const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
          return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc), this.finishNode(node, "TypeParameter");
        }
        flowParseTypeParameterDeclaration() {
          const oldInType = this.state.inType, node = this.startNode();
          node.params = [], this.state.inType = true, this.match(47) || this.match(143) ? this.next() : this.unexpected();
          let defaultRequired = false;
          do {
            const typeParameter = this.flowParseTypeParameter(defaultRequired);
            node.params.push(typeParameter), typeParameter.default && (defaultRequired = true), this.match(48) || this.expect(12);
          } while (!this.match(48));
          return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
        }
        flowParseTypeParameterInstantiation() {
          const node = this.startNode(), oldInType = this.state.inType;
          node.params = [], this.state.inType = true, this.expect(47);
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          for (this.state.noAnonFunctionType = false;!this.match(48); )
            node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
          return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseTypeParameterInstantiationCallOrNew() {
          const node = this.startNode(), oldInType = this.state.inType;
          for (node.params = [], this.state.inType = true, this.expect(47);!this.match(48); )
            node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
          return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
        }
        flowParseInterfaceType() {
          const node = this.startNode();
          if (this.expectContextual(129), node.extends = [], this.eat(81))
            do {
              node.extends.push(this.flowParseInterfaceExtends());
            } while (this.eat(12));
          return node.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(node, "InterfaceTypeAnnotation");
        }
        flowParseObjectPropertyKey() {
          return this.match(135) || this.match(134) ? super.parseExprAtom() : this.parseIdentifier(true);
        }
        flowParseObjectTypeIndexer(node, isStatic, variance) {
          return node.static = isStatic, this.lookahead().type === 14 ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
        }
        flowParseObjectTypeInternalSlot(node, isStatic) {
          return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = true, node.optional = false, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start))) : (node.method = false, this.eat(17) && (node.optional = true), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
        }
        flowParseObjectTypeMethodish(node) {
          for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(true), node.this.name = null, this.match(11) || this.expect(12));!this.match(11) && !this.match(21); )
            node.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
          return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
        }
        flowParseObjectTypeCallProperty(node, isStatic) {
          const valueNode = this.startNode();
          return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
        }
        flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          const nodeStart = this.startNode();
          let endDelim, exact;
          nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
          let inexact = false;
          for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = true) : (this.expect(5), endDelim = 8, exact = false), nodeStart.exact = exact;!this.match(endDelim); ) {
            let isStatic = false, protoStartLoc = null, inexactStartLoc = null;
            const node = this.startNode();
            if (allowProto && this.isContextual(118)) {
              const lookahead = this.lookahead();
              lookahead.type !== 14 && lookahead.type !== 17 && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = false);
            }
            if (allowStatic && this.isContextual(106)) {
              const lookahead = this.lookahead();
              lookahead.type !== 14 && lookahead.type !== 17 && (this.next(), isStatic = true);
            }
            const variance = this.flowParseVariance();
            if (this.eat(0))
              protoStartLoc != null && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
            else if (this.match(10) || this.match(47))
              protoStartLoc != null && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
            else {
              let kind = "init";
              if (this.isContextual(99) || this.isContextual(104)) {
                tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
              }
              const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
              propOrInexact === null ? (inexact = true, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
            }
            this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
          }
          this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
          const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
          return this.state.inType = oldInType, out;
        }
        flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
          if (this.eat(21)) {
            return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc) : this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc), variance && this.raise(FlowErrors.InexactVariance, variance), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc), protoStartLoc != null && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, variance), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
          }
          {
            node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = protoStartLoc != null, node.kind = kind;
            let optional = false;
            return this.match(47) || this.match(10) ? (node.method = true, protoStartLoc != null && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start)), kind !== "get" && kind !== "set" || this.flowCheckGetterSetterParams(node), !allowSpread && node.key.name === "constructor" && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this)) : (kind !== "init" && this.unexpected(), node.method = false, this.eat(17) && (optional = true), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
          }
        }
        flowCheckGetterSetterParams(property) {
          const paramCount = property.kind === "get" ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
          property.value.this && this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this), length !== paramCount && this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property), property.kind === "set" && property.value.rest && this.raise(Errors.BadSetterRestParameter, property);
        }
        flowObjectTypeSemicolon() {
          this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
        }
        flowParseQualifiedTypeIdentifier(startLoc, id) {
          startLoc != null || (startLoc = this.state.startLoc);
          let node = id || this.flowParseRestrictedIdentifier(true);
          for (;this.eat(16); ) {
            const node2 = this.startNodeAt(startLoc);
            node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(true), node = this.finishNode(node2, "QualifiedTypeIdentifier");
          }
          return node;
        }
        flowParseGenericType(startLoc, id) {
          const node = this.startNodeAt(startLoc);
          return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
        }
        flowParseTypeofType() {
          const node = this.startNode();
          return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
        }
        flowParseTupleType() {
          const node = this.startNode();
          for (node.types = [], this.expect(0);this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3)); )
            this.expect(12);
          return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
        }
        flowParseFunctionTypeParam(first) {
          let name = null, optional = false, typeAnnotation = null;
          const node = this.startNode(), lh = this.lookahead(), isThis = this.state.type === 78;
          return lh.type === 14 || lh.type === 17 ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, node), name = this.parseIdentifier(isThis), this.eat(17) && (optional = true, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, node)), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
        }
        reinterpretTypeAsFunctionTypeParam(type) {
          const node = this.startNodeAt(type.loc.start);
          return node.name = null, node.optional = false, node.typeAnnotation = type, this.finishNode(node, "FunctionTypeParam");
        }
        flowParseFunctionTypeParams(params = []) {
          let rest = null, _this = null;
          for (this.match(78) && (_this = this.flowParseFunctionTypeParam(true), _this.name = null, this.match(11) || this.expect(12));!this.match(11) && !this.match(21); )
            params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
          return this.eat(21) && (rest = this.flowParseFunctionTypeParam(false)), { params, rest, _this };
        }
        flowIdentToTypeAnnotation(startLoc, node, id) {
          switch (id.name) {
            case "any":
              return this.finishNode(node, "AnyTypeAnnotation");
            case "bool":
            case "boolean":
              return this.finishNode(node, "BooleanTypeAnnotation");
            case "mixed":
              return this.finishNode(node, "MixedTypeAnnotation");
            case "empty":
              return this.finishNode(node, "EmptyTypeAnnotation");
            case "number":
              return this.finishNode(node, "NumberTypeAnnotation");
            case "string":
              return this.finishNode(node, "StringTypeAnnotation");
            case "symbol":
              return this.finishNode(node, "SymbolTypeAnnotation");
            default:
              return this.checkNotUnderscore(id.name), this.flowParseGenericType(startLoc, id);
          }
        }
        flowParsePrimaryType() {
          const startLoc = this.state.startLoc, node = this.startNode();
          let tmp, type, isGroupedType = false;
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          switch (this.state.type) {
            case 5:
              return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
            case 6:
              return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
            case 0:
              return this.state.noAnonFunctionType = false, type = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type;
            case 47: {
              const node2 = this.startNode();
              return node2.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node2.params = tmp.params, node2.rest = tmp.rest, node2.this = tmp._this, this.expect(11), this.expect(19), node2.returnType = this.flowParseType(), this.finishNode(node2, "FunctionTypeAnnotation");
            }
            case 10: {
              const node2 = this.startNode();
              if (this.next(), !this.match(11) && !this.match(21))
                if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                  const token = this.lookahead().type;
                  isGroupedType = token !== 17 && token !== 14;
                } else
                  isGroupedType = true;
              if (isGroupedType) {
                if (this.state.noAnonFunctionType = false, type = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19))
                  return this.expect(11), type;
                this.eat(12);
              }
              return tmp = type ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]) : this.flowParseFunctionTypeParams(), node2.params = tmp.params, node2.rest = tmp.rest, node2.this = tmp._this, this.expect(11), this.expect(19), node2.returnType = this.flowParseType(), node2.typeParameters = null, this.finishNode(node2, "FunctionTypeAnnotation");
            }
            case 134:
              return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
            case 85:
            case 86:
              return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
            case 53:
              if (this.state.value === "-") {
                if (this.next(), this.match(135))
                  return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                if (this.match(136))
                  return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
              }
              return void this.unexpected();
            case 135:
              return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
            case 136:
              return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
            case 88:
              return this.next(), this.finishNode(node, "VoidTypeAnnotation");
            case 84:
              return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
            case 78:
              return this.next(), this.finishNode(node, "ThisTypeAnnotation");
            case 55:
              return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
            case 87:
              return this.flowParseTypeofType();
            default:
              if (tokenIsKeyword(this.state.type)) {
                const label = tokenLabelName(this.state.type);
                return this.next(), super.createIdentifier(node, label);
              }
              if (tokenIsIdentifier(this.state.type))
                return this.isContextual(129) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
          }
          this.unexpected();
        }
        flowParsePostfixType() {
          const startLoc = this.state.startLoc;
          let type = this.flowParsePrimaryType(), seenOptionalIndexedAccess = false;
          for (;(this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
            const node = this.startNodeAt(startLoc), optional = this.eat(18);
            seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type, this.next(), type = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type = this.finishNode(node, "OptionalIndexedAccessType")) : type = this.finishNode(node, "IndexedAccessType"));
          }
          return type;
        }
        flowParsePrefixType() {
          const node = this.startNode();
          return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
        }
        flowParseAnonFunctionWithoutParens() {
          const param = this.flowParsePrefixType();
          if (!this.state.noAnonFunctionType && this.eat(19)) {
            const node = this.startNodeAt(param.loc.start);
            return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
          }
          return param;
        }
        flowParseIntersectionType() {
          const node = this.startNode();
          this.eat(45);
          const type = this.flowParseAnonFunctionWithoutParens();
          for (node.types = [type];this.eat(45); )
            node.types.push(this.flowParseAnonFunctionWithoutParens());
          return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
        }
        flowParseUnionType() {
          const node = this.startNode();
          this.eat(43);
          const type = this.flowParseIntersectionType();
          for (node.types = [type];this.eat(43); )
            node.types.push(this.flowParseIntersectionType());
          return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
        }
        flowParseType() {
          const oldInType = this.state.inType;
          this.state.inType = true;
          const type = this.flowParseUnionType();
          return this.state.inType = oldInType, type;
        }
        flowParseTypeOrImplicitInstantiation() {
          if (this.state.type === 132 && this.state.value === "_") {
            const startLoc = this.state.startLoc, node = this.parseIdentifier();
            return this.flowParseGenericType(startLoc, node);
          }
          return this.flowParseType();
        }
        flowParseTypeAnnotation() {
          const node = this.startNode();
          return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
        }
        flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
          const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
          return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
        }
        typeCastToParameter(node) {
          return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
        }
        flowParseVariance() {
          let variance = null;
          return this.match(53) ? (variance = this.startNode(), this.state.value === "+" ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
        }
        parseFunctionBody(node, allowExpressionBody, isMethod = false) {
          allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod)) : super.parseFunctionBody(node, false, isMethod);
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          if (this.match(14)) {
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
          }
          return super.parseFunctionBodyAndFinish(node, type, isMethod);
        }
        parseStatementLike(flags) {
          if (this.state.strict && this.isContextual(129)) {
            if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
              const node = this.startNode();
              return this.next(), this.flowParseInterface(node);
            }
          } else if (this.isContextual(126)) {
            const node = this.startNode();
            return this.next(), this.flowParseEnumDeclaration(node);
          }
          const stmt = super.parseStatementLike(flags);
          return this.flowPragma !== undefined || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
        }
        parseExpressionStatement(node, expr, decorators) {
          if (expr.type === "Identifier") {
            if (expr.name === "declare") {
              if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82))
                return this.flowParseDeclare(node);
            } else if (tokenIsIdentifier(this.state.type)) {
              if (expr.name === "interface")
                return this.flowParseInterface(node);
              if (expr.name === "type")
                return this.flowParseTypeAlias(node);
              if (expr.name === "opaque")
                return this.flowParseOpaqueType(node, false);
            }
          }
          return super.parseExpressionStatement(node, expr, decorators);
        }
        shouldParseExportDeclaration() {
          const { type } = this.state;
          return type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type) ? !this.state.containsEsc : super.shouldParseExportDeclaration();
        }
        isExportDefaultSpecifier() {
          const { type } = this.state;
          return type === 126 || tokenIsFlowInterfaceOrTypeOrOpaque(type) ? this.state.containsEsc : super.isExportDefaultSpecifier();
        }
        parseExportDefaultExpression() {
          if (this.isContextual(126)) {
            const node = this.startNode();
            return this.next(), this.flowParseEnumDeclaration(node);
          }
          return super.parseExportDefaultExpression();
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (!this.match(17))
            return expr;
          if (this.state.maybeInArrowParameters) {
            const nextCh = this.lookaheadCharCode();
            if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41)
              return this.setOptionalParametersError(refExpressionErrors), expr;
          }
          this.expect(17);
          const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startLoc);
          let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
          if (failed || invalid.length > 0) {
            const noArrowAt = [...originalNoArrowAt];
            if (invalid.length > 0) {
              this.state = state, this.state.noArrowAt = noArrowAt;
              for (let i = 0;i < invalid.length; i++)
                noArrowAt.push(invalid[i].start);
              ({ consequent, failed } = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
            }
            failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc), failed && valid.length === 1 && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, { consequent, failed } = this.tryParseConditionalConsequent());
          }
          return this.getArrowLikeExpressions(consequent, true), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined)), this.finishNode(node, "ConditionalExpression");
        }
        tryParseConditionalConsequent() {
          this.state.noArrowParamsConversionAt.push(this.state.start);
          const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
          return this.state.noArrowParamsConversionAt.pop(), { consequent, failed };
        }
        getArrowLikeExpressions(node, disallowInvalid) {
          const stack = [node], arrows = [];
          for (;stack.length !== 0; ) {
            const node2 = stack.pop();
            node2.type === "ArrowFunctionExpression" && node2.body.type !== "BlockStatement" ? (node2.typeParameters || !node2.returnType ? this.finishArrowValidation(node2) : arrows.push(node2), stack.push(node2.body)) : node2.type === "ConditionalExpression" && (stack.push(node2.consequent), stack.push(node2.alternate));
          }
          return disallowInvalid ? (arrows.forEach((node2) => this.finishArrowValidation(node2)), [arrows, []]) : function(list, test) {
            const list1 = [], list2 = [];
            for (let i = 0;i < list.length; i++)
              (test(list[i], i, list) ? list1 : list2).push(list[i]);
            return [list1, list2];
          }(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
        }
        finishArrowValidation(node) {
          var _node$extra;
          this.toAssignableList(node.params, (_node$extra = node.extra) == null ? undefined : _node$extra.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(node, false, true), this.scope.exit();
        }
        forwardNoArrowParamsConversionAt(node, parse) {
          let result;
          return this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse(), this.state.noArrowParamsConversionAt.pop()) : result = parse(), result;
        }
        parseParenItem(node, startLoc) {
          const newNode = super.parseParenItem(node, startLoc);
          if (this.eat(17) && (newNode.optional = true, this.resetEndLocation(node)), this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            return typeCastNode.expression = newNode, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
          }
          return newNode;
        }
        assertModuleNodeAllowed(node) {
          node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type" || super.assertModuleNodeAllowed(node);
        }
        parseExportDeclaration(node) {
          if (this.isContextual(130)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
          }
          if (this.isContextual(131)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            return this.next(), this.flowParseOpaqueType(declarationNode, false);
          }
          if (this.isContextual(129)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            return this.next(), this.flowParseInterface(declarationNode);
          }
          if (this.isContextual(126)) {
            node.exportKind = "value";
            const declarationNode = this.startNode();
            return this.next(), this.flowParseEnumDeclaration(declarationNode);
          }
          return super.parseExportDeclaration(node);
        }
        eatExportStar(node) {
          return !!super.eatExportStar(node) || !(!this.isContextual(130) || this.lookahead().type !== 55) && (node.exportKind = "type", this.next(), this.next(), true);
        }
        maybeParseExportNamespaceSpecifier(node) {
          const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
          return hasNamespace && node.exportKind === "type" && this.unexpected(startLoc), hasNamespace;
        }
        parseClassId(node, isStatement, optionalId) {
          super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
        }
        parseClassMember(classBody, member, state) {
          const { startLoc } = this.state;
          if (this.isContextual(125)) {
            if (super.parseClassMemberFromModifier(classBody, member))
              return;
            member.declare = true;
          }
          super.parseClassMember(classBody, member, state), member.declare && (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition" ? this.raise(FlowErrors.DeclareClassElement, startLoc) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, member.value));
        }
        isIterator(word) {
          return word === "iterator" || word === "asyncIterator";
        }
        readIterator() {
          const word = super.readWord1(), fullWord = "@@" + word;
          this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, this.state.curPosition(), { identifierName: fullWord }), this.finishToken(132, fullWord);
        }
        getTokenFromCode(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          code2 === 123 && next === 124 ? this.finishOp(6, 2) : !this.state.inType || code2 !== 62 && code2 !== 60 ? this.state.inType && code2 === 63 ? next === 46 ? this.finishOp(18, 2) : this.finishOp(17, 1) : !function(current, next2, next22) {
            return current === 64 && next2 === 64 && isIdentifierStart(next22);
          }(code2, next, this.input.charCodeAt(this.state.pos + 2)) ? super.getTokenFromCode(code2) : (this.state.pos += 2, this.readIterator()) : this.finishOp(code2 === 62 ? 48 : 47, 1);
        }
        isAssignable(node, isBinding) {
          return node.type === "TypeCastExpression" ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
        }
        toAssignable(node, isLHS = false) {
          isLHS || node.type !== "AssignmentExpression" || node.left.type !== "TypeCastExpression" || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          for (let i = 0;i < exprList.length; i++) {
            const expr = exprList[i];
            (expr == null ? undefined : expr.type) === "TypeCastExpression" && (exprList[i] = this.typeCastToParameter(expr));
          }
          super.toAssignableList(exprList, trailingCommaLoc, isLHS);
        }
        toReferencedList(exprList, isParenthesizedExpr) {
          for (let i = 0;i < exprList.length; i++) {
            var _expr$extra;
            const expr = exprList[i];
            !expr || expr.type !== "TypeCastExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
          }
          return exprList;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
          return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
        }
        isValidLVal(type, isParenthesized, binding) {
          return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
        }
        parseClassProperty(node) {
          return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
          return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
        }
        isClassMethod() {
          return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
          return this.match(14) || super.isClassProperty();
        }
        isNonstaticConstructor(method) {
          return !this.match(14) && super.isNonstaticConstructor(method);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
            const params = method.params;
            params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
          } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
            const params = method.value.params;
            params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, method);
          }
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        parseClassSuper(node) {
          if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(113)) {
            this.next();
            const implemented = node.implements = [];
            do {
              const node2 = this.startNode();
              node2.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? node2.typeParameters = this.flowParseTypeParameterInstantiation() : node2.typeParameters = null, implemented.push(this.finishNode(node2, "ClassImplements"));
            } while (this.eat(12));
          }
        }
        checkGetterSetterParams(method) {
          super.checkGetterSetterParams(method);
          const params = this.getObjectOrClassMethodParams(method);
          if (params.length > 0) {
            const param = params[0];
            this.isThisParam(param) && method.kind === "get" ? this.raise(FlowErrors.GetterMayNotHaveThisParam, param) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
          }
        }
        parsePropertyNamePrefixOperator(node) {
          node.variance = this.flowParseVariance();
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          let typeParameters;
          prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
          const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
        }
        parseFunctionParamType(param) {
          return this.eat(17) && (param.type !== "Identifier" && this.raise(FlowErrors.PatternIsOptional, param), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, param), param.optional = true), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, param), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, param), this.resetEndLocation(param), param;
        }
        parseMaybeDefault(startLoc, left) {
          const node = super.parseMaybeDefault(startLoc, left);
          return node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation), node;
        }
        checkImportReflection(node) {
          super.checkImportReflection(node), node.module && node.importKind !== "value" && this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
        }
        parseImportSpecifierLocal(node, specifier, type) {
          specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
        }
        isPotentialImportPhase(isExport) {
          if (super.isPotentialImportPhase(isExport))
            return true;
          if (this.isContextual(130)) {
            if (!isExport)
              return true;
            const ch = this.lookaheadCharCode();
            return ch === 123 || ch === 42;
          }
          return !isExport && this.isContextual(87);
        }
        applyImportPhase(node, isExport, phase, loc) {
          if (super.applyImportPhase(node, isExport, phase, loc), isExport) {
            if (!phase && this.match(65))
              return;
            node.exportKind = phase === "type" ? phase : "value";
          } else
            phase === "type" && this.match(55) && this.unexpected(), node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          const firstIdent = specifier.imported;
          let specifierTypeKind = null;
          firstIdent.type === "Identifier" && (firstIdent.name === "type" ? specifierTypeKind = "type" : firstIdent.name === "typeof" && (specifierTypeKind = "typeof"));
          let isBinding = false;
          if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
            const as_ident = this.parseIdentifier(true);
            specifierTypeKind === null || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
          } else {
            if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type))
              specifier.imported = this.parseIdentifier(true), specifier.importKind = specifierTypeKind;
            else {
              if (importedIsString)
                throw this.raise(Errors.ImportBindingIsString, specifier, { importName: firstIdent.value });
              specifier.imported = firstIdent, specifier.importKind = null;
            }
            this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = true, specifier.local = cloneIdentifier(specifier.imported));
          }
          const specifierIsTypeImport = hasTypeImportKind(specifier);
          return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, true), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true), this.finishImportSpecifier(specifier, "ImportSpecifier");
        }
        parseBindingAtom() {
          return this.state.type === 78 ? this.parseIdentifier(true) : super.parseBindingAtom();
        }
        parseFunctionParams(node, isConstructor) {
          const kind = node.kind;
          kind !== "get" && kind !== "set" && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, isConstructor);
        }
        parseVarId(decl, kind) {
          super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
        }
        parseAsyncArrowFromCallExpression(node, call) {
          if (this.match(14)) {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
          }
          return super.parseAsyncArrowFromCallExpression(node, call);
        }
        shouldParseAsyncArrow() {
          return this.match(14) || super.shouldParseAsyncArrow();
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          var _jsx;
          let jsx, state = null;
          if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
            if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
              return jsx.node;
            const { context } = this.state, currentContext = context[context.length - 1];
            currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
          }
          if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {
            var _jsx2, _jsx3;
            let typeParameters;
            state = state || this.state.clone();
            const arrow = this.tryParse((abort) => {
              var _arrowExpression$extr;
              typeParameters = this.flowParseTypeParameterDeclaration();
              const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                return this.resetStartLocationFromNode(result, typeParameters), result;
              });
              (_arrowExpression$extr = arrowExpression2.extra) != null && _arrowExpression$extr.parenthesized && abort();
              const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
              return expr.type !== "ArrowFunctionExpression" && abort(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression2;
            }, state);
            let arrowExpression = null;
            if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
              if (!arrow.error && !arrow.aborted)
                return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters), arrow.node;
              arrowExpression = arrow.node;
            }
            if ((_jsx2 = jsx) != null && _jsx2.node)
              return this.state = jsx.failState, jsx.node;
            if (arrowExpression)
              return this.state = arrow.failState, arrowExpression;
            if ((_jsx3 = jsx) != null && _jsx3.thrown)
              throw jsx.error;
            if (arrow.thrown)
              throw arrow.error;
            throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
          }
          return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        }
        parseArrow(node) {
          if (this.match(14)) {
            const result = this.tryParse(() => {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true;
              const typeNode = this.startNode();
              return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
            });
            if (result.thrown)
              return null;
            result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
          }
          return super.parseArrow(node);
        }
        shouldParseArrow(params) {
          return this.match(14) || super.shouldParseArrow(params);
        }
        setArrowFunctionParameters(node, params) {
          this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start)) ? node.params = params : super.setArrowFunctionParameters(node, params);
        }
        checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
          if (!isArrowFunction || !this.state.noArrowParamsConversionAt.includes(this.offsetToSourcePos(node.start))) {
            for (let i = 0;i < node.params.length; i++)
              this.isThisParam(node.params[i]) && i > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);
            super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
          }
        }
        parseParenAndDistinguishExpression(canBeArrow) {
          return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.sourceToOffsetPos(this.state.start)));
        }
        parseSubscripts(base, startLoc, noCalls) {
          if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.includes(startLoc.index)) {
            this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base, node.arguments = super.parseCallExpressionArguments(11), base = this.finishNode(node, "CallExpression");
          } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
            const state = this.state.clone(), arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
            if (!arrow.error && !arrow.aborted)
              return arrow.node;
            const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
            if (result.node && !result.error)
              return result.node;
            if (arrow.node)
              return this.state = arrow.failState, arrow.node;
            if (result.node)
              return this.state = result.failState, result.node;
            throw arrow.error || result.error;
          }
          return super.parseSubscripts(base, startLoc, noCalls);
        }
        parseSubscript(base, startLoc, noCalls, subscriptState) {
          if (this.match(18) && this.isLookaheadToken_lt()) {
            if (subscriptState.optionalChainMember = true, noCalls)
              return subscriptState.stop = true, base;
            this.next();
            const node = this.startNodeAt(startLoc);
            return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11), node.optional = true, this.finishCallExpression(node, true);
          }
          if (!noCalls && this.shouldParseTypes() && this.match(47)) {
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11), subscriptState.optionalChainMember && (node.optional = false), this.finishCallExpression(node, subscriptState.optionalChainMember)));
            if (result.node)
              return result.error && (this.state = result.failState), result.node;
          }
          return super.parseSubscript(base, startLoc, noCalls, subscriptState);
        }
        parseNewCallee(node) {
          super.parseNewCallee(node);
          let targs = null;
          this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
        }
        parseAsyncArrowWithTypeParameters(startLoc) {
          const node = this.startNodeAt(startLoc);
          if (this.parseFunctionParams(node, false), this.parseArrow(node))
            return super.parseArrowExpression(node, undefined, true);
        }
        readToken_mult_modulo(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          if (code2 === 42 && next === 47 && this.state.hasFlowComment)
            return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
          super.readToken_mult_modulo(code2);
        }
        readToken_pipe_amp(code2) {
          const next = this.input.charCodeAt(this.state.pos + 1);
          code2 !== 124 || next !== 125 ? super.readToken_pipe_amp(code2) : this.finishOp(9, 2);
        }
        parseTopLevel(file, program) {
          const fileNode = super.parseTopLevel(file, program);
          return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition()), fileNode;
        }
        skipBlockComment() {
          if (!this.hasPlugin("flowComments") || !this.skipFlowComment())
            return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
          {
            if (this.state.hasFlowComment)
              throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
            this.hasFlowCommentCompletion();
            const commentSkip = this.skipFlowComment();
            commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = true);
          }
        }
        skipFlowComment() {
          const { pos } = this.state;
          let shiftToFirstNonWhiteSpace = 2;
          for (;[32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)); )
            shiftToFirstNonWhiteSpace++;
          const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
          return ch2 === 58 && ch3 === 58 ? shiftToFirstNonWhiteSpace + 2 : this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include" ? shiftToFirstNonWhiteSpace + 12 : ch2 === 58 && ch3 !== 58 && shiftToFirstNonWhiteSpace;
        }
        hasFlowCommentCompletion() {
          if (this.input.indexOf("*/", this.state.pos) === -1)
            throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
        }
        flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
          this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, { memberName, enumName });
        }
        flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
          return this.raise(enumContext.explicitType ? enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, loc, enumContext);
        }
        flowEnumErrorNumberMemberNotInitialized(loc, details) {
          this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
        }
        flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
          this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
        }
        flowEnumMemberInit() {
          const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
          switch (this.state.type) {
            case 135: {
              const literal = this.parseNumericLiteral(this.state.value);
              return endOfInit() ? { type: "number", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
            }
            case 134: {
              const literal = this.parseStringLiteral(this.state.value);
              return endOfInit() ? { type: "string", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
            }
            case 85:
            case 86: {
              const literal = this.parseBooleanLiteral(this.match(85));
              return endOfInit() ? { type: "boolean", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
            }
            default:
              return { type: "invalid", loc: startLoc };
          }
        }
        flowEnumMemberRaw() {
          const loc = this.state.startLoc;
          return { id: this.parseIdentifier(true), init: this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc } };
        }
        flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
          const { explicitType } = context;
          explicitType !== null && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
        }
        flowEnumMembers({ enumName, explicitType }) {
          const seenNames = new Set, members = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] };
          let hasUnknownMembers = false;
          for (;!this.match(8); ) {
            if (this.eat(21)) {
              hasUnknownMembers = true;
              break;
            }
            const memberNode = this.startNode(), { id, init } = this.flowEnumMemberRaw(), memberName = id.name;
            if (memberName === "")
              continue;
            /^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, id, { memberName, suggestion: memberName[0].toUpperCase() + memberName.slice(1), enumName }), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, id, { memberName, enumName }), seenNames.add(memberName);
            const context = { enumName, explicitType, memberName };
            switch (memberNode.id = id, init.type) {
              case "boolean":
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean"), memberNode.init = init.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                break;
              case "number":
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number"), memberNode.init = init.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                break;
              case "string":
                this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string"), memberNode.init = init.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                break;
              case "invalid":
                throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
              case "none":
                switch (explicitType) {
                  case "boolean":
                    this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                    break;
                  case "number":
                    this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                    break;
                  default:
                    members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                }
            }
            this.match(8) || this.expect(12);
          }
          return { members, hasUnknownMembers };
        }
        flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
          if (initializedMembers.length === 0)
            return defaultedMembers;
          if (defaultedMembers.length === 0)
            return initializedMembers;
          if (defaultedMembers.length > initializedMembers.length) {
            for (const member of initializedMembers)
              this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
            return defaultedMembers;
          }
          for (const member of defaultedMembers)
            this.flowEnumErrorStringMemberInconsistentlyInitialized(member, { enumName });
          return initializedMembers;
        }
        flowEnumParseExplicitType({ enumName }) {
          if (!this.eatContextual(102))
            return null;
          if (!tokenIsIdentifier(this.state.type))
            throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, { enumName });
          const { value: value2 } = this.state;
          return this.next(), value2 !== "boolean" && value2 !== "number" && value2 !== "string" && value2 !== "symbol" && this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, { enumName, invalidEnumType: value2 }), value2;
        }
        flowEnumBody(node, id) {
          const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
          this.expect(5);
          const { members, hasUnknownMembers } = this.flowEnumMembers({ enumName, explicitType });
          switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
            case "boolean":
              return node.explicitType = true, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
            case "number":
              return node.explicitType = true, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
            case "string":
              return node.explicitType = true, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
            case "symbol":
              return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
            default: {
              const empty = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
              node.explicitType = false;
              const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
              if (boolsLen || numsLen || strsLen || defaultedLen) {
                if (boolsLen || numsLen) {
                  if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                    for (const member of members.defaultedMembers)
                      this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                    return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
                  }
                  if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                    for (const member of members.defaultedMembers)
                      this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                    return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
                  }
                  return this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, { enumName }), empty();
                }
                return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
              }
              return empty();
            }
          }
        }
        flowParseEnumDeclaration(node) {
          const id = this.parseIdentifier();
          return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
        }
        isLookaheadToken_lt() {
          const next = this.nextTokenStart();
          if (this.input.charCodeAt(next) === 60) {
            const afterNext = this.input.charCodeAt(next + 1);
            return afterNext !== 60 && afterNext !== 61;
          }
          return false;
        }
        maybeUnwrapTypeCastExpression(node) {
          return node.type === "TypeCastExpression" ? node.expression : node;
        }
      }, typescript: (superClass) => class extends superClass {
        constructor(...args) {
          super(...args), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out"], disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, { allowedModifiers: ["const"], disallowedModifiers: ["in", "out"], errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out", "const"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter });
        }
        getScopeHandler() {
          return TypeScriptScopeHandler;
        }
        tsIsIdentifier() {
          return tokenIsIdentifier(this.state.type);
        }
        tsTokenCanFollowModifier() {
          return this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(139) || this.isLiteralPropertyName();
        }
        tsNextTokenOnSameLineAndCanFollowModifier() {
          return this.next(), !this.hasPrecedingLineBreak() && this.tsTokenCanFollowModifier();
        }
        tsNextTokenCanFollowModifier() {
          return this.match(106) ? (this.next(), this.tsTokenCanFollowModifier()) : this.tsNextTokenOnSameLineAndCanFollowModifier();
        }
        tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
          if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75)
            return;
          const modifier = this.state.value;
          if (allowedModifiers.includes(modifier)) {
            if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks())
              return;
            if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
              return modifier;
          }
        }
        tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
          const enforceOrder = (loc, modifier, before, after) => {
            modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, loc, { orderedModifiers: [before, after] });
          }, incompatible = (loc, modifier, mod1, mod2) => {
            (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, loc, { modifiers: [mod1, mod2] });
          };
          for (;; ) {
            const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
            if (!modifier)
              break;
            tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }), modified[modifier] = true, enforceOrder(startLoc, modifier, "in", "out")) : (hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, startLoc, { modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = true), disallowedModifiers != null && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, startLoc, { modifier });
          }
        }
        tsIsListTerminator(kind) {
          switch (kind) {
            case "EnumMembers":
            case "TypeMembers":
              return this.match(8);
            case "HeritageClauseElement":
              return this.match(5);
            case "TupleElementTypes":
              return this.match(3);
            case "TypeParametersOrArguments":
              return this.match(48);
          }
        }
        tsParseList(kind, parseElement) {
          const result = [];
          for (;!this.tsIsListTerminator(kind); )
            result.push(parseElement());
          return result;
        }
        tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
          return function(x) {
            if (x == null)
              throw new Error(`Unexpected ${x} value.`);
            return x;
          }(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
        }
        tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
          const result = [];
          let trailingCommaPos = -1;
          for (;!this.tsIsListTerminator(kind); ) {
            trailingCommaPos = -1;
            const element = parseElement();
            if (element == null)
              return;
            if (result.push(element), !this.eat(12)) {
              if (this.tsIsListTerminator(kind))
                break;
              return void (expectSuccess && this.expect(12));
            }
            trailingCommaPos = this.state.lastTokStartLoc.index;
          }
          return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
        }
        tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
          skipFirstToken || (bracket ? this.expect(0) : this.expect(47));
          const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
          return bracket ? this.expect(3) : this.expect(48), result;
        }
        tsParseImportType() {
          const node = this.startNode();
          return this.expect(83), this.expect(10), this.match(134) || this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc), node.argument = super.parseExprAtom(), this.eat(12) && !this.match(11) ? (node.options = super.parseMaybeAssignAllowIn(), this.eat(12)) : node.options = null, this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
        }
        tsParseEntityName(allowReservedWords = true) {
          let entity = this.parseIdentifier(allowReservedWords);
          for (;this.eat(16); ) {
            const node = this.startNodeAtNode(entity);
            node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
          }
          return entity;
        }
        tsParseTypeReference() {
          const node = this.startNode();
          return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
        }
        tsParseThisTypePredicate(lhs) {
          this.next();
          const node = this.startNodeAtNode(lhs);
          return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(false), node.asserts = false, this.finishNode(node, "TSTypePredicate");
        }
        tsParseThisTypeNode() {
          const node = this.startNode();
          return this.next(), this.finishNode(node, "TSThisType");
        }
        tsParseTypeQuery() {
          const node = this.startNode();
          return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
        }
        tsParseTypeParameter(parseModifiers) {
          const node = this.startNode();
          return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
        }
        tsTryParseTypeParameters(parseModifiers) {
          if (this.match(47))
            return this.tsParseTypeParameters(parseModifiers);
        }
        tsParseTypeParameters(parseModifiers) {
          const node = this.startNode();
          this.match(47) || this.match(143) ? this.next() : this.unexpected();
          const refTrailingCommaPos = { value: -1 };
          return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos), node.params.length === 0 && this.raise(TSErrors.EmptyTypeParameters, node), refTrailingCommaPos.value !== -1 && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
        }
        tsFillSignature(returnToken, signature) {
          const returnTokenRequired = returnToken === 19;
          signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
        }
        tsParseBindingListForSignature() {
          const list = super.parseBindingList(11, 41, 2);
          for (const pattern of list) {
            const { type } = pattern;
            type !== "AssignmentPattern" && type !== "TSParameterProperty" || this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, { type });
          }
          return list;
        }
        tsParseTypeMemberSemicolon() {
          this.eat(12) || this.isLineTerminator() || this.expect(13);
        }
        tsParseSignatureMember(kind, node) {
          return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
        }
        tsIsUnambiguouslyIndexSignature() {
          return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
        }
        tsTryParseIndexSignature(node) {
          if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))
            return;
          this.expect(0);
          const id = this.parseIdentifier();
          id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
          const type = this.tsTryParseTypeAnnotation();
          return type && (node.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
        }
        tsParsePropertyOrMethodSignature(node, readonly) {
          this.eat(17) && (node.optional = true);
          const nodeAny = node;
          if (this.match(10) || this.match(47)) {
            readonly && this.raise(TSErrors.ReadonlyForMethodSignature, node);
            const method = nodeAny;
            method.kind && this.match(47) && this.raise(TSErrors.AccessorCannotHaveTypeParameters, this.state.curPosition()), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
            const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
            if (method.kind === "get")
              method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, this.state.curPosition()), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()));
            else if (method.kind === "set") {
              if (method[paramsKey].length !== 1)
                this.raise(Errors.BadSetterArity, this.state.curPosition());
              else {
                const firstParameter = method[paramsKey][0];
                this.isThisParam(firstParameter) && this.raise(TSErrors.AccessorCannotDeclareThisParameter, this.state.curPosition()), firstParameter.type === "Identifier" && firstParameter.optional && this.raise(TSErrors.SetAccessorCannotHaveOptionalParameter, this.state.curPosition()), firstParameter.type === "RestElement" && this.raise(TSErrors.SetAccessorCannotHaveRestParameter, this.state.curPosition());
              }
              method[returnTypeKey] && this.raise(TSErrors.SetAccessorCannotHaveReturnType, method[returnTypeKey]);
            } else
              method.kind = "method";
            return this.finishNode(method, "TSMethodSignature");
          }
          {
            const property = nodeAny;
            readonly && (property.readonly = true);
            const type = this.tsTryParseTypeAnnotation();
            return type && (property.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
          }
        }
        tsParseTypeMember() {
          const node = this.startNode();
          if (this.match(10) || this.match(47))
            return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
          if (this.match(77)) {
            const id = this.startNode();
            return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, false));
          }
          this.tsParseModifiers({ allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] }, node);
          const idx = this.tsTryParseIndexSignature(node);
          return idx || (super.parsePropertyName(node), node.computed || node.key.type !== "Identifier" || node.key.name !== "get" && node.key.name !== "set" || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
        }
        tsParseTypeLiteral() {
          const node = this.startNode();
          return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
        }
        tsParseObjectTypeMembers() {
          this.expect(5);
          const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
          return this.expect(8), members;
        }
        tsIsStartOfMappedType() {
          return this.next(), this.eat(53) ? this.isContextual(122) : (this.isContextual(122) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
        }
        tsParseMappedType() {
          const node = this.startNode();
          this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(122)) : this.eatContextual(122) && (node.readonly = true), this.expect(0);
          {
            const typeParameter = this.startNode();
            typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsExpectThenParseType(58), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
          }
          return node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = true), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
        }
        tsParseTupleType() {
          const node = this.startNode();
          node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
          let seenOptionalElement = false;
          return node.elementTypes.forEach((elementNode) => {
            const { type } = elementNode;
            !seenOptionalElement || type === "TSRestType" || type === "TSOptionalType" || type === "TSNamedTupleMember" && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode), seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
          }), this.finishNode(node, "TSTupleType");
        }
        tsParseTupleElementType() {
          const { startLoc } = this.state, rest = this.eat(21);
          let labeled, label, optional, type;
          const chAfterWord = tokenIsKeywordOrIdentifier(this.state.type) ? this.lookaheadCharCode() : null;
          if (chAfterWord === 58)
            labeled = true, optional = false, label = this.parseIdentifier(true), this.expect(14), type = this.tsParseType();
          else if (chAfterWord === 63) {
            optional = true;
            const startLoc2 = this.state.startLoc, wordName = this.state.value, typeOrLabel = this.tsParseNonArrayType();
            this.lookaheadCharCode() === 58 ? (labeled = true, label = this.createIdentifier(this.startNodeAt(startLoc2), wordName), this.expect(17), this.expect(14), type = this.tsParseType()) : (labeled = false, type = typeOrLabel, this.expect(17));
          } else
            type = this.tsParseType(), optional = this.eat(17), labeled = this.eat(14);
          if (labeled) {
            let labeledNode;
            label ? (labeledNode = this.startNodeAtNode(label), labeledNode.optional = optional, labeledNode.label = label, labeledNode.elementType = type, this.eat(17) && (labeledNode.optional = true, this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc))) : (labeledNode = this.startNodeAtNode(type), labeledNode.optional = optional, this.raise(TSErrors.InvalidTupleMemberLabel, type), labeledNode.label = type, labeledNode.elementType = this.tsParseType()), type = this.finishNode(labeledNode, "TSNamedTupleMember");
          } else if (optional) {
            const optionalTypeNode = this.startNodeAtNode(type);
            optionalTypeNode.typeAnnotation = type, type = this.finishNode(optionalTypeNode, "TSOptionalType");
          }
          if (rest) {
            const restNode = this.startNodeAt(startLoc);
            restNode.typeAnnotation = type, type = this.finishNode(restNode, "TSRestType");
          }
          return type;
        }
        tsParseParenthesizedType() {
          const node = this.startNode();
          return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
        }
        tsParseFunctionOrConstructorType(type, abstract) {
          const node = this.startNode();
          return type === "TSConstructorType" && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type);
        }
        tsParseLiteralTypeNode() {
          const node = this.startNode();
          switch (this.state.type) {
            case 135:
            case 136:
            case 134:
            case 85:
            case 86:
              node.literal = super.parseExprAtom();
              break;
            default:
              this.unexpected();
          }
          return this.finishNode(node, "TSLiteralType");
        }
        tsParseTemplateLiteralType() {
          const node = this.startNode();
          return node.literal = super.parseTemplate(false), this.finishNode(node, "TSLiteralType");
        }
        parseTemplateSubstitution() {
          return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
        }
        tsParseThisTypeOrThisTypePredicate() {
          const thisKeyword = this.tsParseThisTypeNode();
          return this.isContextual(116) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
        }
        tsParseNonArrayType() {
          switch (this.state.type) {
            case 134:
            case 135:
            case 136:
            case 85:
            case 86:
              return this.tsParseLiteralTypeNode();
            case 53:
              if (this.state.value === "-") {
                const node = this.startNode(), nextToken = this.lookahead();
                return nextToken.type !== 135 && nextToken.type !== 136 && this.unexpected(), node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
              }
              break;
            case 78:
              return this.tsParseThisTypeOrThisTypePredicate();
            case 87:
              return this.tsParseTypeQuery();
            case 83:
              return this.tsParseImportType();
            case 5:
              return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
            case 0:
              return this.tsParseTupleType();
            case 10:
              return this.tsParseParenthesizedType();
            case 25:
            case 24:
              return this.tsParseTemplateLiteralType();
            default: {
              const { type } = this.state;
              if (tokenIsIdentifier(type) || type === 88 || type === 84) {
                const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : function(value2) {
                  switch (value2) {
                    case "any":
                      return "TSAnyKeyword";
                    case "boolean":
                      return "TSBooleanKeyword";
                    case "bigint":
                      return "TSBigIntKeyword";
                    case "never":
                      return "TSNeverKeyword";
                    case "number":
                      return "TSNumberKeyword";
                    case "object":
                      return "TSObjectKeyword";
                    case "string":
                      return "TSStringKeyword";
                    case "symbol":
                      return "TSSymbolKeyword";
                    case "undefined":
                      return "TSUndefinedKeyword";
                    case "unknown":
                      return "TSUnknownKeyword";
                    default:
                      return;
                  }
                }(this.state.value);
                if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {
                  const node = this.startNode();
                  return this.next(), this.finishNode(node, nodeType);
                }
                return this.tsParseTypeReference();
              }
            }
          }
          this.unexpected();
        }
        tsParseArrayTypeOrHigher() {
          let type = this.tsParseNonArrayType();
          for (;!this.hasPrecedingLineBreak() && this.eat(0); )
            if (this.match(3)) {
              const node = this.startNodeAtNode(type);
              node.elementType = type, this.expect(3), type = this.finishNode(node, "TSArrayType");
            } else {
              const node = this.startNodeAtNode(type);
              node.objectType = type, node.indexType = this.tsParseType(), this.expect(3), type = this.finishNode(node, "TSIndexedAccessType");
            }
          return type;
        }
        tsParseTypeOperator() {
          const node = this.startNode(), operator = this.state.value;
          return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), operator === "readonly" && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
        }
        tsCheckTypeAnnotationForReadOnly(node) {
          switch (node.typeAnnotation.type) {
            case "TSTupleType":
            case "TSArrayType":
              return;
            default:
              this.raise(TSErrors.UnexpectedReadonly, node);
          }
        }
        tsParseInferType() {
          const node = this.startNode();
          this.expectContextual(115);
          const typeParameter = this.startNode();
          return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
        }
        tsParseConstraintForInferType() {
          if (this.eat(81)) {
            const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
            if (this.state.inDisallowConditionalTypesContext || !this.match(17))
              return constraint;
          }
        }
        tsParseTypeOperatorOrHigher() {
          var token;
          return (token = this.state.type) >= 121 && token <= 123 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
        }
        tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
          const node = this.startNode(), hasLeadingOperator = this.eat(operator), types2 = [];
          do {
            types2.push(parseConstituentType());
          } while (this.eat(operator));
          return types2.length !== 1 || hasLeadingOperator ? (node.types = types2, this.finishNode(node, kind)) : types2[0];
        }
        tsParseIntersectionTypeOrHigher() {
          return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
        }
        tsParseUnionTypeOrHigher() {
          return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
        }
        tsIsStartOfFunctionType() {
          return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
        }
        tsSkipParameterStart() {
          if (tokenIsIdentifier(this.state.type) || this.match(78))
            return this.next(), true;
          if (this.match(5)) {
            const { errors } = this.state, previousErrorCount = errors.length;
            try {
              return this.parseObjectLike(8, true), errors.length === previousErrorCount;
            } catch (_unused) {
              return false;
            }
          }
          if (this.match(0)) {
            this.next();
            const { errors } = this.state, previousErrorCount = errors.length;
            try {
              return super.parseBindingList(3, 93, 1), errors.length === previousErrorCount;
            } catch (_unused2) {
              return false;
            }
          }
          return false;
        }
        tsIsUnambiguouslyStartOfFunctionType() {
          if (this.next(), this.match(11) || this.match(21))
            return true;
          if (this.tsSkipParameterStart()) {
            if (this.match(14) || this.match(12) || this.match(17) || this.match(29))
              return true;
            if (this.match(11) && (this.next(), this.match(19)))
              return true;
          }
          return false;
        }
        tsParseTypeOrTypePredicateAnnotation(returnToken) {
          return this.tsInType(() => {
            const t = this.startNode();
            this.expect(returnToken);
            const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
            if (asserts && this.match(78)) {
              let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
              return thisTypePredicate.type === "TSThisType" ? (node.parameterName = thisTypePredicate, node.asserts = true, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = true), t.typeAnnotation = thisTypePredicate, this.finishNode(t, "TSTypeAnnotation");
            }
            const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
            if (!typePredicateVariable)
              return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t);
            const type = this.tsParseTypeAnnotation(false);
            return node.parameterName = typePredicateVariable, node.typeAnnotation = type, node.asserts = asserts, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation");
          });
        }
        tsTryParseTypeOrTypePredicateAnnotation() {
          if (this.match(14))
            return this.tsParseTypeOrTypePredicateAnnotation(14);
        }
        tsTryParseTypeAnnotation() {
          if (this.match(14))
            return this.tsParseTypeAnnotation();
        }
        tsTryParseType() {
          return this.tsEatThenParseType(14);
        }
        tsParseTypePredicatePrefix() {
          const id = this.parseIdentifier();
          if (this.isContextual(116) && !this.hasPrecedingLineBreak())
            return this.next(), id;
        }
        tsParseTypePredicateAsserts() {
          if (this.state.type !== 109)
            return false;
          const containsEsc = this.state.containsEsc;
          return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, { reservedWord: "asserts" }), true);
        }
        tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
          return this.tsInType(() => {
            eatColon && this.expect(14), t.typeAnnotation = this.tsParseType();
          }), this.finishNode(t, "TSTypeAnnotation");
        }
        tsParseType() {
          assert(this.state.inType);
          const type = this.tsParseNonConditionalType();
          if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81))
            return type;
          const node = this.startNodeAtNode(type);
          return node.checkType = type, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
        }
        isAbstractConstructorSignature() {
          return this.isContextual(124) && this.lookahead().type === 77;
        }
        tsParseNonConditionalType() {
          return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
        }
        tsParseTypeAssertion() {
          this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
          const node = this.startNode();
          return node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
        }
        tsParseHeritageClause(token) {
          const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
            const node = this.startNode();
            return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
          });
          return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, { token }), delimitedList;
        }
        tsParseInterfaceDeclaration(node, properties = {}) {
          if (this.hasFollowingLineBreak())
            return null;
          this.expectContextual(129), properties.declare && (node.declare = true), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, this.state.startLoc)), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
          const body = this.startNode();
          return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
        }
        tsParseTypeAliasDeclaration(node) {
          return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
            if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(114) && this.lookahead().type !== 16) {
              const node2 = this.startNode();
              return this.next(), this.finishNode(node2, "TSIntrinsicKeyword");
            }
            return this.tsParseType();
          }), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
        }
        tsInNoContext(cb) {
          const oldContext = this.state.context;
          this.state.context = [oldContext[0]];
          try {
            return cb();
          } finally {
            this.state.context = oldContext;
          }
        }
        tsInType(cb) {
          const oldInType = this.state.inType;
          this.state.inType = true;
          try {
            return cb();
          } finally {
            this.state.inType = oldInType;
          }
        }
        tsInDisallowConditionalTypesContext(cb) {
          const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
          this.state.inDisallowConditionalTypesContext = true;
          try {
            return cb();
          } finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
          }
        }
        tsInAllowConditionalTypesContext(cb) {
          const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
          this.state.inDisallowConditionalTypesContext = false;
          try {
            return cb();
          } finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
          }
        }
        tsEatThenParseType(token) {
          if (this.match(token))
            return this.tsNextThenParseType();
        }
        tsExpectThenParseType(token) {
          return this.tsInType(() => (this.expect(token), this.tsParseType()));
        }
        tsNextThenParseType() {
          return this.tsInType(() => (this.next(), this.tsParseType()));
        }
        tsParseEnumMember() {
          const node = this.startNode();
          return node.id = this.match(134) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
        }
        tsParseEnumDeclaration(node, properties = {}) {
          return properties.const && (node.const = true), properties.declare && (node.declare = true), this.expectContextual(126), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 8971 : 8459), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
        }
        tsParseModuleBlock() {
          const node = this.startNode();
          return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
        }
        tsParseModuleOrNamespaceDeclaration(node, nested = false) {
          if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
            const inner = this.startNode();
            this.tsParseModuleOrNamespaceDeclaration(inner, true), node.body = inner;
          } else
            this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
          return this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseAmbientExternalModuleDeclaration(node) {
          return this.isContextual(112) ? (node.kind = "global", node.global = true, node.id = this.parseIdentifier()) : this.match(134) ? (node.kind = "module", node.id = super.parseStringLiteral(this.state.value)) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
        }
        tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
          node.isExport = isExport || false, node.id = maybeDefaultIdentifier || this.parseIdentifier(), this.checkIdentifier(node.id, 4096), this.expect(29);
          const moduleReference = this.tsParseModuleReference();
          return node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference" && this.raise(TSErrors.ImportAliasHasImportType, moduleReference), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
        }
        tsIsExternalModuleReference() {
          return this.isContextual(119) && this.lookaheadCharCode() === 40;
        }
        tsParseModuleReference() {
          return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
        }
        tsParseExternalModuleReference() {
          const node = this.startNode();
          return this.expectContextual(119), this.expect(10), this.match(134) || this.unexpected(), node.expression = super.parseExprAtom(), this.expect(11), this.sawUnambiguousESM = true, this.finishNode(node, "TSExternalModuleReference");
        }
        tsLookAhead(f) {
          const state = this.state.clone(), res = f();
          return this.state = state, res;
        }
        tsTryParseAndCatch(f) {
          const result = this.tryParse((abort) => f() || abort());
          if (!result.aborted && result.node)
            return result.error && (this.state = result.failState), result.node;
        }
        tsTryParse(f) {
          const state = this.state.clone(), result = f();
          if (result !== undefined && result !== false)
            return result;
          this.state = state;
        }
        tsTryParseDeclare(nany) {
          if (this.isLineTerminator())
            return;
          let kind, startType = this.state.type;
          return this.isContextual(100) && (startType = 74, kind = "let"), this.tsInAmbientContext(() => {
            switch (startType) {
              case 68:
                return nany.declare = true, super.parseFunctionStatement(nany, false, false);
              case 80:
                return nany.declare = true, this.parseClass(nany, true, false);
              case 126:
                return this.tsParseEnumDeclaration(nany, { declare: true });
              case 112:
                return this.tsParseAmbientExternalModuleDeclaration(nany);
              case 75:
              case 74:
                return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, { const: true, declare: true })) : (nany.declare = true, this.parseVarStatement(nany, kind || this.state.value, true));
              case 129: {
                const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
                if (result)
                  return result;
              }
              default:
                if (tokenIsIdentifier(startType))
                  return this.tsParseDeclaration(nany, this.state.value, true, null);
            }
          });
        }
        tsTryParseExportDeclaration() {
          return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
        }
        tsParseExpressionStatement(node, expr, decorators) {
          switch (expr.name) {
            case "declare": {
              const declaration = this.tsTryParseDeclare(node);
              return declaration && (declaration.declare = true), declaration;
            }
            case "global":
              if (this.match(5)) {
                this.scope.enter(256), this.prodParam.enter(0);
                const mod = node;
                return mod.kind = "global", node.global = true, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
              }
              break;
            default:
              return this.tsParseDeclaration(node, expr.name, false, decorators);
          }
        }
        tsParseDeclaration(node, value2, next, decorators) {
          switch (value2) {
            case "abstract":
              if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type)))
                return this.tsParseAbstractDeclaration(node, decorators);
              break;
            case "module":
              if (this.tsCheckLineTerminator(next)) {
                if (this.match(134))
                  return this.tsParseAmbientExternalModuleDeclaration(node);
                if (tokenIsIdentifier(this.state.type))
                  return node.kind = "module", this.tsParseModuleOrNamespaceDeclaration(node);
              }
              break;
            case "namespace":
              if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                return node.kind = "namespace", this.tsParseModuleOrNamespaceDeclaration(node);
              break;
            case "type":
              if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                return this.tsParseTypeAliasDeclaration(node);
          }
        }
        tsCheckLineTerminator(next) {
          return next ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
        }
        tsTryParseGenericAsyncArrowFunction(startLoc) {
          if (!this.match(47))
            return;
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          this.state.maybeInArrowParameters = true;
          const res = this.tsTryParseAndCatch(() => {
            const node = this.startNodeAt(startLoc);
            return node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
          });
          return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, true) : undefined;
        }
        tsParseTypeArgumentsInExpression() {
          if (this.reScan_lt() === 47)
            return this.tsParseTypeArguments();
        }
        tsParseTypeArguments() {
          const node = this.startNode();
          return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), node.params.length === 0 ? this.raise(TSErrors.EmptyTypeArguments, node) : this.state.inType || this.curContext() !== types.brace || this.reScan_lt_gt(), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
        }
        tsIsDeclarationStart() {
          return (token = this.state.type) >= 124 && token <= 130;
          var token;
        }
        isExportDefaultSpecifier() {
          return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
        }
        parseAssignableListItem(flags, decorators) {
          const startLoc = this.state.startLoc, modified = {};
          this.tsParseModifiers({ allowedModifiers: ["public", "private", "protected", "override", "readonly"] }, modified);
          const { accessibility, override, readonly } = modified;
          4 & flags || !(accessibility || readonly || override) || this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
          const left = this.parseMaybeDefault();
          2 & flags && this.parseFunctionParamType(left);
          const elt = this.parseMaybeDefault(left.loc.start, left);
          if (accessibility || readonly || override) {
            const pp = this.startNodeAt(startLoc);
            return decorators.length && (pp.decorators = decorators), accessibility && (pp.accessibility = accessibility), readonly && (pp.readonly = readonly), override && (pp.override = override), elt.type !== "Identifier" && elt.type !== "AssignmentPattern" && this.raise(TSErrors.UnsupportedParameterPropertyKind, pp), pp.parameter = elt, this.finishNode(pp, "TSParameterProperty");
          }
          return decorators.length && (left.decorators = decorators), elt;
        }
        isSimpleParameter(node) {
          return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
        }
        tsDisallowOptionalPattern(node) {
          for (const param of node.params)
            param.type !== "Identifier" && param.optional && !this.state.isAmbientContext && this.raise(TSErrors.PatternIsOptional, param);
        }
        setArrowFunctionParameters(node, params, trailingCommaLoc) {
          super.setArrowFunctionParameters(node, params, trailingCommaLoc), this.tsDisallowOptionalPattern(node);
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
          const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : undefined;
          return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : bodilessType === "TSDeclareFunction" && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, node), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : (this.tsDisallowOptionalPattern(node), super.parseFunctionBodyAndFinish(node, type, isMethod));
        }
        registerFunctionStatementId(node) {
          !node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
        }
        tsCheckForInvalidTypeCasts(items) {
          items.forEach((node) => {
            (node == null ? undefined : node.type) === "TSTypeCastExpression" && this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
          });
        }
        toReferencedList(exprList, isInParens) {
          return this.tsCheckForInvalidTypeCasts(exprList), exprList;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
          return node.type === "ArrayExpression" && this.tsCheckForInvalidTypeCasts(node.elements), node;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          if (!this.hasPrecedingLineBreak() && this.match(35)) {
            this.state.canStartJSXElement = false, this.next();
            const nonNullExpression = this.startNodeAt(startLoc);
            return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
          }
          let isOptionalCall = false;
          if (this.match(18) && this.lookaheadCharCode() === 60) {
            if (noCalls)
              return state.stop = true, base;
            state.optionalChainMember = isOptionalCall = true, this.next();
          }
          if (this.match(47) || this.match(51)) {
            let missingParenErrorLoc;
            const result = this.tsTryParseAndCatch(() => {
              if (!noCalls && this.atPossibleAsyncArrow(base)) {
                const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                if (asyncArrowFn)
                  return asyncArrowFn;
              }
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (!typeArguments)
                return;
              if (isOptionalCall && !this.match(10))
                return void (missingParenErrorLoc = this.state.curPosition());
              if (tokenIsTemplate(this.state.type)) {
                const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
                return result2.typeParameters = typeArguments, result2;
              }
              if (!noCalls && this.eat(10)) {
                const node2 = this.startNodeAt(startLoc);
                return node2.callee = base, node2.arguments = this.parseCallExpressionArguments(11), this.tsCheckForInvalidTypeCasts(node2.arguments), node2.typeParameters = typeArguments, state.optionalChainMember && (node2.optional = isOptionalCall), this.finishCallExpression(node2, state.optionalChainMember);
              }
              const tokenType = this.state.type;
              if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak())
                return;
              const node = this.startNodeAt(startLoc);
              return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
            });
            if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result)
              return result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc), result;
          }
          return super.parseSubscript(base, startLoc, noCalls, state);
        }
        parseNewCallee(node) {
          var _callee$extra;
          super.parseNewCallee(node);
          const { callee } = node;
          callee.type !== "TSInstantiationExpression" || (_callee$extra = callee.extra) != null && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
        }
        parseExprOp(left, leftStartLoc, minPrec) {
          let isSatisfies;
          if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
            const node = this.startNodeAt(leftStartLoc);
            return node.expression = left, node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (isSatisfies && this.raise(Errors.UnexpectedKeyword, this.state.startLoc, { keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartLoc, minPrec);
          }
          return super.parseExprOp(left, leftStartLoc, minPrec);
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
        }
        checkImportReflection(node) {
          super.checkImportReflection(node), node.module && node.importKind !== "value" && this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
        }
        checkDuplicateExports() {
        }
        isPotentialImportPhase(isExport) {
          if (super.isPotentialImportPhase(isExport))
            return true;
          if (this.isContextual(130)) {
            const ch = this.lookaheadCharCode();
            return isExport ? ch === 123 || ch === 42 : ch !== 61;
          }
          return !isExport && this.isContextual(87);
        }
        applyImportPhase(node, isExport, phase, loc) {
          super.applyImportPhase(node, isExport, phase, loc), isExport ? node.exportKind = phase === "type" ? "type" : "value" : node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
        }
        parseImport(node) {
          if (this.match(134))
            return node.importKind = "value", super.parseImport(node);
          let importNode;
          if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61)
            return node.importKind = "value", this.tsParseImportEqualsDeclaration(node);
          if (this.isContextual(130)) {
            const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
            if (this.lookaheadCharCode() === 61)
              return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
            importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
          } else
            importNode = super.parseImport(node);
          return importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier" && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode), importNode;
        }
        parseExport(node, decorators) {
          if (this.match(83)) {
            this.next();
            const nodeImportEquals = node;
            let maybeDefaultIdentifier = null;
            return this.isContextual(130) && this.isPotentialImportPhase(false) ? maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false) : nodeImportEquals.importKind = "value", this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);
          }
          if (this.eat(29)) {
            const assign = node;
            return assign.expression = super.parseExpression(), this.semicolon(), this.sawUnambiguousESM = true, this.finishNode(assign, "TSExportAssignment");
          }
          if (this.eatContextual(93)) {
            const decl = node;
            return this.expectContextual(128), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
          }
          return super.parseExport(node, decorators);
        }
        isAbstractClass() {
          return this.isContextual(124) && this.lookahead().type === 80;
        }
        parseExportDefaultExpression() {
          if (this.isAbstractClass()) {
            const cls = this.startNode();
            return this.next(), cls.abstract = true, this.parseClass(cls, true, true);
          }
          if (this.match(129)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
              return result;
          }
          return super.parseExportDefaultExpression();
        }
        parseVarStatement(node, kind, allowMissingInitializer = false) {
          const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
          if (!isAmbientContext)
            return declaration;
          for (const { id, init } of declaration.declarations)
            init && (kind !== "const" || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init) : isValidAmbientConstInitializer(init, this.hasPlugin("estree")) || this.raise(TSErrors.ConstInitializerMustBeStringOrNumericLiteralOrLiteralEnumReference, init));
          return declaration;
        }
        parseStatementContent(flags, decorators) {
          if (this.match(75) && this.isLookaheadContextual("enum")) {
            const node = this.startNode();
            return this.expect(75), this.tsParseEnumDeclaration(node, { const: true });
          }
          if (this.isContextual(126))
            return this.tsParseEnumDeclaration(this.startNode());
          if (this.isContextual(129)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
              return result;
          }
          return super.parseStatementContent(flags, decorators);
        }
        parseAccessModifier() {
          return this.tsParseModifier(["public", "protected", "private"]);
        }
        tsHasSomeModifiers(member, modifiers) {
          return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
        }
        tsIsStartOfStaticBlocks() {
          return this.isContextual(106) && this.lookaheadCharCode() === 123;
        }
        parseClassMember(classBody, member, state) {
          const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
          this.tsParseModifiers({ allowedModifiers: modifiers, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }, member);
          const callParseClassMemberWithIsStatic = () => {
            this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition()), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
          };
          member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
        }
        parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
          const idx = this.tsTryParseIndexSignature(member);
          if (idx)
            return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, member), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, member, { modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, member), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, member));
          !this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, member)), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
        }
        parsePostMemberNameModifiers(methodOrProp) {
          this.eat(17) && (methodOrProp.optional = true), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
        }
        parseExpressionStatement(node, expr, decorators) {
          return (expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined) || super.parseExpressionStatement(node, expr, decorators);
        }
        shouldParseExportDeclaration() {
          return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (!this.state.maybeInArrowParameters || !this.match(17))
            return super.parseConditional(expr, startLoc, refExpressionErrors);
          const result = this.tryParse(() => super.parseConditional(expr, startLoc));
          return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
        }
        parseParenItem(node, startLoc) {
          const newNode = super.parseParenItem(node, startLoc);
          if (this.eat(17) && (newNode.optional = true, this.resetEndLocation(node)), this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
          }
          return node;
        }
        parseExportDeclaration(node) {
          if (!this.state.isAmbientContext && this.isContextual(125))
            return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
          const startLoc = this.state.startLoc, isDeclare = this.eatContextual(125);
          if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration()))
            throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
          const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
          return declaration ? ((declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startLoc), declaration.declare = true), declaration) : null;
        }
        parseClassId(node, isStatement, optionalId, bindingType) {
          if ((!isStatement || optionalId) && this.isContextual(113))
            return;
          super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
          typeParameters && (node.typeParameters = typeParameters);
        }
        parseClassPropertyAnnotation(node) {
          node.optional || (this.eat(35) ? node.definite = true : this.eat(17) && (node.optional = true));
          const type = this.tsTryParseTypeAnnotation();
          type && (node.typeAnnotation = type);
        }
        parseClassProperty(node) {
          if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc), node.abstract && this.match(29)) {
            const { key } = node;
            this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, { propertyName: key.type !== "Identifier" || node.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
          }
          return super.parseClassProperty(node);
        }
        parseClassPrivateProperty(node) {
          return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, node), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, node, { modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
        }
        parseClassAccessorProperty(node) {
          return this.parseClassPropertyAnnotation(node), node.optional && this.raise(TSErrors.AccessorCannotBeOptional, node), super.parseClassAccessorProperty(node);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
          const { declare = false, kind } = method;
          !declare || kind !== "get" && kind !== "set" || this.raise(TSErrors.DeclareAccessor, method, { kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
        }
        declareClassPrivateMethodInScope(node, kind) {
          node.type !== "TSDeclareMethod" && (node.type !== "MethodDefinition" || hasOwnProperty.call(node.value, "body")) && super.declareClassPrivateMethodInScope(node, kind);
        }
        parseClassSuper(node) {
          super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(113) && (node.implements = this.tsParseHeritageClause("implements"));
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        }
        parseFunctionParams(node, isConstructor) {
          const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
          typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, isConstructor);
        }
        parseVarId(decl, kind) {
          super.parseVarId(decl, kind), decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = true);
          const type = this.tsTryParseTypeAnnotation();
          type && (decl.id.typeAnnotation = type, this.resetEndLocation(decl.id));
        }
        parseAsyncArrowFromCallExpression(node, call) {
          return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
          let state, jsx, typeCast, typeParameters;
          if (this.hasPlugin("jsx") && (this.match(143) || this.match(47))) {
            if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
              return jsx.node;
            const { context } = this.state, currentContext = context[context.length - 1];
            currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
          }
          if (!((_jsx = jsx) != null && _jsx.error || this.match(47)))
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          state && state !== this.state || (state = this.state.clone());
          const arrow = this.tryParse((abort) => {
            var _expr$extra, _typeParameters;
            typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
            const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            return (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && abort(), ((_typeParameters = typeParameters) == null ? undefined : _typeParameters.params.length) !== 0 && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
          }, state);
          if (!arrow.error && !arrow.aborted)
            return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
          if (!jsx && (assert(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error))
            return typeCast.node;
          if ((_jsx2 = jsx) != null && _jsx2.node)
            return this.state = jsx.failState, jsx.node;
          if (arrow.node)
            return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
          if ((_typeCast = typeCast) != null && _typeCast.node)
            return this.state = typeCast.failState, typeCast.node;
          throw ((_jsx3 = jsx) == null ? undefined : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? undefined : _typeCast2.error);
        }
        reportReservedArrowTypeParam(node) {
          var _node$extra;
          node.params.length !== 1 || node.params[0].constraint || (_node$extra = node.extra) != null && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, node);
        }
        parseMaybeUnary(refExpressionErrors, sawUnary) {
          return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
        }
        parseArrow(node) {
          if (this.match(14)) {
            const result = this.tryParse((abort) => {
              const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
              return !this.canInsertSemicolon() && this.match(19) || abort(), returnType;
            });
            if (result.aborted)
              return;
            result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
          }
          return super.parseArrow(node);
        }
        parseFunctionParamType(param) {
          this.eat(17) && (param.optional = true);
          const type = this.tsTryParseTypeAnnotation();
          return type && (param.typeAnnotation = type), this.resetEndLocation(param), param;
        }
        isAssignable(node, isBinding) {
          switch (node.type) {
            case "TSTypeCastExpression":
              return this.isAssignable(node.expression, isBinding);
            case "TSParameterProperty":
              return true;
            default:
              return super.isAssignable(node, isBinding);
          }
        }
        toAssignable(node, isLHS = false) {
          switch (node.type) {
            case "ParenthesizedExpression":
              this.toAssignableParenthesizedExpression(node, isLHS);
              break;
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
              isLHS ? this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node) : this.raise(TSErrors.UnexpectedTypeCastInParameter, node), this.toAssignable(node.expression, isLHS);
              break;
            case "AssignmentExpression":
              isLHS || node.left.type !== "TSTypeCastExpression" || (node.left = this.typeCastToParameter(node.left));
            default:
              super.toAssignable(node, isLHS);
          }
        }
        toAssignableParenthesizedExpression(node, isLHS) {
          switch (node.expression.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isLHS);
              break;
            default:
              super.toAssignable(node, isLHS);
          }
        }
        checkToRestConversion(node, allowPattern) {
          switch (node.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
              this.checkToRestConversion(node.expression, false);
              break;
            default:
              super.checkToRestConversion(node, allowPattern);
          }
        }
        isValidLVal(type, isUnparenthesizedInAssign, binding) {
          switch (type) {
            case "TSTypeCastExpression":
              return true;
            case "TSParameterProperty":
              return "parameter";
            case "TSNonNullExpression":
            case "TSInstantiationExpression":
              return "expression";
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
              return (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true];
            default:
              return super.isValidLVal(type, isUnparenthesizedInAssign, binding);
          }
        }
        parseBindingAtom() {
          return this.state.type === 78 ? this.parseIdentifier(true) : super.parseBindingAtom();
        }
        parseMaybeDecoratorArguments(expr) {
          if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsParseTypeArgumentsInExpression();
            if (this.match(10)) {
              const call = super.parseMaybeDecoratorArguments(expr);
              return call.typeParameters = typeArguments, call;
            }
            this.unexpected(null, 10);
          }
          return super.parseMaybeDecoratorArguments(expr);
        }
        checkCommaAfterRest(close) {
          return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), false) : super.checkCommaAfterRest(close);
        }
        isClassMethod() {
          return this.match(47) || super.isClassMethod();
        }
        isClassProperty() {
          return this.match(35) || this.match(14) || super.isClassProperty();
        }
        parseMaybeDefault(startLoc, left) {
          const node = super.parseMaybeDefault(startLoc, left);
          return node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation), node;
        }
        getTokenFromCode(code2) {
          if (this.state.inType) {
            if (code2 === 62)
              return void this.finishOp(48, 1);
            if (code2 === 60)
              return void this.finishOp(47, 1);
          }
          super.getTokenFromCode(code2);
        }
        reScan_lt_gt() {
          const { type } = this.state;
          type === 47 ? (this.state.pos -= 1, this.readToken_lt()) : type === 48 && (this.state.pos -= 1, this.readToken_gt());
        }
        reScan_lt() {
          const { type } = this.state;
          return type === 51 ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type;
        }
        toAssignableList(exprList, trailingCommaLoc, isLHS) {
          for (let i = 0;i < exprList.length; i++) {
            const expr = exprList[i];
            (expr == null ? undefined : expr.type) === "TSTypeCastExpression" && (exprList[i] = this.typeCastToParameter(expr));
          }
          super.toAssignableList(exprList, trailingCommaLoc, isLHS);
        }
        typeCastToParameter(node) {
          return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
        }
        shouldParseArrow(params) {
          return this.match(14) ? params.every((expr) => this.isAssignable(expr, true)) : super.shouldParseArrow(params);
        }
        shouldParseAsyncArrow() {
          return this.match(14) || super.shouldParseAsyncArrow();
        }
        canHaveLeadingDecorator() {
          return super.canHaveLeadingDecorator() || this.isAbstractClass();
        }
        jsxParseOpeningElementAfterName(node) {
          if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
            typeArguments && (node.typeParameters = typeArguments);
          }
          return super.jsxParseOpeningElementAfterName(node);
        }
        getGetterSetterExpectedParamCount(method) {
          const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
          return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
        }
        parseCatchClauseParam() {
          const param = super.parseCatchClauseParam(), type = this.tsTryParseTypeAnnotation();
          return type && (param.typeAnnotation = type, this.resetEndLocation(param)), param;
        }
        tsInAmbientContext(cb) {
          const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } = this.state;
          this.state.isAmbientContext = true, this.state.strict = false;
          try {
            return cb();
          } finally {
            this.state.isAmbientContext = oldIsAmbientContext, this.state.strict = oldStrict;
          }
        }
        parseClass(node, isStatement, optionalId) {
          const oldInAbstractClass = this.state.inAbstractClass;
          this.state.inAbstractClass = !!node.abstract;
          try {
            return super.parseClass(node, isStatement, optionalId);
          } finally {
            this.state.inAbstractClass = oldInAbstractClass;
          }
        }
        tsParseAbstractDeclaration(node, decorators) {
          if (this.match(80))
            return node.abstract = true, this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
          if (this.isContextual(129)) {
            if (!this.hasFollowingLineBreak())
              return node.abstract = true, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node), this.tsParseInterfaceDeclaration(node);
          } else
            this.unexpected(null, 80);
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
          const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
          if (method.abstract) {
            if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
              const { key } = method;
              this.raise(TSErrors.AbstractMethodHasImplementation, method, { methodName: key.type !== "Identifier" || method.computed ? `[${this.input.slice(this.offsetToSourcePos(key.start), this.offsetToSourcePos(key.end))}]` : key.name });
            }
          }
          return method;
        }
        tsParseTypeParameterName() {
          return this.parseIdentifier().name;
        }
        shouldParseAsAmbientContext() {
          return !!this.getPluginOption("typescript", "dts");
        }
        parse() {
          return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
        }
        getExpression() {
          return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
        }
        parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
          return !isString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096));
        }
        parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
          const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
          let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = false, canParseAsKeyword = true;
          const loc = leftOfAs.loc.start;
          if (this.isContextual(93)) {
            const firstAs = this.parseIdentifier();
            if (this.isContextual(93)) {
              const secondAs = this.parseIdentifier();
              tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = true, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = false) : (rightOfAs = secondAs, canParseAsKeyword = false);
            } else
              tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = false, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = true, leftOfAs = firstAs);
          } else
            tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = true, isImport ? (leftOfAs = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true)) : leftOfAs = this.parseModuleExportName());
          hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
          node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
        }
      }, v8intrinsic: (superClass) => class extends superClass {
        parseV8Intrinsic() {
          if (this.match(54)) {
            const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
            if (this.next(), tokenIsIdentifier(this.state.type)) {
              const name = this.parseIdentifierName(), identifier = this.createIdentifier(node, name);
              if (identifier.type = "V8IntrinsicIdentifier", this.match(10))
                return identifier;
            }
            this.unexpected(v8IntrinsicStartLoc);
          }
        }
        parseExprAtom(refExpressionErrors) {
          return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
        }
      }, placeholders: (superClass) => class extends superClass {
        parsePlaceholder(expectedNode) {
          if (this.match(133)) {
            const node = this.startNode();
            return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(133), this.finishPlaceholder(node, expectedNode);
          }
        }
        finishPlaceholder(node, expectedNode) {
          let placeholder = node;
          return placeholder.expectedNode && placeholder.type || (placeholder = this.finishNode(placeholder, "Placeholder")), placeholder.expectedNode = expectedNode, placeholder;
        }
        getTokenFromCode(code2) {
          code2 === 37 && this.input.charCodeAt(this.state.pos + 1) === 37 ? this.finishOp(133, 2) : super.getTokenFromCode(code2);
        }
        parseExprAtom(refExpressionErrors) {
          return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
        }
        parseIdentifier(liberal) {
          return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          word !== undefined && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
        }
        parseBindingAtom() {
          return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
        }
        isValidLVal(type, isParenthesized, binding) {
          return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
        }
        toAssignable(node, isLHS) {
          node && node.type === "Placeholder" && node.expectedNode === "Expression" ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
        }
        chStartsBindingIdentifier(ch, pos) {
          if (super.chStartsBindingIdentifier(ch, pos))
            return true;
          return this.lookahead().type === 133;
        }
        verifyBreakContinue(node, isBreak) {
          node.label && node.label.type === "Placeholder" || super.verifyBreakContinue(node, isBreak);
        }
        parseExpressionStatement(node, expr) {
          var _expr$extra;
          if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized)
            return super.parseExpressionStatement(node, expr);
          if (this.match(14)) {
            const stmt = node;
            return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(), this.finishNode(stmt, "LabeledStatement");
          }
          this.semicolon();
          const stmtPlaceholder = node;
          return stmtPlaceholder.name = expr.name, this.finishPlaceholder(stmtPlaceholder, "Statement");
        }
        parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
          return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
        }
        parseFunctionId(requireId) {
          return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
        }
        parseClass(node, isStatement, optionalId) {
          const type = isStatement ? "ClassDeclaration" : "ClassExpression";
          this.next();
          const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
          if (placeholder) {
            if (!(this.match(81) || this.match(133) || this.match(5))) {
              if (optionalId || !isStatement)
                return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type);
              throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
            }
            node.id = placeholder;
          } else
            this.parseClassId(node, isStatement, optionalId);
          return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type);
        }
        parseExport(node, decorators) {
          const placeholder = this.parsePlaceholder("Identifier");
          if (!placeholder)
            return super.parseExport(node, decorators);
          const node2 = node;
          if (!this.isContextual(98) && !this.match(12))
            return node2.specifiers = [], node2.source = null, node2.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node2, "ExportNamedDeclaration");
          this.expectPlugin("exportDefaultFrom");
          const specifier = this.startNode();
          return specifier.exported = placeholder, node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node2, decorators);
        }
        isExportDefaultSpecifier() {
          if (this.match(65)) {
            const next = this.nextTokenStart();
            if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(133), this.nextTokenStartSince(next + 4)))
              return true;
          }
          return super.isExportDefaultSpecifier();
        }
        maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
          var _specifiers;
          return !((_specifiers = node.specifiers) == null || !_specifiers.length) || super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
        }
        checkExport(node) {
          const { specifiers } = node;
          specifiers != null && specifiers.length && (node.specifiers = specifiers.filter((node2) => node2.exported.type === "Placeholder")), super.checkExport(node), node.specifiers = specifiers;
        }
        parseImport(node) {
          const placeholder = this.parsePlaceholder("Identifier");
          if (!placeholder)
            return super.parseImport(node);
          if (node.specifiers = [], !this.isContextual(98) && !this.match(12))
            return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          const specifier = this.startNodeAtNode(placeholder);
          if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) {
            this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
          }
          return this.expectContextual(98), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }
        parseImportSource() {
          return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
        }
        assertNoSpace() {
          this.state.start > this.offsetToSourcePos(this.state.lastTokEndLoc.index) && this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
        }
      } }, mixinPluginNames = Object.keys(mixinPlugins);

      class ExpressionParser extends LValParser {
        checkProto(prop, isRecord, protoRef, refExpressionErrors) {
          if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand)
            return;
          const key = prop.key;
          if ((key.type === "Identifier" ? key.name : key.value) === "__proto__") {
            if (isRecord)
              return void this.raise(Errors.RecordNoProto, key);
            protoRef.used && (refExpressionErrors ? refExpressionErrors.doubleProtoLoc === null && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, key)), protoRef.used = true;
          }
        }
        shouldExitDescending(expr, potentialArrowAt) {
          return expr.type === "ArrowFunctionExpression" && this.offsetToSourcePos(expr.start) === potentialArrowAt;
        }
        getExpression() {
          this.enterInitialScopes(), this.nextToken();
          const expr = this.parseExpression();
          return this.match(140) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
        }
        parseExpression(disallowIn, refExpressionErrors) {
          return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }
        parseExpressionBase(refExpressionErrors) {
          const startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
          if (this.match(12)) {
            const node = this.startNodeAt(startLoc);
            for (node.expressions = [expr];this.eat(12); )
              node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
            return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }
        parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
          return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
        }
        parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
          return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
        }
        setOptionalParametersError(refExpressionErrors, resultError) {
          var _resultError$loc;
          refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? undefined : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
        }
        parseMaybeAssign(refExpressionErrors, afterLeftParse) {
          const startLoc = this.state.startLoc;
          if (this.isContextual(108) && this.prodParam.hasYield) {
            let left2 = this.parseYield();
            return afterLeftParse && (left2 = afterLeftParse.call(this, left2, startLoc)), left2;
          }
          let ownExpressionErrors;
          refExpressionErrors ? ownExpressionErrors = false : (refExpressionErrors = new ExpressionErrors, ownExpressionErrors = true);
          const { type } = this.state;
          (type === 10 || tokenIsIdentifier(type)) && (this.state.potentialArrowAt = this.state.start);
          let left = this.parseMaybeConditional(refExpressionErrors);
          if (afterLeftParse && (left = afterLeftParse.call(this, left, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
            const node = this.startNodeAt(startLoc), operator = this.state.value;
            if (node.operator = operator, this.match(29)) {
              this.toAssignable(left, true), node.left = left;
              const startIndex = startLoc.index;
              refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex && (refExpressionErrors.doubleProtoLoc = null), refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex && (refExpressionErrors.shorthandAssignLoc = null), refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null);
            } else
              node.left = left;
            return this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, this.finishNode(node, "AssignmentExpression")), node;
          }
          var token;
          return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, true), left;
        }
        parseMaybeConditional(refExpressionErrors) {
          const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
          return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startLoc, refExpressionErrors);
        }
        parseConditional(expr, startLoc, refExpressionErrors) {
          if (this.eat(17)) {
            const node = this.startNodeAt(startLoc);
            return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }
        parseMaybeUnaryOrPrivate(refExpressionErrors) {
          return this.match(139) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
        }
        parseExprOps(refExpressionErrors) {
          const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
          return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startLoc, -1);
        }
        parseExprOp(left, leftStartLoc, minPrec) {
          if (this.isPrivateName(left)) {
            const value2 = this.getPrivateNameSV(left);
            (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, left, { identifierName: value2 }), this.classScope.usePrivateName(value2, left.loc.start);
          }
          const op = this.state.type;
          if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
            let prec = tokenOperatorPrecedence(op);
            if (prec > minPrec) {
              if (op === 39) {
                if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
                  return left;
                this.checkPipelineAtInfixOperator(left, leftStartLoc);
              }
              const node = this.startNodeAt(leftStartLoc);
              node.left = left, node.operator = this.state.value;
              const logical = op === 41 || op === 42, coalesce = op === 40;
              if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), op === 39 && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && this.state.type === 96 && this.prodParam.hasAwait)
                throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
              node.right = this.parseExprOpRightExpr(op, prec);
              const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
              if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40)
                throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
              return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
            }
          }
          var token;
          return left;
        }
        parseExprOpRightExpr(op, prec) {
          const startLoc = this.state.startLoc;
          if (op === 39)
            switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "hack":
                return this.withTopicBindingContext(() => this.parseHackPipeBody());
              case "smart":
                return this.withTopicBindingContext(() => {
                  if (this.prodParam.hasYield && this.isContextual(108))
                    throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
                  return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                });
              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
            }
          return this.parseExprOpBaseRightExpr(op, prec);
        }
        parseExprOpBaseRightExpr(op, prec) {
          const startLoc = this.state.startLoc;
          return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, op === 57 ? prec - 1 : prec);
        }
        parseHackPipeBody() {
          var _body$extra;
          const { startLoc } = this.state, body = this.parseMaybeAssign();
          return !UnparenthesizedPipeBodyDescriptions.has(body.type) || (_body$extra = body.extra) != null && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, startLoc, { type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, startLoc), body;
        }
        checkExponentialAfterUnary(node) {
          this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
        }
        parseMaybeUnary(refExpressionErrors, sawUnary) {
          const startLoc = this.state.startLoc, isAwait = this.isContextual(96);
          if (isAwait && this.recordAwaitIfAllowed()) {
            this.next();
            const expr2 = this.parseAwait(startLoc);
            return sawUnary || this.checkExponentialAfterUnary(expr2), expr2;
          }
          const update = this.match(34), node = this.startNode();
          if (token = this.state.type, tokenPrefixes[token]) {
            node.operator = this.state.value, node.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
            const isDelete = this.match(89);
            if (this.next(), node.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(refExpressionErrors, true), this.state.strict && isDelete) {
              const arg = node.argument;
              arg.type === "Identifier" ? this.raise(Errors.StrictDelete, node) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, node);
            }
            if (!update)
              return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
          }
          var token;
          const expr = this.parseUpdate(node, update, refExpressionErrors);
          if (isAwait) {
            const { type } = this.state;
            if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54)) && !this.isAmbiguousAwait())
              return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc), this.parseAwait(startLoc);
          }
          return expr;
        }
        parseUpdate(node, update, refExpressionErrors) {
          if (update) {
            const updateExpressionNode = node;
            return this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression")), node;
          }
          const startLoc = this.state.startLoc;
          let expr = this.parseExprSubscripts(refExpressionErrors);
          if (this.checkExpressionErrors(refExpressionErrors, false))
            return expr;
          for (;this.state.type === 34 && !this.canInsertSemicolon(); ) {
            const node2 = this.startNodeAt(startLoc);
            node2.operator = this.state.value, node2.prefix = false, node2.argument = expr, this.next(), this.checkLVal(expr, expr = this.finishNode(node2, "UpdateExpression"));
          }
          return expr;
        }
        parseExprSubscripts(refExpressionErrors) {
          const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
          return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startLoc);
        }
        parseSubscripts(base, startLoc, noCalls) {
          const state = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(base), stop: false };
          do {
            base = this.parseSubscript(base, startLoc, noCalls, state), state.maybeAsyncArrow = false;
          } while (!state.stop);
          return base;
        }
        parseSubscript(base, startLoc, noCalls, state) {
          const { type } = this.state;
          if (!noCalls && type === 15)
            return this.parseBind(base, startLoc, noCalls, state);
          if (tokenIsTemplate(type))
            return this.parseTaggedTemplateExpression(base, startLoc, state);
          let optional = false;
          if (type === 18) {
            if (noCalls && (this.raise(Errors.OptionalChainingNoNew, this.state.startLoc), this.lookaheadCharCode() === 40))
              return state.stop = true, base;
            state.optionalChainMember = optional = true, this.next();
          }
          if (!noCalls && this.match(10))
            return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
          {
            const computed = this.eat(0);
            return computed || optional || this.eat(16) ? this.parseMember(base, startLoc, state, computed, optional) : (state.stop = true, base);
          }
        }
        parseMember(base, startLoc, state, computed, optional) {
          const node = this.startNodeAt(startLoc);
          return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(139) ? (base.type === "Super" && this.raise(Errors.SuperPrivateField, startLoc), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(true), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
        }
        parseBind(base, startLoc, noCalls, state) {
          const node = this.startNodeAt(startLoc);
          return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = true, this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
        }
        parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          let refExpressionErrors = null;
          this.state.maybeInArrowParameters = true, this.next();
          const node = this.startNodeAt(startLoc);
          node.callee = base;
          const { maybeAsyncArrow, optionalChainMember } = state;
          maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(2)), refExpressionErrors = new ExpressionErrors), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, base.type !== "Super", node, refExpressionErrors);
          let finishedNode = this.finishCallExpression(node, optionalChainMember);
          return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = true, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, true), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
        }
        toReferencedArguments(node, isParenthesizedExpr) {
          this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
        }
        parseTaggedTemplateExpression(base, startLoc, state) {
          const node = this.startNodeAt(startLoc);
          return node.tag = base, node.quasi = this.parseTemplate(true), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, startLoc), this.finishNode(node, "TaggedTemplateExpression");
        }
        atPossibleAsyncArrow(base) {
          return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.offsetToSourcePos(base.start) === this.state.potentialArrowAt;
        }
        finishCallExpression(node, optional) {
          if (node.callee.type === "Import")
            if (node.arguments.length === 0 || node.arguments.length > 2)
              this.raise(Errors.ImportCallArity, node);
            else
              for (const arg of node.arguments)
                arg.type === "SpreadElement" && this.raise(Errors.ImportCallSpreadArgument, arg);
          return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
        }
        parseCallExpressionArguments(close, allowPlaceholder, nodeForExtra, refExpressionErrors) {
          const elts = [];
          let first = true;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          for (this.state.inFSharpPipelineDirectBody = false;!this.eat(close); ) {
            if (first)
              first = false;
            else if (this.expect(12), this.match(close)) {
              nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
              break;
            }
            elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
          }
          return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
        }
        shouldParseAsyncArrow() {
          return this.match(19) && !this.canInsertSemicolon();
        }
        parseAsyncArrowFromCallExpression(node, call) {
          var _call$extra;
          return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? undefined : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
        }
        parseNoCallExpr() {
          const startLoc = this.state.startLoc;
          return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
        }
        parseExprAtom(refExpressionErrors) {
          let node, decorators = null;
          const { type } = this.state;
          switch (type) {
            case 79:
              return this.parseSuper();
            case 83:
              return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : this.match(10) ? this.options.createImportExpressions ? this.parseImportCall(node) : this.finishNode(node, "Import") : (this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc), this.finishNode(node, "Import"));
            case 78:
              return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
            case 90:
              return this.parseDo(this.startNode(), false);
            case 56:
            case 31:
              return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
            case 135:
              return this.parseNumericLiteral(this.state.value);
            case 136:
              return this.parseBigIntLiteral(this.state.value);
            case 134:
              return this.parseStringLiteral(this.state.value);
            case 84:
              return this.parseNullLiteral();
            case 85:
              return this.parseBooleanLiteral(true);
            case 86:
              return this.parseBooleanLiteral(false);
            case 10: {
              const canBeArrow = this.state.potentialArrowAt === this.state.start;
              return this.parseParenAndDistinguishExpression(canBeArrow);
            }
            case 2:
            case 1:
              return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
            case 0:
              return this.parseArrayLike(3, true, false, refExpressionErrors);
            case 6:
            case 7:
              return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
            case 5:
              return this.parseObjectLike(8, false, false, refExpressionErrors);
            case 68:
              return this.parseFunctionOrFunctionSent();
            case 26:
              decorators = this.parseDecorators();
            case 80:
              return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
            case 77:
              return this.parseNewOrNewTarget();
            case 25:
            case 24:
              return this.parseTemplate(false);
            case 15: {
              node = this.startNode(), this.next(), node.object = null;
              const callee = node.callee = this.parseNoCallExpr();
              if (callee.type === "MemberExpression")
                return this.finishNode(node, "BindExpression");
              throw this.raise(Errors.UnsupportedBind, callee);
            }
            case 139:
              return this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, { identifierName: this.state.value }), this.parsePrivateName();
            case 33:
              return this.parseTopicReferenceThenEqualsSign(54, "%");
            case 32:
              return this.parseTopicReferenceThenEqualsSign(44, "^");
            case 37:
            case 38:
              return this.parseTopicReference("hack");
            case 44:
            case 54:
            case 27: {
              const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
              if (pipeProposal)
                return this.parseTopicReference(pipeProposal);
              this.unexpected();
              break;
            }
            case 47: {
              const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
              isIdentifierStart(lookaheadCh) || lookaheadCh === 62 ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
              break;
            }
            default:
              if (type === 137)
                return this.parseDecimalLiteral(this.state.value);
              if (tokenIsIdentifier(type)) {
                if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123)
                  return this.parseModuleExpression();
                const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
                if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
                  const { type: type2 } = this.state;
                  if (type2 === 68)
                    return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                  if (tokenIsIdentifier(type2))
                    return this.lookaheadCharCode() === 61 ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
                  if (type2 === 90)
                    return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), true);
                }
                return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], false)) : id;
              }
              this.unexpected();
          }
        }
        parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
          const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
          if (pipeProposal)
            return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
          this.unexpected();
        }
        parseTopicReference(pipeProposal) {
          const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
          return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
        }
        finishTopicReference(node, startLoc, pipeProposal, tokenType) {
          if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
            const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
            return this.topicReferenceIsAllowedInCurrentContext() || this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc), this.registerTopicReference(), this.finishNode(node, nodeType);
          }
          throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, { token: tokenLabelName(tokenType) });
        }
        testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
          switch (pipeProposal) {
            case "hack":
              return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
            case "smart":
              return tokenType === 27;
            default:
              throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
          }
        }
        parseAsyncArrowUnaryFunction(node) {
          this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
          const params = [this.parseIdentifier()];
          return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition()), this.expect(19), this.parseArrowExpression(node, params, true);
        }
        parseDo(node, isAsync) {
          this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
          const oldLabels = this.state.labels;
          return this.state.labels = [], isAsync ? (this.prodParam.enter(2), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
        }
        parseSuper() {
          const node = this.startNode();
          return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, node) : this.raise(Errors.SuperNotAllowed, node), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, node), this.finishNode(node, "Super");
        }
        parsePrivateName() {
          const node = this.startNode(), id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1)), name = this.state.value;
          return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
        }
        parseFunctionOrFunctionSent() {
          const node = this.startNode();
          if (this.next(), this.prodParam.hasYield && this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
            return this.next(), this.match(103) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
          }
          return this.parseFunction(node);
        }
        parseMetaProperty(node, meta, propertyName) {
          node.meta = meta;
          const containsEsc = this.state.containsEsc;
          return node.property = this.parseIdentifier(true), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, node.property, { target: meta.name, onlyValidPropertyName: propertyName }), this.finishNode(node, "MetaProperty");
        }
        parseImportMetaProperty(node) {
          const id = this.createIdentifier(this.startNodeAtNode(node), "import");
          if (this.next(), this.isContextual(101))
            this.inModule || this.raise(Errors.ImportMetaOutsideModule, id), this.sawUnambiguousESM = true;
          else if (this.isContextual(105) || this.isContextual(97)) {
            const isSource = this.isContextual(105);
            if (isSource || this.unexpected(), this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation"), !this.options.createImportExpressions)
              throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, { phase: this.state.value });
            return this.next(), node.phase = isSource ? "source" : "defer", this.parseImportCall(node);
          }
          return this.parseMetaProperty(node, id, "meta");
        }
        parseLiteralAtNode(value2, type, node) {
          return this.addExtra(node, "rawValue", value2), this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.value = value2, this.next(), this.finishNode(node, type);
        }
        parseLiteral(value2, type) {
          const node = this.startNode();
          return this.parseLiteralAtNode(value2, type, node);
        }
        parseStringLiteral(value2) {
          return this.parseLiteral(value2, "StringLiteral");
        }
        parseNumericLiteral(value2) {
          return this.parseLiteral(value2, "NumericLiteral");
        }
        parseBigIntLiteral(value2) {
          return this.parseLiteral(value2, "BigIntLiteral");
        }
        parseDecimalLiteral(value2) {
          return this.parseLiteral(value2, "DecimalLiteral");
        }
        parseRegExpLiteral(value2) {
          const node = this.startNode();
          return this.addExtra(node, "raw", this.input.slice(this.offsetToSourcePos(node.start), this.state.end)), node.pattern = value2.pattern, node.flags = value2.flags, this.next(), this.finishNode(node, "RegExpLiteral");
        }
        parseBooleanLiteral(value2) {
          const node = this.startNode();
          return node.value = value2, this.next(), this.finishNode(node, "BooleanLiteral");
        }
        parseNullLiteral() {
          const node = this.startNode();
          return this.next(), this.finishNode(node, "NullLiteral");
        }
        parseParenAndDistinguishExpression(canBeArrow) {
          const startLoc = this.state.startLoc;
          let val;
          this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(1));
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
          const innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors;
          let spreadStartLoc, optionalCommaStartLoc, first = true;
          for (;!this.match(11); ) {
            if (first)
              first = false;
            else if (this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
              optionalCommaStartLoc = this.state.startLoc;
              break;
            }
            if (this.match(21)) {
              const spreadNodeStartLoc = this.state.startLoc;
              if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc)), !this.checkCommaAfterRest(41))
                break;
            } else
              exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
          }
          const innerEndLoc = this.state.lastTokEndLoc;
          this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          let arrowNode = this.startNodeAt(startLoc);
          return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, false), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, true), this.toReferencedListDeep(exprList, true), exprList.length > 1 ? (val = this.startNodeAt(innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startLoc, val));
        }
        wrapParenthesis(startLoc, expression) {
          if (!this.options.createParenthesizedExpressions)
            return this.addExtra(expression, "parenthesized", true), this.addExtra(expression, "parenStart", startLoc.index), this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index), expression;
          const parenExpression = this.startNodeAt(startLoc);
          return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
        }
        shouldParseArrow(params) {
          return !this.canInsertSemicolon();
        }
        parseArrow(node) {
          if (this.eat(19))
            return node;
        }
        parseParenItem(node, startLoc) {
          return node;
        }
        parseNewOrNewTarget() {
          const node = this.startNode();
          if (this.next(), this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
            this.next();
            const metaProp = this.parseMetaProperty(node, meta, "target");
            return this.scope.inNonArrowFunction || this.scope.inClass || this.options.allowNewTargetOutsideFunction || this.raise(Errors.UnexpectedNewTarget, metaProp), metaProp;
          }
          return this.parseNew(node);
        }
        parseNew(node) {
          if (this.parseNewCallee(node), this.eat(10)) {
            const args = this.parseExprList(11);
            this.toReferencedList(args), node.arguments = args;
          } else
            node.arguments = [];
          return this.finishNode(node, "NewExpression");
        }
        parseNewCallee(node) {
          const isImport = this.match(83), callee = this.parseNoCallExpr();
          node.callee = callee, !isImport || callee.type !== "Import" && callee.type !== "ImportExpression" || this.raise(Errors.ImportCallNotNewExpression, callee);
        }
        parseTemplateElement(isTagged) {
          const { start, startLoc, end, value: value2 } = this.state, elemStart = start + 1, elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
          value2 === null && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)));
          const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
          elem.value = { raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, `
`), cooked: value2 === null ? null : value2.slice(1, endOffset) }, elem.tail = isTail, this.next();
          const finishedNode = this.finishNode(elem, "TemplateElement");
          return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
        }
        parseTemplate(isTagged) {
          const node = this.startNode();
          let curElt = this.parseTemplateElement(isTagged);
          const quasis = [curElt], substitutions = [];
          for (;!curElt.tail; )
            substitutions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), quasis.push(curElt = this.parseTemplateElement(isTagged));
          return node.expressions = substitutions, node.quasis = quasis, this.finishNode(node, "TemplateLiteral");
        }
        parseTemplateSubstitution() {
          return this.parseExpression();
        }
        parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
          isRecord && this.expectPlugin("recordAndTuple");
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          const propHash = Object.create(null);
          let first = true;
          const node = this.startNode();
          for (node.properties = [], this.next();!this.match(close); ) {
            if (first)
              first = false;
            else if (this.expect(12), this.match(close)) {
              this.addTrailingCommaExtraToNode(node);
              break;
            }
            let prop;
            isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement" && this.raise(Errors.InvalidRecordProperty, prop), prop.shorthand && this.addExtra(prop, "shorthand", true), node.properties.push(prop);
          }
          this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
          let type = "ObjectExpression";
          return isPattern ? type = "ObjectPattern" : isRecord && (type = "RecordExpression"), this.finishNode(node, type);
        }
        addTrailingCommaExtraToNode(node) {
          this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
        }
        maybeAsyncOrAccessorProp(prop) {
          return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
        }
        parsePropertyDefinition(refExpressionErrors) {
          let decorators = [];
          if (this.match(26))
            for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);this.match(26); )
              decorators.push(this.parseDecorator());
          const prop = this.startNode();
          let startLoc, isAsync = false, isAccessor = false;
          if (this.match(21))
            return decorators.length && this.unexpected(), this.parseSpread();
          decorators.length && (prop.decorators = decorators, decorators = []), prop.method = false, refExpressionErrors && (startLoc = this.state.startLoc);
          let isGenerator = this.eat(55);
          this.parsePropertyNamePrefixOperator(prop);
          const containsEsc = this.state.containsEsc;
          if (this.parsePropertyName(prop, refExpressionErrors), !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
            const { key } = prop, keyName = key.name;
            keyName !== "async" || this.hasPrecedingLineBreak() || (isAsync = true, this.resetPreviousNodeTrailingComments(key), isGenerator = this.eat(55), this.parsePropertyName(prop)), keyName !== "get" && keyName !== "set" || (isAccessor = true, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator = true, this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), { kind: keyName }), this.next()), this.parsePropertyName(prop));
          }
          return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
        }
        getGetterSetterExpectedParamCount(method) {
          return method.kind === "get" ? 0 : 1;
        }
        getObjectOrClassMethodParams(method) {
          return method.params;
        }
        checkGetterSetterParams(method) {
          var _params;
          const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
          params.length !== paramCount && this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method), method.kind === "set" && ((_params = params[params.length - 1]) == null ? undefined : _params.type) === "RestElement" && this.raise(Errors.BadSetterRestParameter, method);
        }
        parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
          if (isAccessor) {
            const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
            return this.checkGetterSetterParams(finishedProp), finishedProp;
          }
          if (isAsync || isGenerator || this.match(10))
            return isPattern && this.unexpected(), prop.kind = "method", prop.method = true, this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
        }
        parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
          if (prop.shorthand = false, this.eat(14))
            return prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
          if (!prop.computed && prop.key.type === "Identifier") {
            if (this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false), isPattern)
              prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            else if (this.match(29)) {
              const shorthandAssignLoc = this.state.startLoc;
              refExpressionErrors != null ? refExpressionErrors.shorthandAssignLoc === null && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc), prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            } else
              prop.value = cloneIdentifier(prop.key);
            return prop.shorthand = true, this.finishNode(prop, "ObjectProperty");
          }
        }
        parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
          const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
          return node || this.unexpected(), node;
        }
        parsePropertyName(prop, refExpressionErrors) {
          if (this.eat(0))
            prop.computed = true, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
          else {
            const { type, value: value2 } = this.state;
            let key;
            if (tokenIsKeywordOrIdentifier(type))
              key = this.parseIdentifier(true);
            else
              switch (type) {
                case 135:
                  key = this.parseNumericLiteral(value2);
                  break;
                case 134:
                  key = this.parseStringLiteral(value2);
                  break;
                case 136:
                  key = this.parseBigIntLiteral(value2);
                  break;
                case 139: {
                  const privateKeyLoc = this.state.startLoc;
                  refExpressionErrors != null ? refExpressionErrors.privateKeyLoc === null && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, privateKeyLoc), key = this.parsePrivateName();
                  break;
                }
                default:
                  if (type === 137) {
                    key = this.parseDecimalLiteral(value2);
                    break;
                  }
                  this.unexpected();
              }
            prop.key = key, type !== 139 && (prop.computed = false);
          }
        }
        initFunction(node, isAsync) {
          node.id = null, node.generator = false, node.async = isAsync;
        }
        parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
          this.initFunction(node, isAsync), node.generator = isGenerator, this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags(isAsync, node.generator)), this.parseFunctionParams(node, isConstructor);
          const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
          return this.prodParam.exit(), this.scope.exit(), finishedNode;
        }
        parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
          isTuple && this.expectPlugin("recordAndTuple");
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = false;
          const node = this.startNode();
          return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
        }
        parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
          this.scope.enter(6);
          let flags = functionFlags(isAsync, false);
          !this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          return params && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(node, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
        }
        setArrowFunctionParameters(node, params, trailingCommaLoc) {
          this.toAssignableList(params, trailingCommaLoc, false), node.params = params;
        }
        parseFunctionBodyAndFinish(node, type, isMethod = false) {
          return this.parseFunctionBody(node, false, isMethod), this.finishNode(node, type);
        }
        parseFunctionBody(node, allowExpression, isMethod = false) {
          const isExpression = allowExpression && !this.match(5);
          if (this.expressionScope.enter(newExpressionScope()), isExpression)
            node.body = this.parseMaybeAssign(), this.checkParams(node, false, allowExpression, false);
          else {
            const oldStrict = this.state.strict, oldLabels = this.state.labels;
            this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
              const nonSimple = !this.isSimpleParamList(node.params);
              hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, node.kind !== "method" && node.kind !== "constructor" || !node.key ? node : node.key.loc.end);
              const strictModeChanged = !oldStrict && this.state.strict;
              this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
            }), this.prodParam.exit(), this.state.labels = oldLabels;
          }
          this.expressionScope.exit();
        }
        isSimpleParameter(node) {
          return node.type === "Identifier";
        }
        isSimpleParamList(params) {
          for (let i = 0, len = params.length;i < len; i++)
            if (!this.isSimpleParameter(params[i]))
              return false;
          return true;
        }
        checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
          const checkClashes = !allowDuplicates && new Set, formalParameters = { type: "FormalParameters" };
          for (const param of node.params)
            this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);
        }
        parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
          const elts = [];
          let first = true;
          for (;!this.eat(close); ) {
            if (first)
              first = false;
            else if (this.expect(12), this.match(close)) {
              nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
              break;
            }
            elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
          }
          return elts;
        }
        parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
          let elt;
          if (this.match(12))
            allowEmpty || this.raise(Errors.UnexpectedToken, this.state.curPosition(), { unexpected: "," }), elt = null;
          else if (this.match(21)) {
            const spreadNodeStartLoc = this.state.startLoc;
            elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
          } else if (this.match(17)) {
            this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
            const node = this.startNode();
            this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
          } else
            elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
          return elt;
        }
        parseIdentifier(liberal) {
          const node = this.startNode(), name = this.parseIdentifierName(liberal);
          return this.createIdentifier(node, name);
        }
        createIdentifier(node, name) {
          return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
        }
        parseIdentifierName(liberal) {
          let name;
          const { startLoc, type } = this.state;
          tokenIsKeywordOrIdentifier(type) ? name = this.state.value : this.unexpected();
          const tokenIsKeyword2 = type <= 92;
          return liberal ? tokenIsKeyword2 && this.replaceToken(132) : this.checkReservedWord(name, startLoc, tokenIsKeyword2, false), this.next(), name;
        }
        checkReservedWord(word, startLoc, checkKeywords, isBinding) {
          if (word.length > 10)
            return;
          if (!function(word2) {
            return reservedWordLikeSet.has(word2);
          }(word))
            return;
          if (checkKeywords && function(word2) {
            return keywords.has(word2);
          }(word))
            return void this.raise(Errors.UnexpectedKeyword, startLoc, { keyword: word });
          if ((this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule))
            this.raise(Errors.UnexpectedReservedWord, startLoc, { reservedWord: word });
          else if (word === "yield") {
            if (this.prodParam.hasYield)
              return void this.raise(Errors.YieldBindingIdentifier, startLoc);
          } else if (word === "await") {
            if (this.prodParam.hasAwait)
              return void this.raise(Errors.AwaitBindingIdentifier, startLoc);
            if (this.scope.inStaticBlock)
              return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
            this.expressionScope.recordAsyncArrowParametersError(startLoc);
          } else if (word === "arguments" && this.scope.inClassAndNotInNonArrowFunction)
            return void this.raise(Errors.ArgumentsInClass, startLoc);
        }
        recordAwaitIfAllowed() {
          const isAwaitAllowed = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;
          return isAwaitAllowed && !this.scope.inFunction && (this.state.hasTopLevelAwait = true), isAwaitAllowed;
        }
        parseAwait(startLoc) {
          const node = this.startNodeAt(startLoc);
          return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, node), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, true)), this.finishNode(node, "AwaitExpression");
        }
        isAmbiguousAwait() {
          if (this.hasPrecedingLineBreak())
            return true;
          const { type } = this.state;
          return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 138 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
        }
        parseYield() {
          const node = this.startNode();
          this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node), this.next();
          let delegating = false, argument = null;
          if (!this.hasPrecedingLineBreak())
            switch (delegating = this.eat(55), this.state.type) {
              case 13:
              case 140:
              case 8:
              case 11:
              case 3:
              case 9:
              case 14:
              case 12:
                if (!delegating)
                  break;
              default:
                argument = this.parseMaybeAssign();
            }
          return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
        }
        parseImportCall(node) {
          if (this.next(), node.source = this.parseMaybeAssignAllowIn(), node.options = null, this.eat(12) && !this.match(11) && (node.options = this.parseMaybeAssignAllowIn(), this.eat(12) && !this.match(11))) {
            do {
              this.parseMaybeAssignAllowIn();
            } while (this.eat(12) && !this.match(11));
            this.raise(Errors.ImportCallArity, node);
          }
          return this.expect(11), this.finishNode(node, "ImportExpression");
        }
        checkPipelineAtInfixOperator(left, leftStartLoc) {
          this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && left.type === "SequenceExpression" && this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
        }
        parseSmartPipelineBodyInStyle(childExpr, startLoc) {
          if (this.isSimpleReference(childExpr)) {
            const bodyNode = this.startNodeAt(startLoc);
            return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
          }
          {
            const bodyNode = this.startNodeAt(startLoc);
            return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
          }
        }
        isSimpleReference(expression) {
          switch (expression.type) {
            case "MemberExpression":
              return !expression.computed && this.isSimpleReference(expression.object);
            case "Identifier":
              return true;
            default:
              return false;
          }
        }
        checkSmartPipeTopicBodyEarlyErrors(startLoc) {
          if (this.match(19))
            throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
          this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, startLoc);
        }
        withTopicBindingContext(callback) {
          const outerContextTopicState = this.state.topicContext;
          this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
          try {
            return callback();
          } finally {
            this.state.topicContext = outerContextTopicState;
          }
        }
        withSmartMixTopicForbiddingContext(callback) {
          if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }]))
            return callback();
          {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }
        }
        withSoloAwaitPermittingContext(callback) {
          const outerContextSoloAwaitState = this.state.soloAwait;
          this.state.soloAwait = true;
          try {
            return callback();
          } finally {
            this.state.soloAwait = outerContextSoloAwaitState;
          }
        }
        allowInAnd(callback) {
          const flags = this.prodParam.currentFlags();
          if (8 & ~flags) {
            this.prodParam.enter(8 | flags);
            try {
              return callback();
            } finally {
              this.prodParam.exit();
            }
          }
          return callback();
        }
        disallowInAnd(callback) {
          const flags = this.prodParam.currentFlags();
          if (8 & flags) {
            this.prodParam.enter(-9 & flags);
            try {
              return callback();
            } finally {
              this.prodParam.exit();
            }
          }
          return callback();
        }
        registerTopicReference() {
          this.state.topicContext.maxTopicIndex = 0;
        }
        topicReferenceIsAllowedInCurrentContext() {
          return this.state.topicContext.maxNumOfResolvableTopics >= 1;
        }
        topicReferenceWasUsedInCurrentContext() {
          return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
        }
        parseFSharpPipelineBody(prec) {
          const startLoc = this.state.startLoc;
          this.state.potentialArrowAt = this.state.start;
          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
          this.state.inFSharpPipelineDirectBody = true;
          const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
          return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
        }
        parseModuleExpression() {
          this.expectPlugin("moduleBlocks");
          const node = this.startNode();
          this.next(), this.match(5) || this.unexpected(null, 5);
          const program = this.startNodeAt(this.state.endLoc);
          this.next();
          const revertScopes = this.initializeScopes(true);
          this.enterInitialScopes();
          try {
            node.body = this.parseProgram(program, 8, "module");
          } finally {
            revertScopes();
          }
          return this.finishNode(node, "ModuleExpression");
        }
        parsePropertyNamePrefixOperator(prop) {
        }
      }
      const loopLabel = { kind: 1 }, switchLabel = { kind: 2 }, loneSurrogate = /[\uD800-\uDFFF]/u, keywordRelationalOperator = /in(?:stanceof)?/y;

      class StatementParser extends ExpressionParser {
        parseTopLevel(file, program) {
          return file.program = this.parseProgram(program), file.comments = this.comments, this.options.tokens && (file.tokens = function(tokens, input, startIndex) {
            for (let i = 0;i < tokens.length; i++) {
              const token = tokens[i], { type } = token;
              if (typeof type == "number") {
                if (type === 139) {
                  const { loc, start, value: value2, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                  tokens.splice(i, 1, new Token({ type: getExportedToken(27), value: "#", start, end: hashEndPos, startLoc: loc.start, endLoc: hashEndLoc }), new Token({ type: getExportedToken(132), value: value2, start: hashEndPos, end, startLoc: hashEndLoc, endLoc: loc.end })), i++;
                  continue;
                }
                if (tokenIsTemplate(type)) {
                  const { loc, start, value: value2, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                  let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
                  startToken = input.charCodeAt(start - startIndex) === 96 ? new Token({ type: getExportedToken(22), value: "`", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }) : new Token({ type: getExportedToken(8), value: "}", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }), type === 24 ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = value2 === null ? null : value2.slice(1, -1), endToken = new Token({ type: getExportedToken(22), value: "`", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = value2 === null ? null : value2.slice(1, -2), endToken = new Token({ type: getExportedToken(23), value: "${", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })), tokens.splice(i, 1, startToken, new Token({ type: getExportedToken(20), value: templateValue, start: backquoteEnd, end: templateElementEnd, startLoc: backquoteEndLoc, endLoc: templateElementEndLoc }), endToken), i += 2;
                  continue;
                }
                token.type = getExportedToken(type);
              }
            }
            return tokens;
          }(this.tokens, this.input, this.startIndex)), this.finishNode(file, "File");
        }
        parseProgram(program, end = 140, sourceType = this.options.sourceType) {
          if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, true, true, end), this.inModule) {
            if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
              for (const [localName, at] of Array.from(this.scope.undefinedExports))
                this.raise(Errors.ModuleExportUndefined, at, { localName });
            this.addExtra(program, "topLevelAwait", this.state.hasTopLevelAwait);
          }
          let finishedProgram;
          return finishedProgram = end === 140 ? this.finishNode(program, "Program") : this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1)), finishedProgram;
        }
        stmtToDirective(stmt) {
          const directive = stmt;
          directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
          const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw = this.input.slice(this.offsetToSourcePos(directiveLiteral.start), this.offsetToSourcePos(directiveLiteral.end)), val = directiveLiteral.value = raw.slice(1, -1);
          return this.addExtra(directiveLiteral, "raw", raw), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
        }
        parseInterpreterDirective() {
          if (!this.match(28))
            return null;
          const node = this.startNode();
          return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
        }
        isLet() {
          return !!this.isContextual(100) && this.hasFollowingBindingAtom();
        }
        chStartsBindingIdentifier(ch, pos) {
          if (isIdentifierStart(ch)) {
            if (keywordRelationalOperator.lastIndex = pos, keywordRelationalOperator.test(this.input)) {
              const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
              if (!isIdentifierChar(endCh) && endCh !== 92)
                return false;
            }
            return true;
          }
          return ch === 92;
        }
        chStartsBindingPattern(ch) {
          return ch === 91 || ch === 123;
        }
        hasFollowingBindingAtom() {
          const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
          return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
        }
        hasInLineFollowingBindingIdentifierOrBrace() {
          const next = this.nextTokenInLineStart(), nextCh = this.codePointAtPos(next);
          return nextCh === 123 || this.chStartsBindingIdentifier(nextCh, next);
        }
        startsUsingForOf() {
          const { type, containsEsc } = this.lookahead();
          return !(type === 102 && !containsEsc) && (tokenIsIdentifier(type) && !this.hasFollowingLineBreak() ? (this.expectPlugin("explicitResourceManagement"), true) : undefined);
        }
        startsAwaitUsing() {
          let next = this.nextTokenInLineStart();
          if (this.isUnparsedContextual(next, "using")) {
            next = this.nextTokenInLineStartSince(next + 5);
            const nextCh = this.codePointAtPos(next);
            if (this.chStartsBindingIdentifier(nextCh, next))
              return this.expectPlugin("explicitResourceManagement"), true;
          }
          return false;
        }
        parseModuleItem() {
          return this.parseStatementLike(15);
        }
        parseStatementListItem() {
          return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
        }
        parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
          let flags = 0;
          return this.options.annexB && !this.state.strict && (flags |= 4, allowLabeledFunction && (flags |= 8)), this.parseStatementLike(flags);
        }
        parseStatement() {
          return this.parseStatementLike(0);
        }
        parseStatementLike(flags) {
          let decorators = null;
          return this.match(26) && (decorators = this.parseDecorators(true)), this.parseStatementContent(flags, decorators);
        }
        parseStatementContent(flags, decorators) {
          const startType = this.state.type, node = this.startNode(), allowDeclaration = !!(2 & flags), allowFunctionDeclaration = !!(4 & flags), topLevel = 1 & flags;
          switch (startType) {
            case 60:
              return this.parseBreakContinueStatement(node, true);
            case 63:
              return this.parseBreakContinueStatement(node, false);
            case 64:
              return this.parseDebuggerStatement(node);
            case 90:
              return this.parseDoWhileStatement(node);
            case 91:
              return this.parseForStatement(node);
            case 68:
              if (this.lookaheadCharCode() === 46)
                break;
              return allowFunctionDeclaration || this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc), this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
            case 80:
              return allowDeclaration || this.unexpected(), this.parseClass(this.maybeTakeDecorators(decorators, node), true);
            case 69:
              return this.parseIfStatement(node);
            case 70:
              return this.parseReturnStatement(node);
            case 71:
              return this.parseSwitchStatement(node);
            case 72:
              return this.parseThrowStatement(node);
            case 73:
              return this.parseTryStatement(node);
            case 96:
              if (!this.state.containsEsc && this.startsAwaitUsing())
                return this.recordAwaitIfAllowed() ? allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, node) : this.raise(Errors.AwaitUsingNotInAsyncContext, node), this.next(), this.parseVarStatement(node, "await using");
              break;
            case 107:
              if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace())
                break;
              return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc) : allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc), this.parseVarStatement(node, "using");
            case 100: {
              if (this.state.containsEsc)
                break;
              const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
              if (nextCh !== 91) {
                if (!allowDeclaration && this.hasFollowingLineBreak())
                  break;
                if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123)
                  break;
              }
            }
            case 75:
              allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
            case 74: {
              const kind = this.state.value;
              return this.parseVarStatement(node, kind);
            }
            case 92:
              return this.parseWhileStatement(node);
            case 76:
              return this.parseWithStatement(node);
            case 5:
              return this.parseBlock();
            case 13:
              return this.parseEmptyStatement(node);
            case 83: {
              const nextTokenCharCode = this.lookaheadCharCode();
              if (nextTokenCharCode === 40 || nextTokenCharCode === 46)
                break;
            }
            case 82: {
              let result;
              return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, this.state.startLoc), this.next(), startType === 83 ? (result = this.parseImport(node), result.type !== "ImportDeclaration" || result.importKind && result.importKind !== "value" || (this.sawUnambiguousESM = true)) : (result = this.parseExport(node, decorators), (result.type !== "ExportNamedDeclaration" || result.exportKind && result.exportKind !== "value") && (result.type !== "ExportAllDeclaration" || result.exportKind && result.exportKind !== "value") && result.type !== "ExportDefaultDeclaration" || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(result), result;
            }
            default:
              if (this.isAsyncFunction())
                return allowDeclaration || this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc), this.next(), this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
          }
          const maybeName = this.state.value, expr = this.parseExpression();
          return tokenIsIdentifier(startType) && expr.type === "Identifier" && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, flags) : this.parseExpressionStatement(node, expr, decorators);
        }
        assertModuleNodeAllowed(node) {
          this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, node);
        }
        decoratorsEnabledBeforeExport() {
          return !!this.hasPlugin("decorators-legacy") || this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
        }
        maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
          return maybeDecorators && (classNode.decorators && classNode.decorators.length > 0 ? (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") != "boolean" && this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]), classNode.decorators.unshift(...maybeDecorators)) : classNode.decorators = maybeDecorators, this.resetStartLocationFromNode(classNode, maybeDecorators[0]), exportNode && this.resetStartLocationFromNode(exportNode, classNode)), classNode;
        }
        canHaveLeadingDecorator() {
          return this.match(80);
        }
        parseDecorators(allowExport) {
          const decorators = [];
          do {
            decorators.push(this.parseDecorator());
          } while (this.match(26));
          if (this.match(82))
            allowExport || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(Errors.DecoratorExportClass, this.state.startLoc);
          else if (!this.canHaveLeadingDecorator())
            throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
          return decorators;
        }
        parseDecorator() {
          this.expectOnePlugin(["decorators", "decorators-legacy"]);
          const node = this.startNode();
          if (this.next(), this.hasPlugin("decorators")) {
            const startLoc = this.state.startLoc;
            let expr;
            if (this.match(10)) {
              const startLoc2 = this.state.startLoc;
              this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startLoc2, expr);
              const paramsStartLoc = this.state.startLoc;
              node.expression = this.parseMaybeDecoratorArguments(expr), this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr && this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
            } else {
              for (expr = this.parseIdentifier(false);this.eat(16); ) {
                const node2 = this.startNodeAt(startLoc);
                node2.object = expr, this.match(139) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), node2.property = this.parsePrivateName()) : node2.property = this.parseIdentifier(true), node2.computed = false, expr = this.finishNode(node2, "MemberExpression");
              }
              node.expression = this.parseMaybeDecoratorArguments(expr);
            }
          } else
            node.expression = this.parseExprSubscripts();
          return this.finishNode(node, "Decorator");
        }
        parseMaybeDecoratorArguments(expr) {
          if (this.eat(10)) {
            const node = this.startNodeAtNode(expr);
            return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
          }
          return expr;
        }
        parseBreakContinueStatement(node, isBreak) {
          return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }
        verifyBreakContinue(node, isBreak) {
          let i;
          for (i = 0;i < this.state.labels.length; ++i) {
            const lab = this.state.labels[i];
            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === 1))
                break;
              if (node.label && isBreak)
                break;
            }
          }
          if (i === this.state.labels.length) {
            const type = isBreak ? "BreakStatement" : "ContinueStatement";
            this.raise(Errors.IllegalBreakContinue, node, { type });
          }
        }
        parseDebuggerStatement(node) {
          return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
        }
        parseHeaderExpression() {
          this.expect(10);
          const val = this.parseExpression();
          return this.expect(11), val;
        }
        parseDoWhileStatement(node) {
          return this.next(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
        }
        parseForStatement(node) {
          this.next(), this.state.labels.push(loopLabel);
          let awaitAt = null;
          if (this.isContextual(96) && this.recordAwaitIfAllowed() && (awaitAt = this.state.startLoc, this.next()), this.scope.enter(0), this.expect(10), this.match(13))
            return awaitAt !== null && this.unexpected(awaitAt), this.parseFor(node, null);
          const startsWithLet = this.isContextual(100);
          {
            const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing(), starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf(), isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
            if (this.match(74) || this.match(75) || isLetOrUsing) {
              const initNode = this.startNode();
              let kind;
              startsWithAwaitUsing ? (kind = "await using", this.recordAwaitIfAllowed() || this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc), this.next()) : kind = this.state.value, this.next(), this.parseVar(initNode, true, kind);
              const init2 = this.finishNode(initNode, "VariableDeclaration"), isForIn = this.match(58);
              return isForIn && starsWithUsingDeclaration && this.raise(Errors.ForInUsing, init2), (isForIn || this.isContextual(102)) && init2.declarations.length === 1 ? this.parseForIn(node, init2, awaitAt) : (awaitAt !== null && this.unexpected(awaitAt), this.parseFor(node, init2));
            }
          }
          const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors, init = this.parseExpression(true, refExpressionErrors), isForOf = this.isContextual(102);
          if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, init), awaitAt === null && startsWithAsync && init.type === "Identifier" && this.raise(Errors.ForOfAsync, init)), isForOf || this.match(58)) {
            this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init, true);
            const type = isForOf ? "ForOfStatement" : "ForInStatement";
            return this.checkLVal(init, { type }), this.parseForIn(node, init, awaitAt);
          }
          return this.checkExpressionErrors(refExpressionErrors, true), awaitAt !== null && this.unexpected(awaitAt), this.parseFor(node, init);
        }
        parseFunctionStatement(node, isAsync, isHangingDeclaration) {
          return this.next(), this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
        }
        parseIfStatement(node) {
          return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(node, "IfStatement");
        }
        parseReturnStatement(node) {
          return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, this.state.startLoc), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
        }
        parseSwitchStatement(node) {
          this.next(), node.discriminant = this.parseHeaderExpression();
          const cases = node.cases = [];
          let cur;
          this.expect(5), this.state.labels.push(switchLabel), this.scope.enter(0);
          for (let sawDefault;!this.match(8); )
            if (this.match(61) || this.match(65)) {
              const isCase = this.match(61);
              cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc), sawDefault = true, cur.test = null), this.expect(14);
            } else
              cur ? cur.consequent.push(this.parseStatementListItem()) : this.unexpected();
          return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
        }
        parseThrowStatement(node) {
          return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
        }
        parseCatchClauseParam() {
          const param = this.parseBindingAtom();
          return this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0), this.checkLVal(param, { type: "CatchClause" }, 9), param;
        }
        parseTryStatement(node) {
          if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
            const clause = this.startNode();
            this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
          }
          return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, node), this.finishNode(node, "TryStatement");
        }
        parseVarStatement(node, kind, allowMissingInitializer = false) {
          return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
        }
        parseWhileStatement(node) {
          return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
        }
        parseWithStatement(node) {
          return this.state.strict && this.raise(Errors.StrictWith, this.state.startLoc), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(node, "WithStatement");
        }
        parseEmptyStatement(node) {
          return this.next(), this.finishNode(node, "EmptyStatement");
        }
        parseLabeledStatement(node, maybeName, expr, flags) {
          for (const label of this.state.labels)
            label.name === maybeName && this.raise(Errors.LabelRedeclaration, expr, { labelName: maybeName });
          const kind = (token = this.state.type) >= 90 && token <= 92 ? 1 : this.match(71) ? 2 : null;
          var token;
          for (let i = this.state.labels.length - 1;i >= 0; i--) {
            const label = this.state.labels[i];
            if (label.statementStart !== node.start)
              break;
            label.statementStart = this.sourceToOffsetPos(this.state.start), label.kind = kind;
          }
          return this.state.labels.push({ name: maybeName, kind, statementStart: this.sourceToOffsetPos(this.state.start) }), node.body = 8 & flags ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement(), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
        }
        parseExpressionStatement(node, expr, decorators) {
          return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
        }
        parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
          const node = this.startNode();
          return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
        }
        isValidDirective(stmt) {
          return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
        }
        parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
          const body = node.body = [], directives = node.directives = [];
          this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
        }
        parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
          const oldStrict = this.state.strict;
          let hasStrictModeDirective = false, parsedNonDirective = false;
          for (;!this.match(end); ) {
            const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
            if (directives && !parsedNonDirective) {
              if (this.isValidDirective(stmt)) {
                const directive = this.stmtToDirective(stmt);
                directives.push(directive), hasStrictModeDirective || directive.value.value !== "use strict" || (hasStrictModeDirective = true, this.setStrict(true));
                continue;
              }
              parsedNonDirective = true, this.state.strictErrors.clear();
            }
            body.push(stmt);
          }
          afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective), oldStrict || this.setStrict(false), this.next();
        }
        parseFor(node, init) {
          return node.init = init, this.semicolon(false), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
        }
        parseForIn(node, init, awaitAt) {
          const isForIn = this.match(58);
          return this.next(), isForIn ? awaitAt !== null && this.unexpected(awaitAt) : node.await = awaitAt !== null, init.type !== "VariableDeclaration" || init.declarations[0].init == null || isForIn && this.options.annexB && !this.state.strict && init.kind === "var" && init.declarations[0].id.type === "Identifier" || this.raise(Errors.ForInOfLoopInitializer, init, { type: isForIn ? "ForInStatement" : "ForOfStatement" }), init.type === "AssignmentPattern" && this.raise(Errors.InvalidLhs, init, { ancestor: { type: "ForStatement" } }), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }
        parseVar(node, isFor, kind, allowMissingInitializer = false) {
          const declarations = node.declarations = [];
          for (node.kind = kind;; ) {
            const decl = this.startNode();
            if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, decl.init !== null || allowMissingInitializer || (decl.id.type === "Identifier" || isFor && (this.match(58) || this.isContextual(102)) ? kind !== "const" && kind !== "using" && kind !== "await using" || this.match(58) || this.isContextual(102) || this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind }) : this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, { kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12))
              break;
          }
          return node;
        }
        parseVarId(decl, kind) {
          const id = this.parseBindingAtom();
          kind !== "using" && kind !== "await using" || id.type !== "ArrayPattern" && id.type !== "ObjectPattern" || this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start), this.checkLVal(id, { type: "VariableDeclarator" }, kind === "var" ? 5 : 8201), decl.id = id;
        }
        parseAsyncFunctionExpression(node) {
          return this.parseFunction(node, 8);
        }
        parseFunction(node, flags = 0) {
          const hangingDeclaration = 2 & flags, isDeclaration = !!(1 & flags), requireId = isDeclaration && !(4 & flags), isAsync = !!(8 & flags);
          this.initFunction(node, isAsync), this.match(55) && (hangingDeclaration && this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc), this.next(), node.generator = true), isDeclaration && (node.id = this.parseFunctionId(requireId));
          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
          return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(functionFlags(isAsync, node.generator)), isDeclaration || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, false), this.withSmartMixTopicForbiddingContext(() => {
            this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
          }), this.prodParam.exit(), this.scope.exit(), isDeclaration && !hangingDeclaration && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
        }
        parseFunctionId(requireId) {
          return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
        }
        parseFunctionParams(node, isConstructor) {
          this.expect(10), this.expressionScope.enter(new ExpressionScope(3)), node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0)), this.expressionScope.exit();
        }
        registerFunctionStatementId(node) {
          node.id && this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
        }
        parseClass(node, isStatement, optionalId) {
          this.next();
          const oldStrict = this.state.strict;
          return this.state.strict = true, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }
        isClassProperty() {
          return this.match(29) || this.match(13) || this.match(8);
        }
        isClassMethod() {
          return this.match(10);
        }
        nameIsConstructor(key) {
          return key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor";
        }
        isNonstaticConstructor(method) {
          return !method.computed && !method.static && this.nameIsConstructor(method.key);
        }
        parseClassBody(hadSuperClass, oldStrict) {
          this.classScope.enter();
          const state = { hadConstructor: false, hadSuperClass };
          let decorators = [];
          const classBody = this.startNode();
          if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
            for (;!this.match(8); ) {
              if (this.eat(13)) {
                if (decorators.length > 0)
                  throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
                continue;
              }
              if (this.match(26)) {
                decorators.push(this.parseDecorator());
                continue;
              }
              const member = this.startNode();
              decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), member.kind === "constructor" && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, member);
            }
          }), this.state.strict = oldStrict, this.next(), decorators.length)
            throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
          return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
        }
        parseClassMemberFromModifier(classBody, member) {
          const key = this.parseIdentifier(true);
          if (this.isClassMethod()) {
            const method = member;
            return method.kind = "method", method.computed = false, method.key = key, method.static = false, this.pushClassMethod(classBody, method, false, false, false, false), true;
          }
          if (this.isClassProperty()) {
            const prop = member;
            return prop.computed = false, prop.key = key, prop.static = false, classBody.body.push(this.parseClassProperty(prop)), true;
          }
          return this.resetPreviousNodeTrailingComments(key), false;
        }
        parseClassMember(classBody, member, state) {
          const isStatic = this.isContextual(106);
          if (isStatic) {
            if (this.parseClassMemberFromModifier(classBody, member))
              return;
            if (this.eat(5))
              return void this.parseClassStaticBlock(classBody, member);
          }
          this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
        }
        parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
          const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
          if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
            method.kind = "method";
            const isPrivateName = this.match(139);
            return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, true, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, publicMethod.key), void this.pushClassMethod(classBody, publicMethod, true, false, false, false));
          }
          const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type), key = this.parseClassElementName(member), maybeContextualKw = isContextual ? key.name : null, isPrivate = this.isPrivateName(key), maybeQuestionTokenStartLoc = this.state.startLoc;
          if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
            if (method.kind = "method", isPrivate)
              return void this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            const isConstructor = this.isNonstaticConstructor(publicMethod);
            let allowsDirectSuper = false;
            isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, key), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, key), state.hadConstructor = true, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
          } else if (this.isClassProperty())
            isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
          else if (maybeContextualKw !== "async" || this.isLineTerminator())
            if (maybeContextualKw !== "get" && maybeContextualKw !== "set" || this.match(55) && this.isLineTerminator())
              if (maybeContextualKw !== "accessor" || this.isLineTerminator())
                this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
              else {
                this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
                const isPrivate2 = this.match(139);
                this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
              }
            else {
              this.resetPreviousNodeTrailingComments(key), method.kind = maybeContextualKw;
              const isPrivate2 = this.match(139);
              this.parseClassElementName(publicMethod), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, false, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, publicMethod.key), this.pushClassMethod(classBody, publicMethod, false, false, false, false)), this.checkGetterSetterParams(publicMethod);
            }
          else {
            this.resetPreviousNodeTrailingComments(key);
            const isGenerator = this.eat(55);
            publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
            const isPrivate2 = this.match(139);
            this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, publicMethod.key), this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false));
          }
        }
        parseClassElementName(member) {
          const { type, value: value2 } = this.state;
          if (type !== 132 && type !== 134 || !member.static || value2 !== "prototype" || this.raise(Errors.StaticPrototype, this.state.startLoc), type === 139) {
            value2 === "constructor" && this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
            const key = this.parsePrivateName();
            return member.key = key, key;
          }
          return this.parsePropertyName(member), member.key;
        }
        parseClassStaticBlock(classBody, member) {
          var _member$decorators;
          this.scope.enter(208);
          const oldLabels = this.state.labels;
          this.state.labels = [], this.prodParam.enter(0);
          const body = member.body = [];
          this.parseBlockOrModuleBlockBody(body, undefined, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), (_member$decorators = member.decorators) != null && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, member);
        }
        pushClassProperty(classBody, prop) {
          !prop.computed && this.nameIsConstructor(prop.key) && this.raise(Errors.ConstructorClassField, prop.key), classBody.body.push(this.parseClassProperty(prop));
        }
        pushClassPrivateProperty(classBody, prop) {
          const node = this.parseClassPrivateProperty(prop);
          classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
        }
        pushClassAccessorProperty(classBody, prop, isPrivate) {
          isPrivate || prop.computed || !this.nameIsConstructor(prop.key) || this.raise(Errors.ConstructorClassField, prop.key);
          const node = this.parseClassAccessorProperty(prop);
          classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
        }
        pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
          classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
        }
        pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
          const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
          classBody.body.push(node);
          const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;
          this.declareClassPrivateMethodInScope(node, kind);
        }
        declareClassPrivateMethodInScope(node, kind) {
          this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
        }
        parsePostMemberNameModifiers(methodOrProp) {
        }
        parseClassPrivateProperty(node) {
          return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
        }
        parseClassProperty(node) {
          return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
        }
        parseClassAccessorProperty(node) {
          return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
        }
        parseInitializer(node) {
          this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
        }
        parseClassId(node, isStatement, optionalId, bindingType = 8331) {
          if (tokenIsIdentifier(this.state.type))
            node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
          else {
            if (!optionalId && isStatement)
              throw this.raise(Errors.MissingClassName, this.state.startLoc);
            node.id = null;
          }
        }
        parseClassSuper(node) {
          node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
        }
        parseExport(node, decorators) {
          const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true), hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
          if (hasStar && !hasNamespace) {
            if (hasDefault && this.unexpected(), decorators)
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            return this.parseExportFrom(node, true), this.finishNode(node, "ExportAllDeclaration");
          }
          const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
          let hasDeclaration;
          if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers && this.unexpected(null, 5), hasNamespace && parseAfterNamespace && this.unexpected(null, 98), isFromRequired || hasSpecifiers) {
            if (hasDeclaration = false, decorators)
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            this.parseExportFrom(node, isFromRequired);
          } else
            hasDeclaration = this.maybeParseExportDeclaration(node);
          if (isFromRequired || hasSpecifiers || hasDeclaration) {
            var _node2$declaration;
            const node2 = node;
            if (this.checkExport(node2, true, false, !!node2.source), ((_node2$declaration = node2.declaration) == null ? undefined : _node2$declaration.type) === "ClassDeclaration")
              this.maybeTakeDecorators(decorators, node2.declaration, node2);
            else if (decorators)
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            return this.finishNode(node2, "ExportNamedDeclaration");
          }
          if (this.eat(65)) {
            const node2 = node, decl = this.parseExportDefaultExpression();
            if (node2.declaration = decl, decl.type === "ClassDeclaration")
              this.maybeTakeDecorators(decorators, decl, node2);
            else if (decorators)
              throw this.raise(Errors.UnsupportedDecoratorExport, node);
            return this.checkExport(node2, true, true), this.finishNode(node2, "ExportDefaultDeclaration");
          }
          this.unexpected(null, 5);
        }
        eatExportStar(node) {
          return this.eat(55);
        }
        maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
          if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
            this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? undefined : maybeDefaultIdentifier.loc.start);
            const id = maybeDefaultIdentifier || this.parseIdentifier(true), specifier = this.startNodeAtNode(id);
            return specifier.exported = id, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], true;
          }
          return false;
        }
        maybeParseExportNamespaceSpecifier(node) {
          if (this.isContextual(93)) {
            var _ref;
            (_ref = node).specifiers != null || (_ref.specifiers = []);
            const specifier = this.startNodeAt(this.state.lastTokStartLoc);
            return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), true;
          }
          return false;
        }
        maybeParseExportNamedSpecifiers(node) {
          if (this.match(5)) {
            const node2 = node;
            node2.specifiers || (node2.specifiers = []);
            const isTypeExport = node2.exportKind === "type";
            return node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node2.source = null, node2.declaration = null, this.hasPlugin("importAssertions") && (node2.assertions = []), true;
          }
          return false;
        }
        maybeParseExportDeclaration(node) {
          return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), true);
        }
        isAsyncFunction() {
          if (!this.isContextual(95))
            return false;
          const next = this.nextTokenInLineStart();
          return this.isUnparsedContextual(next, "function");
        }
        parseExportDefaultExpression() {
          const expr = this.startNode();
          if (this.match(68))
            return this.next(), this.parseFunction(expr, 5);
          if (this.isAsyncFunction())
            return this.next(), this.next(), this.parseFunction(expr, 13);
          if (this.match(80))
            return this.parseClass(expr, true, true);
          if (this.match(26))
            return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
          if (this.match(75) || this.match(74) || this.isLet())
            throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
          const res = this.parseMaybeAssignAllowIn();
          return this.semicolon(), res;
        }
        parseExportDeclaration(node) {
          if (this.match(80)) {
            return this.parseClass(this.startNode(), true, false);
          }
          return this.parseStatementListItem();
        }
        isExportDefaultSpecifier() {
          const { type } = this.state;
          if (tokenIsIdentifier(type)) {
            if (type === 95 && !this.state.containsEsc || type === 100)
              return false;
            if ((type === 130 || type === 129) && !this.state.containsEsc) {
              const { type: nextType } = this.lookahead();
              if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5)
                return this.expectOnePlugin(["flow", "typescript"]), false;
            }
          } else if (!this.match(65))
            return false;
          const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
          if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom)
            return true;
          if (this.match(65) && hasFrom) {
            const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
            return nextAfterFrom === 34 || nextAfterFrom === 39;
          }
          return false;
        }
        parseExportFrom(node, expect) {
          this.eatContextual(98) ? (node.source = this.parseImportSource(), this.checkExport(node), this.maybeParseImportAttributes(node), this.checkJSONModuleImport(node)) : expect && this.unexpected(), this.semicolon();
        }
        shouldParseExportDeclaration() {
          const { type } = this.state;
          return type === 26 && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (this.getPluginOption("decorators", "decoratorsBeforeExport") === true && this.raise(Errors.DecoratorBeforeExport, this.state.startLoc), true) : this.isContextual(107) || this.isContextual(96) && this.startsAwaitUsing() ? (this.raise(Errors.UsingDeclarationExport, this.state.startLoc), true) : type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
        }
        checkExport(node, checkNames, isDefault, isFrom) {
          var _node$specifiers;
          if (checkNames) {
            if (isDefault) {
              if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
                var _declaration$extra;
                const declaration = node.declaration;
                declaration.type !== "Identifier" || declaration.name !== "from" || declaration.end - declaration.start != 4 || (_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
              }
            } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length)
              for (const specifier of node.specifiers) {
                const { exported } = specifier, exportName = exported.type === "Identifier" ? exported.name : exported.value;
                if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
                  const { local } = specifier;
                  local.type !== "Identifier" ? this.raise(Errors.ExportBindingIsString, specifier, { localName: local.value, exportName }) : (this.checkReservedWord(local.name, local.loc.start, true, false), this.scope.checkLocalExport(local));
                }
              }
            else if (node.declaration) {
              const decl = node.declaration;
              if (decl.type === "FunctionDeclaration" || decl.type === "ClassDeclaration") {
                const { id } = decl;
                if (!id)
                  throw new Error("Assertion failure");
                this.checkDuplicateExports(node, id.name);
              } else if (decl.type === "VariableDeclaration")
                for (const declaration of decl.declarations)
                  this.checkDeclaration(declaration.id);
            }
          }
        }
        checkDeclaration(node) {
          if (node.type === "Identifier")
            this.checkDuplicateExports(node, node.name);
          else if (node.type === "ObjectPattern")
            for (const prop of node.properties)
              this.checkDeclaration(prop);
          else if (node.type === "ArrayPattern")
            for (const elem of node.elements)
              elem && this.checkDeclaration(elem);
          else
            node.type === "ObjectProperty" ? this.checkDeclaration(node.value) : node.type === "RestElement" ? this.checkDeclaration(node.argument) : node.type === "AssignmentPattern" && this.checkDeclaration(node.left);
        }
        checkDuplicateExports(node, exportName) {
          this.exportedIdentifiers.has(exportName) && (exportName === "default" ? this.raise(Errors.DuplicateDefaultExport, node) : this.raise(Errors.DuplicateExport, node, { exportName })), this.exportedIdentifiers.add(exportName);
        }
        parseExportSpecifiers(isInTypeExport) {
          const nodes = [];
          let first = true;
          for (this.expect(5);!this.eat(8); ) {
            if (first)
              first = false;
            else if (this.expect(12), this.eat(8))
              break;
            const isMaybeTypeOnly = this.isContextual(130), isString = this.match(134), node = this.startNode();
            node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
          }
          return nodes;
        }
        parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
          return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
        }
        parseModuleExportName() {
          if (this.match(134)) {
            const result = this.parseStringLiteral(this.state.value), surrogate = loneSurrogate.exec(result.value);
            return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, { surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
          }
          return this.parseIdentifier(true);
        }
        isJSONModuleImport(node) {
          return node.assertions != null && node.assertions.some(({ key, value: value2 }) => value2.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type"));
        }
        checkImportReflection(node) {
          const { specifiers } = node, singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
          if (node.phase === "source")
            singleBindingType !== "ImportDefaultSpecifier" && this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
          else if (node.phase === "defer")
            singleBindingType !== "ImportNamespaceSpecifier" && this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
          else if (node.module) {
            var _node$assertions;
            singleBindingType !== "ImportDefaultSpecifier" && this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start), ((_node$assertions = node.assertions) == null ? undefined : _node$assertions.length) > 0 && this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
          }
        }
        checkJSONModuleImport(node) {
          if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
            const { specifiers } = node;
            if (specifiers != null) {
              const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                let imported;
                if (specifier.type === "ExportSpecifier" ? imported = specifier.local : specifier.type === "ImportSpecifier" && (imported = specifier.imported), imported !== undefined)
                  return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
              });
              nonDefaultNamedSpecifier !== undefined && this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
            }
          }
        }
        isPotentialImportPhase(isExport) {
          return !isExport && (this.isContextual(105) || this.isContextual(97) || this.isContextual(127));
        }
        applyImportPhase(node, isExport, phase, loc) {
          isExport || (phase === "module" ? (this.expectPlugin("importReflection", loc), node.module = true) : this.hasPlugin("importReflection") && (node.module = false), phase === "source" ? (this.expectPlugin("sourcePhaseImports", loc), node.phase = "source") : phase === "defer" ? (this.expectPlugin("deferredImportEvaluation", loc), node.phase = "defer") : this.hasPlugin("sourcePhaseImports") && (node.phase = null));
        }
        parseMaybeImportPhase(node, isExport) {
          if (!this.isPotentialImportPhase(isExport))
            return this.applyImportPhase(node, isExport, null), null;
          const phaseIdentifier = this.parseIdentifier(true), { type } = this.state;
          return (tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12) ? (this.resetPreviousIdentifierLeadingComments(phaseIdentifier), this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start), null) : (this.applyImportPhase(node, isExport, null), phaseIdentifier);
        }
        isPrecedingIdImportPhase(phase) {
          const { type } = this.state;
          return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
        }
        parseImport(node) {
          return this.match(134) ? this.parseImportSourceAndAttributes(node) : this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
        }
        parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
          node.specifiers = [];
          const parseNext = !this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
          return parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(98), this.parseImportSourceAndAttributes(node);
        }
        parseImportSourceAndAttributes(node) {
          return node.specifiers != null || (node.specifiers = []), node.source = this.parseImportSource(), this.maybeParseImportAttributes(node), this.checkImportReflection(node), this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }
        parseImportSource() {
          return this.match(134) || this.unexpected(), this.parseExprAtom();
        }
        parseImportSpecifierLocal(node, specifier, type) {
          specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
        }
        finishImportSpecifier(specifier, type, bindingType = 8201) {
          return this.checkLVal(specifier.local, { type }, bindingType), this.finishNode(specifier, type);
        }
        parseImportAttributes() {
          this.expect(5);
          const attrs = [], attrNames = new Set;
          do {
            if (this.match(8))
              break;
            const node = this.startNode(), keyName = this.state.value;
            if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, { key: keyName }), attrNames.add(keyName), this.match(134) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(true), this.expect(14), !this.match(134))
              throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
            node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
          } while (this.eat(12));
          return this.expect(8), attrs;
        }
        parseModuleAttributes() {
          const attrs = [], attributes = new Set;
          do {
            const node = this.startNode();
            if (node.key = this.parseIdentifier(true), node.key.name !== "type" && this.raise(Errors.ModuleAttributeDifferentFromType, node.key), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, { key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(134))
              throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
            node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
          } while (this.eat(12));
          return attrs;
        }
        maybeParseImportAttributes(node) {
          let attributes;
          var useWith = false;
          if (this.match(76)) {
            if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40)
              return;
            this.next(), attributes = this.hasPlugin("moduleAttributes") ? this.parseModuleAttributes() : this.parseImportAttributes(), useWith = true;
          } else
            this.isContextual(94) && !this.hasPrecedingLineBreak() ? (this.hasPlugin("deprecatedImportAssert") || this.hasPlugin("importAssertions") || this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc), this.hasPlugin("importAssertions") || this.addExtra(node, "deprecatedAssertSyntax", true), this.next(), attributes = this.parseImportAttributes()) : attributes = [];
          !useWith && this.hasPlugin("importAssertions") ? node.assertions = attributes : node.attributes = attributes;
        }
        maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
          if (maybeDefaultIdentifier) {
            const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
            return specifier.local = maybeDefaultIdentifier, node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier")), true;
          }
          return !!tokenIsKeywordOrIdentifier(this.state.type) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), true);
        }
        maybeParseStarImportSpecifier(node) {
          if (this.match(55)) {
            const specifier = this.startNode();
            return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), true;
          }
          return false;
        }
        parseNamedImportSpecifiers(node) {
          let first = true;
          for (this.expect(5);!this.eat(8); ) {
            if (first)
              first = false;
            else {
              if (this.eat(14))
                throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
              if (this.expect(12), this.eat(8))
                break;
            }
            const specifier = this.startNode(), importedIsString = this.match(134), isMaybeTypeOnly = this.isContextual(130);
            specifier.imported = this.parseModuleExportName();
            const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, undefined);
            node.specifiers.push(importSpecifier);
          }
        }
        parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
          if (this.eatContextual(93))
            specifier.local = this.parseIdentifier();
          else {
            const { imported } = specifier;
            if (importedIsString)
              throw this.raise(Errors.ImportBindingIsString, specifier, { importName: imported.value });
            this.checkReservedWord(imported.name, specifier.loc.start, true, true), specifier.local || (specifier.local = cloneIdentifier(imported));
          }
          return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
        }
        isThisParam(param) {
          return param.type === "Identifier" && param.name === "this";
        }
      }

      class Parser extends StatementParser {
        constructor(options, input, pluginsMap) {
          super(options = function(opts) {
            const options2 = { sourceType: "script", sourceFilename: undefined, startIndex: 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowNewTargetOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createImportExpressions: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true, annexB: true };
            if (opts == null)
              return options2;
            if (opts.annexB != null && opts.annexB !== false)
              throw new Error("The `annexB` option can only be set to `false`.");
            for (const key of Object.keys(options2))
              opts[key] != null && (options2[key] = opts[key]);
            if (options2.startLine === 1)
              opts.startIndex == null && options2.startColumn > 0 ? options2.startIndex = options2.startColumn : opts.startColumn == null && options2.startIndex > 0 && (options2.startColumn = options2.startIndex);
            else if ((opts.startColumn == null || opts.startIndex == null) && opts.startIndex != null)
              throw new Error("With a `startLine > 1` you must also specify `startIndex` and `startColumn`.");
            return options2;
          }(options), input), this.options = options, this.initializeScopes(), this.plugins = pluginsMap, this.filename = options.sourceFilename, this.startIndex = options.startIndex;
        }
        getScopeHandler() {
          return ScopeHandler;
        }
        parse() {
          this.enterInitialScopes();
          const file = this.startNode(), program = this.startNode();
          return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file.comments.length = this.state.commentsLen, file;
        }
      }
      const tokTypes = function(internalTokenTypes) {
        const tokenTypes2 = {};
        for (const typeName of Object.keys(internalTokenTypes))
          tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
        return tokenTypes2;
      }(tt);
      function getParser(options, input) {
        let cls = Parser;
        const pluginsMap = new Map;
        if (options != null && options.plugins) {
          for (const plugin of options.plugins) {
            let name, opts;
            typeof plugin == "string" ? name = plugin : [name, opts] = plugin, pluginsMap.has(name) || pluginsMap.set(name, opts || {});
          }
          (function(pluginsMap2) {
            if (pluginsMap2.has("decorators")) {
              if (pluginsMap2.has("decorators-legacy"))
                throw new Error("Cannot use the decorators and decorators-legacy plugin together");
              const decoratorsBeforeExport = pluginsMap2.get("decorators").decoratorsBeforeExport;
              if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport != "boolean")
                throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
              const allowCallParenthesized = pluginsMap2.get("decorators").allowCallParenthesized;
              if (allowCallParenthesized != null && typeof allowCallParenthesized != "boolean")
                throw new Error("'allowCallParenthesized' must be a boolean.");
            }
            if (pluginsMap2.has("flow") && pluginsMap2.has("typescript"))
              throw new Error("Cannot combine flow and typescript plugins.");
            if (pluginsMap2.has("placeholders") && pluginsMap2.has("v8intrinsic"))
              throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
            if (pluginsMap2.has("pipelineOperator")) {
              var _pluginsMap$get;
              const proposal = pluginsMap2.get("pipelineOperator").proposal;
              if (!PIPELINE_PROPOSALS.includes(proposal)) {
                const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
                throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
              }
              const tupleSyntaxIsHash = ((_pluginsMap$get = pluginsMap2.get("recordAndTuple")) == null ? undefined : _pluginsMap$get.syntaxType) === "hash";
              if (proposal === "hack") {
                if (pluginsMap2.has("placeholders"))
                  throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                if (pluginsMap2.has("v8intrinsic"))
                  throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                const topicToken = pluginsMap2.get("pipelineOperator").topicToken;
                if (!TOPIC_TOKENS.includes(topicToken)) {
                  const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
                  throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
                }
                if (topicToken === "#" && tupleSyntaxIsHash)
                  throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap2.get("recordAndTuple")])}\`.`);
              } else if (proposal === "smart" && tupleSyntaxIsHash)
                throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap2.get("recordAndTuple")])}\`.`);
            }
            if (pluginsMap2.has("moduleAttributes")) {
              if (pluginsMap2.has("deprecatedImportAssert") || pluginsMap2.has("importAssertions"))
                throw new Error("Cannot combine importAssertions, deprecatedImportAssert and moduleAttributes plugins.");
              if (pluginsMap2.get("moduleAttributes").version !== "may-2020")
                throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
            if (pluginsMap2.has("importAssertions") && pluginsMap2.has("deprecatedImportAssert"))
              throw new Error("Cannot combine importAssertions and deprecatedImportAssert plugins.");
            if (!pluginsMap2.has("deprecatedImportAssert") && pluginsMap2.has("importAttributes") && pluginsMap2.get("importAttributes").deprecatedAssertSyntax && pluginsMap2.set("deprecatedImportAssert", {}), pluginsMap2.has("recordAndTuple")) {
              const syntaxType = pluginsMap2.get("recordAndTuple").syntaxType;
              if (syntaxType != null) {
                const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
                if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType))
                  throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
              }
            }
            if (pluginsMap2.has("asyncDoExpressions") && !pluginsMap2.has("doExpressions")) {
              const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
              throw error.missingPlugins = "doExpressions", error;
            }
            if (pluginsMap2.has("optionalChainingAssign") && pluginsMap2.get("optionalChainingAssign").version !== "2023-07")
              throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is '2023-07'.");
          })(pluginsMap), cls = function(pluginsMap2) {
            const pluginList = [];
            for (const name of mixinPluginNames)
              pluginsMap2.has(name) && pluginList.push(name);
            const key = pluginList.join("|");
            let cls2 = parserClassCache.get(key);
            if (!cls2) {
              cls2 = Parser;
              for (const plugin of pluginList)
                cls2 = mixinPlugins[plugin](cls2);
              parserClassCache.set(key, cls2);
            }
            return cls2;
          }(pluginsMap);
        }
        return new cls(options, input, pluginsMap);
      }
      const parserClassCache = new Map;
      exports2.parse = function(input, options) {
        var _options;
        if (((_options = options) == null ? undefined : _options.sourceType) !== "unambiguous")
          return getParser(options, input).parse();
        options = Object.assign({}, options);
        try {
          options.sourceType = "module";
          const parser = getParser(options, input), ast = parser.parse();
          if (parser.sawUnambiguousESM)
            return ast;
          if (parser.ambiguousScriptDifferentAst)
            try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused) {
            }
          else
            ast.program.sourceType = "script";
          return ast;
        } catch (moduleError) {
          try {
            return options.sourceType = "script", getParser(options, input).parse();
          } catch (_unused2) {
          }
          throw moduleError;
        }
      }, exports2.parseExpression = function(input, options) {
        const parser = getParser(options, input);
        return parser.options.strictMode && (parser.state.strict = true), parser.getExpression();
      }, exports2.tokTypes = tokTypes;
    }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.A = undefined;
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _transformerLegacy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js");
      exports2.A = (0, _helperPluginUtils.declare)((api, options) => {
        api.assertVersion(7);
        var { legacy } = options;
        const { version } = options;
        if (legacy || version === "legacy")
          return { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: _transformerLegacy.default };
        if (version && version !== "2018-09" && version !== "2021-12" && version !== "2022-03" && version !== "2023-01" && version !== "2023-05" && version !== "2023-11")
          throw new Error("The '.version' option must be one of 'legacy', '2023-11', '2023-05', '2023-01', '2022-03', or '2021-12'.");
        return api.assertVersion("^7.0.2"), (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({ name: "proposal-decorators", api, feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators, inherits: _pluginSyntaxDecorators.default, decoratorVersion: version });
      });
    }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
      const buildClassDecorator = _core.template.statement(`
  DECORATOR(CLASS_REF = INNER) || CLASS_REF;
`), buildClassPrototype = (0, _core.template)(`
  CLASS_REF.prototype;
`), buildGetDescriptor = (0, _core.template)(`
    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);
`), buildGetObjectInitializer = (0, _core.template)(`
    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function(){
            return TEMP;
        }
    })
`), WARNING_CALLS = new WeakSet;
      function applyEnsureOrdering(path4) {
        const identDecorators = (path4.isClass() ? [path4, ...path4.get("body.body")] : path4.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []).filter((decorator) => !_core.types.isIdentifier(decorator.expression));
        if (identDecorators.length !== 0)
          return _core.types.sequenceExpression(identDecorators.map((decorator) => {
            const expression = decorator.expression, id = decorator.expression = path4.scope.generateDeclaredUidIdentifier("dec");
            return _core.types.assignmentExpression("=", id, expression);
          }).concat([path4.node]));
      }
      function hasClassDecorators(classNode) {
        var _classNode$decorators;
        return !((_classNode$decorators = classNode.decorators) == null || !_classNode$decorators.length);
      }
      function hasMethodDecorators(body) {
        return body.some((node) => {
          var _node$decorators;
          return (_node$decorators = node.decorators) == null ? undefined : _node$decorators.length;
        });
      }
      function applyTargetDecorators(path4, state, decoratedProps) {
        const name = path4.scope.generateDeclaredUidIdentifier(path4.isClass() ? "class" : "obj"), exprs = decoratedProps.reduce(function(acc, node) {
          let decorators = [];
          if (node.decorators != null && (decorators = node.decorators, node.decorators = null), decorators.length === 0)
            return acc;
          if (node.computed)
            throw path4.buildCodeFrameError("Computed method/property decorators are not yet supported.");
          const property = _core.types.isLiteral(node.key) ? node.key : _core.types.stringLiteral(node.key.name), target = path4.isClass() && !node.static ? buildClassPrototype({ CLASS_REF: name }).expression : name;
          if (_core.types.isClassProperty(node, { static: false })) {
            const descriptor = path4.scope.generateDeclaredUidIdentifier("descriptor"), initializer = node.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node.value)])) : _core.types.nullLiteral();
            node.value = _core.types.callExpression(state.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]), WARNING_CALLS.add(node.value), acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("initializer"), initializer)])])));
          } else
            acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.isObjectProperty(node) || _core.types.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({ TEMP: path4.scope.generateDeclaredUidIdentifier("init"), TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression : buildGetDescriptor({ TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression, _core.types.cloneNode(target)]));
          return acc;
        }, []);
        return _core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(name), path4.node), _core.types.sequenceExpression(exprs), _core.types.cloneNode(name)]);
      }
      function decoratedClassToExpression({ node, scope }) {
        if (!hasClassDecorators(node) && !hasMethodDecorators(node.body.body))
          return;
        const ref = node.id ? _core.types.cloneNode(node.id) : scope.generateUidIdentifier("class");
        return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]);
      }
      const visitor = { ExportDefaultDeclaration(path4) {
        const decl = path4.get("declaration");
        if (!decl.isClassDeclaration())
          return;
        const replacement = decoratedClassToExpression(decl);
        if (replacement) {
          const [varDeclPath] = path4.replaceWithMultiple([replacement, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id), _core.types.identifier("default"))])]);
          decl.node.id || path4.scope.registerDeclaration(varDeclPath);
        }
      }, ClassDeclaration(path4) {
        const replacement = decoratedClassToExpression(path4);
        if (replacement) {
          const [newPath] = path4.replaceWith(replacement), decl = newPath.get("declarations.0"), id = decl.node.id, binding = path4.scope.getOwnBinding(id.name);
          binding.identifier = id, binding.path = decl;
        }
      }, ClassExpression(path4, state) {
        const decoratedClass = applyEnsureOrdering(path4) || function(classPath) {
          if (!hasClassDecorators(classPath.node))
            return;
          const decorators = classPath.node.decorators || [];
          classPath.node.decorators = null;
          const name = classPath.scope.generateDeclaredUidIdentifier("class");
          return decorators.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
            return buildClassDecorator({ CLASS_REF: _core.types.cloneNode(name), DECORATOR: _core.types.cloneNode(decorator), INNER: acc }).expression;
          }, classPath.node);
        }(path4) || function(path22, state2) {
          if (hasMethodDecorators(path22.node.body.body))
            return applyTargetDecorators(path22, state2, path22.node.body.body);
        }(path4, state);
        decoratedClass && path4.replaceWith(decoratedClass);
      }, ObjectExpression(path4, state) {
        const decoratedObject = applyEnsureOrdering(path4) || function(path22, state2) {
          if (hasMethodDecorators(path22.node.properties))
            return applyTargetDecorators(path22, state2, path22.node.properties.filter((prop) => prop.type !== "SpreadElement"));
        }(path4, state);
        decoratedObject && path4.replaceWith(decoratedObject);
      }, AssignmentExpression(path4, state) {
        WARNING_CALLS.has(path4.node.right) && path4.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path4.get("left.object").node), _core.types.stringLiteral(path4.get("left.property").node.name || path4.get("left.property").node.value), _core.types.cloneNode(path4.get("right.arguments")[0].node), _core.types.cloneNode(path4.get("right.arguments")[1].node)]));
      }, CallExpression(path4, state) {
        path4.node.arguments.length === 3 && WARNING_CALLS.has(path4.node.arguments[2]) && path4.node.callee.name === state.addHelper("defineProperty").name && path4.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path4.get("arguments")[0].node), _core.types.cloneNode(path4.get("arguments")[1].node), _core.types.cloneNode(path4.get("arguments.2.arguments")[0].node), _core.types.cloneNode(path4.get("arguments.2.arguments")[1].node)]));
      } };
      exports2.default = visitor;
    }, "./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
      exports2.default = (0, _helperPluginUtils.declare)((api, options) => {
        api.assertVersion("^7.0.0-0 || >8.0.0-alpha <8.0.0-beta");
        let { version } = options;
        {
          const { legacy } = options;
          if (legacy !== undefined) {
            if (typeof legacy != "boolean")
              throw new Error(".legacy must be a boolean.");
            if (version !== undefined)
              throw new Error("You can either use the .legacy or the .version option, not both.");
          }
          if (version === undefined)
            version = legacy ? "legacy" : "2018-09";
          else if (version !== "2023-11" && version !== "2023-05" && version !== "2023-01" && version !== "2022-03" && version !== "2021-12" && version !== "2018-09" && version !== "legacy")
            throw new Error("Unsupported decorators version: " + version);
          var { decoratorsBeforeExport } = options;
          if (decoratorsBeforeExport === undefined) {
            if (version === "2021-12" || version === "2022-03")
              decoratorsBeforeExport = false;
            else if (version === "2018-09")
              throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
          } else {
            if (version === "legacy" || version === "2022-03" || version === "2023-01")
              throw new Error(`'decoratorsBeforeExport' can't be used with ${version} decorators.`);
            if (typeof decoratorsBeforeExport != "boolean")
              throw new Error("'decoratorsBeforeExport' must be a boolean.");
          }
        }
        return { name: "syntax-decorators", manipulateOptions({ generatorOpts }, parserOpts) {
          version === "legacy" ? parserOpts.plugins.push("decorators-legacy") : version === "2023-01" || version === "2023-05" || version === "2023-11" ? parserOpts.plugins.push(["decorators", { allowCallParenthesized: false }], "decoratorAutoAccessors") : version === "2022-03" ? parserOpts.plugins.push(["decorators", { decoratorsBeforeExport: false, allowCallParenthesized: false }], "decoratorAutoAccessors") : version === "2021-12" ? (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }], "decoratorAutoAccessors"), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport) : version === "2018-09" && (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }]), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport);
        } };
      });
    }, "./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.A = undefined;
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
      exports2.A = (0, _helperPluginUtils.declare)((api) => {
        api.assertVersion(7);
        const isPlugin = (plugin, name) => name === "plugin" || Array.isArray(plugin) && plugin[0] === "plugin", options = (plugin) => Array.isArray(plugin) && plugin.length > 1 ? plugin[1] : {};
        return { name: "syntax-import-assertions", manipulateOptions(opts, { plugins }) {
          for (let i = 0;i < plugins.length; i++) {
            const plugin = plugins[i];
            if (isPlugin(plugin, "deprecatedImportAssert"))
              return;
            if (isPlugin(plugin, "importAttributes"))
              return void plugins.splice(i, 1, "deprecatedImportAssert", ["importAttributes", Object.assign({}, options(plugin), { deprecatedAssertSyntax: true })]);
          }
          plugins.push("importAssertions");
        } };
      });
    }, "./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
      exports2.default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "syntax-jsx", manipulateOptions(opts, parserOpts) {
        parserOpts.plugins.some((p) => (Array.isArray(p) ? p[0] : p) === "typescript") || parserOpts.plugins.push("jsx");
      } }));
    }, "./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), removePlugin = function(plugins, name) {
        const indices = [];
        plugins.forEach((plugin, i) => {
          (Array.isArray(plugin) ? plugin[0] : plugin) === name && indices.unshift(i);
        });
        for (const i of indices)
          plugins.splice(i, 1);
      };
      exports2.default = (0, _helperPluginUtils.declare)((api, opts) => {
        api.assertVersion(7);
        const { disallowAmbiguousJSXLike, dts } = opts;
        var { isTSX } = opts;
        return { name: "syntax-typescript", manipulateOptions(opts2, parserOpts) {
          {
            const { plugins } = parserOpts;
            removePlugin(plugins, "flow"), removePlugin(plugins, "jsx"), plugins.push("objectRestSpread", "classProperties"), isTSX && plugins.push("jsx");
          }
          parserOpts.plugins.push(["typescript", { disallowAmbiguousJSXLike, dts }]);
        } };
      });
    }, "./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.A = undefined;
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js");
      exports2.A = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "transform-export-namespace-from", manipulateOptions: (_, parser) => parser.plugins.push("exportNamespaceFrom"), visitor: { ExportNamedDeclaration(path4) {
        var _exported$name;
        const { node, scope } = path4, { specifiers } = node, index = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
        if (!_core.types.isExportNamespaceSpecifier(specifiers[index]))
          return;
        const nodes = [];
        index === 1 && nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node.source));
        const specifier = specifiers.shift(), { exported } = specifier, uid = scope.generateUidIdentifier((_exported$name = exported.name) != null ? _exported$name : exported.value);
        nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)], _core.types.cloneNode(node.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid), exported)])), node.specifiers.length >= 1 && nodes.push(node);
        const [importDeclaration] = path4.replaceWithMultiple(nodes);
        path4.scope.registerDeclaration(importDeclaration);
      } } }));
    }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformDynamicImport = function(path4, noInterop, file) {
        const buildRequire = noInterop ? requireNoInterop : requireInterop;
        path4.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path4.node, true, false, (specifier) => buildRequire(specifier, file)));
      };
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
      const requireNoInterop = (source) => _core.template.expression.ast`require(${source})`, requireInterop = (source, file) => _core.types.callExpression(file.addHelper("interopRequireWildcard"), [requireNoInterop(source)]);
    }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.defineCommonJSHook = function(file, hook) {
        let hooks = file.get(commonJSHooksKey);
        hooks || file.set(commonJSHooksKey, hooks = []);
        hooks.push(hook);
      }, exports2.makeInvokers = function(file) {
        const hooks = file.get(commonJSHooksKey);
        return { getWrapperPayload: (...args) => findMap(hooks, (hook) => hook.getWrapperPayload == null ? undefined : hook.getWrapperPayload(...args)), wrapReference: (...args) => findMap(hooks, (hook) => hook.wrapReference == null ? undefined : hook.wrapReference(...args)), buildRequireWrapper: (...args) => findMap(hooks, (hook) => hook.buildRequireWrapper == null ? undefined : hook.buildRequireWrapper(...args)) };
      };
      const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
      function findMap(arr, cb) {
        if (arr)
          for (const el of arr) {
            const res = cb(el);
            if (res != null)
              return res;
          }
      }
    }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined, Object.defineProperty(exports2, "defineCommonJSHook", { enumerable: true, get: function() {
        return _hooks.defineCommonJSHook;
      } });
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js"), _lazy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js"), _hooks = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/hooks.js");
      exports2.default = (0, _helperPluginUtils.declare)((api, options) => {
        var _api$assumption, _api$assumption2, _api$assumption3;
        api.assertVersion(7);
        const { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false } = options, constantReexports = (_api$assumption = api.assumption("constantReexports")) != null ? _api$assumption : loose, enumerableModuleMeta = (_api$assumption2 = api.assumption("enumerableModuleMeta")) != null ? _api$assumption2 : loose, noIncompleteNsImportDetection = (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) != null && _api$assumption3;
        if (!(typeof lazy == "boolean" || typeof lazy == "function" || Array.isArray(lazy) && lazy.every((item) => typeof item == "string")))
          throw new Error(".lazy must be a boolean, array of strings, or a function");
        if (typeof strictNamespace != "boolean")
          throw new Error(".strictNamespace must be a boolean, or undefined");
        if (typeof mjsStrictNamespace != "boolean")
          throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
        const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path4) {
          const localName = path4.node.name;
          if (localName !== "module" && localName !== "exports")
            return;
          const localBinding = path4.scope.getBinding(localName);
          this.scope.getBinding(localName) !== localBinding || path4.parentPath.isObjectProperty({ value: path4.node }) && path4.parentPath.parentPath.isObjectPattern() || path4.parentPath.isAssignmentExpression({ left: path4.node }) || path4.isAssignmentExpression({ left: path4.node }) || path4.replaceWith(getAssertion(localName));
        }, UpdateExpression(path4) {
          const arg = path4.get("argument");
          if (!arg.isIdentifier())
            return;
          const localName = arg.node.name;
          if (localName !== "module" && localName !== "exports")
            return;
          const localBinding = path4.scope.getBinding(localName);
          this.scope.getBinding(localName) === localBinding && path4.replaceWith(_core.types.assignmentExpression(path4.node.operator[0] + "=", arg.node, getAssertion(localName)));
        }, AssignmentExpression(path4) {
          const left = path4.get("left");
          if (left.isIdentifier()) {
            const localName = left.node.name;
            if (localName !== "module" && localName !== "exports")
              return;
            const localBinding = path4.scope.getBinding(localName);
            if (this.scope.getBinding(localName) !== localBinding)
              return;
            const right = path4.get("right");
            right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
          } else if (left.isPattern()) {
            const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).find((localName2) => (localName2 === "module" || localName2 === "exports") && this.scope.getBinding(localName2) === path4.scope.getBinding(localName2));
            if (localName) {
              const right = path4.get("right");
              right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
            }
          }
        } };
        return { name: "transform-modules-commonjs", pre() {
          this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && (0, _hooks.defineCommonJSHook)(this.file, (0, _lazy.lazyImportsHook)(lazy));
        }, visitor: { ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path4) {
          if (!this.file.has("@babel/plugin-proposal-dynamic-import"))
            return;
          if (path4.isCallExpression() && !_core.types.isImport(path4.node.callee))
            return;
          let { scope } = path4;
          do {
            scope.rename("require");
          } while (scope = scope.parent);
          (0, _dynamicImport.transformDynamicImport)(path4, noInterop, this.file);
        }, Program: { exit(path4, state) {
          if (!(0, _helperModuleTransforms.isModule)(path4))
            return;
          path4.scope.rename("exports"), path4.scope.rename("module"), path4.scope.rename("require"), path4.scope.rename("__filename"), path4.scope.rename("__dirname"), allowCommonJSExports || path4.traverse(moduleExportsVisitor, { scope: path4.scope });
          let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
          moduleName && (moduleName = _core.types.stringLiteral(moduleName));
          const hooks = (0, _hooks.makeInvokers)(this.file), { meta, headers } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path4, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, wrapReference: hooks.wrapReference, getWrapperPayload: hooks.getWrapperPayload, esNamespaceOnly: typeof state.filename == "string" && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
          for (const [source, metadata] of meta.source) {
            const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
            let header;
            if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
              if (lazy && metadata.wrap === "function")
                throw new Error("Assertion failure");
              header = _core.types.expressionStatement(loadExpr);
            } else {
              const init = (0, _helperModuleTransforms.wrapInterop)(path4, loadExpr, metadata.interop) || loadExpr;
              if (metadata.wrap) {
                const res = hooks.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                if (res === false)
                  continue;
                header = res;
              }
              header != null || (header = _core.template.statement.ast`
                var ${metadata.name} = ${init};
              `);
            }
            header.loc = metadata.loc, headers.push(header), headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
          }
          (0, _helperModuleTransforms.ensureStatementsHoisted)(headers), path4.unshiftContainer("body", headers), path4.get("body").forEach((path22) => {
            headers.includes(path22.node) && path22.isVariableDeclaration() && path22.scope.registerDeclaration(path22);
          });
        } } } };
      });
    }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/lazy.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.lazyImportsHook = undefined;
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js");
      exports2.lazyImportsHook = (lazy) => ({ name: "@babel/plugin-transform-modules-commonjs/lazy", version: "7.26.3", getWrapperPayload: (source, metadata) => (0, _helperModuleTransforms.isSideEffectImport)(metadata) || metadata.reexportAll ? null : lazy === true ? source.includes(".") ? null : "lazy/function" : Array.isArray(lazy) ? lazy.includes(source) ? "lazy/function" : null : typeof lazy == "function" ? lazy(source) ? "lazy/function" : null : undefined, buildRequireWrapper(name, init, payload, referenced) {
        if (payload === "lazy/function")
          return !!referenced && _core.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
      }, wrapReference(ref, payload) {
        if (payload === "lazy/function")
          return _core.types.callExpression(ref, []);
      } });
    }, "./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function({ name, development }) {
        return (0, _helperPluginUtils.declare)((_, options) => {
          const { pure: PURE_ANNOTATION, throwIfNamespace = true, filter, runtime: RUNTIME_DEFAULT = development ? "automatic" : "classic", importSource: IMPORT_SOURCE_DEFAULT = DEFAULT.importSource, pragma: PRAGMA_DEFAULT = DEFAULT.pragma, pragmaFrag: PRAGMA_FRAG_DEFAULT = DEFAULT.pragmaFrag } = options;
          var { useSpread = false, useBuiltIns = false } = options;
          if (RUNTIME_DEFAULT === "classic") {
            if (typeof useSpread != "boolean")
              throw new Error("transform-react-jsx currently only accepts a boolean option for useSpread (defaults to false)");
            if (typeof useBuiltIns != "boolean")
              throw new Error("transform-react-jsx currently only accepts a boolean option for useBuiltIns (defaults to false)");
            if (useSpread && useBuiltIns)
              throw new Error("transform-react-jsx currently only accepts useBuiltIns or useSpread but not both");
          }
          const injectMetaPropertiesVisitor = { JSXOpeningElement(path4, state) {
            const attributes = [];
            (function(scope) {
              do {
                const { path: path22 } = scope;
                if (path22.isFunctionParent() && !path22.isArrowFunctionExpression())
                  return !path22.isMethod() || (path22.node.kind !== "constructor" || !isDerivedClass(path22.parentPath.parentPath));
                if (path22.isTSModuleBlock())
                  return false;
              } while (scope = scope.parent);
              return true;
            })(path4.scope) && attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__self"), _core.types.jsxExpressionContainer(_core.types.thisExpression()))), attributes.push(_core.types.jsxAttribute(_core.types.jsxIdentifier("__source"), _core.types.jsxExpressionContainer(function(path22, state2) {
              const location = path22.node.loc;
              if (!location)
                return path22.scope.buildUndefinedNode();
              if (!state2.fileNameIdentifier) {
                const { filename = "" } = state2, fileNameIdentifier = path22.scope.generateUidIdentifier("_jsxFileName");
                path22.scope.getProgramParent().push({ id: fileNameIdentifier, init: _core.types.stringLiteral(filename) }), state2.fileNameIdentifier = fileNameIdentifier;
              }
              return function(fileNameIdentifier, lineNumber, column0Based) {
                const fileLineLiteral = lineNumber != null ? _core.types.numericLiteral(lineNumber) : _core.types.nullLiteral(), fileColumnLiteral = column0Based != null ? _core.types.numericLiteral(column0Based + 1) : _core.types.nullLiteral();
                return _core.template.expression.ast`{
    fileName: ${fileNameIdentifier},
    lineNumber: ${fileLineLiteral},
    columnNumber: ${fileColumnLiteral},
  }`;
              }(_core.types.cloneNode(state2.fileNameIdentifier), location.start.line, location.start.column);
            }(path4, state)))), path4.pushContainer("attributes", attributes);
          } };
          return { name, inherits: _pluginSyntaxJsx.default, visitor: { JSXNamespacedName(path4) {
            if (throwIfNamespace)
              throw path4.buildCodeFrameError("Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.");
          }, JSXSpreadChild(path4) {
            throw path4.buildCodeFrameError("Spread children are not supported in React.");
          }, Program: { enter(path4, state) {
            const { file } = state;
            let runtime = RUNTIME_DEFAULT, source = IMPORT_SOURCE_DEFAULT, pragma = PRAGMA_DEFAULT, pragmaFrag = PRAGMA_FRAG_DEFAULT, sourceSet = !!options.importSource, pragmaSet = !!options.pragma, pragmaFragSet = !!options.pragmaFrag;
            if (file.ast.comments)
              for (const comment of file.ast.comments) {
                const sourceMatches = JSX_SOURCE_ANNOTATION_REGEX.exec(comment.value);
                sourceMatches && (source = sourceMatches[1], sourceSet = true);
                const runtimeMatches = JSX_RUNTIME_ANNOTATION_REGEX.exec(comment.value);
                runtimeMatches && (runtime = runtimeMatches[1]);
                const jsxMatches = JSX_ANNOTATION_REGEX.exec(comment.value);
                jsxMatches && (pragma = jsxMatches[1], pragmaSet = true);
                const jsxFragMatches = JSX_FRAG_ANNOTATION_REGEX.exec(comment.value);
                jsxFragMatches && (pragmaFrag = jsxFragMatches[1], pragmaFragSet = true);
              }
            if (set(state, "runtime", runtime), runtime === "classic") {
              if (sourceSet)
                throw path4.buildCodeFrameError("importSource cannot be set when runtime is classic.");
              const createElement = toMemberExpression(pragma), fragment = toMemberExpression(pragmaFrag);
              set(state, "id/createElement", () => _core.types.cloneNode(createElement)), set(state, "id/fragment", () => _core.types.cloneNode(fragment)), set(state, "defaultPure", pragma === DEFAULT.pragma);
            } else {
              if (runtime !== "automatic")
                throw path4.buildCodeFrameError('Runtime must be either "classic" or "automatic".');
              {
                if (pragmaSet || pragmaFragSet)
                  throw path4.buildCodeFrameError("pragma and pragmaFrag cannot be set when runtime is automatic.");
                const define = (name2, id) => set(state, name2, function(pass, path22, importName, source2) {
                  return () => {
                    const actualSource = function(source3, importName2) {
                      switch (importName2) {
                        case "Fragment":
                          return `${source3}/${development ? "jsx-dev-runtime" : "jsx-runtime"}`;
                        case "jsxDEV":
                          return `${source3}/jsx-dev-runtime`;
                        case "jsx":
                        case "jsxs":
                          return `${source3}/jsx-runtime`;
                        case "createElement":
                          return source3;
                      }
                    }(source2, importName);
                    if ((0, _helperModuleImports.isModule)(path22)) {
                      let reference = get(pass, `imports/${importName}`);
                      return reference ? _core.types.cloneNode(reference) : (reference = (0, _helperModuleImports.addNamed)(path22, importName, actualSource, { importedInterop: "uncompiled", importPosition: "after" }), set(pass, `imports/${importName}`, reference), reference);
                    }
                    {
                      let reference = get(pass, `requires/${actualSource}`);
                      return reference ? reference = _core.types.cloneNode(reference) : (reference = (0, _helperModuleImports.addNamespace)(path22, actualSource, { importedInterop: "uncompiled" }), set(pass, `requires/${actualSource}`, reference)), _core.types.memberExpression(reference, _core.types.identifier(importName));
                    }
                  };
                }(state, path4, id, source));
                define("id/jsx", development ? "jsxDEV" : "jsx"), define("id/jsxs", development ? "jsxDEV" : "jsxs"), define("id/createElement", "createElement"), define("id/fragment", "Fragment"), set(state, "defaultPure", source === DEFAULT.importSource);
              }
            }
            development && path4.traverse(injectMetaPropertiesVisitor, state);
          } }, JSXFragment: { exit(path4, file) {
            let callExpr;
            callExpr = get(file, "runtime") === "classic" ? function(path22, file2) {
              if (filter && !filter(path22.node, file2))
                return;
              return call(file2, "createElement", [get(file2, "id/fragment")(), _core.types.nullLiteral(), ..._core.types.react.buildChildren(path22.node)]);
            }(path4, file) : function(path22, file2) {
              const args = [get(file2, "id/fragment")()], children = _core.types.react.buildChildren(path22.node);
              args.push(_core.types.objectExpression(children.length > 0 ? [buildChildrenProperty(children)] : [])), development && args.push(path22.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1));
              return call(file2, children.length > 1 ? "jsxs" : "jsx", args);
            }(path4, file), path4.replaceWith(_core.types.inherits(callExpr, path4.node));
          } }, JSXElement: { exit(path4, file) {
            let callExpr;
            callExpr = get(file, "runtime") === "classic" || function(path22) {
              const openingPath = path22.get("openingElement"), attributes = openingPath.node.attributes;
              let seenPropsSpread = false;
              for (let i = 0;i < attributes.length; i++) {
                const attr = attributes[i];
                if (seenPropsSpread && _core.types.isJSXAttribute(attr) && attr.name.name === "key")
                  return true;
                _core.types.isJSXSpreadAttribute(attr) && (seenPropsSpread = true);
              }
              return false;
            }(path4) ? function(path22, file2) {
              const openingPath = path22.get("openingElement");
              return call(file2, "createElement", [getTag(openingPath), buildCreateElementOpeningElementAttributes(file2, path22, openingPath.get("attributes")), ..._core.types.react.buildChildren(path22.node)]);
            }(path4, file) : function(path22, file2) {
              const openingPath = path22.get("openingElement"), args = [getTag(openingPath)], attribsArray = [], extracted = Object.create(null);
              for (const attr of openingPath.get("attributes"))
                if (attr.isJSXAttribute() && _core.types.isJSXIdentifier(attr.node.name)) {
                  const { name: name2 } = attr.node.name;
                  switch (name2) {
                    case "__source":
                    case "__self":
                      if (extracted[name2])
                        throw sourceSelfError(path22, name2);
                    case "key": {
                      const keyValue = convertAttributeValue(attr.node.value);
                      if (keyValue === null)
                        throw attr.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
                      extracted[name2] = keyValue;
                      break;
                    }
                    default:
                      attribsArray.push(attr);
                  }
                } else
                  attribsArray.push(attr);
              const children = _core.types.react.buildChildren(path22.node);
              let attribs;
              attribs = attribsArray.length || children.length ? function(attribs2, children2) {
                const props = attribs2.reduce(accumulateAttribute, []);
                (children2 == null ? undefined : children2.length) > 0 && props.push(buildChildrenProperty(children2));
                return _core.types.objectExpression(props);
              }(attribsArray, children) : _core.types.objectExpression([]);
              if (args.push(attribs), development) {
                var _extracted$key;
                args.push((_extracted$key = extracted.key) != null ? _extracted$key : path22.scope.buildUndefinedNode(), _core.types.booleanLiteral(children.length > 1)), extracted.__source ? (args.push(extracted.__source), extracted.__self && args.push(extracted.__self)) : extracted.__self && args.push(path22.scope.buildUndefinedNode(), extracted.__self);
              } else
                extracted.key !== undefined && args.push(extracted.key);
              return call(file2, children.length > 1 ? "jsxs" : "jsx", args);
            }(path4, file), path4.replaceWith(_core.types.inherits(callExpr, path4.node));
          } }, JSXAttribute(path4) {
            _core.types.isJSXElement(path4.node.value) && (path4.node.value = _core.types.jsxExpressionContainer(path4.node.value));
          } } };
          function isDerivedClass(classPath) {
            return classPath.node.superClass !== null;
          }
          function call(pass, name2, args) {
            const node = _core.types.callExpression(get(pass, `id/${name2}`)(), args);
            return (PURE_ANNOTATION != null ? PURE_ANNOTATION : get(pass, "defaultPure")) && (0, _helperAnnotateAsPure.default)(node), node;
          }
          function convertJSXIdentifier(node, parent) {
            return _core.types.isJSXIdentifier(node) ? node.name === "this" && _core.types.isReferenced(node, parent) ? _core.types.thisExpression() : _core.types.isValidIdentifier(node.name, false) ? (node.type = "Identifier", node) : _core.types.stringLiteral(node.name) : _core.types.isJSXMemberExpression(node) ? _core.types.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node)) : _core.types.isJSXNamespacedName(node) ? _core.types.stringLiteral(`${node.namespace.name}:${node.name.name}`) : node;
          }
          function convertAttributeValue(node) {
            return _core.types.isJSXExpressionContainer(node) ? node.expression : node;
          }
          function accumulateAttribute(array, attribute) {
            if (_core.types.isJSXSpreadAttribute(attribute.node)) {
              const arg = attribute.node.argument;
              return _core.types.isObjectExpression(arg) && !arg.properties.some((value3) => _core.types.isObjectProperty(value3, { computed: false, shorthand: false }) && (_core.types.isIdentifier(value3.key, { name: "__proto__" }) || _core.types.isStringLiteral(value3.key, { value: "__proto__" }))) ? array.push(...arg.properties) : array.push(_core.types.spreadElement(arg)), array;
            }
            const value2 = convertAttributeValue(attribute.node.name.name !== "key" ? attribute.node.value || _core.types.booleanLiteral(true) : attribute.node.value);
            if (attribute.node.name.name === "key" && value2 === null)
              throw attribute.buildCodeFrameError('Please provide an explicit key value. Using "key" as a shorthand for "key={true}" is not allowed.');
            var _value$extra;
            _core.types.isStringLiteral(value2) && !_core.types.isJSXExpressionContainer(attribute.node.value) && (value2.value = value2.value.replace(/\n\s+/g, " "), (_value$extra = value2.extra) == null || delete _value$extra.raw);
            return _core.types.isJSXNamespacedName(attribute.node.name) ? attribute.node.name = _core.types.stringLiteral(attribute.node.name.namespace.name + ":" + attribute.node.name.name.name) : _core.types.isValidIdentifier(attribute.node.name.name, false) ? attribute.node.name.type = "Identifier" : attribute.node.name = _core.types.stringLiteral(attribute.node.name.name), array.push(_core.types.inherits(_core.types.objectProperty(attribute.node.name, value2), attribute.node)), array;
          }
          function buildChildrenProperty(children) {
            let childrenNode;
            if (children.length === 1)
              childrenNode = children[0];
            else {
              if (!(children.length > 1))
                return;
              childrenNode = _core.types.arrayExpression(children);
            }
            return _core.types.objectProperty(_core.types.identifier("children"), childrenNode);
          }
          function getTag(openingPath) {
            const tagExpr = convertJSXIdentifier(openingPath.node.name, openingPath.node);
            let tagName;
            return _core.types.isIdentifier(tagExpr) ? tagName = tagExpr.name : _core.types.isStringLiteral(tagExpr) && (tagName = tagExpr.value), _core.types.react.isCompatTag(tagName) ? _core.types.stringLiteral(tagName) : tagExpr;
          }
          function buildCreateElementOpeningElementAttributes(file, path4, attribs) {
            const runtime = get(file, "runtime");
            if (runtime !== "automatic") {
              const objs = [], props2 = attribs.reduce(accumulateAttribute, []);
              if (useSpread)
                props2.length && objs.push(_core.types.objectExpression(props2));
              else {
                let start = 0;
                props2.forEach((prop, i) => {
                  _core.types.isSpreadElement(prop) && (i > start && objs.push(_core.types.objectExpression(props2.slice(start, i))), objs.push(prop.argument), start = i + 1);
                }), props2.length > start && objs.push(_core.types.objectExpression(props2.slice(start)));
              }
              if (!objs.length)
                return _core.types.nullLiteral();
              if (!(objs.length !== 1 || _core.types.isSpreadElement(props2[0]) && _core.types.isObjectExpression(props2[0].argument)))
                return objs[0];
              _core.types.isObjectExpression(objs[0]) || objs.unshift(_core.types.objectExpression([]));
              const helper = useBuiltIns ? _core.types.memberExpression(_core.types.identifier("Object"), _core.types.identifier("assign")) : file.addHelper("extends");
              return _core.types.callExpression(helper, objs);
            }
            const props = [], found = Object.create(null);
            for (const attr of attribs) {
              const { node } = attr, name2 = _core.types.isJSXAttribute(node) && _core.types.isJSXIdentifier(node.name) && node.name.name;
              if (runtime === "automatic" && (name2 === "__source" || name2 === "__self")) {
                if (found[name2])
                  throw sourceSelfError(path4, name2);
                found[name2] = true;
              }
              accumulateAttribute(props, attr);
            }
            return props.length === 1 && _core.types.isSpreadElement(props[0]) && !_core.types.isObjectExpression(props[0].argument) ? props[0].argument : props.length > 0 ? _core.types.objectExpression(props) : _core.types.nullLiteral();
          }
        });
      };
      var _pluginSyntaxJsx = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js"), _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js");
      const DEFAULT = { importSource: "react", runtime: "automatic", pragma: "React.createElement", pragmaFrag: "React.Fragment" }, JSX_SOURCE_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxImportSource\s+(\S+)\s*$/m, JSX_RUNTIME_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxRuntime\s+(\S+)\s*$/m, JSX_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsx\s+(\S+)\s*$/m, JSX_FRAG_ANNOTATION_REGEX = /^\s*(?:\*\s*)?@jsxFrag\s+(\S+)\s*$/m, get = (pass, name) => pass.get(`@babel/plugin-react-jsx/${name}`), set = (pass, name, v) => pass.set(`@babel/plugin-react-jsx/${name}`, v);
      function toMemberExpression(id) {
        return id.split(".").map((name) => _core.types.identifier(name)).reduce((object, property) => _core.types.memberExpression(object, property));
      }
      function sourceSelfError(path4, name) {
        const pluginName = `transform-react-jsx-${name.slice(2)}`;
        return path4.buildCodeFrameError(`Duplicate ${name} prop found. You are most likely using the deprecated ${pluginName} Babel plugin. Both __source and __self are automatically set when using the automatic runtime. Please remove transform-react-jsx-source and transform-react-jsx-self from your Babel config.`);
      }
    }, "./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.A = undefined;
      var _createPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/create-plugin.js");
      exports2.A = (0, _createPlugin.default)({ name: "transform-react-jsx", development: false });
    }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path4, t) {
        const { name } = path4.node.id, parentIsExport = path4.parentPath.isExportNamedDeclaration();
        let isExported = parentIsExport;
        !isExported && t.isProgram(path4.parent) && (isExported = path4.parent.body.some((stmt) => t.isExportNamedDeclaration(stmt) && stmt.exportKind !== "type" && !stmt.source && stmt.specifiers.some((spec) => t.isExportSpecifier(spec) && spec.exportKind !== "type" && spec.local.name === name)));
        const { enumValues: entries } = (0, _enum.translateEnumValues)(path4, t);
        if (isExported) {
          const obj = t.objectExpression(entries.map(([name2, value2]) => t.objectProperty(t.isValidIdentifier(name2) ? t.identifier(name2) : t.stringLiteral(name2), value2)));
          return void (path4.scope.hasOwnBinding(name) ? (parentIsExport ? path4.parentPath : path4).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path4.node.id, obj]))) : (path4.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path4.node.id, obj)])), path4.scope.registerDeclaration(path4)));
        }
        const entriesMap = new Map(entries);
        path4.scope.path.traverse({ Scope(path22) {
          path22.scope.hasOwnBinding(name) && path22.skip();
        }, MemberExpression(path22) {
          if (!t.isIdentifier(path22.node.object, { name }))
            return;
          let key;
          if (path22.node.computed) {
            if (!t.isStringLiteral(path22.node.property))
              return;
            key = path22.node.property.value;
          } else {
            if (!t.isIdentifier(path22.node.property))
              return;
            key = path22.node.property.name;
          }
          entriesMap.has(key) && path22.replaceWith(t.cloneNode(entriesMap.get(key)));
        } }), path4.remove();
      };
      var _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js");
    }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path4, t) {
        const { node, parentPath } = path4;
        if (node.declare)
          return void path4.remove();
        const name = node.id.name, { fill, data, isPure } = function(path22, t2, id) {
          const { enumValues: x, data: data2, isPure: isPure2 } = translateEnumValues(path22, t2), assignments = x.map(([memberName, memberValue]) => buildEnumMember(isSyntacticallyString(memberValue), { ENUM: t2.cloneNode(id), NAME: memberName, VALUE: memberValue }));
          return { fill: { ID: t2.cloneNode(id), ASSIGNMENTS: assignments }, data: data2, isPure: isPure2 };
        }(path4, t, node.id);
        switch (parentPath.type) {
          case "BlockStatement":
          case "ExportNamedDeclaration":
          case "Program": {
            const isGlobal = t.isProgram(path4.parent), isSeen = function seen(parentPath2) {
              if (parentPath2.isExportDeclaration())
                return seen(parentPath2.parentPath);
              return !!parentPath2.getData(name) || (parentPath2.setData(name, true), false);
            }(parentPath);
            let init = t.objectExpression([]);
            (isSeen || isGlobal) && (init = t.logicalExpression("||", t.cloneNode(fill.ID), init));
            const enumIIFE = buildEnumWrapper(Object.assign({}, fill, { INIT: init }));
            if (isPure && (0, _helperAnnotateAsPure.default)(enumIIFE), isSeen) {
              (parentPath.isExportDeclaration() ? parentPath : path4).replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(node.id), enumIIFE)));
            } else
              path4.scope.registerDeclaration(path4.replaceWith(t.variableDeclaration(isGlobal ? "var" : "let", [t.variableDeclarator(node.id, enumIIFE)]))[0]);
            ENUMS.set(path4.scope.getBindingIdentifier(name), data);
            break;
          }
          default:
            throw new Error(`Unexpected enum parent '${path4.parent.type}`);
        }
      }, exports2.isSyntacticallyString = isSyntacticallyString, exports2.translateEnumValues = translateEnumValues;
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _assert = __webpack_require__2("assert"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.25.9/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.25.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
      const ENUMS = new WeakMap, buildEnumWrapper = _core.template.expression(`
    (function (ID) {
      ASSIGNMENTS;
      return ID;
    })(INIT)
  `);
      const buildStringAssignment = (0, _core.template)(`
  ENUM["NAME"] = VALUE;
`), buildNumericAssignment = (0, _core.template)(`
  ENUM[ENUM["NAME"] = VALUE] = "NAME";
`), buildEnumMember = (isString, options) => (isString ? buildStringAssignment : buildNumericAssignment)(options);
      function isSyntacticallyString(expr) {
        switch ((expr = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(expr)).type) {
          case "BinaryExpression": {
            const { left, right } = expr;
            return expr.operator === "+" && (isSyntacticallyString(left) || isSyntacticallyString(right));
          }
          case "TemplateLiteral":
          case "StringLiteral":
            return true;
        }
        return false;
      }
      function ReferencedIdentifier(expr, state) {
        const { seen, path: path4, t } = state, name = expr.node.name;
        seen.has(name) && !expr.scope.hasOwnBinding(name) && (expr.replaceWith(t.memberExpression(t.cloneNode(path4.node.id), t.cloneNode(expr.node))), expr.skip());
      }
      const enumSelfReferenceVisitor = { ReferencedIdentifier };
      function translateEnumValues(path4, t) {
        var _ENUMS$get;
        const bindingIdentifier = path4.scope.getBindingIdentifier(path4.node.id.name), seen = (_ENUMS$get = ENUMS.get(bindingIdentifier)) != null ? _ENUMS$get : new Map;
        let lastName, constValue = -1, isPure = true;
        const enumValues = path4.get("members").map((memberPath) => {
          const member = memberPath.node, name = t.isIdentifier(member.id) ? member.id.name : member.id.value, initializerPath = memberPath.get("initializer");
          let value2;
          if (member.initializer)
            constValue = computeConstantValue(initializerPath, seen), constValue !== undefined ? (seen.set(name, constValue), _assert(typeof constValue == "number" || typeof constValue == "string"), value2 = constValue === 1 / 0 || Number.isNaN(constValue) ? t.identifier(String(constValue)) : constValue === -1 / 0 ? t.unaryExpression("-", t.identifier("Infinity")) : t.valueToNode(constValue)) : (isPure && (isPure = initializerPath.isPure()), initializerPath.isReferencedIdentifier() ? ReferencedIdentifier(initializerPath, { t, seen, path: path4 }) : initializerPath.traverse(enumSelfReferenceVisitor, { t, seen, path: path4 }), value2 = initializerPath.node, seen.set(name, undefined));
          else if (typeof constValue == "number")
            constValue += 1, value2 = t.numericLiteral(constValue), seen.set(name, constValue);
          else {
            if (typeof constValue == "string")
              throw path4.buildCodeFrameError("Enum member must have initializer.");
            {
              const lastRef = t.memberExpression(t.cloneNode(path4.node.id), t.stringLiteral(lastName), true);
              value2 = t.binaryExpression("+", t.numericLiteral(1), lastRef), seen.set(name, undefined);
            }
          }
          return lastName = name, [name, value2];
        });
        return { isPure, data: seen, enumValues };
      }
      function computeConstantValue(path4, prevMembers, seen = new Set) {
        return evaluate(path4);
        function evaluate(path22) {
          const expr = path22.node;
          switch (expr.type) {
            case "MemberExpression":
            case "Identifier":
              return evaluateRef(path22, prevMembers, seen);
            case "StringLiteral":
            case "NumericLiteral":
              return expr.value;
            case "UnaryExpression":
              return function(path32) {
                const value2 = evaluate(path32.get("argument"));
                if (value2 === undefined)
                  return;
                switch (path32.node.operator) {
                  case "+":
                    return value2;
                  case "-":
                    return -value2;
                  case "~":
                    return ~value2;
                  default:
                    return;
                }
              }(path22);
            case "BinaryExpression":
              return function(path32) {
                const left = evaluate(path32.get("left"));
                if (left === undefined)
                  return;
                const right = evaluate(path32.get("right"));
                if (right === undefined)
                  return;
                switch (path32.node.operator) {
                  case "|":
                    return left | right;
                  case "&":
                    return left & right;
                  case ">>":
                    return left >> right;
                  case ">>>":
                    return left >>> right;
                  case "<<":
                    return left << right;
                  case "^":
                    return left ^ right;
                  case "*":
                    return left * right;
                  case "/":
                    return left / right;
                  case "+":
                    return left + right;
                  case "-":
                    return left - right;
                  case "%":
                    return left % right;
                  case "**":
                    return Math.pow(left, right);
                  default:
                    return;
                }
              }(path22);
            case "ParenthesizedExpression":
              return evaluate(path22.get("expression"));
            case "TemplateLiteral": {
              if (expr.quasis.length === 1)
                return expr.quasis[0].value.cooked;
              const paths = path22.get("expressions"), quasis = expr.quasis;
              let str = "";
              for (let i = 0;i < quasis.length; i++)
                if (str += quasis[i].value.cooked, i + 1 < quasis.length) {
                  const value2 = evaluateRef(paths[i], prevMembers, seen);
                  if (value2 === undefined)
                    return;
                  str += value2;
                }
              return str;
            }
            default:
              return;
          }
        }
        function evaluateRef(path22, prevMembers2, seen2) {
          if (path22.isMemberExpression()) {
            const expr = path22.node, obj = expr.object, prop = expr.property;
            if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop)))
              return;
            const bindingIdentifier = path22.scope.getBindingIdentifier(obj.name), data = ENUMS.get(bindingIdentifier);
            if (!data)
              return;
            return data.get(prop.computed ? prop.value : prop.name);
          }
          if (path22.isIdentifier()) {
            const name = path22.node.name;
            if (["Infinity", "NaN"].includes(name))
              return Number(name);
            let value2 = prevMembers2 == null ? undefined : prevMembers2.get(name);
            if (value2 !== undefined)
              return value2;
            if (seen2.has(path22.node))
              return;
            return seen2.add(path22.node), value2 = computeConstantValue(path22.resolve(), prevMembers2, seen2), prevMembers2 == null || prevMembers2.set(name, value2), value2;
          }
        }
      }
    }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.GLOBAL_TYPES = undefined, exports2.isGlobalType = function({ scope }, name) {
        return !scope.hasBinding(name) && (!!GLOBAL_TYPES.get(scope).has(name) || (console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${name}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), false));
      }, exports2.registerGlobalType = function(programScope, name) {
        GLOBAL_TYPES.get(programScope).add(name);
      };
      const GLOBAL_TYPES = exports2.GLOBAL_TYPES = new WeakMap;
    }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxTypescript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-typescript/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.25.9_@babel+core@7.26.0/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _constEnum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"), _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/enum.js"), _globalTypes = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js"), _namespace = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");
      function isInType(path4) {
        switch (path4.parent.type) {
          case "TSTypeReference":
          case "TSExpressionWithTypeArguments":
          case "TSExpressionWithTypeArguments":
          case "TSTypeQuery":
            return true;
          case "TSQualifiedName":
            return path4.parentPath.findParent((path22) => path22.type !== "TSQualifiedName").type !== "TSImportEqualsDeclaration";
          case "ExportSpecifier":
            return path4.parent.exportKind === "type" || path4.parentPath.parent.exportKind === "type";
          default:
            return false;
        }
      }
      const NEEDS_EXPLICIT_ESM = new WeakMap, PARSED_PARAMS = new WeakSet;
      function safeRemove(path4) {
        const ids = path4.getBindingIdentifiers();
        for (const name of Object.keys(ids)) {
          const binding = path4.scope.getBinding(name);
          binding && binding.identifier === ids[name] && binding.scope.removeBinding(name);
        }
        path4.opts.noScope = true, path4.remove(), path4.opts.noScope = false;
      }
      function assertCjsTransformEnabled(path4, pass, wrong, suggestion, extra = "") {
        if (pass.file.get("@babel/plugin-transform-modules-*") !== "commonjs")
          throw path4.buildCodeFrameError(`\`${wrong}\` is only supported when compiling modules to CommonJS.
Please consider using \`${suggestion}\`${extra}, or add @babel/plugin-transform-modules-commonjs to your Babel config.`);
      }
      exports2.default = (0, _helperPluginUtils.declare)((api, opts) => {
        const { types: t, template } = api;
        api.assertVersion(7);
        const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+(\S+)/, { allowNamespaces = true, jsxPragma = "React.createElement", jsxPragmaFrag = "React.Fragment", onlyRemoveTypeImports = false, optimizeConstEnums = false } = opts;
        var { allowDeclareFields = false } = opts;
        const classMemberVisitors = { field(path4) {
          const { node } = path4;
          if (!allowDeclareFields && node.declare)
            throw path4.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
          if (node.declare) {
            if (node.value)
              throw path4.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
            node.decorators || path4.remove();
          } else if (node.definite) {
            if (node.value)
              throw path4.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
            allowDeclareFields || node.decorators || t.isClassPrivateProperty(node) || path4.remove();
          } else
            node.abstract ? path4.remove() : allowDeclareFields || node.value || node.decorators || t.isClassPrivateProperty(node) || path4.remove();
          node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.readonly && (node.readonly = null), node.optional && (node.optional = null), node.typeAnnotation && (node.typeAnnotation = null), node.definite && (node.definite = null), node.declare && (node.declare = null), node.override && (node.override = null);
        }, method({ node }) {
          node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.optional && (node.optional = null), node.override && (node.override = null);
        }, constructor(path4, classPath) {
          path4.node.accessibility && (path4.node.accessibility = null);
          const assigns = [], { scope } = path4;
          for (const paramPath of path4.get("params")) {
            const param = paramPath.node;
            if (param.type === "TSParameterProperty") {
              const parameter = param.parameter;
              if (PARSED_PARAMS.has(parameter))
                continue;
              let id;
              if (PARSED_PARAMS.add(parameter), t.isIdentifier(parameter))
                id = parameter;
              else {
                if (!t.isAssignmentPattern(parameter) || !t.isIdentifier(parameter.left))
                  throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
                id = parameter.left;
              }
              assigns.push(template.statement.ast`
              this.${t.cloneNode(id)} = ${t.cloneNode(id)}
            `), paramPath.replaceWith(paramPath.get("parameter")), scope.registerBinding("param", paramPath);
            }
          }
          (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path4, assigns);
        } };
        return { name: "transform-typescript", inherits: _pluginSyntaxTypescript.default, visitor: { Pattern: visitPattern, Identifier: visitPattern, RestElement: visitPattern, Program: { enter(path4, state) {
          const { file } = state;
          let fileJsxPragma = null, fileJsxPragmaFrag = null;
          const programScope = path4.scope;
          if (_globalTypes.GLOBAL_TYPES.has(programScope) || _globalTypes.GLOBAL_TYPES.set(programScope, new Set), file.ast.comments)
            for (const comment of file.ast.comments) {
              const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
              jsxMatches && (jsxMatches[1] ? fileJsxPragmaFrag = jsxMatches[2] : fileJsxPragma = jsxMatches[2]);
            }
          let pragmaImportName = fileJsxPragma || jsxPragma;
          pragmaImportName && ([pragmaImportName] = pragmaImportName.split("."));
          let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
          pragmaFragImportName && ([pragmaFragImportName] = pragmaFragImportName.split("."));
          for (let stmt of path4.get("body"))
            if (stmt.isImportDeclaration()) {
              if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), stmt.node.importKind === "type") {
                for (const specifier of stmt.node.specifiers)
                  (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                stmt.remove();
                continue;
              }
              const importsToRemove = new Set, specifiersLength = stmt.node.specifiers.length, isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
              for (const specifier of stmt.node.specifiers)
                if (specifier.type === "ImportSpecifier" && specifier.importKind === "type") {
                  (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                  const binding = stmt.scope.getBinding(specifier.local.name);
                  binding && importsToRemove.add(binding.path);
                }
              if (onlyRemoveTypeImports)
                NEEDS_EXPLICIT_ESM.set(path4.node, false);
              else {
                if (stmt.node.specifiers.length === 0) {
                  NEEDS_EXPLICIT_ESM.set(path4.node, false);
                  continue;
                }
                for (const specifier of stmt.node.specifiers) {
                  const binding = stmt.scope.getBinding(specifier.local.name);
                  binding && !importsToRemove.has(binding.path) && (isImportTypeOnly({ binding, programPath: path4, pragmaImportName, pragmaFragImportName }) ? importsToRemove.add(binding.path) : NEEDS_EXPLICIT_ESM.set(path4.node, false));
                }
              }
              if (isAllSpecifiersElided() && !onlyRemoveTypeImports)
                stmt.remove();
              else
                for (const importPath of importsToRemove)
                  importPath.remove();
            } else if (stmt.isExportDeclaration() && (stmt = stmt.get("declaration")), stmt.isVariableDeclaration({ declare: true }))
              for (const name of Object.keys(stmt.getBindingIdentifiers()))
                (0, _globalTypes.registerGlobalType)(programScope, name);
            else
              (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({ declare: true }) || stmt.isTSEnumDeclaration({ declare: true }) || stmt.isTSModuleDeclaration({ declare: true }) && stmt.get("id").isIdentifier()) && (0, _globalTypes.registerGlobalType)(programScope, stmt.node.id.name);
        }, exit(path4) {
          path4.node.sourceType === "module" && NEEDS_EXPLICIT_ESM.get(path4.node) && path4.pushContainer("body", t.exportNamedDeclaration());
        } }, ExportNamedDeclaration(path4, state) {
          if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), path4.node.exportKind !== "type")
            if (path4.node.source && path4.node.specifiers.length > 0 && path4.node.specifiers.every((specifier) => specifier.type === "ExportSpecifier" && specifier.exportKind === "type"))
              path4.remove();
            else if (!path4.node.source && path4.node.specifiers.length > 0 && path4.node.specifiers.every((specifier) => t.isExportSpecifier(specifier) && (0, _globalTypes.isGlobalType)(path4, specifier.local.name)))
              path4.remove();
            else {
              if (t.isTSModuleDeclaration(path4.node.declaration)) {
                const namespace = path4.node.declaration;
                if (!t.isStringLiteral(namespace.id)) {
                  const id = (0, _namespace.getFirstIdentifier)(namespace.id);
                  if (path4.scope.hasOwnBinding(id.name))
                    path4.replaceWith(namespace);
                  else {
                    const [newExport] = path4.replaceWithMultiple([t.exportNamedDeclaration(t.variableDeclaration("let", [t.variableDeclarator(t.cloneNode(id))])), namespace]);
                    path4.scope.registerDeclaration(newExport);
                  }
                }
              }
              NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
            }
          else
            path4.remove();
        }, ExportAllDeclaration(path4) {
          path4.node.exportKind === "type" && path4.remove();
        }, ExportSpecifier(path4) {
          (!path4.parent.source && (0, _globalTypes.isGlobalType)(path4, path4.node.local.name) || path4.node.exportKind === "type") && path4.remove();
        }, ExportDefaultDeclaration(path4, state) {
          NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), t.isIdentifier(path4.node.declaration) && (0, _globalTypes.isGlobalType)(path4, path4.node.declaration.name) ? path4.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
        }, TSDeclareFunction(path4) {
          safeRemove(path4);
        }, TSDeclareMethod(path4) {
          safeRemove(path4);
        }, VariableDeclaration(path4) {
          path4.node.declare && safeRemove(path4);
        }, VariableDeclarator({ node }) {
          node.definite && (node.definite = null);
        }, TSIndexSignature(path4) {
          path4.remove();
        }, ClassDeclaration(path4) {
          const { node } = path4;
          node.declare && safeRemove(path4);
        }, Class(path4) {
          const { node } = path4;
          node.typeParameters && (node.typeParameters = null), node.superTypeParameters && (node.superTypeParameters = null), node.implements && (node.implements = null), node.abstract && (node.abstract = null), path4.get("body.body").forEach((child) => {
            child.isClassMethod() || child.isClassPrivateMethod() ? child.node.kind === "constructor" ? classMemberVisitors.constructor(child, path4) : classMemberVisitors.method(child) : (child.isClassProperty() || child.isClassPrivateProperty() || child.isClassAccessorProperty()) && classMemberVisitors.field(child);
          });
        }, Function(path4) {
          const { node } = path4;
          node.typeParameters && (node.typeParameters = null), node.returnType && (node.returnType = null);
          const params = node.params;
          params.length > 0 && t.isIdentifier(params[0], { name: "this" }) && params.shift();
        }, TSModuleDeclaration(path4) {
          (0, _namespace.default)(path4, allowNamespaces);
        }, TSInterfaceDeclaration(path4) {
          path4.remove();
        }, TSTypeAliasDeclaration(path4) {
          path4.remove();
        }, TSEnumDeclaration(path4) {
          optimizeConstEnums && path4.node.const ? (0, _constEnum.default)(path4, t) : (0, _enum.default)(path4, t);
        }, TSImportEqualsDeclaration(path4, pass) {
          const { id, moduleReference, isExport } = path4.node;
          let init, varKind;
          t.isTSExternalModuleReference(moduleReference) ? (assertCjsTransformEnabled(path4, pass, `import ${id.name} = require(...);`, `import ${id.name} from '...';`, " alongside Typescript's --allowSyntheticDefaultImports option"), init = t.callExpression(t.identifier("require"), [moduleReference.expression]), varKind = "const") : (init = entityNameToExpr(moduleReference), varKind = "var");
          const newNode = t.variableDeclaration(varKind, [t.variableDeclarator(id, init)]);
          path4.replaceWith(isExport ? t.exportNamedDeclaration(newNode) : newNode), path4.scope.registerDeclaration(path4);
        }, TSExportAssignment(path4, pass) {
          assertCjsTransformEnabled(path4, pass, "export = <value>;", "export default <value>;"), path4.replaceWith(template.statement.ast`module.exports = ${path4.node.expression}`);
        }, TSTypeAssertion(path4) {
          path4.replaceWith(path4.node.expression);
        }, ["TSAsExpression" + (t.tsSatisfiesExpression ? "|TSSatisfiesExpression" : "")](path4) {
          let { node } = path4;
          do {
            node = node.expression;
          } while (t.isTSAsExpression(node) || t.isTSSatisfiesExpression != null && t.isTSSatisfiesExpression(node));
          path4.replaceWith(node);
        }, [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path4) {
          path4.replaceWith(path4.node.expression);
        }, CallExpression(path4) {
          path4.node.typeParameters = null;
        }, OptionalCallExpression(path4) {
          path4.node.typeParameters = null;
        }, NewExpression(path4) {
          path4.node.typeParameters = null;
        }, JSXOpeningElement(path4) {
          path4.node.typeParameters = null;
        }, TaggedTemplateExpression(path4) {
          path4.node.typeParameters = null;
        } } };
        function entityNameToExpr(node) {
          return t.isTSQualifiedName(node) ? t.memberExpression(entityNameToExpr(node.left), node.right) : node;
        }
        function visitPattern({ node }) {
          node.typeAnnotation && (node.typeAnnotation = null), t.isIdentifier(node) && node.optional && (node.optional = null);
        }
        function isImportTypeOnly({ binding, programPath, pragmaImportName, pragmaFragImportName }) {
          for (const path4 of binding.referencePaths)
            if (!isInType(path4))
              return false;
          if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName)
            return true;
          let sourceFileHasJsx = false;
          return programPath.traverse({ "JSXElement|JSXFragment"(path4) {
            sourceFileHasJsx = true, path4.stop();
          } }), !sourceFileHasJsx;
        }
      });
    }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/namespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path4, allowNamespaces) {
        if (path4.node.declare || path4.node.id.type === "StringLiteral")
          return void path4.remove();
        if (!allowNamespaces)
          throw path4.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
        const name = getFirstIdentifier(path4.node.id).name, value2 = handleNested(path4, path4.node);
        if (value2 === null) {
          const program = path4.findParent((p) => p.isProgram());
          (0, _globalTypes.registerGlobalType)(program.scope, name), path4.remove();
        } else
          path4.scope.hasOwnBinding(name) ? path4.replaceWith(value2) : path4.scope.registerDeclaration(path4.replaceWithMultiple([getDeclaration(name), value2])[0]);
      }, exports2.getFirstIdentifier = getFirstIdentifier;
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), _globalTypes = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/global-types.js");
      function getFirstIdentifier(node) {
        return _core.types.isIdentifier(node) ? node : getFirstIdentifier(node.left);
      }
      function getDeclaration(name) {
        return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
      }
      function getMemberExpression(name, itemName) {
        return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
      }
      function handleVariableDeclaration(node, name, hub) {
        if (node.kind !== "const")
          throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
        const { declarations } = node;
        if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
          for (const declarator of declarations)
            declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
          return [node];
        }
        const bindingIdentifiers = _core.types.getBindingIdentifiers(node), assignments = [];
        for (const idName in bindingIdentifiers)
          assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
        return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
      }
      function buildNestedAmbientModuleError(path4, node) {
        return path4.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
      }
      function handleNested(path4, node, parentExport) {
        const names = new Set, realName = node.id, name = path4.scope.generateUid(realName.name), body = node.body;
        let namespaceTopLevel;
        node.id;
        namespaceTopLevel = _core.types.isTSModuleBlock(body) ? body.body : [_core.types.exportNamedDeclaration(body)];
        let isEmpty = true;
        for (let i = 0;i < namespaceTopLevel.length; i++) {
          const subNode = namespaceTopLevel[i];
          switch (subNode.type) {
            case "TSModuleDeclaration": {
              if (!_core.types.isIdentifier(subNode.id))
                throw buildNestedAmbientModuleError(path4, subNode);
              const transformed = handleNested(path4, subNode);
              if (transformed !== null) {
                isEmpty = false;
                const moduleName = subNode.id.name;
                names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
              }
              continue;
            }
            case "TSEnumDeclaration":
            case "FunctionDeclaration":
            case "ClassDeclaration":
              isEmpty = false, names.add(subNode.id.name);
              continue;
            case "VariableDeclaration":
              isEmpty = false;
              for (const name2 in _core.types.getBindingIdentifiers(subNode))
                names.add(name2);
              continue;
            default:
              isEmpty && (isEmpty = _core.types.isTypeScript(subNode));
              continue;
            case "ExportNamedDeclaration":
          }
          if (!("declare" in subNode.declaration) || !subNode.declaration.declare)
            switch (subNode.declaration.type) {
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration": {
                isEmpty = false;
                const itemName = subNode.declaration.id.name;
                names.add(itemName), namespaceTopLevel.splice(i++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
                break;
              }
              case "VariableDeclaration": {
                isEmpty = false;
                const nodes = handleVariableDeclaration(subNode.declaration, name, path4.hub);
                namespaceTopLevel.splice(i, nodes.length, ...nodes), i += nodes.length - 1;
                break;
              }
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.declaration.id))
                  throw buildNestedAmbientModuleError(path4, subNode.declaration);
                const transformed = handleNested(path4, subNode.declaration, _core.types.identifier(name));
                if (transformed !== null) {
                  isEmpty = false;
                  const moduleName = subNode.declaration.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
                } else
                  namespaceTopLevel.splice(i, 1), i--;
              }
            }
        }
        if (isEmpty)
          return null;
        let fallthroughValue = _core.types.objectExpression([]);
        if (parentExport) {
          const memberExpr = _core.types.memberExpression(parentExport, realName);
          fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
        }
        return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
      }
    }, "./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true });
      var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), transformTypeScript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js");
      __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js");
      var transformModulesCommonJS = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), helperValidatorOption = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.25.9/node_modules/@babel/helper-validator-option/lib/index.js");
      function _interopDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      var transformTypeScript__default = _interopDefault(transformTypeScript), transformModulesCommonJS__default = _interopDefault(transformModulesCommonJS);
      const v = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
      var pluginRewriteTSImports = helperPluginUtils.declare(function({ types: t, template }) {
        function maybeReplace(source, path4) {
          source && (t.isStringLiteral(source) ? /[\\/]/.test(source.value) && (source.value = source.value.replace(/(\.[mc]?)ts$/, "$1js").replace(/\.tsx$/, ".js")) : path4.replaceWith(template.expression.ast`(${source} + "").replace(/([\\/].*\.[mc]?)tsx?$/, "$1js")`));
        }
        return { name: "preset-typescript/plugin-rewrite-ts-imports", visitor: { "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"(path4) {
          const node = path4.node;
          (t.isImportDeclaration(node) ? node.importKind : node.exportKind) === "value" && maybeReplace(node.source, path4.get("source"));
        }, CallExpression(path4) {
          t.isImport(path4.node.callee) && maybeReplace(path4.node.arguments[0], path4.get("arguments.0"));
        }, ImportExpression(path4) {
          maybeReplace(path4.node.source, path4.get("source"));
        } } };
      }), index = helperPluginUtils.declarePreset((api, opts) => {
        api.assertVersion(7);
        const { allExtensions, ignoreExtensions, allowNamespaces, disallowAmbiguousJSXLike, isTSX, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums, rewriteImportExtensions } = function(options = {}) {
          let { allowNamespaces: allowNamespaces2 = true, jsxPragma: jsxPragma2, onlyRemoveTypeImports: onlyRemoveTypeImports2 } = options;
          const TopLevelOptions_ignoreExtensions = "ignoreExtensions", TopLevelOptions_disallowAmbiguousJSXLike = "disallowAmbiguousJSXLike", TopLevelOptions_jsxPragmaFrag = "jsxPragmaFrag", TopLevelOptions_optimizeConstEnums = "optimizeConstEnums", TopLevelOptions_rewriteImportExtensions = "rewriteImportExtensions", TopLevelOptions_allExtensions = "allExtensions", TopLevelOptions_isTSX = "isTSX", jsxPragmaFrag2 = v.validateStringOption(TopLevelOptions_jsxPragmaFrag, options.jsxPragmaFrag, "React.Fragment");
          var allExtensions2 = v.validateBooleanOption(TopLevelOptions_allExtensions, options.allExtensions, false), isTSX2 = v.validateBooleanOption(TopLevelOptions_isTSX, options.isTSX, false);
          isTSX2 && v.invariant(allExtensions2, "isTSX:true requires allExtensions:true");
          const ignoreExtensions2 = v.validateBooleanOption(TopLevelOptions_ignoreExtensions, options.ignoreExtensions, false), disallowAmbiguousJSXLike2 = v.validateBooleanOption(TopLevelOptions_disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);
          disallowAmbiguousJSXLike2 && v.invariant(allExtensions2, "disallowAmbiguousJSXLike:true requires allExtensions:true");
          const normalized = { ignoreExtensions: ignoreExtensions2, allowNamespaces: allowNamespaces2, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma: jsxPragma2, jsxPragmaFrag: jsxPragmaFrag2, onlyRemoveTypeImports: onlyRemoveTypeImports2, optimizeConstEnums: v.validateBooleanOption(TopLevelOptions_optimizeConstEnums, options.optimizeConstEnums, false), rewriteImportExtensions: v.validateBooleanOption(TopLevelOptions_rewriteImportExtensions, options.rewriteImportExtensions, false) };
          return normalized.allExtensions = allExtensions2, normalized.isTSX = isTSX2, normalized;
        }(opts), pluginOptions = (disallowAmbiguousJSXLike2) => ({ allowDeclareFields: opts.allowDeclareFields, allowNamespaces, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums }), getPlugins = (isTSX2, disallowAmbiguousJSXLike2) => [[transformTypeScript__default.default, Object.assign({ isTSX: isTSX2 }, pluginOptions(disallowAmbiguousJSXLike2))]];
        return { plugins: rewriteImportExtensions ? [pluginRewriteTSImports] : [], overrides: allExtensions || ignoreExtensions ? [{ plugins: getPlugins(isTSX, disallowAmbiguousJSXLike) }] : [{ test: /\.ts$/, plugins: getPlugins(false, false) }, { test: /\.mts$/, sourceType: "module", plugins: getPlugins(false, true) }, { test: /\.cts$/, sourceType: "unambiguous", plugins: [[transformModulesCommonJS__default.default, { allowTopLevelThis: true }], [transformTypeScript__default.default, pluginOptions(true)]] }, { test: /\.tsx$/, plugins: getPlugins(true, false) }] };
      });
      exports2.default = index;
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function createTemplateBuilder(formatter, defaultOpts) {
        const templateFnCache = new WeakMap, templateAstCache = new WeakMap, cachedOpts = defaultOpts || (0, _options.validate)(null);
        return Object.assign((tpl, ...args) => {
          if (typeof tpl == "string") {
            if (args.length > 1)
              throw new Error("Unexpected extra params.");
            return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
          }
          if (Array.isArray(tpl)) {
            let builder = templateFnCache.get(tpl);
            return builder || (builder = (0, _literal.default)(formatter, tpl, cachedOpts), templateFnCache.set(tpl, builder)), extendedTrace(builder(args));
          }
          if (typeof tpl == "object" && tpl) {
            if (args.length > 0)
              throw new Error("Unexpected extra params.");
            return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
          }
          throw new Error("Unexpected template param " + typeof tpl);
        }, { ast: (tpl, ...args) => {
          if (typeof tpl == "string") {
            if (args.length > 1)
              throw new Error("Unexpected extra params.");
            return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
          }
          if (Array.isArray(tpl)) {
            let builder = templateAstCache.get(tpl);
            return builder || (builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)), templateAstCache.set(tpl, builder)), builder(args)();
          }
          throw new Error("Unexpected template param " + typeof tpl);
        } });
      };
      var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _string = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js"), _literal = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js");
      const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: false });
      function extendedTrace(fn) {
        let rootStack = "";
        try {
          throw new Error;
        } catch (error) {
          error.stack && (rootStack = error.stack.split(`
`).slice(3).join(`
`));
        }
        return (arg) => {
          try {
            return fn(arg);
          } catch (err) {
            throw err.stack += `
    =============
${rootStack}`, err;
          }
        };
      }
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = undefined;
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { assertExpressionStatement } = _t;
      function makeStatementFormatter(fn) {
        return { code: (str) => `/* @babel/template */;
${str}`, validate: () => {
        }, unwrap: (ast) => fn(ast.program.body.slice(1)) };
      }
      exports2.smart = makeStatementFormatter((body) => body.length > 1 ? body : body[0]), exports2.statements = makeStatementFormatter((body) => body), exports2.statement = makeStatementFormatter((body) => {
        if (body.length === 0)
          throw new Error("Found nothing to return.");
        if (body.length > 1)
          throw new Error("Found multiple statements but wanted one");
        return body[0];
      });
      const expression = exports2.expression = { code: (str) => `(
${str}
)`, validate: (ast) => {
        if (ast.program.body.length > 1)
          throw new Error("Found multiple statements but wanted one");
        if (expression.unwrap(ast).start === 0)
          throw new Error("Parse result included parens.");
      }, unwrap: ({ program }) => {
        const [stmt] = program.body;
        return assertExpressionStatement(stmt), stmt.expression;
      } };
      exports2.program = { code: (str) => str, validate: () => {
      }, unwrap: (ast) => ast.program };
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = exports2.default = undefined;
      var formatters = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/formatters.js"), _builder = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/builder.js");
      const smart = exports2.smart = (0, _builder.default)(formatters.smart), statement = exports2.statement = (0, _builder.default)(formatters.statement), statements = exports2.statements = (0, _builder.default)(formatters.statements), expression = exports2.expression = (0, _builder.default)(formatters.expression), program = exports2.program = (0, _builder.default)(formatters.program);
      exports2.default = Object.assign(smart.bind(undefined), { smart, statement, statements, expression, program, ast: smart.ast });
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/literal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, tpl, opts) {
        const { metadata, names } = function(formatter2, tpl2, opts2) {
          let prefix = "BABEL_TPL$";
          const raw = tpl2.join("");
          do {
            prefix = "$$" + prefix;
          } while (raw.includes(prefix));
          const { names: names2, code } = function(tpl3, prefix2) {
            const names3 = [];
            let code2 = tpl3[0];
            for (let i = 1;i < tpl3.length; i++) {
              const value2 = `${prefix2}${i - 1}`;
              names3.push(value2), code2 += value2 + tpl3[i];
            }
            return { names: names3, code: code2 };
          }(tpl2, prefix), metadata2 = (0, _parse.default)(formatter2, formatter2.code(code), { parser: opts2.parser, placeholderWhitelist: new Set(names2.concat(opts2.placeholderWhitelist ? Array.from(opts2.placeholderWhitelist) : [])), placeholderPattern: opts2.placeholderPattern, preserveComments: opts2.preserveComments, syntacticPlaceholders: opts2.syntacticPlaceholders });
          return { metadata: metadata2, names: names2 };
        }(formatter, tpl, opts);
        return (arg) => {
          const defaultReplacements = {};
          return arg.forEach((replacement, i) => {
            defaultReplacements[names[i]] = replacement;
          }), (arg2) => {
            const replacements = (0, _options.normalizeReplacements)(arg2);
            return replacements && Object.keys(replacements).forEach((key) => {
              if (hasOwnProperty.call(defaultReplacements, key))
                throw new Error("Unexpected replacement overlap.");
            }), formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
          };
        };
      };
      var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.merge = function(a, b) {
        const { placeholderWhitelist = a.placeholderWhitelist, placeholderPattern = a.placeholderPattern, preserveComments = a.preserveComments, syntacticPlaceholders = a.syntacticPlaceholders } = b;
        return { parser: Object.assign({}, a.parser, b.parser), placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders };
      }, exports2.normalizeReplacements = function(replacements) {
        if (Array.isArray(replacements))
          return replacements.reduce((acc, replacement, i) => (acc["$" + i] = replacement, acc), {});
        if (typeof replacements == "object" || replacements == null)
          return replacements || undefined;
        throw new Error("Template replacements must be an array, object, null, or undefined");
      }, exports2.validate = function(opts) {
        if (opts != null && typeof opts != "object")
          throw new Error("Unknown template options.");
        const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser = function(r, e) {
          if (r == null)
            return {};
          var t = {};
          for (var n in r)
            if ({}.hasOwnProperty.call(r, n)) {
              if (e.includes(n))
                continue;
              t[n] = r[n];
            }
          return t;
        }(_ref, _excluded);
        if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set))
          throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
        if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false)
          throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
        if (preserveComments != null && typeof preserveComments != "boolean")
          throw new Error("'.preserveComments' must be a boolean, null, or undefined");
        if (syntacticPlaceholders != null && typeof syntacticPlaceholders != "boolean")
          throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
        if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null))
          throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
        return { parser, placeholderWhitelist: placeholderWhitelist || undefined, placeholderPattern: placeholderPattern == null ? undefined : placeholderPattern, preserveComments: preserveComments == null ? undefined : preserveComments, syntacticPlaceholders: syntacticPlaceholders == null ? undefined : syntacticPlaceholders };
      };
      const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
        const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts, ast = function(code2, parserOpts, syntacticPlaceholders2) {
          const plugins = (parserOpts.plugins || []).slice();
          syntacticPlaceholders2 !== false && plugins.push("placeholders");
          parserOpts = Object.assign({ allowReturnOutsideFunction: true, allowSuperOutsideMethod: true, sourceType: "module" }, parserOpts, { plugins });
          try {
            return (0, _parser.parse)(code2, parserOpts);
          } catch (err) {
            const loc = err.loc;
            throw loc && (err.message += `
` + (0, _codeFrame.codeFrameColumns)(code2, { start: loc }), err.code = "BABEL_TEMPLATE_PARSE_ERROR"), err;
          }
        }(code, opts.parser, syntacticPlaceholders);
        removePropertiesDeep(ast, { preserveComments }), formatter.validate(ast);
        const state = { syntactic: { placeholders: [], placeholderNames: new Set }, legacy: { placeholders: [], placeholderNames: new Set }, placeholderWhitelist, placeholderPattern, syntacticPlaceholders };
        return traverse(ast, placeholderVisitorHandler, state), Object.assign({ ast }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _codeFrame = __webpack_require__2("./stubs/babel-codeframe.mjs");
      const { isCallExpression, isExpressionStatement, isFunction, isIdentifier, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement, isStringLiteral, removePropertiesDeep, traverse } = _t, PATTERN = /^[_$A-Z0-9]+$/;
      function placeholderVisitorHandler(node, ancestors, state) {
        var _state$placeholderWhi;
        let name, hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
        if (isPlaceholder(node)) {
          if (state.syntacticPlaceholders === false)
            throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
          name = node.name.name, hasSyntacticPlaceholders = true;
        } else {
          if (hasSyntacticPlaceholders || state.syntacticPlaceholders)
            return;
          if (isIdentifier(node) || isJSXIdentifier(node))
            name = node.name;
          else {
            if (!isStringLiteral(node))
              return;
            name = node.value;
          }
        }
        if (hasSyntacticPlaceholders && (state.placeholderPattern != null || state.placeholderWhitelist != null))
          throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
        if (!(hasSyntacticPlaceholders || state.placeholderPattern !== false && (state.placeholderPattern || PATTERN).test(name) || (_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name)))
          return;
        ancestors = ancestors.slice();
        const { node: parent, key } = ancestors[ancestors.length - 1];
        let type;
        isStringLiteral(node) || isPlaceholder(node, { expectedNode: "StringLiteral" }) ? type = "string" : isNewExpression(parent) && key === "arguments" || isCallExpression(parent) && key === "arguments" || isFunction(parent) && key === "params" ? type = "param" : isExpressionStatement(parent) && !isPlaceholder(node) ? (type = "statement", ancestors = ancestors.slice(0, -1)) : type = isStatement(node) && isPlaceholder(node) ? "statement" : "other";
        const { placeholders, placeholderNames } = hasSyntacticPlaceholders ? state.syntactic : state.legacy;
        placeholders.push({ name, type, resolve: (ast) => function(ast2, ancestors2) {
          let parent2 = ast2;
          for (let i = 0;i < ancestors2.length - 1; i++) {
            const { key: key3, index: index2 } = ancestors2[i];
            parent2 = index2 === undefined ? parent2[key3] : parent2[key3][index2];
          }
          const { key: key2, index } = ancestors2[ancestors2.length - 1];
          return { parent: parent2, key: key2, index };
        }(ast, ancestors), isDuplicate: placeholderNames.has(name) }), placeholderNames.add(name);
      }
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(metadata, replacements) {
        const ast = cloneNode(metadata.ast);
        replacements && (metadata.placeholders.forEach((placeholder) => {
          if (!hasOwnProperty.call(replacements, placeholder.name)) {
            const placeholderName = placeholder.name;
            throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
          }
        }), Object.keys(replacements).forEach((key) => {
          if (!metadata.placeholderNames.has(key))
            throw new Error(`Unknown substitution "${key}" given`);
        }));
        return metadata.placeholders.slice().reverse().forEach((placeholder) => {
          try {
            (function(placeholder2, ast2, replacement) {
              placeholder2.isDuplicate && (Array.isArray(replacement) ? replacement = replacement.map((node) => cloneNode(node)) : typeof replacement == "object" && (replacement = cloneNode(replacement)));
              const { parent, key, index } = placeholder2.resolve(ast2);
              if (placeholder2.type === "string") {
                if (typeof replacement == "string" && (replacement = stringLiteral(replacement)), !replacement || !isStringLiteral(replacement))
                  throw new Error("Expected string substitution");
              } else if (placeholder2.type === "statement")
                index === undefined ? replacement ? Array.isArray(replacement) ? replacement = blockStatement(replacement) : typeof replacement == "string" ? replacement = expressionStatement(identifier(replacement)) : isStatement(replacement) || (replacement = expressionStatement(replacement)) : replacement = emptyStatement() : replacement && !Array.isArray(replacement) && (typeof replacement == "string" && (replacement = identifier(replacement)), isStatement(replacement) || (replacement = expressionStatement(replacement)));
              else if (placeholder2.type === "param") {
                if (typeof replacement == "string" && (replacement = identifier(replacement)), index === undefined)
                  throw new Error("Assertion failure.");
              } else if (typeof replacement == "string" && (replacement = identifier(replacement)), Array.isArray(replacement))
                throw new Error("Cannot replace single expression with an array.");
              function set(parent2, key2, value2) {
                const node = parent2[key2];
                parent2[key2] = value2, node.type !== "Identifier" && node.type !== "Placeholder" || (node.typeAnnotation && (value2.typeAnnotation = node.typeAnnotation), node.optional && (value2.optional = node.optional), node.decorators && (value2.decorators = node.decorators));
              }
              if (index === undefined)
                validate(parent, key, replacement), set(parent, key, replacement);
              else {
                const items = parent[key].slice();
                placeholder2.type === "statement" || placeholder2.type === "param" ? replacement == null ? items.splice(index, 1) : Array.isArray(replacement) ? items.splice(index, 1, ...replacement) : set(items, index, replacement) : set(items, index, replacement), validate(parent, key, items), parent[key] = items;
              }
            })(placeholder, ast, replacements && replacements[placeholder.name] || null);
          } catch (e) {
            throw e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`, e;
          }
        }), ast;
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { blockStatement, cloneNode, emptyStatement, expressionStatement, identifier, isStatement, isStringLiteral, stringLiteral, validate } = _t;
    }, "./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/string.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
        let metadata;
        return code = formatter.code(code), (arg) => {
          const replacements = (0, _options.normalizeReplacements)(arg);
          return metadata || (metadata = (0, _parse.default)(formatter, code, opts)), formatter.unwrap((0, _populate.default)(metadata, replacements));
        };
      };
      var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/populate.js");
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.clear = function() {
        clearPath(), clearScope();
      }, exports2.clearPath = clearPath, exports2.clearScope = clearScope, exports2.getCachedPaths = function(hub, parent) {
        var _pathsCache$get;
        return (_pathsCache$get = pathsCache.get(nullHub)) == null ? undefined : _pathsCache$get.get(parent);
      }, exports2.getOrCreateCachedPaths = function(hub, parent) {
        let parents = pathsCache.get(nullHub);
        parents || pathsCache.set(nullHub, parents = new WeakMap);
        let paths = parents.get(parent);
        paths || parents.set(parent, paths = new Map);
        return paths;
      }, exports2.scope = exports2.path = undefined;
      let pathsCache = exports2.path = new WeakMap, scope = exports2.scope = new WeakMap;
      function clearPath() {
        exports2.path = pathsCache = new WeakMap;
      }
      function clearScope() {
        exports2.scope = scope = new WeakMap;
      }
      const nullHub = Object.freeze({});
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
      const { VISITOR_KEYS } = _t;
      exports2.default = class {
        constructor(scope, opts, state, parentPath) {
          this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
        }
        shouldVisit(node) {
          const opts = this.opts;
          if (opts.enter || opts.exit)
            return true;
          if (opts[node.type])
            return true;
          const keys = VISITOR_KEYS[node.type];
          if (keys == null || !keys.length)
            return false;
          for (const key of keys)
            if (node[key])
              return true;
          return false;
        }
        create(node, container, key, listKey) {
          return _index.default.get({ parentPath: this.parentPath, parent: node, container, key, listKey });
        }
        maybeQueue(path4, notPriority) {
          this.queue && (notPriority ? this.queue.push(path4) : this.priorityQueue.push(path4));
        }
        visitMultiple(container, parent, listKey) {
          if (container.length === 0)
            return false;
          const queue = [];
          for (let key = 0;key < container.length; key++) {
            const node = container[key];
            node && this.shouldVisit(node) && queue.push(this.create(parent, container, key, listKey));
          }
          return this.visitQueue(queue);
        }
        visitSingle(node, key) {
          return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
        }
        visitQueue(queue) {
          this.queue = queue, this.priorityQueue = [];
          const visited = new WeakSet;
          let stop = false, visitIndex = 0;
          for (;visitIndex < queue.length; ) {
            const path4 = queue[visitIndex];
            if (visitIndex++, _context.resync.call(path4), path4.contexts.length !== 0 && path4.contexts[path4.contexts.length - 1] === this || _context.pushContext.call(path4, this), path4.key === null)
              continue;
            const { node } = path4;
            if (!visited.has(node)) {
              if (node && visited.add(node), path4.visit()) {
                stop = true;
                break;
              }
              if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue, stop))
                break;
            }
          }
          for (let i = 0;i < visitIndex; i++)
            _context.popContext.call(queue[i]);
          return this.queue = null, stop;
        }
        visit(node, key) {
          const nodes = node[key];
          return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
        }
      };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      exports2.default = class {
        getCode() {
        }
        getScope() {
        }
        addHelper() {
          throw new Error("Helpers are not supported by the default hub.");
        }
        buildError(node, msg, Error2 = TypeError) {
          return new Error2(msg);
        }
      };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "Hub", { enumerable: true, get: function() {
        return _hub.default;
      } }), Object.defineProperty(exports2, "NodePath", { enumerable: true, get: function() {
        return _index.default;
      } }), Object.defineProperty(exports2, "Scope", { enumerable: true, get: function() {
        return _index2.default;
      } }), exports2.visitors = exports2.default = undefined, __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
      var visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
      exports2.visitors = visitors;
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/hub.js");
      const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
      function traverse(parent, opts = {}, scope, state, parentPath, visitSelf) {
        if (parent) {
          if (!opts.noScope && !scope && parent.type !== "Program" && parent.type !== "File")
            throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
          if (!parentPath && visitSelf)
            throw new Error("visitSelf can only be used when providing a NodePath.");
          VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf));
        }
      }
      exports2.default = traverse;
      function hasDenylistedType(path4, state) {
        path4.node.type === state.type && (state.has = true, path4.stop());
      }
      traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
        traverseFast(node, enter);
      }, traverse.node = function(node, opts, scope, state, path4, skipKeys) {
        (0, _traverseNode.traverseNode)(node, opts, scope, state, path4, skipKeys);
      }, traverse.clearNode = function(node, opts) {
        removeProperties(node, opts);
      }, traverse.removeProperties = function(tree, opts) {
        return traverseFast(tree, traverse.clearNode, opts), tree;
      }, traverse.hasType = function(tree, type, denylistTypes) {
        if (denylistTypes != null && denylistTypes.includes(tree.type))
          return false;
        if (tree.type === type)
          return true;
        const state = { has: false, type };
        return traverse(tree, { noScope: true, denylist: denylistTypes, enter: hasDenylistedType }, null, state), state.has;
      }, traverse.cache = cache;
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.find = function(callback) {
        let path4 = this;
        do {
          if (callback(path4))
            return path4;
        } while (path4 = path4.parentPath);
        return null;
      }, exports2.findParent = function(callback) {
        let path4 = this;
        for (;path4 = path4.parentPath; )
          if (callback(path4))
            return path4;
        return null;
      }, exports2.getAncestry = function() {
        let path4 = this;
        const paths = [];
        do {
          paths.push(path4);
        } while (path4 = path4.parentPath);
        return paths;
      }, exports2.getDeepestCommonAncestorFrom = function(paths, filter) {
        if (!paths.length)
          return this;
        if (paths.length === 1)
          return paths[0];
        let lastCommonIndex, lastCommon, minDepth = 1 / 0;
        const ancestries = paths.map((path4) => {
          const ancestry = [];
          do {
            ancestry.unshift(path4);
          } while ((path4 = path4.parentPath) && path4 !== this);
          return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
        }), first = ancestries[0];
        depthLoop:
          for (let i = 0;i < minDepth; i++) {
            const shouldMatch = first[i];
            for (const ancestry of ancestries)
              if (ancestry[i] !== shouldMatch)
                break depthLoop;
            lastCommonIndex = i, lastCommon = shouldMatch;
          }
        if (lastCommon)
          return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
        throw new Error("Couldn't find intersection");
      }, exports2.getEarliestCommonAncestorFrom = function(paths) {
        return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
          let earliest;
          const keys = VISITOR_KEYS[deepest.type];
          for (const ancestry of ancestries) {
            const path4 = ancestry[i + 1];
            if (!earliest) {
              earliest = path4;
              continue;
            }
            if (path4.listKey && earliest.listKey === path4.listKey && path4.key < earliest.key) {
              earliest = path4;
              continue;
            }
            keys.indexOf(earliest.parentKey) > keys.indexOf(path4.parentKey) && (earliest = path4);
          }
          return earliest;
        });
      }, exports2.getFunctionParent = function() {
        return this.findParent((p) => p.isFunction());
      }, exports2.getStatementParent = function() {
        let path4 = this;
        do {
          if (!path4.parentPath || Array.isArray(path4.container) && path4.isStatement())
            break;
          path4 = path4.parentPath;
        } while (path4);
        if (path4 && (path4.isProgram() || path4.isFile()))
          throw new Error("File/Program node, we can't possibly find a statement parent to this");
        return path4;
      }, exports2.inType = function(...candidateTypes) {
        let path4 = this;
        for (;path4; ) {
          for (const type of candidateTypes)
            if (path4.node.type === type)
              return true;
          path4 = path4.parentPath;
        }
        return false;
      }, exports2.isAncestor = function(maybeDescendant) {
        return maybeDescendant.isDescendant(this);
      }, exports2.isDescendant = function(maybeAncestor) {
        return !!this.findParent((parent) => parent === maybeAncestor);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { VISITOR_KEYS } = _t;
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addComment = function(type, content, line) {
        _addComment(this.node, type, content, line);
      }, exports2.addComments = function(type, comments) {
        _addComments(this.node, type, comments);
      }, exports2.shareCommentsWithSiblings = function() {
        if (typeof this.key == "string")
          return;
        const node = this.node;
        if (!node)
          return;
        const { trailingComments: trailing, leadingComments: leading } = node;
        if (!trailing && !leading)
          return;
        const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
        hasPrev && (leading && prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments)), trailing && !hasNext && prev.addComments("trailing", trailing));
        hasNext && (trailing && next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments)), leading && !hasPrev && next.addComments("leading", leading));
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { addComment: _addComment, addComments: _addComments } = _t;
      function removeIfExisting(list, toRemove) {
        if (toRemove == null || !toRemove.length)
          return list;
        const set = new Set(toRemove);
        return list.filter((el) => !set.has(el));
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2._call = _call, exports2._getQueueContexts = function() {
        let path4 = this, contexts = this.contexts;
        for (;!contexts.length && (path4 = path4.parentPath, path4); )
          contexts = path4.contexts;
        return contexts;
      }, exports2._resyncKey = _resyncKey, exports2._resyncList = _resyncList, exports2._resyncParent = _resyncParent, exports2._resyncRemoved = function() {
        this.key != null && this.container && this.container[this.key] === this.node || _removal._markRemoved.call(this);
      }, exports2.call = call, exports2.isDenylisted = isDenylisted, exports2.popContext = function() {
        this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(undefined);
      }, exports2.pushContext = function(context) {
        this.contexts.push(context), this.setContext(context);
      }, exports2.requeue = function(pathToQueue = this) {
        if (pathToQueue.removed)
          return;
        const contexts = this.contexts;
        for (const context of contexts)
          context.maybeQueue(pathToQueue);
      }, exports2.requeueComputedKeyAndDecorators = function() {
        const { context, node } = this;
        !t.isPrivate(node) && node.computed && context.maybeQueue(this.get("key"));
        if (node.decorators)
          for (const decorator of this.get("decorators"))
            context.maybeQueue(decorator);
      }, exports2.resync = function() {
        if (this.removed)
          return;
        _resyncParent.call(this), _resyncList.call(this), _resyncKey.call(this);
      }, exports2.setContext = function(context) {
        this.skipKeys != null && (this.skipKeys = {});
        this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
        return setScope.call(this), this;
      }, exports2.setKey = setKey, exports2.setScope = setScope, exports2.setup = function(parentPath, container, listKey, key) {
        this.listKey = listKey, this.container = container, this.parentPath = parentPath || this.parentPath, setKey.call(this, key);
      }, exports2.skip = function() {
        this.shouldSkip = true;
      }, exports2.skipKey = function(key) {
        this.skipKeys == null && (this.skipKeys = {});
        this.skipKeys[key] = true;
      }, exports2.stop = function() {
        this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
      }, exports2.visit = function() {
        var _this$opts$shouldSkip, _this$opts;
        if (!this.node)
          return false;
        if (this.isDenylisted())
          return false;
        if ((_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) != null && _this$opts$shouldSkip.call(_this$opts, this))
          return false;
        const currentContext = this.context;
        if (this.shouldSkip || call.call(this, "enter"))
          return this.debug("Skip..."), this.shouldStop;
        return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), call.call(this, "exit"), this.shouldStop;
      };
      var _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      function call(key) {
        const opts = this.opts;
        return this.debug(key), !(!this.node || !_call.call(this, opts[key])) || !!this.node && _call.call(this, (_opts$this$node$type = opts[this.node.type]) == null ? undefined : _opts$this$node$type[key]);
        var _opts$this$node$type;
      }
      function _call(fns) {
        if (!fns)
          return false;
        for (const fn of fns) {
          if (!fn)
            continue;
          const node = this.node;
          if (!node)
            return true;
          const ret = fn.call(this.state, this, this.state);
          if (ret && typeof ret == "object" && typeof ret.then == "function")
            throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
          if (ret)
            throw new Error(`Unexpected return value from visitor method ${fn}`);
          if (this.node !== node)
            return true;
          if (this._traverseFlags > 0)
            return true;
        }
        return false;
      }
      function isDenylisted() {
        var _this$opts$denylist;
        const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
        return denylist == null ? undefined : denylist.includes(this.node.type);
      }
      function restoreContext(path4, context) {
        path4.context !== context && (path4.context = context, path4.state = context.state, path4.opts = context.opts);
      }
      function setScope() {
        var _this$opts2, _this$scope;
        if ((_this$opts2 = this.opts) != null && _this$opts2.noScope)
          return;
        let target, path4 = this.parentPath;
        for (((this.key === "key" || this.listKey === "decorators") && path4.isMethod() || this.key === "discriminant" && path4.isSwitchStatement()) && (path4 = path4.parentPath);path4 && !target; ) {
          var _path$opts;
          if ((_path$opts = path4.opts) != null && _path$opts.noScope)
            return;
          target = path4.scope, path4 = path4.parentPath;
        }
        this.scope = this.getScope(target), (_this$scope = this.scope) == null || _this$scope.init();
      }
      function _resyncParent() {
        this.parentPath && (this.parent = this.parentPath.node);
      }
      function _resyncKey() {
        if (this.container && this.node !== this.container[this.key]) {
          if (Array.isArray(this.container)) {
            for (let i = 0;i < this.container.length; i++)
              if (this.container[i] === this.node)
                return void setKey.call(this, i);
          } else
            for (const key of Object.keys(this.container))
              if (this.container[key] === this.node)
                return void setKey.call(this, key);
          this.key = null;
        }
      }
      function _resyncList() {
        if (!this.parent || !this.inList)
          return;
        const newContainer = this.parent[this.listKey];
        this.container !== newContainer && (this.container = newContainer || null);
      }
      function setKey(key) {
        var _this$node;
        this.key = key, this.node = this.container[this.key], this.type = (_this$node = this.node) == null ? undefined : _this$node.type;
      }
      exports2.isBlacklisted = isDenylisted;
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.arrowFunctionToExpression = function({ allowInsertArrow = true, allowInsertArrowWithRest = allowInsertArrow, noNewArrows = !((_arguments$) => (_arguments$ = arguments[0]) == null ? undefined : _arguments$.specCompliant)() } = {}) {
        if (!this.isArrowFunctionExpression())
          throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
        let self = this;
        var _self$ensureFunctionN;
        noNewArrows || (self = (_self$ensureFunctionN = self.ensureFunctionName(false)) != null ? _self$ensureFunctionN : self);
        const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(self, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
        if (fn.ensureBlock(), function(path4, type) {
          path4.node.type = type;
        }(fn, "FunctionExpression"), !noNewArrows) {
          const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
          return checkBinding && fn.parentPath.scope.push({ id: checkBinding, init: objectExpression([]) }), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression(fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
        }
        return fn;
      }, exports2.ensureBlock = function() {
        const body = this.get("body"), bodyNode = body.node;
        if (Array.isArray(body))
          throw new Error("Can't convert array path to a block statement");
        if (!bodyNode)
          throw new Error("Can't convert node without a body");
        if (body.isBlockStatement())
          return bodyNode;
        const statements = [];
        let key, listKey, stringPath = "body";
        body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
        this.node.body = blockStatement(statements);
        const parentPath = this.get(stringPath);
        return _context.setup.call(body, parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
      }, exports2.ensureFunctionName = function(supportUnicodeId) {
        if (this.node.id)
          return this;
        const res = getFunctionName(this.node, this.parent);
        if (res == null)
          return this;
        let { name } = res;
        if (!supportUnicodeId && /[\uD800-\uDFFF]/.test(name))
          return null;
        if (name.startsWith("get ") || name.startsWith("set "))
          return null;
        name = toBindingIdentifierName(name.replace(/[/ ]/g, "_"));
        const id = identifier(name);
        inherits(id, res.originalNode);
        const state = { needsRename: false, name }, { scope } = this, binding = scope.getOwnBinding(name);
        binding ? binding.kind === "param" && (state.needsRename = true) : (scope.parent.hasBinding(name) || scope.hasGlobal(name)) && this.traverse(refersOuterBindingVisitor, state);
        if (!state.needsRename)
          return this.node.id = id, scope.getProgramParent().references[id.name] = true, this;
        if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name))
          return scope.rename(id.name), this.node.id = id, scope.getProgramParent().references[id.name] = true, this;
        if (!isFunction(this.node))
          return null;
        const key = scope.generateUidIdentifier(id.name), params = [];
        for (let i = 0, len = function(node) {
          const count = node.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
          return count === -1 ? node.params.length : count;
        }(this.node);i < len; i++)
          params.push(scope.generateUidIdentifier("x"));
        const call = _template.default.expression.ast`
    (function (${key}) {
      function ${id}(${params}) {
        return ${cloneNode(key)}.apply(this, arguments);
      }

      ${cloneNode(id)}.toString = function () {
        return ${cloneNode(key)}.toString();
      }

      return ${cloneNode(id)};
    })(${toExpression(this.node)})
  `;
        return this.replaceWith(call)[0].get("arguments.0");
      }, exports2.splitExportDeclaration = function() {
        if (!this.isExportDeclaration() || this.isExportAllDeclaration())
          throw new Error("Only default and named export declarations can be split.");
        if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0)
          throw new Error("It doesn't make sense to split exported specifiers.");
        const declaration = this.get("declaration");
        if (this.isExportDefaultDeclaration()) {
          const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration(), exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression(), scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
          let id = declaration.node.id, needBindingRegistration = false;
          id ? exportExpr && scope.hasBinding(id.name) && (needBindingRegistration = true, id = scope.generateUidIdentifier(id.name)) : (needBindingRegistration = true, id = scope.generateUidIdentifier("default"), (standaloneDeclaration || exportExpr) && (declaration.node.id = cloneNode(id)));
          const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration.node)]), updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
          return this.insertAfter(updatedExportDeclaration), this.replaceWith(updatedDeclaration), needBindingRegistration && scope.registerDeclaration(this), this;
        }
        if (this.get("specifiers").length > 0)
          throw new Error("It doesn't make sense to split exported specifiers.");
        const bindingIdentifiers = declaration.getOuterBindingIdentifiers(), specifiers = Object.keys(bindingIdentifiers).map((name) => exportSpecifier(identifier(name), identifier(name))), aliasDeclar = exportNamedDeclaration(null, specifiers);
        return this.insertAfter(aliasDeclar), this.replaceWith(declaration.node), this;
      }, exports2.toComputedKey = function() {
        let key;
        if (this.isMemberExpression())
          key = this.node.property;
        else {
          if (!this.isProperty() && !this.isMethod())
            throw new ReferenceError("todo");
          key = this.node.key;
        }
        this.node.computed || isIdentifier(key) && (key = stringLiteral(key.name));
        return key;
      }, exports2.unwrapFunctionEnvironment = function() {
        if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration())
          throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
        hoistFunctionEnvironment(this);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
      const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression, toBindingIdentifierName, isFunction, isAssignmentPattern, isRestElement, getFunctionName, cloneNode, variableDeclaration, variableDeclarator, exportNamedDeclaration, exportSpecifier, inherits } = _t;
      exports2.arrowFunctionToShadowed = function() {
        this.isArrowFunctionExpression() && this.arrowFunctionToExpression();
      };
      const getSuperCallsVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { allSuperCalls }) {
        child.get("callee").isSuper() && allSuperCalls.push(child);
      } });
      function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
        let arrowParent, thisEnvFn = fnPath.findParent((p) => p.isArrowFunctionExpression() ? (arrowParent != null || (arrowParent = p), false) : p.isFunction() || p.isProgram() || p.isClassProperty({ static: false }) || p.isClassPrivateProperty({ static: false }));
        const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
        if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty())
          if (arrowParent)
            thisEnvFn = arrowParent;
          else {
            if (!allowInsertArrow)
              throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
            fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
          }
        const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath2) {
          const thisPaths2 = [], argumentsPaths2 = [], newTargetPaths2 = [], superProps2 = [], superCalls2 = [];
          return fnPath2.traverse(getScopeInformationVisitor, { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 }), { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 };
        }(fnPath);
        if (inConstructor && superCalls.length > 0) {
          if (!allowInsertArrow)
            throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
          if (!allowInsertArrowWithRest)
            throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
          const allSuperCalls = [];
          thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
          const superBinding = function(thisEnvFn2) {
            return getBinding(thisEnvFn2, "supercall", () => {
              const argsBinding = thisEnvFn2.scope.generateUidIdentifier("args");
              return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
            });
          }(thisEnvFn);
          allSuperCalls.forEach((superCall) => {
            const callee = identifier(superBinding);
            callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
          });
        }
        if (argumentsPaths.length > 0) {
          const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
            const args = () => identifier("arguments");
            return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
          });
          argumentsPaths.forEach((argumentsChild) => {
            const argsRef = identifier(argumentsBinding);
            argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
          });
        }
        if (newTargetPaths.length > 0) {
          const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
          newTargetPaths.forEach((targetChild) => {
            const targetRef = identifier(newTargetBinding);
            targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
          });
        }
        if (superProps.length > 0) {
          if (!allowInsertArrow)
            throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
          superProps.reduce((acc, superProp) => acc.concat(function(superProp2) {
            if (superProp2.parentPath.isAssignmentExpression() && superProp2.parentPath.node.operator !== "=") {
              const assignmentPath = superProp2.parentPath, op = assignmentPath.node.operator.slice(0, -1), value2 = assignmentPath.node.right, isLogicalAssignment = function(op2) {
                return LOGICAL_OPERATORS.includes(op2);
              }(op);
              if (superProp2.node.computed) {
                const tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), object = superProp2.node.object, property = superProp2.node.property;
                assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value2));
              } else {
                const object = superProp2.node.object, property = superProp2.node.property;
                assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value2));
              }
              return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
            }
            if (superProp2.parentPath.isUpdateExpression()) {
              const updateExpr = superProp2.parentPath, tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp2.node.computed ? superProp2.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp2.node.object, computedKey ? assignmentExpression("=", computedKey, superProp2.node.property) : superProp2.node.property, superProp2.node.computed)), assignmentExpression("=", memberExpression(superProp2.node.object, computedKey ? identifier(computedKey.name) : superProp2.node.property, superProp2.node.computed), binaryExpression(superProp2.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
              superProp2.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
              return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
            }
            return [superProp2];
            function rightExpression(op, left, right) {
              return op === "=" ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
            }
          }(superProp)), []).forEach((superProp) => {
            const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), isTaggedTemplate = superParentPath.isTaggedTemplateExpression({ tag: superProp.node }), superBinding = function(thisEnvFn2, isAssignment2, propName) {
              const op = isAssignment2 ? "set" : "get";
              return getBinding(thisEnvFn2, `superprop_${op}:${propName || ""}`, () => {
                const argsList = [];
                let fnBody;
                if (propName)
                  fnBody = memberExpression(_super(), identifier(propName));
                else {
                  const method = thisEnvFn2.scope.generateUidIdentifier("prop");
                  argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), true);
                }
                if (isAssignment2) {
                  const valueIdent = thisEnvFn2.scope.generateUidIdentifier("value");
                  argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
                }
                return arrowFunctionExpression(argsList, fnBody);
              });
            }(thisEnvFn, isAssignment, key), args = [];
            if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
              const value2 = superParentPath.node.right;
              args.push(value2);
            }
            const call = callExpression(identifier(superBinding), args);
            isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : isTaggedTemplate ? (superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()])), thisPaths.push(superProp.get("arguments.0"))) : superProp.replaceWith(call);
          });
        }
        let thisBinding;
        return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn2, inConstructor2) {
          return getBinding(thisEnvFn2, "this", (thisBinding2) => {
            if (!inConstructor2 || !hasSuperClass(thisEnvFn2))
              return thisExpression();
            thisEnvFn2.traverse(assignSuperThisVisitor, { supers: new WeakSet, thisBinding: thisBinding2 });
          });
        }(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
          const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
          thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
        }), noNewArrows || (thisBinding = null))), { thisBinding, fnPath };
      }
      function hasSuperClass(thisEnvFn) {
        return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
      }
      const assignSuperThisVisitor = (0, _visitors.environmentVisitor)({ CallExpression(child, { supers, thisBinding }) {
        child.get("callee").isSuper() && (supers.has(child.node) || (supers.add(child.node), child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
      } });
      function getBinding(thisEnvFn, key, init) {
        const cacheKey = "binding:" + key;
        let data = thisEnvFn.getData(cacheKey);
        if (!data) {
          const id = thisEnvFn.scope.generateUidIdentifier(key);
          data = id.name, thisEnvFn.setData(cacheKey, data), thisEnvFn.scope.push({ id, init: init(data) });
        }
        return data;
      }
      const getScopeInformationVisitor = (0, _visitors.environmentVisitor)({ ThisExpression(child, { thisPaths }) {
        thisPaths.push(child);
      }, JSXIdentifier(child, { thisPaths }) {
        child.node.name === "this" && (child.parentPath.isJSXMemberExpression({ object: child.node }) || child.parentPath.isJSXOpeningElement({ name: child.node })) && thisPaths.push(child);
      }, CallExpression(child, { superCalls }) {
        child.get("callee").isSuper() && superCalls.push(child);
      }, MemberExpression(child, { superProps }) {
        child.get("object").isSuper() && superProps.push(child);
      }, Identifier(child, { argumentsPaths }) {
        if (!child.isReferencedIdentifier({ name: "arguments" }))
          return;
        let curr = child.scope;
        do {
          if (curr.hasOwnBinding("arguments"))
            return void curr.rename("arguments");
          if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression())
            break;
        } while (curr = curr.parent);
        argumentsPaths.push(child);
      }, MetaProperty(child, { newTargetPaths }) {
        child.get("meta").isIdentifier({ name: "new" }) && child.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child);
      } });
      const refersOuterBindingVisitor = { "ReferencedIdentifier|BindingIdentifier"(path4, state) {
        path4.node.name === state.name && (state.needsRename = true, path4.stop());
      }, Scope(path4, state) {
        path4.scope.hasOwnBinding(state.name) && path4.skip();
      } };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.evaluate = function() {
        const state = { confident: true, deoptPath: null, seen: new Map };
        let value2 = evaluateCached(this, state);
        state.confident || (value2 = undefined);
        return { confident: state.confident, deopt: state.deoptPath, value: value2 };
      }, exports2.evaluateTruthy = function() {
        const res = this.evaluate();
        if (res.confident)
          return !!res.value;
      };
      const VALID_OBJECT_CALLEES = ["Number", "String", "Math"], VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null], INVALID_METHODS = ["random"];
      function isValidObjectCallee(val) {
        return VALID_OBJECT_CALLEES.includes(val);
      }
      function deopt(path4, state) {
        state.confident && (state.deoptPath = path4, state.confident = false);
      }
      const Globals = new Map([["undefined", undefined], ["Infinity", 1 / 0], ["NaN", NaN]]);
      function evaluateCached(path4, state) {
        const { node } = path4, { seen } = state;
        if (seen.has(node)) {
          const existing = seen.get(node);
          return existing.resolved ? existing.value : void deopt(path4, state);
        }
        {
          const item = { resolved: false };
          seen.set(node, item);
          const val = function(path22, state2) {
            if (!state2.confident)
              return;
            if (path22.isSequenceExpression()) {
              const exprs = path22.get("expressions");
              return evaluateCached(exprs[exprs.length - 1], state2);
            }
            if (path22.isStringLiteral() || path22.isNumericLiteral() || path22.isBooleanLiteral())
              return path22.node.value;
            if (path22.isNullLiteral())
              return null;
            if (path22.isTemplateLiteral())
              return evaluateQuasis(path22, path22.node.quasis, state2);
            if (path22.isTaggedTemplateExpression() && path22.get("tag").isMemberExpression()) {
              const object = path22.get("tag.object"), { node: { name } } = object, property = path22.get("tag.property");
              if (object.isIdentifier() && name === "String" && !path22.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw")
                return evaluateQuasis(path22, path22.node.quasi.quasis, state2, true);
            }
            if (path22.isConditionalExpression()) {
              const testResult = evaluateCached(path22.get("test"), state2);
              if (!state2.confident)
                return;
              return evaluateCached(testResult ? path22.get("consequent") : path22.get("alternate"), state2);
            }
            if (path22.isExpressionWrapper())
              return evaluateCached(path22.get("expression"), state2);
            if (path22.isMemberExpression() && !path22.parentPath.isCallExpression({ callee: path22.node })) {
              const property = path22.get("property"), object = path22.get("object");
              if (object.isLiteral()) {
                const value2 = object.node.value, type = typeof value2;
                let key = null;
                if (path22.node.computed) {
                  if (key = evaluateCached(property, state2), !state2.confident)
                    return;
                } else
                  property.isIdentifier() && (key = property.node.name);
                if (!(type !== "number" && type !== "string" || key == null || typeof key != "number" && typeof key != "string"))
                  return value2[key];
              }
            }
            if (path22.isReferencedIdentifier()) {
              const binding = path22.scope.getBinding(path22.node.name);
              if (binding) {
                if (binding.constantViolations.length > 0 || path22.node.start < binding.path.node.end)
                  return void deopt(binding.path, state2);
                if (binding.hasValue)
                  return binding.value;
              }
              const name = path22.node.name;
              if (Globals.has(name))
                return binding ? void deopt(binding.path, state2) : Globals.get(name);
              const resolved = path22.resolve();
              return resolved === path22 ? void deopt(path22, state2) : evaluateCached(resolved, state2);
            }
            if (path22.isUnaryExpression({ prefix: true })) {
              if (path22.node.operator === "void")
                return;
              const argument = path22.get("argument");
              if (path22.node.operator === "typeof" && (argument.isFunction() || argument.isClass()))
                return "function";
              const arg = evaluateCached(argument, state2);
              if (!state2.confident)
                return;
              switch (path22.node.operator) {
                case "!":
                  return !arg;
                case "+":
                  return +arg;
                case "-":
                  return -arg;
                case "~":
                  return ~arg;
                case "typeof":
                  return typeof arg;
              }
            }
            if (path22.isArrayExpression()) {
              const arr = [], elems = path22.get("elements");
              for (const elem of elems) {
                const elemValue = elem.evaluate();
                if (!elemValue.confident)
                  return void deopt(elemValue.deopt, state2);
                arr.push(elemValue.value);
              }
              return arr;
            }
            if (path22.isObjectExpression()) {
              const obj = {}, props = path22.get("properties");
              for (const prop of props) {
                if (prop.isObjectMethod() || prop.isSpreadElement())
                  return void deopt(prop, state2);
                const keyPath = prop.get("key");
                let key;
                if (prop.node.computed) {
                  if (key = keyPath.evaluate(), !key.confident)
                    return void deopt(key.deopt, state2);
                  key = key.value;
                } else
                  key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
                let value2 = prop.get("value").evaluate();
                if (!value2.confident)
                  return void deopt(value2.deopt, state2);
                value2 = value2.value, obj[key] = value2;
              }
              return obj;
            }
            if (path22.isLogicalExpression()) {
              const wasConfident = state2.confident, left = evaluateCached(path22.get("left"), state2), leftConfident = state2.confident;
              state2.confident = wasConfident;
              const right = evaluateCached(path22.get("right"), state2), rightConfident = state2.confident;
              switch (path22.node.operator) {
                case "||":
                  if (state2.confident = leftConfident && (!!left || rightConfident), !state2.confident)
                    return;
                  return left || right;
                case "&&":
                  if (state2.confident = leftConfident && (!left || rightConfident), !state2.confident)
                    return;
                  return left && right;
                case "??":
                  if (state2.confident = leftConfident && (left != null || rightConfident), !state2.confident)
                    return;
                  return left != null ? left : right;
              }
            }
            if (path22.isBinaryExpression()) {
              const left = evaluateCached(path22.get("left"), state2);
              if (!state2.confident)
                return;
              const right = evaluateCached(path22.get("right"), state2);
              if (!state2.confident)
                return;
              switch (path22.node.operator) {
                case "-":
                  return left - right;
                case "+":
                  return left + right;
                case "/":
                  return left / right;
                case "*":
                  return left * right;
                case "%":
                  return left % right;
                case "**":
                  return Math.pow(left, right);
                case "<":
                  return left < right;
                case ">":
                  return left > right;
                case "<=":
                  return left <= right;
                case ">=":
                  return left >= right;
                case "==":
                  return left == right;
                case "!=":
                  return left != right;
                case "===":
                  return left === right;
                case "!==":
                  return left !== right;
                case "|":
                  return left | right;
                case "&":
                  return left & right;
                case "^":
                  return left ^ right;
                case "<<":
                  return left << right;
                case ">>":
                  return left >> right;
                case ">>>":
                  return left >>> right;
              }
            }
            if (path22.isCallExpression()) {
              const callee = path22.get("callee");
              let context, func;
              if (callee.isIdentifier() && !path22.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || function(val2) {
                return VALID_IDENTIFIER_CALLEES.includes(val2);
              }(callee.node.name)) && (func = global[callee.node.name]), callee.isMemberExpression()) {
                const object = callee.get("object"), property = callee.get("property");
                if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !function(val2) {
                  return INVALID_METHODS.includes(val2);
                }(property.node.name)) {
                  context = global[object.node.name];
                  const key = property.node.name;
                  hasOwnProperty.call(context, key) && (func = context[key]);
                }
                if (object.isLiteral() && property.isIdentifier()) {
                  const type = typeof object.node.value;
                  type !== "string" && type !== "number" || (context = object.node.value, func = context[property.node.name]);
                }
              }
              if (func) {
                const args = path22.get("arguments").map((arg) => evaluateCached(arg, state2));
                if (!state2.confident)
                  return;
                return func.apply(context, args);
              }
            }
            deopt(path22, state2);
          }(path4, state);
          return state.confident && (item.resolved = true, item.value = val), val;
        }
      }
      function evaluateQuasis(path4, quasis, state, raw = false) {
        let str = "", i = 0;
        const exprs = path4.isTemplateLiteral() ? path4.get("expressions") : path4.get("quasi.expressions");
        for (const elem of quasis) {
          if (!state.confident)
            break;
          str += raw ? elem.value.raw : elem.value.cooked;
          const expr = exprs[i++];
          expr && (str += String(evaluateCached(expr, state)));
        }
        if (state.confident)
          return str;
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getKey = _getKey, exports2._getPattern = _getPattern, exports2.get = function(key, context = true) {
        context === true && (context = this.context);
        const parts = key.split(".");
        return parts.length === 1 ? _getKey.call(this, key, context) : _getPattern.call(this, parts, context);
      }, exports2.getAllNextSiblings = function() {
        let _key = this.key, sibling = this.getSibling(++_key);
        const siblings = [];
        for (;sibling.node; )
          siblings.push(sibling), sibling = this.getSibling(++_key);
        return siblings;
      }, exports2.getAllPrevSiblings = function() {
        let _key = this.key, sibling = this.getSibling(--_key);
        const siblings = [];
        for (;sibling.node; )
          siblings.push(sibling), sibling = this.getSibling(--_key);
        return siblings;
      }, exports2.getAssignmentIdentifiers = function() {
        return _getAssignmentIdentifiers(this.node);
      }, exports2.getBindingIdentifierPaths = function(duplicates = false, outerOnly = false) {
        const search = [this], ids = Object.create(null);
        for (;search.length; ) {
          const id = search.shift();
          if (!id)
            continue;
          if (!id.node)
            continue;
          const keys = _getBindingIdentifiers.keys[id.node.type];
          if (id.isIdentifier())
            if (duplicates) {
              (ids[id.node.name] = ids[id.node.name] || []).push(id);
            } else
              ids[id.node.name] = id;
          else if (id.isExportDeclaration()) {
            const declaration = id.get("declaration");
            declaration.isDeclaration() && search.push(declaration);
          } else {
            if (outerOnly) {
              if (id.isFunctionDeclaration()) {
                search.push(id.get("id"));
                continue;
              }
              if (id.isFunctionExpression())
                continue;
            }
            if (keys)
              for (let i = 0;i < keys.length; i++) {
                const key = keys[i], child = id.get(key);
                Array.isArray(child) ? search.push(...child) : child.node && search.push(child);
              }
          }
        }
        return ids;
      }, exports2.getBindingIdentifiers = function(duplicates) {
        return _getBindingIdentifiers(this.node, duplicates);
      }, exports2.getCompletionRecords = function() {
        return _getCompletionRecords(this, { canHaveBreak: false, shouldPopulateBreak: false, inCaseClause: false }).map((r) => r.path);
      }, exports2.getNextSibling = function() {
        return this.getSibling(this.key + 1);
      }, exports2.getOpposite = function() {
        if (this.key === "left")
          return this.getSibling("right");
        if (this.key === "right")
          return this.getSibling("left");
        return null;
      }, exports2.getOuterBindingIdentifierPaths = function(duplicates = false) {
        return this.getBindingIdentifierPaths(duplicates, true);
      }, exports2.getOuterBindingIdentifiers = function(duplicates) {
        return _getOuterBindingIdentifiers(this.node, duplicates);
      }, exports2.getPrevSibling = function() {
        return this.getSibling(this.key - 1);
      }, exports2.getSibling = function(key) {
        return _index.default.get({ parentPath: this.parentPath, parent: this.parent, container: this.container, listKey: this.listKey, key }).setContext(this.context);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { getAssignmentIdentifiers: _getAssignmentIdentifiers, getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, numericLiteral, unaryExpression } = _t, NORMAL_COMPLETION = 0, BREAK_COMPLETION = 1;
      function addCompletionRecords(path4, records, context) {
        return path4 && records.push(..._getCompletionRecords(path4, context)), records;
      }
      function normalCompletionToBreak(completions) {
        completions.forEach((c) => {
          c.type = BREAK_COMPLETION;
        });
      }
      function replaceBreakStatementInBreakCompletion(completions, reachable) {
        completions.forEach((c) => {
          c.path.isBreakStatement({ label: null }) && (reachable ? c.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c.path.remove());
        });
      }
      function getStatementListCompletion(paths, context) {
        const completions = [];
        if (context.canHaveBreak) {
          let lastNormalCompletions = [];
          for (let i = 0;i < paths.length; i++) {
            const path4 = paths[i], newContext = Object.assign({}, context, { inCaseClause: false });
            path4.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = true : newContext.shouldPopulateBreak = false;
            const statementCompletions = _getCompletionRecords(path4, newContext);
            if (statementCompletions.length > 0 && statementCompletions.every((c) => c.type === BREAK_COMPLETION)) {
              lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c) => c.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, true)), replaceBreakStatementInBreakCompletion(statementCompletions, false)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, true));
              break;
            }
            if (i === paths.length - 1)
              completions.push(...statementCompletions);
            else {
              lastNormalCompletions = [];
              for (let i2 = 0;i2 < statementCompletions.length; i2++) {
                const c = statementCompletions[i2];
                c.type === BREAK_COMPLETION && completions.push(c), c.type === NORMAL_COMPLETION && lastNormalCompletions.push(c);
              }
            }
          }
        } else if (paths.length)
          for (let i = paths.length - 1;i >= 0; i--) {
            const pathCompletions = _getCompletionRecords(paths[i], context);
            if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {
              completions.push(...pathCompletions);
              break;
            }
          }
        return completions;
      }
      function _getCompletionRecords(path4, context) {
        let records = [];
        if (path4.isIfStatement())
          records = addCompletionRecords(path4.get("consequent"), records, context), records = addCompletionRecords(path4.get("alternate"), records, context);
        else {
          if (path4.isDoExpression() || path4.isFor() || path4.isWhile() || path4.isLabeledStatement())
            return addCompletionRecords(path4.get("body"), records, context);
          if (path4.isProgram() || path4.isBlockStatement())
            return getStatementListCompletion(path4.get("body"), context);
          if (path4.isFunction())
            return _getCompletionRecords(path4.get("body"), context);
          if (path4.isTryStatement())
            records = addCompletionRecords(path4.get("block"), records, context), records = addCompletionRecords(path4.get("handler"), records, context);
          else {
            if (path4.isCatchClause())
              return addCompletionRecords(path4.get("body"), records, context);
            if (path4.isSwitchStatement())
              return function(cases, records2, context2) {
                let lastNormalCompletions = [];
                for (let i = 0;i < cases.length; i++) {
                  const caseCompletions = _getCompletionRecords(cases[i], context2), normalCompletions = [], breakCompletions = [];
                  for (const c of caseCompletions)
                    c.type === NORMAL_COMPLETION && normalCompletions.push(c), c.type === BREAK_COMPLETION && breakCompletions.push(c);
                  normalCompletions.length && (lastNormalCompletions = normalCompletions), records2.push(...breakCompletions);
                }
                return records2.push(...lastNormalCompletions), records2;
              }(path4.get("cases"), records, context);
            if (path4.isSwitchCase())
              return getStatementListCompletion(path4.get("consequent"), { canHaveBreak: true, shouldPopulateBreak: false, inCaseClause: true });
            path4.isBreakStatement() ? records.push(function(path22) {
              return { type: BREAK_COMPLETION, path: path22 };
            }(path4)) : records.push(function(path22) {
              return { type: NORMAL_COMPLETION, path: path22 };
            }(path4));
          }
        }
        return records;
      }
      function _getKey(key, context) {
        const node = this.node, container = node[key];
        return Array.isArray(container) ? container.map((_, i) => _index.default.get({ listKey: key, parentPath: this, parent: node, container, key: i }).setContext(context)) : _index.default.get({ parentPath: this, parent: node, container: node, key }).setContext(context);
      }
      function _getPattern(parts, context) {
        let path4 = this;
        for (const part of parts)
          path4 = part === "." ? path4.parentPath : Array.isArray(path4) ? path4[part] : path4.get(part, context);
        return path4;
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = exports2.SHOULD_STOP = exports2.SHOULD_SKIP = exports2.REMOVED = undefined;
      var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug = __webpack_require__2("./node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t = _t, cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.26.3/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), NodePath_context = _context, NodePath_removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
      const { validate } = _t, debug = _debug("babel"), NodePath_Final = (exports2.REMOVED = 1, exports2.SHOULD_STOP = 2, exports2.SHOULD_SKIP = 4, exports2.default = class NodePath {
        constructor(hub, parent) {
          this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
        }
        get removed() {
          return (1 & this._traverseFlags) > 0;
        }
        set removed(v) {
          v ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
        }
        get shouldStop() {
          return (2 & this._traverseFlags) > 0;
        }
        set shouldStop(v) {
          v ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
        }
        get shouldSkip() {
          return (4 & this._traverseFlags) > 0;
        }
        set shouldSkip(v) {
          v ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
        }
        static get({ hub, parentPath, parent, container, listKey, key }) {
          if (!hub && parentPath && (hub = parentPath.hub), !parent)
            throw new Error("To get a node path the parent needs to exist");
          const targetNode = container[key], paths = cache.getOrCreateCachedPaths(hub, parent);
          let path4 = paths.get(targetNode);
          return path4 || (path4 = new NodePath(hub, parent), targetNode && paths.set(targetNode, path4)), _context.setup.call(path4, parentPath, container, listKey, key), path4;
        }
        getScope(scope) {
          return this.isScope() ? new _index2.default(this) : scope;
        }
        setData(key, val) {
          return this.data == null && (this.data = Object.create(null)), this.data[key] = val;
        }
        getData(key, def) {
          this.data == null && (this.data = Object.create(null));
          let val = this.data[key];
          return val === undefined && def !== undefined && (val = this.data[key] = def), val;
        }
        hasNode() {
          return this.node != null;
        }
        buildCodeFrameError(msg, Error2 = SyntaxError) {
          return this.hub.buildError(this.node, msg, Error2);
        }
        traverse(visitor, state) {
          (0, _index.default)(this.node, visitor, this.scope, state, this);
        }
        set(key, node) {
          validate(this.node, key, node), this.node[key] = node;
        }
        getPathLocation() {
          const parts = [];
          let path4 = this;
          do {
            let key = path4.key;
            path4.inList && (key = `${path4.listKey}[${key}]`), parts.unshift(key);
          } while (path4 = path4.parentPath);
          return parts.join(".");
        }
        debug(message) {
          debug.enabled && debug(`${this.getPathLocation()} ${this.type}: ${message}`);
        }
        toString() {
          return (0, _generator.default)(this.node).code;
        }
        get inList() {
          return !!this.listKey;
        }
        set inList(inList) {
          inList || (this.listKey = null);
        }
        get parentKey() {
          return this.listKey || this.key;
        }
      }), methods = { findParent: NodePath_ancestry.findParent, find: NodePath_ancestry.find, getFunctionParent: NodePath_ancestry.getFunctionParent, getStatementParent: NodePath_ancestry.getStatementParent, getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom, getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom, getAncestry: NodePath_ancestry.getAncestry, isAncestor: NodePath_ancestry.isAncestor, isDescendant: NodePath_ancestry.isDescendant, inType: NodePath_ancestry.inType, getTypeAnnotation: NodePath_inference.getTypeAnnotation, isBaseType: NodePath_inference.isBaseType, couldBeBaseType: NodePath_inference.couldBeBaseType, baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches, isGenericType: NodePath_inference.isGenericType, replaceWithMultiple: NodePath_replacement.replaceWithMultiple, replaceWithSourceString: NodePath_replacement.replaceWithSourceString, replaceWith: NodePath_replacement.replaceWith, replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements, replaceInline: NodePath_replacement.replaceInline, evaluateTruthy: NodePath_evaluation.evaluateTruthy, evaluate: NodePath_evaluation.evaluate, toComputedKey: NodePath_conversion.toComputedKey, ensureBlock: NodePath_conversion.ensureBlock, unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment, arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression, splitExportDeclaration: NodePath_conversion.splitExportDeclaration, ensureFunctionName: NodePath_conversion.ensureFunctionName, matchesPattern: NodePath_introspection.matchesPattern, isStatic: NodePath_introspection.isStatic, isNodeType: NodePath_introspection.isNodeType, canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression, canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement, isCompletionRecord: NodePath_introspection.isCompletionRecord, isStatementOrBlock: NodePath_introspection.isStatementOrBlock, referencesImport: NodePath_introspection.referencesImport, getSource: NodePath_introspection.getSource, willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore, _guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo, resolve: NodePath_introspection.resolve, isConstantExpression: NodePath_introspection.isConstantExpression, isInStrictMode: NodePath_introspection.isInStrictMode, isDenylisted: NodePath_context.isDenylisted, visit: NodePath_context.visit, skip: NodePath_context.skip, skipKey: NodePath_context.skipKey, stop: NodePath_context.stop, setContext: NodePath_context.setContext, requeue: NodePath_context.requeue, requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators, remove: NodePath_removal.remove, insertBefore: NodePath_modification.insertBefore, insertAfter: NodePath_modification.insertAfter, unshiftContainer: NodePath_modification.unshiftContainer, pushContainer: NodePath_modification.pushContainer, getOpposite: NodePath_family.getOpposite, getCompletionRecords: NodePath_family.getCompletionRecords, getSibling: NodePath_family.getSibling, getPrevSibling: NodePath_family.getPrevSibling, getNextSibling: NodePath_family.getNextSibling, getAllNextSiblings: NodePath_family.getAllNextSiblings, getAllPrevSiblings: NodePath_family.getAllPrevSiblings, get: NodePath_family.get, getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers, getBindingIdentifiers: NodePath_family.getBindingIdentifiers, getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers, getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths, getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths, shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings, addComment: NodePath_comments.addComment, addComments: NodePath_comments.addComments };
      Object.assign(NodePath_Final.prototype, methods), NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")], Object.assign(NodePath_Final.prototype, { has: NodePath_introspection[String("has")], is: NodePath_introspection[String("is")], isnt: NodePath_introspection[String("isnt")], equals: NodePath_introspection[String("equals")], hoist: NodePath_modification[String("hoist")], updateSiblingKeys: NodePath_modification.updateSiblingKeys, call: NodePath_context.call, isBlacklisted: NodePath_context[String("isBlacklisted")], setScope: NodePath_context.setScope, resync: NodePath_context.resync, popContext: NodePath_context.popContext, pushContext: NodePath_context.pushContext, setup: NodePath_context.setup, setKey: NodePath_context.setKey }), NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo, Object.assign(NodePath_Final.prototype, { _getTypeAnnotation: NodePath_inference._getTypeAnnotation, _replaceWith: NodePath_replacement._replaceWith, _resolve: NodePath_introspection._resolve, _call: NodePath_context._call, _resyncParent: NodePath_context._resyncParent, _resyncKey: NodePath_context._resyncKey, _resyncList: NodePath_context._resyncList, _resyncRemoved: NodePath_context._resyncRemoved, _getQueueContexts: NodePath_context._getQueueContexts, _removeFromScope: NodePath_removal._removeFromScope, _callRemovalHooks: NodePath_removal._callRemovalHooks, _remove: NodePath_removal._remove, _markRemoved: NodePath_removal._markRemoved, _assertUnremoved: NodePath_removal._assertUnremoved, _containerInsert: NodePath_modification._containerInsert, _containerInsertBefore: NodePath_modification._containerInsertBefore, _containerInsertAfter: NodePath_modification._containerInsertAfter, _verifyNodeList: NodePath_modification._verifyNodeList, _getKey: NodePath_family._getKey, _getPattern: NodePath_family._getPattern });
      for (const type of t.TYPES) {
        const typeKey = `is${type}`, fn = t[typeKey];
        NodePath_Final.prototype[typeKey] = function(opts) {
          return fn(this.node, opts);
        }, NodePath_Final.prototype[`assert${type}`] = function(opts) {
          if (!fn(this.node, opts))
            throw new TypeError(`Expected node path of type ${type}`);
        };
      }
      Object.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);
      for (const type of Object.keys(virtualTypes))
        type[0] !== "_" && (t.TYPES.includes(type) || t.TYPES.push(type));
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getTypeAnnotation = _getTypeAnnotation, exports2.baseTypeStrictlyMatches = function(rightArg) {
        const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
        if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left))
          return right.type === left.type;
        return false;
      }, exports2.couldBeBaseType = function(name) {
        const type = this.getTypeAnnotation();
        if (isAnyTypeAnnotation(type))
          return true;
        if (isUnionTypeAnnotation(type)) {
          for (const type2 of type.types)
            if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true))
              return true;
          return false;
        }
        return _isBaseType(name, type, true);
      }, exports2.getTypeAnnotation = function() {
        let type = this.getData("typeAnnotation");
        if (type != null)
          return type;
        type = _getTypeAnnotation.call(this) || anyTypeAnnotation(), (isTypeAnnotation(type) || isTSTypeAnnotation(type)) && (type = type.typeAnnotation);
        return this.setData("typeAnnotation", type), type;
      }, exports2.isBaseType = function(baseName, soft) {
        return _isBaseType(baseName, this.getTypeAnnotation(), soft);
      }, exports2.isGenericType = function(genericName) {
        const type = this.getTypeAnnotation();
        if (genericName === "Array" && (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)))
          return true;
        return isGenericTypeAnnotation(type) && isIdentifier(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier(type.typeName, { name: genericName });
      };
      var inferers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
      const typeAnnotationInferringNodes = new WeakSet;
      function _getTypeAnnotation() {
        const node = this.node;
        if (node) {
          if (node.typeAnnotation)
            return node.typeAnnotation;
          if (!typeAnnotationInferringNodes.has(node)) {
            typeAnnotationInferringNodes.add(node);
            try {
              var _inferer;
              let inferer = inferers[node.type];
              if (inferer)
                return inferer.call(this, node);
              if (inferer = inferers[this.parentPath.type], (_inferer = inferer) != null && _inferer.validParent)
                return this.parentPath.getTypeAnnotation();
            } finally {
              typeAnnotationInferringNodes.delete(node);
            }
          }
        } else if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
          const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
          return declar.key === "left" && declarParent.isForInStatement() ? stringTypeAnnotation() : declar.key === "left" && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
        }
      }
      function _isBaseType(baseName, type, soft) {
        if (baseName === "string")
          return isStringTypeAnnotation(type);
        if (baseName === "number")
          return isNumberTypeAnnotation(type);
        if (baseName === "boolean")
          return isBooleanTypeAnnotation(type);
        if (baseName === "any")
          return isAnyTypeAnnotation(type);
        if (baseName === "mixed")
          return isMixedTypeAnnotation(type);
        if (baseName === "empty")
          return isEmptyTypeAnnotation(type);
        if (baseName === "void")
          return isVoidTypeAnnotation(type);
        if (soft)
          return false;
        throw new Error(`Unknown base type ${baseName}`);
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        if (!this.isReferenced())
          return;
        const binding = this.scope.getBinding(node.name);
        if (binding)
          return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding2, path4, name) {
            const types = [], functionConstantViolations = [];
            let constantViolations = getConstantViolationsBefore(binding2, path4, functionConstantViolations);
            const testType = getConditionalAnnotation(binding2, path4, name);
            if (testType) {
              const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
              constantViolations = constantViolations.filter((path22) => !testConstantViolations.includes(path22)), types.push(testType.typeAnnotation);
            }
            if (constantViolations.length) {
              constantViolations.push(...functionConstantViolations);
              for (const violation of constantViolations)
                types.push(violation.getTypeAnnotation());
            }
            if (!types.length)
              return;
            return (0, _util.createUnionType)(types);
          }(binding, this, node.name);
        if (node.name === "undefined")
          return voidTypeAnnotation();
        if (node.name === "NaN" || node.name === "Infinity")
          return numberTypeAnnotation();
        node.name;
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
      const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
      function getConstantViolationsBefore(binding, path4, functions) {
        const violations = binding.constantViolations.slice();
        return violations.unshift(binding.path), violations.filter((violation) => {
          const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path4);
          return functions && status === "unknown" && functions.push(violation), status === "before";
        });
      }
      function inferAnnotationFromBinaryExpression(name, path4) {
        const operator = path4.node.operator, right = path4.get("right").resolve(), left = path4.get("left").resolve();
        let target, typeofPath, typePath;
        if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target)
          return operator === "===" ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator) ? numberTypeAnnotation() : undefined;
        if (operator !== "===" && operator !== "==")
          return;
        if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath)
          return;
        if (!typeofPath.get("argument").isIdentifier({ name }))
          return;
        if (typePath = typePath.resolve(), !typePath.isLiteral())
          return;
        const typeValue = typePath.node.value;
        return typeof typeValue == "string" ? createTypeAnnotationBasedOnTypeof(typeValue) : undefined;
      }
      function getConditionalAnnotation(binding, path4, name) {
        const ifStatement = function(binding2, path22, name2) {
          let parentPath;
          for (;parentPath = path22.parentPath; ) {
            if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
              if (path22.key === "test")
                return;
              return parentPath;
            }
            if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name2) !== binding2)
              return;
            path22 = parentPath;
          }
        }(binding, path4, name);
        if (!ifStatement)
          return;
        const paths = [ifStatement.get("test")], types = [];
        for (let i = 0;i < paths.length; i++) {
          const path22 = paths[i];
          if (path22.isLogicalExpression())
            path22.node.operator === "&&" && (paths.push(path22.get("left")), paths.push(path22.get("right")));
          else if (path22.isBinaryExpression()) {
            const type = inferAnnotationFromBinaryExpression(name, path22);
            type && types.push(type);
          }
        }
        return types.length ? { typeAnnotation: (0, _util.createUnionType)(types), ifStatement } : getConditionalAnnotation(binding, ifStatement, name);
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrayExpression = ArrayExpression, exports2.AssignmentExpression = function() {
        return this.get("right").getTypeAnnotation();
      }, exports2.BinaryExpression = function(node) {
        const operator = node.operator;
        if (NUMBER_BINARY_OPERATORS.includes(operator))
          return numberTypeAnnotation();
        if (BOOLEAN_BINARY_OPERATORS.includes(operator))
          return booleanTypeAnnotation();
        if (operator === "+") {
          const right = this.get("right"), left = this.get("left");
          return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
        }
      }, exports2.BooleanLiteral = function() {
        return booleanTypeAnnotation();
      }, exports2.CallExpression = function() {
        const { callee } = this.node;
        if (isObjectKeys(callee))
          return arrayTypeAnnotation(stringTypeAnnotation());
        if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, { name: "Array" }))
          return arrayTypeAnnotation(anyTypeAnnotation());
        if (isObjectEntries(callee))
          return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
        return resolveCall(this.get("callee"));
      }, exports2.ConditionalExpression = function() {
        const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
        return (0, _util.createUnionType)(argumentTypes);
      }, exports2.ClassDeclaration = exports2.ClassExpression = exports2.FunctionDeclaration = exports2.ArrowFunctionExpression = exports2.FunctionExpression = function() {
        return genericTypeAnnotation(identifier("Function"));
      }, Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
        return _infererReference.default;
      } }), exports2.LogicalExpression = function() {
        const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
        return (0, _util.createUnionType)(argumentTypes);
      }, exports2.NewExpression = function(node) {
        if (node.callee.type === "Identifier")
          return genericTypeAnnotation(node.callee);
      }, exports2.NullLiteral = function() {
        return nullLiteralTypeAnnotation();
      }, exports2.NumericLiteral = function() {
        return numberTypeAnnotation();
      }, exports2.ObjectExpression = function() {
        return genericTypeAnnotation(identifier("Object"));
      }, exports2.ParenthesizedExpression = function() {
        return this.get("expression").getTypeAnnotation();
      }, exports2.RegExpLiteral = function() {
        return genericTypeAnnotation(identifier("RegExp"));
      }, exports2.RestElement = RestElement, exports2.SequenceExpression = function() {
        return this.get("expressions").pop().getTypeAnnotation();
      }, exports2.StringLiteral = function() {
        return stringTypeAnnotation();
      }, exports2.TSAsExpression = TSAsExpression, exports2.TSNonNullExpression = function() {
        return this.get("expression").getTypeAnnotation();
      }, exports2.TaggedTemplateExpression = function() {
        return resolveCall(this.get("tag"));
      }, exports2.TemplateLiteral = function() {
        return stringTypeAnnotation();
      }, exports2.TypeCastExpression = TypeCastExpression, exports2.UnaryExpression = function(node) {
        const operator = node.operator;
        if (operator === "void")
          return voidTypeAnnotation();
        if (NUMBER_UNARY_OPERATORS.includes(operator))
          return numberTypeAnnotation();
        if (STRING_UNARY_OPERATORS.includes(operator))
          return stringTypeAnnotation();
        if (BOOLEAN_UNARY_OPERATORS.includes(operator))
          return booleanTypeAnnotation();
      }, exports2.UpdateExpression = function(node) {
        const operator = node.operator;
        if (operator === "++" || operator === "--")
          return numberTypeAnnotation();
      }, exports2.VariableDeclarator = function() {
        if (!this.get("id").isIdentifier())
          return;
        return this.get("init").getTypeAnnotation();
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js");
      const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier } = _t;
      function TypeCastExpression(node) {
        return node.typeAnnotation;
      }
      function TSAsExpression(node) {
        return node.typeAnnotation;
      }
      function ArrayExpression() {
        return genericTypeAnnotation(identifier("Array"));
      }
      function RestElement() {
        return ArrayExpression();
      }
      TypeCastExpression.validParent = true, TSAsExpression.validParent = true, RestElement.validParent = true;
      const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
      function resolveCall(callee) {
        if ((callee = callee.resolve()).isFunction()) {
          const { node } = callee;
          if (node.async)
            return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
          if (node.generator)
            return genericTypeAnnotation(identifier("Iterator"));
          if (callee.node.returnType)
            return callee.node.returnType;
        }
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createUnionType = function(types) {
        if (types.every((v) => isFlowType(v)))
          return createFlowUnionType ? createFlowUnionType(types) : createUnionTypeAnnotation(types);
        if (types.every((v) => isTSType(v)) && createTSUnionType)
          return createTSUnionType(types);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2._guessExecutionStatusRelativeTo = function(target) {
        return _guessExecutionStatusRelativeToCached(this, target, new Map);
      }, exports2._resolve = _resolve, exports2.canHaveVariableDeclarationOrExpression = function() {
        return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
      }, exports2.canSwapBetweenExpressionAndStatement = function(replacement) {
        if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression())
          return false;
        if (this.isExpression())
          return isBlockStatement(replacement);
        if (this.isBlockStatement())
          return isExpression(replacement);
        return false;
      }, exports2.getSource = function() {
        const node = this.node;
        if (node.end) {
          const code = this.hub.getCode();
          if (code)
            return code.slice(node.start, node.end);
        }
        return "";
      }, exports2.isCompletionRecord = function(allowInsideFunction) {
        let path4 = this, first = true;
        do {
          const { type, container } = path4;
          if (!first && (path4.isFunction() || type === "StaticBlock"))
            return !!allowInsideFunction;
          if (first = false, Array.isArray(container) && path4.key !== container.length - 1)
            return false;
        } while ((path4 = path4.parentPath) && !path4.isProgram() && !path4.isDoExpression());
        return true;
      }, exports2.isConstantExpression = function() {
        if (this.isIdentifier()) {
          const binding = this.scope.getBinding(this.node.name);
          return !!binding && binding.constant;
        }
        if (this.isLiteral())
          return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
        if (this.isUnaryExpression())
          return this.node.operator === "void" && this.get("argument").isConstantExpression();
        if (this.isBinaryExpression()) {
          const { operator } = this.node;
          return operator !== "in" && operator !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
        }
        if (this.isMemberExpression())
          return !this.node.computed && this.get("object").isIdentifier({ name: "Symbol" }) && !this.scope.hasBinding("Symbol", { noGlobals: true });
        if (this.isCallExpression())
          return this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", { noGlobals: true }) && this.get("arguments")[0].isStringLiteral();
        return false;
      }, exports2.isInStrictMode = function() {
        const start = this.isProgram() ? this : this.parentPath;
        return !!start.find((path4) => {
          if (path4.isProgram({ sourceType: "module" }))
            return true;
          if (path4.isClass())
            return true;
          if (path4.isArrowFunctionExpression() && !path4.get("body").isBlockStatement())
            return false;
          let body;
          if (path4.isFunction())
            body = path4.node.body;
          else {
            if (!path4.isProgram())
              return false;
            body = path4.node;
          }
          for (const directive of body.directives)
            if (directive.value.value === "use strict")
              return true;
        });
      }, exports2.isNodeType = function(type) {
        return isType(this.type, type);
      }, exports2.isStatementOrBlock = function() {
        return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
      }, exports2.isStatic = function() {
        return this.scope.isStatic(this.node);
      }, exports2.matchesPattern = function(pattern, allowPartial) {
        return _matchesPattern(this.node, pattern, allowPartial);
      }, exports2.referencesImport = function(moduleSource, importName) {
        if (!this.isReferencedIdentifier()) {
          if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName }) : this.node.property.name === importName)) {
            const object = this.get("object");
            return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
          }
          return false;
        }
        const binding = this.scope.getBinding(this.node.name);
        if (!binding || binding.kind !== "module")
          return false;
        const path4 = binding.path, parent = path4.parentPath;
        if (!parent.isImportDeclaration())
          return false;
        if (parent.node.source.value !== moduleSource)
          return false;
        if (!importName)
          return true;
        if (path4.isImportDefaultSpecifier() && importName === "default")
          return true;
        if (path4.isImportNamespaceSpecifier() && importName === "*")
          return true;
        if (path4.isImportSpecifier() && isIdentifier(path4.node.imported, { name: importName }))
          return true;
        return false;
      }, exports2.resolve = function(dangerous, resolved) {
        return _resolve.call(this, dangerous, resolved) || this;
      }, exports2.willIMaybeExecuteBefore = function(target) {
        return this._guessExecutionStatusRelativeTo(target) !== "after";
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t;
      function getOuterFunction(path4) {
        return path4.isProgram() ? path4 : (path4.parentPath.scope.getFunctionParent() || path4.parentPath.scope.getProgramParent()).path;
      }
      function isExecutionUncertain(type, key) {
        switch (type) {
          case "LogicalExpression":
          case "AssignmentPattern":
            return key === "right";
          case "ConditionalExpression":
          case "IfStatement":
            return key === "consequent" || key === "alternate";
          case "WhileStatement":
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForOfStatement":
            return key === "body";
          case "ForStatement":
            return key === "body" || key === "update";
          case "SwitchStatement":
            return key === "cases";
          case "TryStatement":
            return key === "handler";
          case "OptionalMemberExpression":
            return key === "property";
          case "OptionalCallExpression":
            return key === "arguments";
          default:
            return false;
        }
      }
      function isExecutionUncertainInList(paths, maxIndex) {
        for (let i = 0;i < maxIndex; i++) {
          const path4 = paths[i];
          if (isExecutionUncertain(path4.parent.type, path4.parentKey))
            return true;
        }
        return false;
      }
      exports2.has = function(key) {
        var _this$node;
        const val = (_this$node = this.node) == null ? undefined : _this$node[key];
        return val && Array.isArray(val) ? !!val.length : !!val;
      }, exports2.is = exports2.has, exports2.isnt = function(key) {
        return !this.has(key);
      }, exports2.equals = function(key, value2) {
        return this.node[key] === value2;
      };
      const SYMBOL_CHECKING = Symbol();
      function _guessExecutionStatusRelativeToCached(base, target, cache) {
        const funcParent = { this: getOuterFunction(base), target: getOuterFunction(target) };
        if (funcParent.target.node !== funcParent.this.node)
          return function(base2, target2, cache2) {
            let cached, nodeMap = cache2.get(base2.node);
            if (nodeMap) {
              if (cached = nodeMap.get(target2.node))
                return cached === SYMBOL_CHECKING ? "unknown" : cached;
            } else
              cache2.set(base2.node, nodeMap = new Map);
            nodeMap.set(target2.node, SYMBOL_CHECKING);
            const result = function(base3, target3, cache3) {
              if (!target3.isFunctionDeclaration())
                return _guessExecutionStatusRelativeToCached(base3, target3, cache3) === "before" ? "before" : "unknown";
              if (target3.parentPath.isExportDeclaration())
                return "unknown";
              const binding = target3.scope.getBinding(target3.node.id.name);
              if (!binding.references)
                return "before";
              const referencePaths = binding.referencePaths;
              let allStatus;
              for (const path4 of referencePaths) {
                if (!!path4.find((path22) => path22.node === target3.node))
                  continue;
                if (path4.key !== "callee" || !path4.parentPath.isCallExpression())
                  return "unknown";
                const status = _guessExecutionStatusRelativeToCached(base3, path4, cache3);
                if (allStatus && allStatus !== status)
                  return "unknown";
                allStatus = status;
              }
              return allStatus;
            }(base2, target2, cache2);
            return nodeMap.set(target2.node, result), result;
          }(base, funcParent.target, cache);
        const paths = { target: target.getAncestry(), this: base.getAncestry() };
        if (paths.target.includes(base))
          return "after";
        if (paths.this.includes(target))
          return "before";
        let commonPath;
        const commonIndex = { target: 0, this: 0 };
        for (;!commonPath && commonIndex.this < paths.this.length; ) {
          const path4 = paths.this[commonIndex.this];
          commonIndex.target = paths.target.indexOf(path4), commonIndex.target >= 0 ? commonPath = path4 : commonIndex.this++;
        }
        if (!commonPath)
          throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
        if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1))
          return "unknown";
        const divergence = { this: paths.this[commonIndex.this - 1], target: paths.target[commonIndex.target - 1] };
        if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container)
          return divergence.target.key > divergence.this.key ? "before" : "after";
        const keys = VISITOR_KEYS[commonPath.type], keyPosition_this = keys.indexOf(divergence.this.parentKey);
        return keys.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
      }
      function _resolve(dangerous, resolved) {
        var _resolved;
        if ((_resolved = resolved) == null || !_resolved.includes(this))
          if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier())
              return this.get("init").resolve(dangerous, resolved);
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding)
              return;
            if (!binding.constant)
              return;
            if (binding.kind === "module")
              return;
            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node))
                return;
              return ret;
            }
          } else {
            if (this.isTypeCastExpression())
              return this.get("expression").resolve(dangerous, resolved);
            if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!isLiteral(targetKey))
                return;
              const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                const props = target.get("properties");
                for (const prop of props) {
                  if (!prop.isProperty())
                    continue;
                  const key = prop.get("key");
                  let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
                  if (match = match || key.isLiteral({ value: targetName }), match)
                    return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elem = target.get("elements")[targetName];
                if (elem)
                  return elem.resolve(dangerous, resolved);
              }
            }
          }
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t2 = _t;
      const { react } = _t, { cloneNode, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path4, state) {
        if (path4.isJSXIdentifier() && react.isCompatTag(path4.node.name) && !path4.parentPath.isJSXMemberExpression())
          return;
        if (path4.node.name === "this") {
          let scope = path4.scope;
          do {
            if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
              break;
          } while (scope = scope.parent);
          scope && state.breakOnScopePaths.push(scope.path);
        }
        const binding = path4.scope.getBinding(path4.node.name);
        if (binding) {
          for (const violation of binding.constantViolations)
            if (violation.scope !== binding.path.scope)
              return state.mutableBinding = true, void path4.stop();
          binding === state.scope.getBinding(path4.node.name) && (state.bindings[path4.node.name] = binding);
        }
      } };
      exports2.default = class {
        constructor(path4, scope) {
          this.breakOnScopePaths = undefined, this.bindings = undefined, this.mutableBinding = undefined, this.scopes = undefined, this.scope = undefined, this.path = undefined, this.attachAfter = undefined, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = false, this.scopes = [], this.scope = scope, this.path = path4, this.attachAfter = false;
        }
        isCompatibleScope(scope) {
          for (const key of Object.keys(this.bindings)) {
            const binding = this.bindings[key];
            if (!scope.bindingIdentifierEquals(key, binding.identifier))
              return false;
          }
          return true;
        }
        getCompatibleScopes() {
          let scope = this.path.scope;
          do {
            if (!this.isCompatibleScope(scope))
              break;
            if (this.scopes.push(scope), this.breakOnScopePaths.includes(scope.path))
              break;
          } while (scope = scope.parent);
        }
        getAttachmentPath() {
          let path4 = this._getAttachmentPath();
          if (!path4)
            return;
          let targetScope = path4.scope;
          if (targetScope.path === path4 && (targetScope = path4.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction())
            for (const name of Object.keys(this.bindings)) {
              if (!targetScope.hasOwnBinding(name))
                continue;
              const binding = this.bindings[name];
              if (binding.kind === "param" || binding.path.parentKey === "params")
                continue;
              if (this.getAttachmentParentForPath(binding.path).key >= path4.key) {
                this.attachAfter = true, path4 = binding.path;
                for (const violationPath of binding.constantViolations)
                  this.getAttachmentParentForPath(violationPath).key > path4.key && (path4 = violationPath);
              }
            }
          return path4;
        }
        _getAttachmentPath() {
          const scope = this.scopes.pop();
          if (scope) {
            if (scope.path.isFunction()) {
              if (!this.hasOwnParamBindings(scope))
                return this.getNextScopeAttachmentParent();
              {
                if (this.scope === scope)
                  return;
                const bodies = scope.path.get("body").get("body");
                for (let i = 0;i < bodies.length; i++)
                  if (!bodies[i].node._blockHoist)
                    return bodies[i];
              }
            } else if (scope.path.isProgram())
              return this.getNextScopeAttachmentParent();
          }
        }
        getNextScopeAttachmentParent() {
          const scope = this.scopes.pop();
          if (scope)
            return this.getAttachmentParentForPath(scope.path);
        }
        getAttachmentParentForPath(path4) {
          do {
            if (!path4.parentPath || Array.isArray(path4.container) && path4.isStatement())
              return path4;
          } while (path4 = path4.parentPath);
        }
        hasOwnParamBindings(scope) {
          for (const name of Object.keys(this.bindings)) {
            if (!scope.hasOwnBinding(name))
              continue;
            const binding = this.bindings[name];
            if (binding.kind === "param" && binding.constant)
              return true;
          }
          return false;
        }
        run() {
          if (this.path.traverse(referenceVisitor, this), this.mutableBinding)
            return;
          this.getCompatibleScopes();
          const attachTo = this.getAttachmentPath();
          if (!attachTo)
            return;
          if (attachTo.getFunctionParent() === this.path.getFunctionParent())
            return;
          let uid = attachTo.scope.generateUidIdentifier("ref");
          const declarator = variableDeclarator(uid, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
          return parent.isJSXElement() && this.path.container === parent.node.children && (uid = jsxExpressionContainer(uid)), this.path.replaceWith(cloneNode(uid)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
        }
      };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.hooks = undefined;
      exports2.hooks = [function(self, parent) {
        if (self.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self.key === "declaration" && parent.isExportDeclaration() || self.key === "body" && parent.isLabeledStatement() || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === "expression" && parent.isExpressionStatement())
          return parent.remove(), true;
      }, function(self, parent) {
        if (parent.isSequenceExpression() && parent.node.expressions.length === 1)
          return parent.replaceWith(parent.node.expressions[0]), true;
      }, function(self, parent) {
        if (parent.isBinary())
          return self.key === "left" ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), true;
      }, function(self, parent) {
        if (parent.isIfStatement() && self.key === "consequent" || self.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression()))
          return self.replaceWith({ type: "BlockStatement", body: [] }), true;
      }];
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isBindingIdentifier = function() {
        const { node, parent } = this, grandparent = this.parentPath.parent;
        return isIdentifier(node) && isBinding(node, parent, grandparent);
      }, exports2.isBlockScoped = function() {
        return nodeIsBlockScoped(this.node);
      }, exports2.isExpression = function() {
        return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
      }, exports2.isFlow = function() {
        const { node } = this;
        return !!nodeIsFlow(node) || (isImportDeclaration(node) ? node.importKind === "type" || node.importKind === "typeof" : isExportDeclaration(node) ? node.exportKind === "type" : !!isImportSpecifier(node) && (node.importKind === "type" || node.importKind === "typeof"));
      }, exports2.isForAwaitStatement = function() {
        return isForOfStatement(this.node, { await: true });
      }, exports2.isGenerated = function() {
        return !this.isUser();
      }, exports2.isPure = function(constantsOnly) {
        return this.scope.isPure(this.node, constantsOnly);
      }, exports2.isReferenced = function() {
        return nodeIsReferenced(this.node, this.parent);
      }, exports2.isReferencedIdentifier = function(opts) {
        const { node, parent } = this;
        if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
          if (!isJSXIdentifier(node, opts))
            return false;
          if (isCompatTag(node.name))
            return false;
        }
        return nodeIsReferenced(node, parent, this.parentPath.parent);
      }, exports2.isReferencedMemberExpression = function() {
        const { node, parent } = this;
        return isMemberExpression(node) && nodeIsReferenced(node, parent);
      }, exports2.isRestProperty = function() {
        var _this$parentPath;
        return nodeIsRestElement(this.node) && ((_this$parentPath = this.parentPath) == null ? undefined : _this$parentPath.isObjectPattern());
      }, exports2.isScope = function() {
        return nodeIsScope(this.node, this.parent);
      }, exports2.isSpreadProperty = function() {
        var _this$parentPath2;
        return nodeIsRestElement(this.node) && ((_this$parentPath2 = this.parentPath) == null ? undefined : _this$parentPath2.isObjectExpression());
      }, exports2.isStatement = function() {
        const { node, parent } = this;
        if (nodeIsStatement(node)) {
          if (isVariableDeclaration(node)) {
            if (isForXStatement(parent, { left: node }))
              return false;
            if (isForStatement(parent, { init: node }))
              return false;
          }
          return true;
        }
        return false;
      }, exports2.isUser = function() {
        return this.node && !!this.node.loc;
      }, exports2.isVar = function() {
        return nodeIsVar(this.node);
      };
      var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react, isForOfStatement } = _t, { isCompatTag } = react;
      exports2.isExistentialTypeParam = function() {
        throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
      }, exports2.isNumericLiteralTypeAnnotation = function() {
        throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
      };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.Var = exports2.User = exports2.Statement = exports2.SpreadProperty = exports2.Scope = exports2.RestProperty = exports2.ReferencedMemberExpression = exports2.ReferencedIdentifier = exports2.Referenced = exports2.Pure = exports2.NumericLiteralTypeAnnotation = exports2.Generated = exports2.ForAwaitStatement = exports2.Flow = exports2.Expression = exports2.ExistentialTypeParam = exports2.BlockScoped = exports2.BindingIdentifier = undefined;
      exports2.ReferencedIdentifier = ["Identifier", "JSXIdentifier"], exports2.ReferencedMemberExpression = ["MemberExpression"], exports2.BindingIdentifier = ["Identifier"], exports2.Statement = ["Statement"], exports2.Expression = ["Expression"], exports2.Scope = ["Scopable", "Pattern"], exports2.Referenced = null, exports2.BlockScoped = null, exports2.Var = ["VariableDeclaration"], exports2.User = null, exports2.Generated = null, exports2.Pure = null, exports2.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"], exports2.RestProperty = ["RestElement"], exports2.SpreadProperty = ["RestElement"], exports2.ExistentialTypeParam = ["ExistsTypeAnnotation"], exports2.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"], exports2.ForAwaitStatement = ["ForOfStatement"];
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2._containerInsert = _containerInsert, exports2._containerInsertAfter = _containerInsertAfter, exports2._containerInsertBefore = _containerInsertBefore, exports2._verifyNodeList = _verifyNodeList, exports2.insertAfter = function(nodes_) {
        if (_removal._assertUnremoved.call(this), this.isSequenceExpression())
          return last(this.get("expressions")).insertAfter(nodes_);
        const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
        if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
          return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
        if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
          const self = this;
          if (self.node) {
            const node = self.node;
            let { scope } = this;
            if (scope.path.isPattern())
              return assertExpression(node), self.replaceWith(callExpression(arrowFunctionExpression([], node), [])), self.get("callee.body").insertAfter(nodes), [self];
            if (isHiddenInSequenceExpression(self))
              nodes.unshift(node);
            else if (isCallExpression(node) && isSuper(node.callee))
              nodes.unshift(node), nodes.push(thisExpression());
            else if (function(node2, scope2) {
              if (!isAssignmentExpression(node2) || !isIdentifier(node2.left))
                return false;
              const blockScope = scope2.getBlockParent();
              return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
            }(node, scope))
              nodes.unshift(node), nodes.push(cloneNode(node.left));
            else if (scope.isPure(node, true))
              nodes.push(node);
            else {
              parentPath.isMethod({ computed: true, key: node }) && (scope = scope.parent);
              const temp = scope.generateDeclaredUidIdentifier();
              nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node))), nodes.push(expressionStatement(cloneNode(temp)));
            }
          }
          return this.replaceExpressionWithStatements(nodes);
        }
        if (Array.isArray(this.container))
          return _containerInsertAfter.call(this, nodes);
        if (this.isStatementOrBlock()) {
          const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
          return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
        }
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
      }, exports2.insertBefore = function(nodes_) {
        _removal._assertUnremoved.call(this);
        const nodes = _verifyNodeList.call(this, nodes_), { parentPath, parent } = this;
        if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
          return parentPath.insertBefore(nodes);
        if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init")
          return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
        if (Array.isArray(this.container))
          return _containerInsertBefore.call(this, nodes);
        if (this.isStatementOrBlock()) {
          const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
          return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
        }
        throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
      }, exports2.pushContainer = function(listKey, nodes) {
        _removal._assertUnremoved.call(this);
        const verifiedNodes = _verifyNodeList.call(this, nodes), container = this.node[listKey];
        return _index.default.get({ parentPath: this, parent: this.node, container, listKey, key: container.length }).setContext(this.context).replaceWithMultiple(verifiedNodes);
      }, exports2.unshiftContainer = function(listKey, nodes) {
        _removal._assertUnremoved.call(this), nodes = _verifyNodeList.call(this, nodes);
        const path4 = _index.default.get({ parentPath: this, parent: this.node, container: this.node[listKey], listKey, key: 0 }).setContext(this.context);
        return _containerInsertBefore.call(path4, nodes);
      }, exports2.updateSiblingKeys = updateSiblingKeys;
      var _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js"), _removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode, expressionStatement, isAssignmentExpression, isCallExpression, isExportNamedDeclaration, isExpression, isIdentifier, isSequenceExpression, isSuper, thisExpression } = _t;
      function _containerInsert(from, nodes) {
        updateSiblingKeys.call(this, from, nodes.length);
        const paths = [];
        this.container.splice(from, 0, ...nodes);
        for (let i = 0;i < nodes.length; i++) {
          var _this$context;
          const to = from + i, path4 = this.getSibling(to);
          paths.push(path4), (_this$context = this.context) != null && _this$context.queue && _context.pushContext.call(path4, this.context);
        }
        const contexts = _context._getQueueContexts.call(this);
        for (const path4 of paths) {
          _context.setScope.call(path4), path4.debug("Inserted.");
          for (const context of contexts)
            context.maybeQueue(path4, true);
        }
        return paths;
      }
      function _containerInsertBefore(nodes) {
        return _containerInsert.call(this, this.key, nodes);
      }
      function _containerInsertAfter(nodes) {
        return _containerInsert.call(this, this.key + 1, nodes);
      }
      const last = (arr) => arr[arr.length - 1];
      function isHiddenInSequenceExpression(path4) {
        return isSequenceExpression(path4.parent) && (last(path4.parent.expressions) !== path4.node || isHiddenInSequenceExpression(path4.parentPath));
      }
      function updateSiblingKeys(fromIndex, incrementBy) {
        if (!this.parent)
          return;
        const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
        for (const [, path4] of paths)
          typeof path4.key == "number" && path4.container === this.container && path4.key >= fromIndex && (path4.key += incrementBy);
      }
      function _verifyNodeList(nodes) {
        if (!nodes)
          return [];
        Array.isArray(nodes) || (nodes = [nodes]);
        for (let i = 0;i < nodes.length; i++) {
          const node = nodes[i];
          let msg;
          if (node ? typeof node != "object" ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
            const type = Array.isArray(node) ? "array" : typeof node;
            throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
          }
        }
        return nodes;
      }
      exports2.hoist = function(scope = this.scope) {
        return new _hoister.default(this, scope).run();
      };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2._assertUnremoved = _assertUnremoved, exports2._callRemovalHooks = _callRemovalHooks, exports2._markRemoved = _markRemoved, exports2._remove = _remove, exports2._removeFromScope = _removeFromScope, exports2.remove = function() {
        var _this$opts;
        if (_assertUnremoved.call(this), _context.resync.call(this), _callRemovalHooks.call(this))
          return void _markRemoved.call(this);
        (_this$opts = this.opts) != null && _this$opts.noScope || _removeFromScope.call(this);
        this.shareCommentsWithSiblings(), _remove.call(this), _markRemoved.call(this);
      };
      var _removalHooks = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
      const { getBindingIdentifiers } = _t;
      function _removeFromScope() {
        const bindings = getBindingIdentifiers(this.node, false, false, true);
        Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
      }
      function _callRemovalHooks() {
        if (this.parentPath) {
          for (const fn of _removalHooks.hooks)
            if (fn(this, this.parentPath))
              return true;
        }
      }
      function _remove() {
        Array.isArray(this.container) ? (this.container.splice(this.key, 1), _modification.updateSiblingKeys.call(this, this.key, -1)) : _replacement._replaceWith.call(this, null);
      }
      function _markRemoved() {
        this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node), this.node = null;
      }
      function _assertUnremoved() {
        if (this.removed)
          throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2._replaceWith = _replaceWith, exports2.replaceExpressionWithStatements = function(nodes) {
        _context.resync.call(this);
        const declars = [], nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);
        if (nodesAsSingleExpression) {
          for (const id of declars)
            this.scope.push({ id });
          return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
        }
        const functionParent = this.getFunctionParent(), isParentAsync = functionParent == null ? undefined : functionParent.node.async, isParentGenerator = functionParent == null ? undefined : functionParent.node.generator, container = arrowFunctionExpression([], blockStatement(nodes));
        this.replaceWith(callExpression(container, []));
        const callee = this.get("callee");
        callee.get("body").scope.hoistVariables((id) => this.scope.push({ id }));
        const completionRecords = callee.getCompletionRecords();
        for (const path4 of completionRecords) {
          if (!path4.isExpressionStatement())
            continue;
          const loop = path4.findParent((path22) => path22.isLoop());
          if (loop) {
            let uid = loop.getData("expressionReplacementReturnUid");
            uid ? uid = identifier(uid.name) : (uid = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode(uid))), loop.setData("expressionReplacementReturnUid", uid)), path4.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path4.node.expression));
          } else
            path4.replaceWith(returnStatement(path4.node.expression));
        }
        callee.arrowFunctionToExpression();
        const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
        needToAwaitFunction && (newCallee.set("async", true), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
        needToYieldFunction && (newCallee.set("generator", true), this.replaceWith(yieldExpression(this.node, true)));
        return newCallee.get("body.body");
      }, exports2.replaceInline = function(nodes) {
        if (_context.resync.call(this), Array.isArray(nodes)) {
          if (Array.isArray(this.container)) {
            nodes = _modification._verifyNodeList.call(this, nodes);
            const paths = _modification._containerInsertAfter.call(this, nodes);
            return this.remove(), paths;
          }
          return this.replaceWithMultiple(nodes);
        }
        return this.replaceWith(nodes);
      }, exports2.replaceWith = function(replacementPath) {
        if (_context.resync.call(this), this.removed)
          throw new Error("You can't replace this node, we've already removed it");
        let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
        if (!replacement)
          throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
        if (this.node === replacement)
          return [this];
        if (this.isProgram() && !isProgram(replacement))
          throw new Error("You can only replace a Program root node with another Program node");
        if (Array.isArray(replacement))
          throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
        if (typeof replacement == "string")
          throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
        let nodePath = "";
        this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath = "expression"));
        if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement))
          return this.replaceExpressionWithStatements([replacement]);
        const oldNode = this.node;
        oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
        return _replaceWith.call(this, replacement), this.type = replacement.type, _context.setScope.call(this), this.requeue(), [nodePath ? this.get(nodePath) : this];
      }, exports2.replaceWithMultiple = function(nodes) {
        var _getCachedPaths;
        _context.resync.call(this), nodes = _modification._verifyNodeList.call(this, nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths.delete(this.node), this.node = this.container[this.key] = null;
        const paths = this.insertAfter(nodes);
        this.node ? this.requeue() : this.remove();
        return paths;
      }, exports2.replaceWithSourceString = function(replacement) {
        let ast;
        _context.resync.call(this);
        try {
          replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
        } catch (err) {
          const loc = err.loc;
          throw loc && (err.message += ` - make sure this is an expression.
` + (0, _codeFrame.codeFrameColumns)(replacement, { start: { line: loc.line, column: loc.column + 1 } }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
        }
        const expressionAST = ast.program.body[0].expression;
        return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
      };
      var _codeFrame = __webpack_require__2("./stubs/babel-codeframe.mjs"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/modification.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.26.3/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
      const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, buildUndefinedNode, callExpression, cloneNode, conditionalExpression, expressionStatement, getBindingIdentifiers, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isBlockStatement, isEmptyStatement, isExpression, isExpressionStatement, isIfStatement, isProgram, isStatement, isVariableDeclaration, removeComments, returnStatement, sequenceExpression, validate, yieldExpression } = _t;
      function _replaceWith(node) {
        var _getCachedPaths2;
        if (!this.container)
          throw new ReferenceError("Container is falsy");
        this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node), this.debug(`Replace with ${node == null ? undefined : node.type}`), (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
      }
      function gatherSequenceExpressions(nodes, declars) {
        const exprs = [];
        let ensureLastUndefined = true;
        for (const node of nodes)
          if (isEmptyStatement(node) || (ensureLastUndefined = false), isExpression(node))
            exprs.push(node);
          else if (isExpressionStatement(node))
            exprs.push(node.expression);
          else if (isVariableDeclaration(node)) {
            if (node.kind !== "var")
              return;
            for (const declar of node.declarations) {
              const bindings = getBindingIdentifiers(declar);
              for (const key of Object.keys(bindings))
                declars.push(cloneNode(bindings[key]));
              declar.init && exprs.push(assignmentExpression("=", declar.id, declar.init));
            }
            ensureLastUndefined = true;
          } else if (isIfStatement(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();
            if (!consequent || !alternate)
              return;
            exprs.push(conditionalExpression(node.test, consequent, alternate));
          } else if (isBlockStatement(node)) {
            const body = gatherSequenceExpressions(node.body, declars);
            if (!body)
              return;
            exprs.push(body);
          } else {
            if (!isEmptyStatement(node))
              return;
            nodes.indexOf(node) === 0 && (ensureLastUndefined = true);
          }
        return ensureLastUndefined && exprs.push(buildUndefinedNode()), exprs.length === 1 ? exprs[0] : sequenceExpression(exprs);
      }
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      exports2.default = class {
        constructor({ identifier, scope, path: path4, kind }) {
          this.identifier = undefined, this.scope = undefined, this.path = undefined, this.kind = undefined, this.constantViolations = [], this.constant = true, this.referencePaths = [], this.referenced = false, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path4, this.kind = kind, kind !== "var" && kind !== "hoisted" || !function(path22) {
            for (let { parentPath, key } = path22;parentPath; { parentPath, key } = parentPath) {
              if (parentPath.isFunctionParent())
                return false;
              if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && key === "body")
                return true;
            }
            return false;
          }(path4) || this.reassign(path4), this.clearValue();
        }
        deoptValue() {
          this.clearValue(), this.hasDeoptedValue = true;
        }
        setValue(value2) {
          this.hasDeoptedValue || (this.hasValue = true, this.value = value2);
        }
        clearValue() {
          this.hasDeoptedValue = false, this.hasValue = false, this.value = null;
        }
        reassign(path4) {
          this.constant = false, this.constantViolations.includes(path4) || this.constantViolations.push(path4);
        }
        reference(path4) {
          this.referencePaths.includes(path4) || (this.referenced = true, this.references++, this.referencePaths.push(path4));
        }
        dereference() {
          this.references--, this.referenced = !!this.references;
        }
      };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _renamer = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), t = _t, _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/cache.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js");
      const { NOT_LOCAL_BINDING, assignmentExpression, callExpression, cloneNode, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isCallExpression, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier, isImportDeclaration, isLiteral, isMemberExpression, isMethod, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, expressionStatement, matchesPattern, memberExpression, numericLiteral, toIdentifier, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName, isExportDeclaration, buildUndefinedNode, sequenceExpression } = _t;
      function gatherNodeParts(node, parts) {
        switch (node == null ? undefined : node.type) {
          default:
            var _node$specifiers;
            if (isImportDeclaration(node) || isExportDeclaration(node))
              if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source)
                gatherNodeParts(node.source, parts);
              else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && (_node$specifiers = node.specifiers) != null && _node$specifiers.length)
                for (const e of node.specifiers)
                  gatherNodeParts(e, parts);
              else
                (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
            else
              isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
            break;
          case "MemberExpression":
          case "OptionalMemberExpression":
          case "JSXMemberExpression":
            gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
            break;
          case "Identifier":
          case "JSXIdentifier":
            parts.push(node.name);
            break;
          case "CallExpression":
          case "OptionalCallExpression":
          case "NewExpression":
            gatherNodeParts(node.callee, parts);
            break;
          case "ObjectExpression":
          case "ObjectPattern":
            for (const e of node.properties)
              gatherNodeParts(e, parts);
            break;
          case "SpreadElement":
          case "RestElement":
          case "UnaryExpression":
          case "UpdateExpression":
            gatherNodeParts(node.argument, parts);
            break;
          case "ObjectProperty":
          case "ObjectMethod":
          case "ClassProperty":
          case "ClassMethod":
          case "ClassPrivateProperty":
          case "ClassPrivateMethod":
            gatherNodeParts(node.key, parts);
            break;
          case "ThisExpression":
            parts.push("this");
            break;
          case "Super":
            parts.push("super");
            break;
          case "Import":
            parts.push("import");
            break;
          case "DoExpression":
            parts.push("do");
            break;
          case "YieldExpression":
            parts.push("yield"), gatherNodeParts(node.argument, parts);
            break;
          case "AwaitExpression":
            parts.push("await"), gatherNodeParts(node.argument, parts);
            break;
          case "AssignmentExpression":
            gatherNodeParts(node.left, parts);
            break;
          case "VariableDeclarator":
          case "FunctionExpression":
          case "FunctionDeclaration":
          case "ClassExpression":
          case "ClassDeclaration":
          case "PrivateName":
            gatherNodeParts(node.id, parts);
            break;
          case "ParenthesizedExpression":
            gatherNodeParts(node.expression, parts);
            break;
          case "MetaProperty":
            gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
            break;
          case "JSXElement":
            gatherNodeParts(node.openingElement, parts);
            break;
          case "JSXOpeningElement":
            gatherNodeParts(node.name, parts);
            break;
          case "JSXFragment":
            gatherNodeParts(node.openingFragment, parts);
            break;
          case "JSXOpeningFragment":
            parts.push("Fragment");
            break;
          case "JSXNamespacedName":
            gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
        }
      }
      const collectorVisitor = { ForStatement(path4) {
        const declar = path4.get("init");
        if (declar.isVar()) {
          const { scope } = path4;
          (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
        }
      }, Declaration(path4) {
        if (path4.isBlockScoped())
          return;
        if (path4.isImportDeclaration())
          return;
        if (path4.isExportDeclaration())
          return;
        (path4.scope.getFunctionParent() || path4.scope.getProgramParent()).registerDeclaration(path4);
      }, ImportDeclaration(path4) {
        path4.scope.getBlockParent().registerDeclaration(path4);
      }, ReferencedIdentifier(path4, state) {
        state.references.push(path4);
      }, ForXStatement(path4, state) {
        const left = path4.get("left");
        if (left.isPattern() || left.isIdentifier())
          state.constantViolations.push(path4);
        else if (left.isVar()) {
          const { scope } = path4;
          (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
        }
      }, ExportDeclaration: { exit(path4) {
        const { node, scope } = path4;
        if (isExportAllDeclaration(node))
          return;
        const declar = node.declaration;
        if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
          const id = declar.id;
          if (!id)
            return;
          const binding = scope.getBinding(id.name);
          binding == null || binding.reference(path4);
        } else if (isVariableDeclaration(declar))
          for (const decl of declar.declarations)
            for (const name of Object.keys(getBindingIdentifiers(decl))) {
              const binding = scope.getBinding(name);
              binding == null || binding.reference(path4);
            }
      } }, LabeledStatement(path4) {
        path4.scope.getBlockParent().registerDeclaration(path4);
      }, AssignmentExpression(path4, state) {
        state.assignments.push(path4);
      }, UpdateExpression(path4, state) {
        state.constantViolations.push(path4);
      }, UnaryExpression(path4, state) {
        path4.node.operator === "delete" && state.constantViolations.push(path4);
      }, BlockScoped(path4) {
        let scope = path4.scope;
        scope.path === path4 && (scope = scope.parent);
        if (scope.getBlockParent().registerDeclaration(path4), path4.isClassDeclaration() && path4.node.id) {
          const name = path4.node.id.name;
          path4.scope.bindings[name] = path4.scope.parent.getBinding(name);
        }
      }, CatchClause(path4) {
        path4.scope.registerBinding("let", path4);
      }, Function(path4) {
        const params = path4.get("params");
        for (const param of params)
          path4.scope.registerBinding("param", param);
        path4.isFunctionExpression() && path4.node.id && !path4.node.id[NOT_LOCAL_BINDING] && path4.scope.registerBinding("local", path4.get("id"), path4);
      }, ClassExpression(path4) {
        path4.node.id && !path4.node.id[NOT_LOCAL_BINDING] && path4.scope.registerBinding("local", path4.get("id"), path4);
      }, TSTypeAnnotation(path4) {
        path4.skip();
      } };
      let uid = 0;

      class Scope {
        constructor(path4) {
          this.uid = undefined, this.path = undefined, this.block = undefined, this.inited = undefined, this.labels = undefined, this.bindings = undefined, this.references = undefined, this.globals = undefined, this.uids = undefined, this.data = undefined, this.crawling = undefined;
          const { node } = path4, cached = _cache.scope.get(node);
          if ((cached == null ? undefined : cached.path) === path4)
            return cached;
          _cache.scope.set(node, this), this.uid = uid++, this.block = node, this.path = path4, this.labels = new Map, this.inited = false;
        }
        get parent() {
          var _parent;
          let parent, path4 = this.path;
          do {
            var _path;
            const shouldSkip = path4.key === "key" || path4.listKey === "decorators";
            path4 = path4.parentPath, shouldSkip && path4.isMethod() && (path4 = path4.parentPath), (_path = path4) != null && _path.isScope() && (parent = path4);
          } while (path4 && !parent);
          return (_parent = parent) == null ? undefined : _parent.scope;
        }
        generateDeclaredUidIdentifier(name) {
          const id = this.generateUidIdentifier(name);
          return this.push({ id }), cloneNode(id);
        }
        generateUidIdentifier(name) {
          return identifier(this.generateUid(name));
        }
        generateUid(name = "temp") {
          let uid2;
          name = toIdentifier(name).replace(/^_+/, "").replace(/\d+$/g, "");
          let i = 1;
          do {
            uid2 = `_${name}`, i > 1 && (uid2 += i), i++;
          } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
          const program = this.getProgramParent();
          return program.references[uid2] = true, program.uids[uid2] = true, uid2;
        }
        generateUidBasedOnNode(node, defaultName) {
          const parts = [];
          gatherNodeParts(node, parts);
          let id = parts.join("$");
          return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
        }
        generateUidIdentifierBasedOnNode(node, defaultName) {
          return identifier(this.generateUidBasedOnNode(node, defaultName));
        }
        isStatic(node) {
          if (isThisExpression(node) || isSuper(node) || isTopicReference(node))
            return true;
          if (isIdentifier(node)) {
            const binding = this.getBinding(node.name);
            return binding ? binding.constant : this.hasBinding(node.name);
          }
          return false;
        }
        maybeGenerateMemoised(node, dontPush) {
          if (this.isStatic(node))
            return null;
          {
            const id = this.generateUidIdentifierBasedOnNode(node);
            return dontPush ? id : (this.push({ id }), cloneNode(id));
          }
        }
        checkBlockScopedCollisions(local, kind, name, id) {
          if (kind === "param")
            return;
          if (local.kind === "local")
            return;
          if (kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const")
            throw this.path.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
        }
        rename(oldName, newName) {
          const binding = this.getBinding(oldName);
          if (binding) {
            newName || (newName = this.generateUidIdentifier(oldName).name);
            new _renamer.default(binding, oldName, newName).rename(arguments[2]);
          }
        }
        dump() {
          const sep = "-".repeat(60);
          console.log(sep);
          let scope = this;
          do {
            console.log("#", scope.block.type);
            for (const name of Object.keys(scope.bindings)) {
              const binding = scope.bindings[name];
              console.log(" -", name, { constant: binding.constant, references: binding.references, violations: binding.constantViolations.length, kind: binding.kind });
            }
          } while (scope = scope.parent);
          console.log(sep);
        }
        hasLabel(name) {
          return !!this.getLabel(name);
        }
        getLabel(name) {
          return this.labels.get(name);
        }
        registerLabel(path4) {
          this.labels.set(path4.node.label.name, path4);
        }
        registerDeclaration(path4) {
          if (path4.isLabeledStatement())
            this.registerLabel(path4);
          else if (path4.isFunctionDeclaration())
            this.registerBinding("hoisted", path4.get("id"), path4);
          else if (path4.isVariableDeclaration()) {
            const declarations = path4.get("declarations"), { kind } = path4.node;
            for (const declar of declarations)
              this.registerBinding(kind === "using" || kind === "await using" ? "const" : kind, declar);
          } else if (path4.isClassDeclaration()) {
            if (path4.node.declare)
              return;
            this.registerBinding("let", path4);
          } else if (path4.isImportDeclaration()) {
            const isTypeDeclaration = path4.node.importKind === "type" || path4.node.importKind === "typeof", specifiers = path4.get("specifiers");
            for (const specifier of specifiers) {
              const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");
              this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
            }
          } else if (path4.isExportDeclaration()) {
            const declar = path4.get("declaration");
            (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
          } else
            this.registerBinding("unknown", path4);
        }
        buildUndefinedNode() {
          return buildUndefinedNode();
        }
        registerConstantViolation(path4) {
          const ids = path4.getAssignmentIdentifiers();
          for (const name of Object.keys(ids)) {
            var _this$getBinding;
            (_this$getBinding = this.getBinding(name)) == null || _this$getBinding.reassign(path4);
          }
        }
        registerBinding(kind, path4, bindingPath = path4) {
          if (!kind)
            throw new ReferenceError("no `kind`");
          if (path4.isVariableDeclaration()) {
            const declarators = path4.get("declarations");
            for (const declar of declarators)
              this.registerBinding(kind, declar);
            return;
          }
          const parent = this.getProgramParent(), ids = path4.getOuterBindingIdentifiers(true);
          for (const name of Object.keys(ids)) {
            parent.references[name] = true;
            for (const id of ids[name]) {
              const local = this.getOwnBinding(name);
              if (local) {
                if (local.identifier === id)
                  continue;
                this.checkBlockScopedCollisions(local, kind, name, id);
              }
              local ? local.reassign(bindingPath) : this.bindings[name] = new _binding.default({ identifier: id, scope: this, path: bindingPath, kind });
            }
          }
        }
        addGlobal(node) {
          this.globals[node.name] = node;
        }
        hasUid(name) {
          let scope = this;
          do {
            if (scope.uids[name])
              return true;
          } while (scope = scope.parent);
          return false;
        }
        hasGlobal(name) {
          let scope = this;
          do {
            if (scope.globals[name])
              return true;
          } while (scope = scope.parent);
          return false;
        }
        hasReference(name) {
          return !!this.getProgramParent().references[name];
        }
        isPure(node, constantsOnly) {
          if (isIdentifier(node)) {
            const binding = this.getBinding(node.name);
            return !!binding && (!constantsOnly || binding.constant);
          }
          if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node))
            return true;
          var _node$decorators, _node$decorators2, _node$decorators3;
          if (isClass(node))
            return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && (!(((_node$decorators = node.decorators) == null ? undefined : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly));
          if (isClassBody(node)) {
            for (const method of node.body)
              if (!this.isPure(method, constantsOnly))
                return false;
            return true;
          }
          if (isBinary(node))
            return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
          if (isArrayExpression(node) || isTupleExpression(node)) {
            for (const elem of node.elements)
              if (elem !== null && !this.isPure(elem, constantsOnly))
                return false;
            return true;
          }
          if (isObjectExpression(node) || isRecordExpression(node)) {
            for (const prop of node.properties)
              if (!this.isPure(prop, constantsOnly))
                return false;
            return true;
          }
          if (isMethod(node))
            return !(node.computed && !this.isPure(node.key, constantsOnly)) && !(((_node$decorators2 = node.decorators) == null ? undefined : _node$decorators2.length) > 0);
          if (isProperty(node))
            return !(node.computed && !this.isPure(node.key, constantsOnly)) && (!(((_node$decorators3 = node.decorators) == null ? undefined : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && node.value !== null && !this.isPure(node.value, constantsOnly)));
          if (isUnaryExpression(node))
            return this.isPure(node.argument, constantsOnly);
          if (isTemplateLiteral(node)) {
            for (const expression of node.expressions)
              if (!this.isPure(expression, constantsOnly))
                return false;
            return true;
          }
          return isTaggedTemplateExpression(node) ? matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", { noGlobals: true }) && this.isPure(node.quasi, constantsOnly) : isMemberExpression(node) ? !node.computed && isIdentifier(node.object) && node.object.name === "Symbol" && isIdentifier(node.property) && node.property.name !== "for" && !this.hasBinding("Symbol", { noGlobals: true }) : isCallExpression(node) ? matchesPattern(node.callee, "Symbol.for") && !this.hasBinding("Symbol", { noGlobals: true }) && node.arguments.length === 1 && t.isStringLiteral(node.arguments[0]) : isPureish(node);
        }
        setData(key, val) {
          return this.data[key] = val;
        }
        getData(key) {
          let scope = this;
          do {
            const data = scope.data[key];
            if (data != null)
              return data;
          } while (scope = scope.parent);
        }
        removeData(key) {
          let scope = this;
          do {
            scope.data[key] != null && (scope.data[key] = null);
          } while (scope = scope.parent);
        }
        init() {
          this.inited || (this.inited = true, this.crawl());
        }
        crawl() {
          const path4 = this.path;
          this.references = Object.create(null), this.bindings = Object.create(null), this.globals = Object.create(null), this.uids = Object.create(null), this.data = Object.create(null);
          let scope = this;
          do {
            if (scope.crawling)
              return;
            if (scope.path.isProgram())
              break;
          } while (scope = scope.parent);
          const programParent = scope, state = { references: [], constantViolations: [], assignments: [] };
          if (this.crawling = true, path4.type !== "Program" && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
            for (const visit of collectorVisitor.enter)
              visit.call(state, path4, state);
            const typeVisitors = collectorVisitor[path4.type];
            if (typeVisitors)
              for (const visit of typeVisitors.enter)
                visit.call(state, path4, state);
          }
          path4.traverse(collectorVisitor, state), this.crawling = false;
          for (const path22 of state.assignments) {
            const ids = path22.getAssignmentIdentifiers();
            for (const name of Object.keys(ids))
              path22.scope.getBinding(name) || programParent.addGlobal(ids[name]);
            path22.scope.registerConstantViolation(path22);
          }
          for (const ref of state.references) {
            const binding = ref.scope.getBinding(ref.node.name);
            binding ? binding.reference(ref) : programParent.addGlobal(ref.node);
          }
          for (const path22 of state.constantViolations)
            path22.scope.registerConstantViolation(path22);
        }
        push(opts) {
          let path4 = this.path;
          path4.isPattern() ? path4 = this.getPatternParent().path : path4.isBlockStatement() || path4.isProgram() || (path4 = this.getBlockParent().path), path4.isSwitchStatement() && (path4 = (this.getFunctionParent() || this.getProgramParent()).path);
          const { init, unique, kind = "var", id } = opts;
          if (!init && !unique && (kind === "var" || kind === "let") && path4.isFunction() && !path4.node.name && isCallExpression(path4.parent, { callee: path4.node }) && path4.parent.arguments.length <= path4.node.params.length && isIdentifier(id))
            return path4.pushContainer("params", id), void path4.scope.registerBinding("param", path4.get("params")[path4.node.params.length - 1]);
          (path4.isLoop() || path4.isCatchClause() || path4.isFunction()) && (path4.ensureBlock(), path4 = path4.get("body"));
          const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
          let declarPath = !unique && path4.getData(dataKey);
          if (!declarPath) {
            const declar = variableDeclaration(kind, []);
            declar._blockHoist = blockHoist, [declarPath] = path4.unshiftContainer("body", [declar]), unique || path4.setData(dataKey, declarPath);
          }
          const declarator = variableDeclarator(id, init), len = declarPath.node.declarations.push(declarator);
          path4.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
        }
        getProgramParent() {
          let scope = this;
          do {
            if (scope.path.isProgram())
              return scope;
          } while (scope = scope.parent);
          throw new Error("Couldn't find a Program");
        }
        getFunctionParent() {
          let scope = this;
          do {
            if (scope.path.isFunctionParent())
              return scope;
          } while (scope = scope.parent);
          return null;
        }
        getBlockParent() {
          let scope = this;
          do {
            if (scope.path.isBlockParent())
              return scope;
          } while (scope = scope.parent);
          throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
        }
        getPatternParent() {
          let scope = this;
          do {
            if (!scope.path.isPattern())
              return scope.getBlockParent();
          } while (scope = scope.parent.parent);
          throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
        }
        getAllBindings() {
          const ids = Object.create(null);
          let scope = this;
          do {
            for (const key of Object.keys(scope.bindings))
              key in ids == false && (ids[key] = scope.bindings[key]);
            scope = scope.parent;
          } while (scope);
          return ids;
        }
        bindingIdentifierEquals(name, node) {
          return this.getBindingIdentifier(name) === node;
        }
        getBinding(name) {
          let previousPath, scope = this;
          do {
            const binding = scope.getOwnBinding(name);
            var _previousPath;
            if (binding) {
              if ((_previousPath = previousPath) == null || !_previousPath.isPattern() || binding.kind === "param" || binding.kind === "local")
                return binding;
            } else if (!binding && name === "arguments" && scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
              break;
            previousPath = scope.path;
          } while (scope = scope.parent);
        }
        getOwnBinding(name) {
          return this.bindings[name];
        }
        getBindingIdentifier(name) {
          var _this$getBinding2;
          return (_this$getBinding2 = this.getBinding(name)) == null ? undefined : _this$getBinding2.identifier;
        }
        getOwnBindingIdentifier(name) {
          const binding = this.bindings[name];
          return binding == null ? undefined : binding.identifier;
        }
        hasOwnBinding(name) {
          return !!this.getOwnBinding(name);
        }
        hasBinding(name, opts) {
          if (!name)
            return false;
          let noGlobals, noUids, scope = this;
          do {
            if (scope.hasOwnBinding(name))
              return true;
          } while (scope = scope.parent);
          return typeof opts == "object" ? (noGlobals = opts.noGlobals, noUids = opts.noUids) : typeof opts == "boolean" && (noGlobals = opts), !(noUids || !this.hasUid(name)) || (!(noGlobals || !Scope.globals.includes(name)) || !(noGlobals || !Scope.contextVariables.includes(name)));
        }
        parentHasBinding(name, opts) {
          var _this$parent;
          return (_this$parent = this.parent) == null ? undefined : _this$parent.hasBinding(name, opts);
        }
        moveBindingTo(name, scope) {
          const info = this.getBinding(name);
          info && (info.scope.removeOwnBinding(name), info.scope = scope, scope.bindings[name] = info);
        }
        removeOwnBinding(name) {
          delete this.bindings[name];
        }
        removeBinding(name) {
          var _this$getBinding3;
          (_this$getBinding3 = this.getBinding(name)) == null || _this$getBinding3.scope.removeOwnBinding(name);
          let scope = this;
          do {
            scope.uids[name] && (scope.uids[name] = false);
          } while (scope = scope.parent);
        }
        hoistVariables(emit = (id) => this.push({ id })) {
          this.crawl();
          const seen = new Set;
          for (const name of Object.keys(this.bindings)) {
            const binding = this.bindings[name];
            if (!binding)
              continue;
            const { path: path4 } = binding;
            if (!path4.isVariableDeclarator())
              continue;
            const { parent, parentPath } = path4;
            if (parent.kind !== "var" || seen.has(parent))
              continue;
            let firstId;
            seen.add(path4.parent);
            const init = [];
            for (const decl of parent.declarations) {
              firstId != null || (firstId = decl.id), decl.init && init.push(assignmentExpression("=", decl.id, decl.init));
              const ids = Object.keys(getBindingIdentifiers(decl, false, true, true));
              for (const name2 of ids)
                emit(identifier(name2), decl.init != null);
            }
            if (parentPath.parentPath.isFor({ left: parent }))
              parentPath.replaceWith(firstId);
            else if (init.length === 0)
              parentPath.remove();
            else {
              const expr = init.length === 1 ? init[0] : sequenceExpression(init);
              parentPath.parentPath.isForStatement({ init: parent }) ? parentPath.replaceWith(expr) : parentPath.replaceWith(expressionStatement(expr));
            }
          }
        }
      }
      exports2.default = Scope, Scope.globals = Object.keys(_globals.builtin), Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"], Scope.prototype._renameFromMap = function(map, oldName, newName, value2) {
        map[oldName] && (map[newName] = value2, map[oldName] = null);
      }, Scope.prototype.traverse = function(node, opts, state) {
        (0, _index.default)(node, opts, this, state, this.path);
      }, Scope.prototype._generateUid = function(name, i) {
        let id = name;
        return i > 1 && (id += i), `_${id}`;
      }, Scope.prototype.toArray = function(node, i, arrayLikeIsIterable) {
        if (isIdentifier(node)) {
          const binding = this.getBinding(node.name);
          if (binding != null && binding.constant && binding.path.isGenericType("Array"))
            return node;
        }
        if (isArrayExpression(node))
          return node;
        if (isIdentifier(node, { name: "arguments" }))
          return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
        let helperName;
        const args = [node];
        return i === true ? helperName = "toConsumableArray" : typeof i == "number" ? (args.push(numericLiteral(i)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.path.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.path.hub.addHelper(helperName), args);
      }, Scope.prototype.getAllBindingsOfKind = function(...kinds) {
        const ids = Object.create(null);
        for (const kind of kinds) {
          let scope = this;
          do {
            for (const name of Object.keys(scope.bindings)) {
              const binding = scope.bindings[name];
              binding.kind === kind && (ids[name] = binding);
            }
            scope = scope.parent;
          } while (scope);
        }
        return ids;
      }, Object.defineProperties(Scope.prototype, { parentBlock: { configurable: true, enumerable: true, get() {
        return this.path.parent;
      } }, hub: { configurable: true, enumerable: true, get() {
        return this.path.hub;
      } } });
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _t = t, _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
      const { getAssignmentIdentifiers } = _t, renameVisitor = { ReferencedIdentifier({ node }, state) {
        node.name === state.oldName && (node.name = state.newName);
      }, Scope(path4, state) {
        path4.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path4.skip(), path4.isMethod() && (path4.requeueComputedKeyAndDecorators ? path4.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path4)));
      }, ObjectProperty({ node, scope }, state) {
        const { name } = node.key;
        var _node$extra;
        !node.shorthand || name !== state.oldName && name !== state.newName || scope.getBindingIdentifier(name) !== state.binding.identifier || (node.shorthand = false, (_node$extra = node.extra) != null && _node$extra.shorthand && (node.extra.shorthand = false));
      }, "AssignmentExpression|Declaration|VariableDeclarator"(path4, state) {
        if (path4.isVariableDeclaration())
          return;
        const ids = path4.isAssignmentExpression() ? getAssignmentIdentifiers(path4.node) : path4.getOuterBindingIdentifiers();
        for (const name in ids)
          name === state.oldName && (ids[name].name = state.newName);
      } };
      exports2.default = class {
        constructor(binding, oldName, newName) {
          this.newName = newName, this.oldName = oldName, this.binding = binding;
        }
        maybeConvertFromExportDeclaration(parentDeclar) {
          const maybeExportDeclar = parentDeclar.parentPath;
          if (maybeExportDeclar.isExportDeclaration()) {
            if (maybeExportDeclar.isExportDefaultDeclaration()) {
              const { declaration } = maybeExportDeclar.node;
              if (t.isDeclaration(declaration) && !declaration.id)
                return;
            }
            maybeExportDeclar.isExportAllDeclaration() || maybeExportDeclar.splitExportDeclaration();
          }
        }
        maybeConvertFromClassFunctionDeclaration(path4) {
          return path4;
        }
        maybeConvertFromClassFunctionExpression(path4) {
          return path4;
        }
        rename() {
          const { binding, oldName, newName } = this, { scope, path: path4 } = binding, parentDeclar = path4.find((path22) => path22.isDeclaration() || path22.isFunctionExpression() || path22.isClassExpression());
          if (parentDeclar) {
            parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
          }
          const blockToTraverse = arguments[0] || scope.block, skipKeys = { discriminant: true };
          t.isMethod(blockToTraverse) && (blockToTraverse.computed && (skipKeys.key = true), t.isObjectMethod(blockToTraverse) || (skipKeys.decorators = true)), (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, skipKeys), arguments[0] || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path4), this.maybeConvertFromClassFunctionExpression(path4));
        }
      };
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.traverseNode = function(node, opts, scope, state, path4, skipKeys, visitSelf) {
        const keys = VISITOR_KEYS[node.type];
        if (!keys)
          return false;
        const context = new _context.default(scope, opts, state, path4);
        if (visitSelf)
          return (skipKeys == null || !skipKeys[path4.parentKey]) && context.visitQueue([path4]);
        for (const key of keys)
          if ((skipKeys == null || !skipKeys[key]) && context.visit(node, key))
            return true;
        return false;
      };
      var _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
      const { VISITOR_KEYS } = _t;
    }, "./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.environmentVisitor = function(visitor) {
        return merge([_environmentVisitor, visitor]);
      }, exports2.explode = explode$1, exports2.isExplodedVisitor = isExplodedVisitor, exports2.merge = merge, exports2.verify = verify$1;
      var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), virtualTypesValidators = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js"), _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.26.4/node_modules/@babel/traverse/lib/path/context.js");
      const { DEPRECATED_KEYS, DEPRECATED_ALIASES, FLIPPED_ALIAS_KEYS, TYPES, __internal__deprecationWarning: deprecationWarning } = _t;
      function isExplodedVisitor(visitor) {
        return visitor == null ? undefined : visitor._exploded;
      }
      function explode$1(visitor) {
        if (isExplodedVisitor(visitor))
          return visitor;
        visitor._exploded = true;
        for (const nodeType of Object.keys(visitor)) {
          if (shouldIgnoreKey(nodeType))
            continue;
          const parts = nodeType.split("|");
          if (parts.length === 1)
            continue;
          const fns = visitor[nodeType];
          delete visitor[nodeType];
          for (const part of parts)
            visitor[part] = fns;
        }
        verify$1(visitor), delete visitor.__esModule, function(obj) {
          for (const key of Object.keys(obj)) {
            if (shouldIgnoreKey(key))
              continue;
            const fns = obj[key];
            typeof fns == "function" && (obj[key] = { enter: fns });
          }
        }(visitor), ensureCallbackArrays(visitor);
        for (const nodeType of Object.keys(visitor)) {
          if (shouldIgnoreKey(nodeType))
            continue;
          if (!(nodeType in virtualTypes))
            continue;
          const fns = visitor[nodeType];
          for (const type of Object.keys(fns))
            fns[type] = wrapCheck(nodeType, fns[type]);
          delete visitor[nodeType];
          const types = virtualTypes[nodeType];
          if (types !== null)
            for (const type of types)
              visitor[type] ? mergePair(visitor[type], fns) : visitor[type] = fns;
          else
            mergePair(visitor, fns);
        }
        for (const nodeType of Object.keys(visitor)) {
          if (shouldIgnoreKey(nodeType))
            continue;
          let aliases = FLIPPED_ALIAS_KEYS[nodeType];
          if (nodeType in DEPRECATED_KEYS) {
            const deprecatedKey = DEPRECATED_KEYS[nodeType];
            deprecationWarning(nodeType, deprecatedKey, "Visitor "), aliases = [deprecatedKey];
          } else if (nodeType in DEPRECATED_ALIASES) {
            const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
            deprecationWarning(nodeType, deprecatedAlias, "Visitor "), aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
          }
          if (!aliases)
            continue;
          const fns = visitor[nodeType];
          delete visitor[nodeType];
          for (const alias of aliases) {
            const existing = visitor[alias];
            existing ? mergePair(existing, fns) : visitor[alias] = Object.assign({}, fns);
          }
        }
        for (const nodeType of Object.keys(visitor))
          shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
        return visitor;
      }
      function verify$1(visitor) {
        if (!visitor._verified) {
          if (typeof visitor == "function")
            throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
          for (const nodeType of Object.keys(visitor)) {
            if (nodeType !== "enter" && nodeType !== "exit" || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType))
              continue;
            if (!TYPES.includes(nodeType))
              throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse 7.26.4`);
            const visitors = visitor[nodeType];
            if (typeof visitors == "object")
              for (const visitorKey of Object.keys(visitors)) {
                if (visitorKey !== "enter" && visitorKey !== "exit")
                  throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
                validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
              }
          }
          visitor._verified = true;
        }
      }
      function validateVisitorMethods(path4, val) {
        const fns = [].concat(val);
        for (const fn of fns)
          if (typeof fn != "function")
            throw new TypeError(`Non-function found defined in ${path4} with type ${typeof fn}`);
      }
      function merge(visitors, states = [], wrapper) {
        const mergedVisitor = { _verified: true, _exploded: true };
        Object.defineProperty(mergedVisitor, "_exploded", { enumerable: false }), Object.defineProperty(mergedVisitor, "_verified", { enumerable: false });
        for (let i = 0;i < visitors.length; i++) {
          const visitor = explode$1(visitors[i]), state = states[i];
          let topVisitor = visitor;
          (state || wrapper) && (topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper)), mergePair(mergedVisitor, topVisitor);
          for (const key of Object.keys(visitor)) {
            if (shouldIgnoreKey(key))
              continue;
            let typeVisitor = visitor[key];
            (state || wrapper) && (typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper));
            mergePair(mergedVisitor[key] || (mergedVisitor[key] = {}), typeVisitor);
          }
        }
        return mergedVisitor;
      }
      function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
        const newVisitor = {};
        for (const phase of ["enter", "exit"]) {
          let fns = oldVisitor[phase];
          Array.isArray(fns) && (fns = fns.map(function(fn) {
            let newFn = fn;
            return state && (newFn = function(path4) {
              fn.call(state, path4, state);
            }), wrapper && (newFn = wrapper(state == null ? undefined : state.key, phase, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
          }), newVisitor[phase] = fns);
        }
        return newVisitor;
      }
      function ensureCallbackArrays(obj) {
        obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
      }
      function wrapCheck(nodeType, fn) {
        const validator = virtualTypesValidators[`is${nodeType}`], newFn = function(path4) {
          if (validator.call(path4))
            return fn.apply(this, arguments);
        };
        return newFn.toString = () => fn.toString(), newFn;
      }
      function shouldIgnoreKey(key) {
        return key[0] === "_" || (key === "enter" || key === "exit" || key === "shouldSkip" || (key === "denylist" || key === "noScope" || key === "skipKeys" || key === "blacklist"));
      }
      function mergePair(dest, src) {
        for (const phase of ["enter", "exit"])
          src[phase] && (dest[phase] = [].concat(dest[phase] || [], src[phase]));
      }
      const _environmentVisitor = { FunctionParent(path4) {
        path4.isArrowFunctionExpression() || (path4.skip(), path4.isMethod() && (path4.requeueComputedKeyAndDecorators ? path4.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path4)));
      }, Property(path4) {
        path4.isObjectProperty() || (path4.skip(), path4.requeueComputedKeyAndDecorators ? path4.requeueComputedKeyAndDecorators() : _context.requeueComputedKeyAndDecorators.call(path4));
      } };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        if (!(0, _isNode.default)(node)) {
          var _node$type;
          const type = (_node$type = node == null ? undefined : node.type) != null ? _node$type : JSON.stringify(node);
          throw new TypeError(`Not a valid node of type "${type}"`);
        }
      };
      var _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertAccessor = function(node, opts) {
        assert("Accessor", node, opts);
      }, exports2.assertAnyTypeAnnotation = function(node, opts) {
        assert("AnyTypeAnnotation", node, opts);
      }, exports2.assertArgumentPlaceholder = function(node, opts) {
        assert("ArgumentPlaceholder", node, opts);
      }, exports2.assertArrayExpression = function(node, opts) {
        assert("ArrayExpression", node, opts);
      }, exports2.assertArrayPattern = function(node, opts) {
        assert("ArrayPattern", node, opts);
      }, exports2.assertArrayTypeAnnotation = function(node, opts) {
        assert("ArrayTypeAnnotation", node, opts);
      }, exports2.assertArrowFunctionExpression = function(node, opts) {
        assert("ArrowFunctionExpression", node, opts);
      }, exports2.assertAssignmentExpression = function(node, opts) {
        assert("AssignmentExpression", node, opts);
      }, exports2.assertAssignmentPattern = function(node, opts) {
        assert("AssignmentPattern", node, opts);
      }, exports2.assertAwaitExpression = function(node, opts) {
        assert("AwaitExpression", node, opts);
      }, exports2.assertBigIntLiteral = function(node, opts) {
        assert("BigIntLiteral", node, opts);
      }, exports2.assertBinary = function(node, opts) {
        assert("Binary", node, opts);
      }, exports2.assertBinaryExpression = function(node, opts) {
        assert("BinaryExpression", node, opts);
      }, exports2.assertBindExpression = function(node, opts) {
        assert("BindExpression", node, opts);
      }, exports2.assertBlock = function(node, opts) {
        assert("Block", node, opts);
      }, exports2.assertBlockParent = function(node, opts) {
        assert("BlockParent", node, opts);
      }, exports2.assertBlockStatement = function(node, opts) {
        assert("BlockStatement", node, opts);
      }, exports2.assertBooleanLiteral = function(node, opts) {
        assert("BooleanLiteral", node, opts);
      }, exports2.assertBooleanLiteralTypeAnnotation = function(node, opts) {
        assert("BooleanLiteralTypeAnnotation", node, opts);
      }, exports2.assertBooleanTypeAnnotation = function(node, opts) {
        assert("BooleanTypeAnnotation", node, opts);
      }, exports2.assertBreakStatement = function(node, opts) {
        assert("BreakStatement", node, opts);
      }, exports2.assertCallExpression = function(node, opts) {
        assert("CallExpression", node, opts);
      }, exports2.assertCatchClause = function(node, opts) {
        assert("CatchClause", node, opts);
      }, exports2.assertClass = function(node, opts) {
        assert("Class", node, opts);
      }, exports2.assertClassAccessorProperty = function(node, opts) {
        assert("ClassAccessorProperty", node, opts);
      }, exports2.assertClassBody = function(node, opts) {
        assert("ClassBody", node, opts);
      }, exports2.assertClassDeclaration = function(node, opts) {
        assert("ClassDeclaration", node, opts);
      }, exports2.assertClassExpression = function(node, opts) {
        assert("ClassExpression", node, opts);
      }, exports2.assertClassImplements = function(node, opts) {
        assert("ClassImplements", node, opts);
      }, exports2.assertClassMethod = function(node, opts) {
        assert("ClassMethod", node, opts);
      }, exports2.assertClassPrivateMethod = function(node, opts) {
        assert("ClassPrivateMethod", node, opts);
      }, exports2.assertClassPrivateProperty = function(node, opts) {
        assert("ClassPrivateProperty", node, opts);
      }, exports2.assertClassProperty = function(node, opts) {
        assert("ClassProperty", node, opts);
      }, exports2.assertCompletionStatement = function(node, opts) {
        assert("CompletionStatement", node, opts);
      }, exports2.assertConditional = function(node, opts) {
        assert("Conditional", node, opts);
      }, exports2.assertConditionalExpression = function(node, opts) {
        assert("ConditionalExpression", node, opts);
      }, exports2.assertContinueStatement = function(node, opts) {
        assert("ContinueStatement", node, opts);
      }, exports2.assertDebuggerStatement = function(node, opts) {
        assert("DebuggerStatement", node, opts);
      }, exports2.assertDecimalLiteral = function(node, opts) {
        assert("DecimalLiteral", node, opts);
      }, exports2.assertDeclaration = function(node, opts) {
        assert("Declaration", node, opts);
      }, exports2.assertDeclareClass = function(node, opts) {
        assert("DeclareClass", node, opts);
      }, exports2.assertDeclareExportAllDeclaration = function(node, opts) {
        assert("DeclareExportAllDeclaration", node, opts);
      }, exports2.assertDeclareExportDeclaration = function(node, opts) {
        assert("DeclareExportDeclaration", node, opts);
      }, exports2.assertDeclareFunction = function(node, opts) {
        assert("DeclareFunction", node, opts);
      }, exports2.assertDeclareInterface = function(node, opts) {
        assert("DeclareInterface", node, opts);
      }, exports2.assertDeclareModule = function(node, opts) {
        assert("DeclareModule", node, opts);
      }, exports2.assertDeclareModuleExports = function(node, opts) {
        assert("DeclareModuleExports", node, opts);
      }, exports2.assertDeclareOpaqueType = function(node, opts) {
        assert("DeclareOpaqueType", node, opts);
      }, exports2.assertDeclareTypeAlias = function(node, opts) {
        assert("DeclareTypeAlias", node, opts);
      }, exports2.assertDeclareVariable = function(node, opts) {
        assert("DeclareVariable", node, opts);
      }, exports2.assertDeclaredPredicate = function(node, opts) {
        assert("DeclaredPredicate", node, opts);
      }, exports2.assertDecorator = function(node, opts) {
        assert("Decorator", node, opts);
      }, exports2.assertDirective = function(node, opts) {
        assert("Directive", node, opts);
      }, exports2.assertDirectiveLiteral = function(node, opts) {
        assert("DirectiveLiteral", node, opts);
      }, exports2.assertDoExpression = function(node, opts) {
        assert("DoExpression", node, opts);
      }, exports2.assertDoWhileStatement = function(node, opts) {
        assert("DoWhileStatement", node, opts);
      }, exports2.assertEmptyStatement = function(node, opts) {
        assert("EmptyStatement", node, opts);
      }, exports2.assertEmptyTypeAnnotation = function(node, opts) {
        assert("EmptyTypeAnnotation", node, opts);
      }, exports2.assertEnumBody = function(node, opts) {
        assert("EnumBody", node, opts);
      }, exports2.assertEnumBooleanBody = function(node, opts) {
        assert("EnumBooleanBody", node, opts);
      }, exports2.assertEnumBooleanMember = function(node, opts) {
        assert("EnumBooleanMember", node, opts);
      }, exports2.assertEnumDeclaration = function(node, opts) {
        assert("EnumDeclaration", node, opts);
      }, exports2.assertEnumDefaultedMember = function(node, opts) {
        assert("EnumDefaultedMember", node, opts);
      }, exports2.assertEnumMember = function(node, opts) {
        assert("EnumMember", node, opts);
      }, exports2.assertEnumNumberBody = function(node, opts) {
        assert("EnumNumberBody", node, opts);
      }, exports2.assertEnumNumberMember = function(node, opts) {
        assert("EnumNumberMember", node, opts);
      }, exports2.assertEnumStringBody = function(node, opts) {
        assert("EnumStringBody", node, opts);
      }, exports2.assertEnumStringMember = function(node, opts) {
        assert("EnumStringMember", node, opts);
      }, exports2.assertEnumSymbolBody = function(node, opts) {
        assert("EnumSymbolBody", node, opts);
      }, exports2.assertExistsTypeAnnotation = function(node, opts) {
        assert("ExistsTypeAnnotation", node, opts);
      }, exports2.assertExportAllDeclaration = function(node, opts) {
        assert("ExportAllDeclaration", node, opts);
      }, exports2.assertExportDeclaration = function(node, opts) {
        assert("ExportDeclaration", node, opts);
      }, exports2.assertExportDefaultDeclaration = function(node, opts) {
        assert("ExportDefaultDeclaration", node, opts);
      }, exports2.assertExportDefaultSpecifier = function(node, opts) {
        assert("ExportDefaultSpecifier", node, opts);
      }, exports2.assertExportNamedDeclaration = function(node, opts) {
        assert("ExportNamedDeclaration", node, opts);
      }, exports2.assertExportNamespaceSpecifier = function(node, opts) {
        assert("ExportNamespaceSpecifier", node, opts);
      }, exports2.assertExportSpecifier = function(node, opts) {
        assert("ExportSpecifier", node, opts);
      }, exports2.assertExpression = function(node, opts) {
        assert("Expression", node, opts);
      }, exports2.assertExpressionStatement = function(node, opts) {
        assert("ExpressionStatement", node, opts);
      }, exports2.assertExpressionWrapper = function(node, opts) {
        assert("ExpressionWrapper", node, opts);
      }, exports2.assertFile = function(node, opts) {
        assert("File", node, opts);
      }, exports2.assertFlow = function(node, opts) {
        assert("Flow", node, opts);
      }, exports2.assertFlowBaseAnnotation = function(node, opts) {
        assert("FlowBaseAnnotation", node, opts);
      }, exports2.assertFlowDeclaration = function(node, opts) {
        assert("FlowDeclaration", node, opts);
      }, exports2.assertFlowPredicate = function(node, opts) {
        assert("FlowPredicate", node, opts);
      }, exports2.assertFlowType = function(node, opts) {
        assert("FlowType", node, opts);
      }, exports2.assertFor = function(node, opts) {
        assert("For", node, opts);
      }, exports2.assertForInStatement = function(node, opts) {
        assert("ForInStatement", node, opts);
      }, exports2.assertForOfStatement = function(node, opts) {
        assert("ForOfStatement", node, opts);
      }, exports2.assertForStatement = function(node, opts) {
        assert("ForStatement", node, opts);
      }, exports2.assertForXStatement = function(node, opts) {
        assert("ForXStatement", node, opts);
      }, exports2.assertFunction = function(node, opts) {
        assert("Function", node, opts);
      }, exports2.assertFunctionDeclaration = function(node, opts) {
        assert("FunctionDeclaration", node, opts);
      }, exports2.assertFunctionExpression = function(node, opts) {
        assert("FunctionExpression", node, opts);
      }, exports2.assertFunctionParent = function(node, opts) {
        assert("FunctionParent", node, opts);
      }, exports2.assertFunctionTypeAnnotation = function(node, opts) {
        assert("FunctionTypeAnnotation", node, opts);
      }, exports2.assertFunctionTypeParam = function(node, opts) {
        assert("FunctionTypeParam", node, opts);
      }, exports2.assertGenericTypeAnnotation = function(node, opts) {
        assert("GenericTypeAnnotation", node, opts);
      }, exports2.assertIdentifier = function(node, opts) {
        assert("Identifier", node, opts);
      }, exports2.assertIfStatement = function(node, opts) {
        assert("IfStatement", node, opts);
      }, exports2.assertImmutable = function(node, opts) {
        assert("Immutable", node, opts);
      }, exports2.assertImport = function(node, opts) {
        assert("Import", node, opts);
      }, exports2.assertImportAttribute = function(node, opts) {
        assert("ImportAttribute", node, opts);
      }, exports2.assertImportDeclaration = function(node, opts) {
        assert("ImportDeclaration", node, opts);
      }, exports2.assertImportDefaultSpecifier = function(node, opts) {
        assert("ImportDefaultSpecifier", node, opts);
      }, exports2.assertImportExpression = function(node, opts) {
        assert("ImportExpression", node, opts);
      }, exports2.assertImportNamespaceSpecifier = function(node, opts) {
        assert("ImportNamespaceSpecifier", node, opts);
      }, exports2.assertImportOrExportDeclaration = function(node, opts) {
        assert("ImportOrExportDeclaration", node, opts);
      }, exports2.assertImportSpecifier = function(node, opts) {
        assert("ImportSpecifier", node, opts);
      }, exports2.assertIndexedAccessType = function(node, opts) {
        assert("IndexedAccessType", node, opts);
      }, exports2.assertInferredPredicate = function(node, opts) {
        assert("InferredPredicate", node, opts);
      }, exports2.assertInterfaceDeclaration = function(node, opts) {
        assert("InterfaceDeclaration", node, opts);
      }, exports2.assertInterfaceExtends = function(node, opts) {
        assert("InterfaceExtends", node, opts);
      }, exports2.assertInterfaceTypeAnnotation = function(node, opts) {
        assert("InterfaceTypeAnnotation", node, opts);
      }, exports2.assertInterpreterDirective = function(node, opts) {
        assert("InterpreterDirective", node, opts);
      }, exports2.assertIntersectionTypeAnnotation = function(node, opts) {
        assert("IntersectionTypeAnnotation", node, opts);
      }, exports2.assertJSX = function(node, opts) {
        assert("JSX", node, opts);
      }, exports2.assertJSXAttribute = function(node, opts) {
        assert("JSXAttribute", node, opts);
      }, exports2.assertJSXClosingElement = function(node, opts) {
        assert("JSXClosingElement", node, opts);
      }, exports2.assertJSXClosingFragment = function(node, opts) {
        assert("JSXClosingFragment", node, opts);
      }, exports2.assertJSXElement = function(node, opts) {
        assert("JSXElement", node, opts);
      }, exports2.assertJSXEmptyExpression = function(node, opts) {
        assert("JSXEmptyExpression", node, opts);
      }, exports2.assertJSXExpressionContainer = function(node, opts) {
        assert("JSXExpressionContainer", node, opts);
      }, exports2.assertJSXFragment = function(node, opts) {
        assert("JSXFragment", node, opts);
      }, exports2.assertJSXIdentifier = function(node, opts) {
        assert("JSXIdentifier", node, opts);
      }, exports2.assertJSXMemberExpression = function(node, opts) {
        assert("JSXMemberExpression", node, opts);
      }, exports2.assertJSXNamespacedName = function(node, opts) {
        assert("JSXNamespacedName", node, opts);
      }, exports2.assertJSXOpeningElement = function(node, opts) {
        assert("JSXOpeningElement", node, opts);
      }, exports2.assertJSXOpeningFragment = function(node, opts) {
        assert("JSXOpeningFragment", node, opts);
      }, exports2.assertJSXSpreadAttribute = function(node, opts) {
        assert("JSXSpreadAttribute", node, opts);
      }, exports2.assertJSXSpreadChild = function(node, opts) {
        assert("JSXSpreadChild", node, opts);
      }, exports2.assertJSXText = function(node, opts) {
        assert("JSXText", node, opts);
      }, exports2.assertLVal = function(node, opts) {
        assert("LVal", node, opts);
      }, exports2.assertLabeledStatement = function(node, opts) {
        assert("LabeledStatement", node, opts);
      }, exports2.assertLiteral = function(node, opts) {
        assert("Literal", node, opts);
      }, exports2.assertLogicalExpression = function(node, opts) {
        assert("LogicalExpression", node, opts);
      }, exports2.assertLoop = function(node, opts) {
        assert("Loop", node, opts);
      }, exports2.assertMemberExpression = function(node, opts) {
        assert("MemberExpression", node, opts);
      }, exports2.assertMetaProperty = function(node, opts) {
        assert("MetaProperty", node, opts);
      }, exports2.assertMethod = function(node, opts) {
        assert("Method", node, opts);
      }, exports2.assertMiscellaneous = function(node, opts) {
        assert("Miscellaneous", node, opts);
      }, exports2.assertMixedTypeAnnotation = function(node, opts) {
        assert("MixedTypeAnnotation", node, opts);
      }, exports2.assertModuleDeclaration = function(node, opts) {
        (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), assert("ModuleDeclaration", node, opts);
      }, exports2.assertModuleExpression = function(node, opts) {
        assert("ModuleExpression", node, opts);
      }, exports2.assertModuleSpecifier = function(node, opts) {
        assert("ModuleSpecifier", node, opts);
      }, exports2.assertNewExpression = function(node, opts) {
        assert("NewExpression", node, opts);
      }, exports2.assertNoop = function(node, opts) {
        assert("Noop", node, opts);
      }, exports2.assertNullLiteral = function(node, opts) {
        assert("NullLiteral", node, opts);
      }, exports2.assertNullLiteralTypeAnnotation = function(node, opts) {
        assert("NullLiteralTypeAnnotation", node, opts);
      }, exports2.assertNullableTypeAnnotation = function(node, opts) {
        assert("NullableTypeAnnotation", node, opts);
      }, exports2.assertNumberLiteral = function(node, opts) {
        (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral"), assert("NumberLiteral", node, opts);
      }, exports2.assertNumberLiteralTypeAnnotation = function(node, opts) {
        assert("NumberLiteralTypeAnnotation", node, opts);
      }, exports2.assertNumberTypeAnnotation = function(node, opts) {
        assert("NumberTypeAnnotation", node, opts);
      }, exports2.assertNumericLiteral = function(node, opts) {
        assert("NumericLiteral", node, opts);
      }, exports2.assertObjectExpression = function(node, opts) {
        assert("ObjectExpression", node, opts);
      }, exports2.assertObjectMember = function(node, opts) {
        assert("ObjectMember", node, opts);
      }, exports2.assertObjectMethod = function(node, opts) {
        assert("ObjectMethod", node, opts);
      }, exports2.assertObjectPattern = function(node, opts) {
        assert("ObjectPattern", node, opts);
      }, exports2.assertObjectProperty = function(node, opts) {
        assert("ObjectProperty", node, opts);
      }, exports2.assertObjectTypeAnnotation = function(node, opts) {
        assert("ObjectTypeAnnotation", node, opts);
      }, exports2.assertObjectTypeCallProperty = function(node, opts) {
        assert("ObjectTypeCallProperty", node, opts);
      }, exports2.assertObjectTypeIndexer = function(node, opts) {
        assert("ObjectTypeIndexer", node, opts);
      }, exports2.assertObjectTypeInternalSlot = function(node, opts) {
        assert("ObjectTypeInternalSlot", node, opts);
      }, exports2.assertObjectTypeProperty = function(node, opts) {
        assert("ObjectTypeProperty", node, opts);
      }, exports2.assertObjectTypeSpreadProperty = function(node, opts) {
        assert("ObjectTypeSpreadProperty", node, opts);
      }, exports2.assertOpaqueType = function(node, opts) {
        assert("OpaqueType", node, opts);
      }, exports2.assertOptionalCallExpression = function(node, opts) {
        assert("OptionalCallExpression", node, opts);
      }, exports2.assertOptionalIndexedAccessType = function(node, opts) {
        assert("OptionalIndexedAccessType", node, opts);
      }, exports2.assertOptionalMemberExpression = function(node, opts) {
        assert("OptionalMemberExpression", node, opts);
      }, exports2.assertParenthesizedExpression = function(node, opts) {
        assert("ParenthesizedExpression", node, opts);
      }, exports2.assertPattern = function(node, opts) {
        assert("Pattern", node, opts);
      }, exports2.assertPatternLike = function(node, opts) {
        assert("PatternLike", node, opts);
      }, exports2.assertPipelineBareFunction = function(node, opts) {
        assert("PipelineBareFunction", node, opts);
      }, exports2.assertPipelinePrimaryTopicReference = function(node, opts) {
        assert("PipelinePrimaryTopicReference", node, opts);
      }, exports2.assertPipelineTopicExpression = function(node, opts) {
        assert("PipelineTopicExpression", node, opts);
      }, exports2.assertPlaceholder = function(node, opts) {
        assert("Placeholder", node, opts);
      }, exports2.assertPrivate = function(node, opts) {
        assert("Private", node, opts);
      }, exports2.assertPrivateName = function(node, opts) {
        assert("PrivateName", node, opts);
      }, exports2.assertProgram = function(node, opts) {
        assert("Program", node, opts);
      }, exports2.assertProperty = function(node, opts) {
        assert("Property", node, opts);
      }, exports2.assertPureish = function(node, opts) {
        assert("Pureish", node, opts);
      }, exports2.assertQualifiedTypeIdentifier = function(node, opts) {
        assert("QualifiedTypeIdentifier", node, opts);
      }, exports2.assertRecordExpression = function(node, opts) {
        assert("RecordExpression", node, opts);
      }, exports2.assertRegExpLiteral = function(node, opts) {
        assert("RegExpLiteral", node, opts);
      }, exports2.assertRegexLiteral = function(node, opts) {
        (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral"), assert("RegexLiteral", node, opts);
      }, exports2.assertRestElement = function(node, opts) {
        assert("RestElement", node, opts);
      }, exports2.assertRestProperty = function(node, opts) {
        (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement"), assert("RestProperty", node, opts);
      }, exports2.assertReturnStatement = function(node, opts) {
        assert("ReturnStatement", node, opts);
      }, exports2.assertScopable = function(node, opts) {
        assert("Scopable", node, opts);
      }, exports2.assertSequenceExpression = function(node, opts) {
        assert("SequenceExpression", node, opts);
      }, exports2.assertSpreadElement = function(node, opts) {
        assert("SpreadElement", node, opts);
      }, exports2.assertSpreadProperty = function(node, opts) {
        (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement"), assert("SpreadProperty", node, opts);
      }, exports2.assertStandardized = function(node, opts) {
        assert("Standardized", node, opts);
      }, exports2.assertStatement = function(node, opts) {
        assert("Statement", node, opts);
      }, exports2.assertStaticBlock = function(node, opts) {
        assert("StaticBlock", node, opts);
      }, exports2.assertStringLiteral = function(node, opts) {
        assert("StringLiteral", node, opts);
      }, exports2.assertStringLiteralTypeAnnotation = function(node, opts) {
        assert("StringLiteralTypeAnnotation", node, opts);
      }, exports2.assertStringTypeAnnotation = function(node, opts) {
        assert("StringTypeAnnotation", node, opts);
      }, exports2.assertSuper = function(node, opts) {
        assert("Super", node, opts);
      }, exports2.assertSwitchCase = function(node, opts) {
        assert("SwitchCase", node, opts);
      }, exports2.assertSwitchStatement = function(node, opts) {
        assert("SwitchStatement", node, opts);
      }, exports2.assertSymbolTypeAnnotation = function(node, opts) {
        assert("SymbolTypeAnnotation", node, opts);
      }, exports2.assertTSAnyKeyword = function(node, opts) {
        assert("TSAnyKeyword", node, opts);
      }, exports2.assertTSArrayType = function(node, opts) {
        assert("TSArrayType", node, opts);
      }, exports2.assertTSAsExpression = function(node, opts) {
        assert("TSAsExpression", node, opts);
      }, exports2.assertTSBaseType = function(node, opts) {
        assert("TSBaseType", node, opts);
      }, exports2.assertTSBigIntKeyword = function(node, opts) {
        assert("TSBigIntKeyword", node, opts);
      }, exports2.assertTSBooleanKeyword = function(node, opts) {
        assert("TSBooleanKeyword", node, opts);
      }, exports2.assertTSCallSignatureDeclaration = function(node, opts) {
        assert("TSCallSignatureDeclaration", node, opts);
      }, exports2.assertTSConditionalType = function(node, opts) {
        assert("TSConditionalType", node, opts);
      }, exports2.assertTSConstructSignatureDeclaration = function(node, opts) {
        assert("TSConstructSignatureDeclaration", node, opts);
      }, exports2.assertTSConstructorType = function(node, opts) {
        assert("TSConstructorType", node, opts);
      }, exports2.assertTSDeclareFunction = function(node, opts) {
        assert("TSDeclareFunction", node, opts);
      }, exports2.assertTSDeclareMethod = function(node, opts) {
        assert("TSDeclareMethod", node, opts);
      }, exports2.assertTSEntityName = function(node, opts) {
        assert("TSEntityName", node, opts);
      }, exports2.assertTSEnumDeclaration = function(node, opts) {
        assert("TSEnumDeclaration", node, opts);
      }, exports2.assertTSEnumMember = function(node, opts) {
        assert("TSEnumMember", node, opts);
      }, exports2.assertTSExportAssignment = function(node, opts) {
        assert("TSExportAssignment", node, opts);
      }, exports2.assertTSExpressionWithTypeArguments = function(node, opts) {
        assert("TSExpressionWithTypeArguments", node, opts);
      }, exports2.assertTSExternalModuleReference = function(node, opts) {
        assert("TSExternalModuleReference", node, opts);
      }, exports2.assertTSFunctionType = function(node, opts) {
        assert("TSFunctionType", node, opts);
      }, exports2.assertTSImportEqualsDeclaration = function(node, opts) {
        assert("TSImportEqualsDeclaration", node, opts);
      }, exports2.assertTSImportType = function(node, opts) {
        assert("TSImportType", node, opts);
      }, exports2.assertTSIndexSignature = function(node, opts) {
        assert("TSIndexSignature", node, opts);
      }, exports2.assertTSIndexedAccessType = function(node, opts) {
        assert("TSIndexedAccessType", node, opts);
      }, exports2.assertTSInferType = function(node, opts) {
        assert("TSInferType", node, opts);
      }, exports2.assertTSInstantiationExpression = function(node, opts) {
        assert("TSInstantiationExpression", node, opts);
      }, exports2.assertTSInterfaceBody = function(node, opts) {
        assert("TSInterfaceBody", node, opts);
      }, exports2.assertTSInterfaceDeclaration = function(node, opts) {
        assert("TSInterfaceDeclaration", node, opts);
      }, exports2.assertTSIntersectionType = function(node, opts) {
        assert("TSIntersectionType", node, opts);
      }, exports2.assertTSIntrinsicKeyword = function(node, opts) {
        assert("TSIntrinsicKeyword", node, opts);
      }, exports2.assertTSLiteralType = function(node, opts) {
        assert("TSLiteralType", node, opts);
      }, exports2.assertTSMappedType = function(node, opts) {
        assert("TSMappedType", node, opts);
      }, exports2.assertTSMethodSignature = function(node, opts) {
        assert("TSMethodSignature", node, opts);
      }, exports2.assertTSModuleBlock = function(node, opts) {
        assert("TSModuleBlock", node, opts);
      }, exports2.assertTSModuleDeclaration = function(node, opts) {
        assert("TSModuleDeclaration", node, opts);
      }, exports2.assertTSNamedTupleMember = function(node, opts) {
        assert("TSNamedTupleMember", node, opts);
      }, exports2.assertTSNamespaceExportDeclaration = function(node, opts) {
        assert("TSNamespaceExportDeclaration", node, opts);
      }, exports2.assertTSNeverKeyword = function(node, opts) {
        assert("TSNeverKeyword", node, opts);
      }, exports2.assertTSNonNullExpression = function(node, opts) {
        assert("TSNonNullExpression", node, opts);
      }, exports2.assertTSNullKeyword = function(node, opts) {
        assert("TSNullKeyword", node, opts);
      }, exports2.assertTSNumberKeyword = function(node, opts) {
        assert("TSNumberKeyword", node, opts);
      }, exports2.assertTSObjectKeyword = function(node, opts) {
        assert("TSObjectKeyword", node, opts);
      }, exports2.assertTSOptionalType = function(node, opts) {
        assert("TSOptionalType", node, opts);
      }, exports2.assertTSParameterProperty = function(node, opts) {
        assert("TSParameterProperty", node, opts);
      }, exports2.assertTSParenthesizedType = function(node, opts) {
        assert("TSParenthesizedType", node, opts);
      }, exports2.assertTSPropertySignature = function(node, opts) {
        assert("TSPropertySignature", node, opts);
      }, exports2.assertTSQualifiedName = function(node, opts) {
        assert("TSQualifiedName", node, opts);
      }, exports2.assertTSRestType = function(node, opts) {
        assert("TSRestType", node, opts);
      }, exports2.assertTSSatisfiesExpression = function(node, opts) {
        assert("TSSatisfiesExpression", node, opts);
      }, exports2.assertTSStringKeyword = function(node, opts) {
        assert("TSStringKeyword", node, opts);
      }, exports2.assertTSSymbolKeyword = function(node, opts) {
        assert("TSSymbolKeyword", node, opts);
      }, exports2.assertTSThisType = function(node, opts) {
        assert("TSThisType", node, opts);
      }, exports2.assertTSTupleType = function(node, opts) {
        assert("TSTupleType", node, opts);
      }, exports2.assertTSType = function(node, opts) {
        assert("TSType", node, opts);
      }, exports2.assertTSTypeAliasDeclaration = function(node, opts) {
        assert("TSTypeAliasDeclaration", node, opts);
      }, exports2.assertTSTypeAnnotation = function(node, opts) {
        assert("TSTypeAnnotation", node, opts);
      }, exports2.assertTSTypeAssertion = function(node, opts) {
        assert("TSTypeAssertion", node, opts);
      }, exports2.assertTSTypeElement = function(node, opts) {
        assert("TSTypeElement", node, opts);
      }, exports2.assertTSTypeLiteral = function(node, opts) {
        assert("TSTypeLiteral", node, opts);
      }, exports2.assertTSTypeOperator = function(node, opts) {
        assert("TSTypeOperator", node, opts);
      }, exports2.assertTSTypeParameter = function(node, opts) {
        assert("TSTypeParameter", node, opts);
      }, exports2.assertTSTypeParameterDeclaration = function(node, opts) {
        assert("TSTypeParameterDeclaration", node, opts);
      }, exports2.assertTSTypeParameterInstantiation = function(node, opts) {
        assert("TSTypeParameterInstantiation", node, opts);
      }, exports2.assertTSTypePredicate = function(node, opts) {
        assert("TSTypePredicate", node, opts);
      }, exports2.assertTSTypeQuery = function(node, opts) {
        assert("TSTypeQuery", node, opts);
      }, exports2.assertTSTypeReference = function(node, opts) {
        assert("TSTypeReference", node, opts);
      }, exports2.assertTSUndefinedKeyword = function(node, opts) {
        assert("TSUndefinedKeyword", node, opts);
      }, exports2.assertTSUnionType = function(node, opts) {
        assert("TSUnionType", node, opts);
      }, exports2.assertTSUnknownKeyword = function(node, opts) {
        assert("TSUnknownKeyword", node, opts);
      }, exports2.assertTSVoidKeyword = function(node, opts) {
        assert("TSVoidKeyword", node, opts);
      }, exports2.assertTaggedTemplateExpression = function(node, opts) {
        assert("TaggedTemplateExpression", node, opts);
      }, exports2.assertTemplateElement = function(node, opts) {
        assert("TemplateElement", node, opts);
      }, exports2.assertTemplateLiteral = function(node, opts) {
        assert("TemplateLiteral", node, opts);
      }, exports2.assertTerminatorless = function(node, opts) {
        assert("Terminatorless", node, opts);
      }, exports2.assertThisExpression = function(node, opts) {
        assert("ThisExpression", node, opts);
      }, exports2.assertThisTypeAnnotation = function(node, opts) {
        assert("ThisTypeAnnotation", node, opts);
      }, exports2.assertThrowStatement = function(node, opts) {
        assert("ThrowStatement", node, opts);
      }, exports2.assertTopicReference = function(node, opts) {
        assert("TopicReference", node, opts);
      }, exports2.assertTryStatement = function(node, opts) {
        assert("TryStatement", node, opts);
      }, exports2.assertTupleExpression = function(node, opts) {
        assert("TupleExpression", node, opts);
      }, exports2.assertTupleTypeAnnotation = function(node, opts) {
        assert("TupleTypeAnnotation", node, opts);
      }, exports2.assertTypeAlias = function(node, opts) {
        assert("TypeAlias", node, opts);
      }, exports2.assertTypeAnnotation = function(node, opts) {
        assert("TypeAnnotation", node, opts);
      }, exports2.assertTypeCastExpression = function(node, opts) {
        assert("TypeCastExpression", node, opts);
      }, exports2.assertTypeParameter = function(node, opts) {
        assert("TypeParameter", node, opts);
      }, exports2.assertTypeParameterDeclaration = function(node, opts) {
        assert("TypeParameterDeclaration", node, opts);
      }, exports2.assertTypeParameterInstantiation = function(node, opts) {
        assert("TypeParameterInstantiation", node, opts);
      }, exports2.assertTypeScript = function(node, opts) {
        assert("TypeScript", node, opts);
      }, exports2.assertTypeofTypeAnnotation = function(node, opts) {
        assert("TypeofTypeAnnotation", node, opts);
      }, exports2.assertUnaryExpression = function(node, opts) {
        assert("UnaryExpression", node, opts);
      }, exports2.assertUnaryLike = function(node, opts) {
        assert("UnaryLike", node, opts);
      }, exports2.assertUnionTypeAnnotation = function(node, opts) {
        assert("UnionTypeAnnotation", node, opts);
      }, exports2.assertUpdateExpression = function(node, opts) {
        assert("UpdateExpression", node, opts);
      }, exports2.assertUserWhitespacable = function(node, opts) {
        assert("UserWhitespacable", node, opts);
      }, exports2.assertV8IntrinsicIdentifier = function(node, opts) {
        assert("V8IntrinsicIdentifier", node, opts);
      }, exports2.assertVariableDeclaration = function(node, opts) {
        assert("VariableDeclaration", node, opts);
      }, exports2.assertVariableDeclarator = function(node, opts) {
        assert("VariableDeclarator", node, opts);
      }, exports2.assertVariance = function(node, opts) {
        assert("Variance", node, opts);
      }, exports2.assertVoidTypeAnnotation = function(node, opts) {
        assert("VoidTypeAnnotation", node, opts);
      }, exports2.assertWhile = function(node, opts) {
        assert("While", node, opts);
      }, exports2.assertWhileStatement = function(node, opts) {
        assert("WhileStatement", node, opts);
      }, exports2.assertWithStatement = function(node, opts) {
        assert("WithStatement", node, opts);
      }, exports2.assertYieldExpression = function(node, opts) {
        assert("YieldExpression", node, opts);
      };
      var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
      function assert(type, node, opts) {
        if (!(0, _is.default)(type, node, opts))
          throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(types) {
        const flattened = (0, _removeTypeDuplicates.default)(types);
        return flattened.length === 1 ? flattened[0] : (0, _index.unionTypeAnnotation)(flattened);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      exports2.default = function(type) {
        switch (type) {
          case "string":
            return (0, _index.stringTypeAnnotation)();
          case "number":
            return (0, _index.numberTypeAnnotation)();
          case "undefined":
            return (0, _index.voidTypeAnnotation)();
          case "boolean":
            return (0, _index.booleanTypeAnnotation)();
          case "function":
            return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
          case "object":
            return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
          case "symbol":
            return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
          case "bigint":
            return (0, _index.anyTypeAnnotation)();
        }
        throw new Error("Invalid typeof value: " + type);
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.anyTypeAnnotation = function() {
        return { type: "AnyTypeAnnotation" };
      }, exports2.argumentPlaceholder = function() {
        return { type: "ArgumentPlaceholder" };
      }, exports2.arrayExpression = function(elements = []) {
        const node = { type: "ArrayExpression", elements }, defs = NODE_FIELDS.ArrayExpression;
        return validate(defs.elements, node, "elements", elements, 1), node;
      }, exports2.arrayPattern = function(elements) {
        const node = { type: "ArrayPattern", elements }, defs = NODE_FIELDS.ArrayPattern;
        return validate(defs.elements, node, "elements", elements, 1), node;
      }, exports2.arrayTypeAnnotation = function(elementType) {
        const node = { type: "ArrayTypeAnnotation", elementType }, defs = NODE_FIELDS.ArrayTypeAnnotation;
        return validate(defs.elementType, node, "elementType", elementType, 1), node;
      }, exports2.arrowFunctionExpression = function(params, body, async = false) {
        const node = { type: "ArrowFunctionExpression", params, body, async, expression: null }, defs = NODE_FIELDS.ArrowFunctionExpression;
        return validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
      }, exports2.assignmentExpression = function(operator, left, right) {
        const node = { type: "AssignmentExpression", operator, left, right }, defs = NODE_FIELDS.AssignmentExpression;
        return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
      }, exports2.assignmentPattern = function(left, right) {
        const node = { type: "AssignmentPattern", left, right }, defs = NODE_FIELDS.AssignmentPattern;
        return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
      }, exports2.awaitExpression = function(argument) {
        const node = { type: "AwaitExpression", argument }, defs = NODE_FIELDS.AwaitExpression;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }, exports2.bigIntLiteral = function(value2) {
        const node = { type: "BigIntLiteral", value: value2 }, defs = NODE_FIELDS.BigIntLiteral;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.binaryExpression = function(operator, left, right) {
        const node = { type: "BinaryExpression", operator, left, right }, defs = NODE_FIELDS.BinaryExpression;
        return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
      }, exports2.bindExpression = function(object, callee) {
        const node = { type: "BindExpression", object, callee }, defs = NODE_FIELDS.BindExpression;
        return validate(defs.object, node, "object", object, 1), validate(defs.callee, node, "callee", callee, 1), node;
      }, exports2.blockStatement = function(body, directives = []) {
        const node = { type: "BlockStatement", body, directives }, defs = NODE_FIELDS.BlockStatement;
        return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), node;
      }, exports2.booleanLiteral = function(value2) {
        const node = { type: "BooleanLiteral", value: value2 }, defs = NODE_FIELDS.BooleanLiteral;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.booleanLiteralTypeAnnotation = function(value2) {
        const node = { type: "BooleanLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.BooleanLiteralTypeAnnotation;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.booleanTypeAnnotation = function() {
        return { type: "BooleanTypeAnnotation" };
      }, exports2.breakStatement = function(label = null) {
        const node = { type: "BreakStatement", label }, defs = NODE_FIELDS.BreakStatement;
        return validate(defs.label, node, "label", label, 1), node;
      }, exports2.callExpression = function(callee, _arguments) {
        const node = { type: "CallExpression", callee, arguments: _arguments }, defs = NODE_FIELDS.CallExpression;
        return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
      }, exports2.catchClause = function(param = null, body) {
        const node = { type: "CatchClause", param, body }, defs = NODE_FIELDS.CatchClause;
        return validate(defs.param, node, "param", param, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.classAccessorProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
        const node = { type: "ClassAccessorProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static }, defs = NODE_FIELDS.ClassAccessorProperty;
        return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
      }, exports2.classBody = function(body) {
        const node = { type: "ClassBody", body }, defs = NODE_FIELDS.ClassBody;
        return validate(defs.body, node, "body", body, 1), node;
      }, exports2.classDeclaration = function(id = null, superClass = null, body, decorators = null) {
        const node = { type: "ClassDeclaration", id, superClass, body, decorators }, defs = NODE_FIELDS.ClassDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
      }, exports2.classExpression = function(id = null, superClass = null, body, decorators = null) {
        const node = { type: "ClassExpression", id, superClass, body, decorators }, defs = NODE_FIELDS.ClassExpression;
        return validate(defs.id, node, "id", id, 1), validate(defs.superClass, node, "superClass", superClass, 1), validate(defs.body, node, "body", body, 1), validate(defs.decorators, node, "decorators", decorators, 1), node;
      }, exports2.classImplements = function(id, typeParameters = null) {
        const node = { type: "ClassImplements", id, typeParameters }, defs = NODE_FIELDS.ClassImplements;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.classMethod = function(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
        const node = { type: "ClassMethod", kind, key, params, body, computed, static: _static, generator, async }, defs = NODE_FIELDS.ClassMethod;
        return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
      }, exports2.classPrivateMethod = function(kind = "method", key, params, body, _static = false) {
        const node = { type: "ClassPrivateMethod", kind, key, params, body, static: _static }, defs = NODE_FIELDS.ClassPrivateMethod;
        return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.static, node, "static", _static), node;
      }, exports2.classPrivateProperty = function(key, value2 = null, decorators = null, _static = false) {
        const node = { type: "ClassPrivateProperty", key, value: value2, decorators, static: _static }, defs = NODE_FIELDS.ClassPrivateProperty;
        return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.static, node, "static", _static), node;
      }, exports2.classProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
        const node = { type: "ClassProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static }, defs = NODE_FIELDS.ClassProperty;
        return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.computed, node, "computed", computed), validate(defs.static, node, "static", _static), node;
      }, exports2.conditionalExpression = function(test, consequent, alternate) {
        const node = { type: "ConditionalExpression", test, consequent, alternate }, defs = NODE_FIELDS.ConditionalExpression;
        return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
      }, exports2.continueStatement = function(label = null) {
        const node = { type: "ContinueStatement", label }, defs = NODE_FIELDS.ContinueStatement;
        return validate(defs.label, node, "label", label, 1), node;
      }, exports2.debuggerStatement = function() {
        return { type: "DebuggerStatement" };
      }, exports2.decimalLiteral = function(value2) {
        const node = { type: "DecimalLiteral", value: value2 }, defs = NODE_FIELDS.DecimalLiteral;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.declareClass = function(id, typeParameters = null, _extends = null, body) {
        const node = { type: "DeclareClass", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.DeclareClass;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.declareExportAllDeclaration = function(source, attributes = null) {
        const node = { type: "DeclareExportAllDeclaration", source, attributes }, defs = NODE_FIELDS.DeclareExportAllDeclaration;
        return validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
      }, exports2.declareExportDeclaration = function(declaration = null, specifiers = null, source = null, attributes = null) {
        const node = { type: "DeclareExportDeclaration", declaration, specifiers, source, attributes }, defs = NODE_FIELDS.DeclareExportDeclaration;
        return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), validate(defs.attributes, node, "attributes", attributes, 1), node;
      }, exports2.declareFunction = function(id) {
        const node = { type: "DeclareFunction", id }, defs = NODE_FIELDS.DeclareFunction;
        return validate(defs.id, node, "id", id, 1), node;
      }, exports2.declareInterface = function(id, typeParameters = null, _extends = null, body) {
        const node = { type: "DeclareInterface", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.DeclareInterface;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.declareModule = function(id, body, kind = null) {
        const node = { type: "DeclareModule", id, body, kind }, defs = NODE_FIELDS.DeclareModule;
        return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), validate(defs.kind, node, "kind", kind), node;
      }, exports2.declareModuleExports = function(typeAnnotation) {
        const node = { type: "DeclareModuleExports", typeAnnotation }, defs = NODE_FIELDS.DeclareModuleExports;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.declareOpaqueType = function(id, typeParameters = null, supertype = null) {
        const node = { type: "DeclareOpaqueType", id, typeParameters, supertype }, defs = NODE_FIELDS.DeclareOpaqueType;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), node;
      }, exports2.declareTypeAlias = function(id, typeParameters = null, right) {
        const node = { type: "DeclareTypeAlias", id, typeParameters, right }, defs = NODE_FIELDS.DeclareTypeAlias;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
      }, exports2.declareVariable = function(id) {
        const node = { type: "DeclareVariable", id }, defs = NODE_FIELDS.DeclareVariable;
        return validate(defs.id, node, "id", id, 1), node;
      }, exports2.declaredPredicate = function(value2) {
        const node = { type: "DeclaredPredicate", value: value2 }, defs = NODE_FIELDS.DeclaredPredicate;
        return validate(defs.value, node, "value", value2, 1), node;
      }, exports2.decorator = function(expression) {
        const node = { type: "Decorator", expression }, defs = NODE_FIELDS.Decorator;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.directive = function(value2) {
        const node = { type: "Directive", value: value2 }, defs = NODE_FIELDS.Directive;
        return validate(defs.value, node, "value", value2, 1), node;
      }, exports2.directiveLiteral = function(value2) {
        const node = { type: "DirectiveLiteral", value: value2 }, defs = NODE_FIELDS.DirectiveLiteral;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.doExpression = function(body, async = false) {
        const node = { type: "DoExpression", body, async }, defs = NODE_FIELDS.DoExpression;
        return validate(defs.body, node, "body", body, 1), validate(defs.async, node, "async", async), node;
      }, exports2.doWhileStatement = function(test, body) {
        const node = { type: "DoWhileStatement", test, body }, defs = NODE_FIELDS.DoWhileStatement;
        return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.emptyStatement = function() {
        return { type: "EmptyStatement" };
      }, exports2.emptyTypeAnnotation = function() {
        return { type: "EmptyTypeAnnotation" };
      }, exports2.enumBooleanBody = function(members) {
        const node = { type: "EnumBooleanBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumBooleanBody;
        return validate(defs.members, node, "members", members, 1), node;
      }, exports2.enumBooleanMember = function(id) {
        const node = { type: "EnumBooleanMember", id, init: null }, defs = NODE_FIELDS.EnumBooleanMember;
        return validate(defs.id, node, "id", id, 1), node;
      }, exports2.enumDeclaration = function(id, body) {
        const node = { type: "EnumDeclaration", id, body }, defs = NODE_FIELDS.EnumDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.enumDefaultedMember = function(id) {
        const node = { type: "EnumDefaultedMember", id }, defs = NODE_FIELDS.EnumDefaultedMember;
        return validate(defs.id, node, "id", id, 1), node;
      }, exports2.enumNumberBody = function(members) {
        const node = { type: "EnumNumberBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumNumberBody;
        return validate(defs.members, node, "members", members, 1), node;
      }, exports2.enumNumberMember = function(id, init) {
        const node = { type: "EnumNumberMember", id, init }, defs = NODE_FIELDS.EnumNumberMember;
        return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
      }, exports2.enumStringBody = function(members) {
        const node = { type: "EnumStringBody", members, explicitType: null, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumStringBody;
        return validate(defs.members, node, "members", members, 1), node;
      }, exports2.enumStringMember = function(id, init) {
        const node = { type: "EnumStringMember", id, init }, defs = NODE_FIELDS.EnumStringMember;
        return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
      }, exports2.enumSymbolBody = function(members) {
        const node = { type: "EnumSymbolBody", members, hasUnknownMembers: null }, defs = NODE_FIELDS.EnumSymbolBody;
        return validate(defs.members, node, "members", members, 1), node;
      }, exports2.existsTypeAnnotation = function() {
        return { type: "ExistsTypeAnnotation" };
      }, exports2.exportAllDeclaration = function(source) {
        const node = { type: "ExportAllDeclaration", source }, defs = NODE_FIELDS.ExportAllDeclaration;
        return validate(defs.source, node, "source", source, 1), node;
      }, exports2.exportDefaultDeclaration = function(declaration) {
        const node = { type: "ExportDefaultDeclaration", declaration }, defs = NODE_FIELDS.ExportDefaultDeclaration;
        return validate(defs.declaration, node, "declaration", declaration, 1), node;
      }, exports2.exportDefaultSpecifier = function(exported) {
        const node = { type: "ExportDefaultSpecifier", exported }, defs = NODE_FIELDS.ExportDefaultSpecifier;
        return validate(defs.exported, node, "exported", exported, 1), node;
      }, exports2.exportNamedDeclaration = function(declaration = null, specifiers = [], source = null) {
        const node = { type: "ExportNamedDeclaration", declaration, specifiers, source }, defs = NODE_FIELDS.ExportNamedDeclaration;
        return validate(defs.declaration, node, "declaration", declaration, 1), validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
      }, exports2.exportNamespaceSpecifier = function(exported) {
        const node = { type: "ExportNamespaceSpecifier", exported }, defs = NODE_FIELDS.ExportNamespaceSpecifier;
        return validate(defs.exported, node, "exported", exported, 1), node;
      }, exports2.exportSpecifier = function(local, exported) {
        const node = { type: "ExportSpecifier", local, exported }, defs = NODE_FIELDS.ExportSpecifier;
        return validate(defs.local, node, "local", local, 1), validate(defs.exported, node, "exported", exported, 1), node;
      }, exports2.expressionStatement = function(expression) {
        const node = { type: "ExpressionStatement", expression }, defs = NODE_FIELDS.ExpressionStatement;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.file = function(program, comments = null, tokens = null) {
        const node = { type: "File", program, comments, tokens }, defs = NODE_FIELDS.File;
        return validate(defs.program, node, "program", program, 1), validate(defs.comments, node, "comments", comments, 1), validate(defs.tokens, node, "tokens", tokens), node;
      }, exports2.forInStatement = function(left, right, body) {
        const node = { type: "ForInStatement", left, right, body }, defs = NODE_FIELDS.ForInStatement;
        return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.forOfStatement = function(left, right, body, _await = false) {
        const node = { type: "ForOfStatement", left, right, body, await: _await }, defs = NODE_FIELDS.ForOfStatement;
        return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), validate(defs.body, node, "body", body, 1), validate(defs.await, node, "await", _await), node;
      }, exports2.forStatement = function(init = null, test = null, update = null, body) {
        const node = { type: "ForStatement", init, test, update, body }, defs = NODE_FIELDS.ForStatement;
        return validate(defs.init, node, "init", init, 1), validate(defs.test, node, "test", test, 1), validate(defs.update, node, "update", update, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.functionDeclaration = function(id = null, params, body, generator = false, async = false) {
        const node = { type: "FunctionDeclaration", id, params, body, generator, async }, defs = NODE_FIELDS.FunctionDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
      }, exports2.functionExpression = function(id = null, params, body, generator = false, async = false) {
        const node = { type: "FunctionExpression", id, params, body, generator, async }, defs = NODE_FIELDS.FunctionExpression;
        return validate(defs.id, node, "id", id, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
      }, exports2.functionTypeAnnotation = function(typeParameters = null, params, rest = null, returnType) {
        const node = { type: "FunctionTypeAnnotation", typeParameters, params, rest, returnType }, defs = NODE_FIELDS.FunctionTypeAnnotation;
        return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.rest, node, "rest", rest, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
      }, exports2.functionTypeParam = function(name = null, typeAnnotation) {
        const node = { type: "FunctionTypeParam", name, typeAnnotation }, defs = NODE_FIELDS.FunctionTypeParam;
        return validate(defs.name, node, "name", name, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.genericTypeAnnotation = function(id, typeParameters = null) {
        const node = { type: "GenericTypeAnnotation", id, typeParameters }, defs = NODE_FIELDS.GenericTypeAnnotation;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.identifier = function(name) {
        const node = { type: "Identifier", name }, defs = NODE_FIELDS.Identifier;
        return validate(defs.name, node, "name", name), node;
      }, exports2.ifStatement = function(test, consequent, alternate = null) {
        const node = { type: "IfStatement", test, consequent, alternate }, defs = NODE_FIELDS.IfStatement;
        return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), validate(defs.alternate, node, "alternate", alternate, 1), node;
      }, exports2.import = function() {
        return { type: "Import" };
      }, exports2.importAttribute = function(key, value2) {
        const node = { type: "ImportAttribute", key, value: value2 }, defs = NODE_FIELDS.ImportAttribute;
        return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), node;
      }, exports2.importDeclaration = function(specifiers, source) {
        const node = { type: "ImportDeclaration", specifiers, source }, defs = NODE_FIELDS.ImportDeclaration;
        return validate(defs.specifiers, node, "specifiers", specifiers, 1), validate(defs.source, node, "source", source, 1), node;
      }, exports2.importDefaultSpecifier = function(local) {
        const node = { type: "ImportDefaultSpecifier", local }, defs = NODE_FIELDS.ImportDefaultSpecifier;
        return validate(defs.local, node, "local", local, 1), node;
      }, exports2.importExpression = function(source, options = null) {
        const node = { type: "ImportExpression", source, options }, defs = NODE_FIELDS.ImportExpression;
        return validate(defs.source, node, "source", source, 1), validate(defs.options, node, "options", options, 1), node;
      }, exports2.importNamespaceSpecifier = function(local) {
        const node = { type: "ImportNamespaceSpecifier", local }, defs = NODE_FIELDS.ImportNamespaceSpecifier;
        return validate(defs.local, node, "local", local, 1), node;
      }, exports2.importSpecifier = function(local, imported) {
        const node = { type: "ImportSpecifier", local, imported }, defs = NODE_FIELDS.ImportSpecifier;
        return validate(defs.local, node, "local", local, 1), validate(defs.imported, node, "imported", imported, 1), node;
      }, exports2.indexedAccessType = function(objectType, indexType) {
        const node = { type: "IndexedAccessType", objectType, indexType }, defs = NODE_FIELDS.IndexedAccessType;
        return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
      }, exports2.inferredPredicate = function() {
        return { type: "InferredPredicate" };
      }, exports2.interfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
        const node = { type: "InterfaceDeclaration", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.InterfaceDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.interfaceExtends = function(id, typeParameters = null) {
        const node = { type: "InterfaceExtends", id, typeParameters }, defs = NODE_FIELDS.InterfaceExtends;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.interfaceTypeAnnotation = function(_extends = null, body) {
        const node = { type: "InterfaceTypeAnnotation", extends: _extends, body }, defs = NODE_FIELDS.InterfaceTypeAnnotation;
        return validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.interpreterDirective = function(value2) {
        const node = { type: "InterpreterDirective", value: value2 }, defs = NODE_FIELDS.InterpreterDirective;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.intersectionTypeAnnotation = function(types) {
        const node = { type: "IntersectionTypeAnnotation", types }, defs = NODE_FIELDS.IntersectionTypeAnnotation;
        return validate(defs.types, node, "types", types, 1), node;
      }, exports2.jSXAttribute = exports2.jsxAttribute = function(name, value2 = null) {
        const node = { type: "JSXAttribute", name, value: value2 }, defs = NODE_FIELDS.JSXAttribute;
        return validate(defs.name, node, "name", name, 1), validate(defs.value, node, "value", value2, 1), node;
      }, exports2.jSXClosingElement = exports2.jsxClosingElement = function(name) {
        const node = { type: "JSXClosingElement", name }, defs = NODE_FIELDS.JSXClosingElement;
        return validate(defs.name, node, "name", name, 1), node;
      }, exports2.jSXClosingFragment = exports2.jsxClosingFragment = function() {
        return { type: "JSXClosingFragment" };
      }, exports2.jSXElement = exports2.jsxElement = function(openingElement, closingElement = null, children, selfClosing = null) {
        const node = { type: "JSXElement", openingElement, closingElement, children, selfClosing }, defs = NODE_FIELDS.JSXElement;
        return validate(defs.openingElement, node, "openingElement", openingElement, 1), validate(defs.closingElement, node, "closingElement", closingElement, 1), validate(defs.children, node, "children", children, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
      }, exports2.jSXEmptyExpression = exports2.jsxEmptyExpression = function() {
        return { type: "JSXEmptyExpression" };
      }, exports2.jSXExpressionContainer = exports2.jsxExpressionContainer = function(expression) {
        const node = { type: "JSXExpressionContainer", expression }, defs = NODE_FIELDS.JSXExpressionContainer;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.jSXFragment = exports2.jsxFragment = function(openingFragment, closingFragment, children) {
        const node = { type: "JSXFragment", openingFragment, closingFragment, children }, defs = NODE_FIELDS.JSXFragment;
        return validate(defs.openingFragment, node, "openingFragment", openingFragment, 1), validate(defs.closingFragment, node, "closingFragment", closingFragment, 1), validate(defs.children, node, "children", children, 1), node;
      }, exports2.jSXIdentifier = exports2.jsxIdentifier = function(name) {
        const node = { type: "JSXIdentifier", name }, defs = NODE_FIELDS.JSXIdentifier;
        return validate(defs.name, node, "name", name), node;
      }, exports2.jSXMemberExpression = exports2.jsxMemberExpression = function(object, property) {
        const node = { type: "JSXMemberExpression", object, property }, defs = NODE_FIELDS.JSXMemberExpression;
        return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), node;
      }, exports2.jSXNamespacedName = exports2.jsxNamespacedName = function(namespace, name) {
        const node = { type: "JSXNamespacedName", namespace, name }, defs = NODE_FIELDS.JSXNamespacedName;
        return validate(defs.namespace, node, "namespace", namespace, 1), validate(defs.name, node, "name", name, 1), node;
      }, exports2.jSXOpeningElement = exports2.jsxOpeningElement = function(name, attributes, selfClosing = false) {
        const node = { type: "JSXOpeningElement", name, attributes, selfClosing }, defs = NODE_FIELDS.JSXOpeningElement;
        return validate(defs.name, node, "name", name, 1), validate(defs.attributes, node, "attributes", attributes, 1), validate(defs.selfClosing, node, "selfClosing", selfClosing), node;
      }, exports2.jSXOpeningFragment = exports2.jsxOpeningFragment = function() {
        return { type: "JSXOpeningFragment" };
      }, exports2.jSXSpreadAttribute = exports2.jsxSpreadAttribute = function(argument) {
        const node = { type: "JSXSpreadAttribute", argument }, defs = NODE_FIELDS.JSXSpreadAttribute;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }, exports2.jSXSpreadChild = exports2.jsxSpreadChild = function(expression) {
        const node = { type: "JSXSpreadChild", expression }, defs = NODE_FIELDS.JSXSpreadChild;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.jSXText = exports2.jsxText = function(value2) {
        const node = { type: "JSXText", value: value2 }, defs = NODE_FIELDS.JSXText;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.labeledStatement = function(label, body) {
        const node = { type: "LabeledStatement", label, body }, defs = NODE_FIELDS.LabeledStatement;
        return validate(defs.label, node, "label", label, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.logicalExpression = function(operator, left, right) {
        const node = { type: "LogicalExpression", operator, left, right }, defs = NODE_FIELDS.LogicalExpression;
        return validate(defs.operator, node, "operator", operator), validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
      }, exports2.memberExpression = function(object, property, computed = false, optional = null) {
        const node = { type: "MemberExpression", object, property, computed, optional }, defs = NODE_FIELDS.MemberExpression;
        return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
      }, exports2.metaProperty = function(meta, property) {
        const node = { type: "MetaProperty", meta, property }, defs = NODE_FIELDS.MetaProperty;
        return validate(defs.meta, node, "meta", meta, 1), validate(defs.property, node, "property", property, 1), node;
      }, exports2.mixedTypeAnnotation = function() {
        return { type: "MixedTypeAnnotation" };
      }, exports2.moduleExpression = function(body) {
        const node = { type: "ModuleExpression", body }, defs = NODE_FIELDS.ModuleExpression;
        return validate(defs.body, node, "body", body, 1), node;
      }, exports2.newExpression = function(callee, _arguments) {
        const node = { type: "NewExpression", callee, arguments: _arguments }, defs = NODE_FIELDS.NewExpression;
        return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), node;
      }, exports2.noop = function() {
        return { type: "Noop" };
      }, exports2.nullLiteral = function() {
        return { type: "NullLiteral" };
      }, exports2.nullLiteralTypeAnnotation = function() {
        return { type: "NullLiteralTypeAnnotation" };
      }, exports2.nullableTypeAnnotation = function(typeAnnotation) {
        const node = { type: "NullableTypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.NullableTypeAnnotation;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.numberLiteral = function(value2) {
        return (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type "), numericLiteral(value2);
      }, exports2.numberLiteralTypeAnnotation = function(value2) {
        const node = { type: "NumberLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.NumberLiteralTypeAnnotation;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.numberTypeAnnotation = function() {
        return { type: "NumberTypeAnnotation" };
      }, exports2.numericLiteral = numericLiteral, exports2.objectExpression = function(properties) {
        const node = { type: "ObjectExpression", properties }, defs = NODE_FIELDS.ObjectExpression;
        return validate(defs.properties, node, "properties", properties, 1), node;
      }, exports2.objectMethod = function(kind = "method", key, params, body, computed = false, generator = false, async = false) {
        const node = { type: "ObjectMethod", kind, key, params, body, computed, generator, async }, defs = NODE_FIELDS.ObjectMethod;
        return validate(defs.kind, node, "kind", kind), validate(defs.key, node, "key", key, 1), validate(defs.params, node, "params", params, 1), validate(defs.body, node, "body", body, 1), validate(defs.computed, node, "computed", computed), validate(defs.generator, node, "generator", generator), validate(defs.async, node, "async", async), node;
      }, exports2.objectPattern = function(properties) {
        const node = { type: "ObjectPattern", properties }, defs = NODE_FIELDS.ObjectPattern;
        return validate(defs.properties, node, "properties", properties, 1), node;
      }, exports2.objectProperty = function(key, value2, computed = false, shorthand = false, decorators = null) {
        const node = { type: "ObjectProperty", key, value: value2, computed, shorthand, decorators }, defs = NODE_FIELDS.ObjectProperty;
        return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.computed, node, "computed", computed), validate(defs.shorthand, node, "shorthand", shorthand), validate(defs.decorators, node, "decorators", decorators, 1), node;
      }, exports2.objectTypeAnnotation = function(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
        const node = { type: "ObjectTypeAnnotation", properties, indexers, callProperties, internalSlots, exact }, defs = NODE_FIELDS.ObjectTypeAnnotation;
        return validate(defs.properties, node, "properties", properties, 1), validate(defs.indexers, node, "indexers", indexers, 1), validate(defs.callProperties, node, "callProperties", callProperties, 1), validate(defs.internalSlots, node, "internalSlots", internalSlots, 1), validate(defs.exact, node, "exact", exact), node;
      }, exports2.objectTypeCallProperty = function(value2) {
        const node = { type: "ObjectTypeCallProperty", value: value2, static: null }, defs = NODE_FIELDS.ObjectTypeCallProperty;
        return validate(defs.value, node, "value", value2, 1), node;
      }, exports2.objectTypeIndexer = function(id = null, key, value2, variance = null) {
        const node = { type: "ObjectTypeIndexer", id, key, value: value2, variance, static: null }, defs = NODE_FIELDS.ObjectTypeIndexer;
        return validate(defs.id, node, "id", id, 1), validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.variance, node, "variance", variance, 1), node;
      }, exports2.objectTypeInternalSlot = function(id, value2, optional, _static, method) {
        const node = { type: "ObjectTypeInternalSlot", id, value: value2, optional, static: _static, method }, defs = NODE_FIELDS.ObjectTypeInternalSlot;
        return validate(defs.id, node, "id", id, 1), validate(defs.value, node, "value", value2, 1), validate(defs.optional, node, "optional", optional), validate(defs.static, node, "static", _static), validate(defs.method, node, "method", method), node;
      }, exports2.objectTypeProperty = function(key, value2, variance = null) {
        const node = { type: "ObjectTypeProperty", key, value: value2, variance, kind: null, method: null, optional: null, proto: null, static: null }, defs = NODE_FIELDS.ObjectTypeProperty;
        return validate(defs.key, node, "key", key, 1), validate(defs.value, node, "value", value2, 1), validate(defs.variance, node, "variance", variance, 1), node;
      }, exports2.objectTypeSpreadProperty = function(argument) {
        const node = { type: "ObjectTypeSpreadProperty", argument }, defs = NODE_FIELDS.ObjectTypeSpreadProperty;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }, exports2.opaqueType = function(id, typeParameters = null, supertype = null, impltype) {
        const node = { type: "OpaqueType", id, typeParameters, supertype, impltype }, defs = NODE_FIELDS.OpaqueType;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.supertype, node, "supertype", supertype, 1), validate(defs.impltype, node, "impltype", impltype, 1), node;
      }, exports2.optionalCallExpression = function(callee, _arguments, optional) {
        const node = { type: "OptionalCallExpression", callee, arguments: _arguments, optional }, defs = NODE_FIELDS.OptionalCallExpression;
        return validate(defs.callee, node, "callee", callee, 1), validate(defs.arguments, node, "arguments", _arguments, 1), validate(defs.optional, node, "optional", optional), node;
      }, exports2.optionalIndexedAccessType = function(objectType, indexType) {
        const node = { type: "OptionalIndexedAccessType", objectType, indexType, optional: null }, defs = NODE_FIELDS.OptionalIndexedAccessType;
        return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
      }, exports2.optionalMemberExpression = function(object, property, computed = false, optional) {
        const node = { type: "OptionalMemberExpression", object, property, computed, optional }, defs = NODE_FIELDS.OptionalMemberExpression;
        return validate(defs.object, node, "object", object, 1), validate(defs.property, node, "property", property, 1), validate(defs.computed, node, "computed", computed), validate(defs.optional, node, "optional", optional), node;
      }, exports2.parenthesizedExpression = function(expression) {
        const node = { type: "ParenthesizedExpression", expression }, defs = NODE_FIELDS.ParenthesizedExpression;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.pipelineBareFunction = function(callee) {
        const node = { type: "PipelineBareFunction", callee }, defs = NODE_FIELDS.PipelineBareFunction;
        return validate(defs.callee, node, "callee", callee, 1), node;
      }, exports2.pipelinePrimaryTopicReference = function() {
        return { type: "PipelinePrimaryTopicReference" };
      }, exports2.pipelineTopicExpression = function(expression) {
        const node = { type: "PipelineTopicExpression", expression }, defs = NODE_FIELDS.PipelineTopicExpression;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.placeholder = function(expectedNode, name) {
        const node = { type: "Placeholder", expectedNode, name }, defs = NODE_FIELDS.Placeholder;
        return validate(defs.expectedNode, node, "expectedNode", expectedNode), validate(defs.name, node, "name", name, 1), node;
      }, exports2.privateName = function(id) {
        const node = { type: "PrivateName", id }, defs = NODE_FIELDS.PrivateName;
        return validate(defs.id, node, "id", id, 1), node;
      }, exports2.program = function(body, directives = [], sourceType = "script", interpreter = null) {
        const node = { type: "Program", body, directives, sourceType, interpreter }, defs = NODE_FIELDS.Program;
        return validate(defs.body, node, "body", body, 1), validate(defs.directives, node, "directives", directives, 1), validate(defs.sourceType, node, "sourceType", sourceType), validate(defs.interpreter, node, "interpreter", interpreter, 1), node;
      }, exports2.qualifiedTypeIdentifier = function(id, qualification) {
        const node = { type: "QualifiedTypeIdentifier", id, qualification }, defs = NODE_FIELDS.QualifiedTypeIdentifier;
        return validate(defs.id, node, "id", id, 1), validate(defs.qualification, node, "qualification", qualification, 1), node;
      }, exports2.recordExpression = function(properties) {
        const node = { type: "RecordExpression", properties }, defs = NODE_FIELDS.RecordExpression;
        return validate(defs.properties, node, "properties", properties, 1), node;
      }, exports2.regExpLiteral = regExpLiteral, exports2.regexLiteral = function(pattern, flags = "") {
        return (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type "), regExpLiteral(pattern, flags);
      }, exports2.restElement = restElement, exports2.restProperty = function(argument) {
        return (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type "), restElement(argument);
      }, exports2.returnStatement = function(argument = null) {
        const node = { type: "ReturnStatement", argument }, defs = NODE_FIELDS.ReturnStatement;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }, exports2.sequenceExpression = function(expressions) {
        const node = { type: "SequenceExpression", expressions }, defs = NODE_FIELDS.SequenceExpression;
        return validate(defs.expressions, node, "expressions", expressions, 1), node;
      }, exports2.spreadElement = spreadElement, exports2.spreadProperty = function(argument) {
        return (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type "), spreadElement(argument);
      }, exports2.staticBlock = function(body) {
        const node = { type: "StaticBlock", body }, defs = NODE_FIELDS.StaticBlock;
        return validate(defs.body, node, "body", body, 1), node;
      }, exports2.stringLiteral = function(value2) {
        const node = { type: "StringLiteral", value: value2 }, defs = NODE_FIELDS.StringLiteral;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.stringLiteralTypeAnnotation = function(value2) {
        const node = { type: "StringLiteralTypeAnnotation", value: value2 }, defs = NODE_FIELDS.StringLiteralTypeAnnotation;
        return validate(defs.value, node, "value", value2), node;
      }, exports2.stringTypeAnnotation = function() {
        return { type: "StringTypeAnnotation" };
      }, exports2.super = function() {
        return { type: "Super" };
      }, exports2.switchCase = function(test = null, consequent) {
        const node = { type: "SwitchCase", test, consequent }, defs = NODE_FIELDS.SwitchCase;
        return validate(defs.test, node, "test", test, 1), validate(defs.consequent, node, "consequent", consequent, 1), node;
      }, exports2.switchStatement = function(discriminant, cases) {
        const node = { type: "SwitchStatement", discriminant, cases }, defs = NODE_FIELDS.SwitchStatement;
        return validate(defs.discriminant, node, "discriminant", discriminant, 1), validate(defs.cases, node, "cases", cases, 1), node;
      }, exports2.symbolTypeAnnotation = function() {
        return { type: "SymbolTypeAnnotation" };
      }, exports2.taggedTemplateExpression = function(tag, quasi) {
        const node = { type: "TaggedTemplateExpression", tag, quasi }, defs = NODE_FIELDS.TaggedTemplateExpression;
        return validate(defs.tag, node, "tag", tag, 1), validate(defs.quasi, node, "quasi", quasi, 1), node;
      }, exports2.templateElement = function(value2, tail = false) {
        const node = { type: "TemplateElement", value: value2, tail }, defs = NODE_FIELDS.TemplateElement;
        return validate(defs.value, node, "value", value2), validate(defs.tail, node, "tail", tail), node;
      }, exports2.templateLiteral = function(quasis, expressions) {
        const node = { type: "TemplateLiteral", quasis, expressions }, defs = NODE_FIELDS.TemplateLiteral;
        return validate(defs.quasis, node, "quasis", quasis, 1), validate(defs.expressions, node, "expressions", expressions, 1), node;
      }, exports2.thisExpression = function() {
        return { type: "ThisExpression" };
      }, exports2.thisTypeAnnotation = function() {
        return { type: "ThisTypeAnnotation" };
      }, exports2.throwStatement = function(argument) {
        const node = { type: "ThrowStatement", argument }, defs = NODE_FIELDS.ThrowStatement;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }, exports2.topicReference = function() {
        return { type: "TopicReference" };
      }, exports2.tryStatement = function(block, handler = null, finalizer = null) {
        const node = { type: "TryStatement", block, handler, finalizer }, defs = NODE_FIELDS.TryStatement;
        return validate(defs.block, node, "block", block, 1), validate(defs.handler, node, "handler", handler, 1), validate(defs.finalizer, node, "finalizer", finalizer, 1), node;
      }, exports2.tSAnyKeyword = exports2.tsAnyKeyword = function() {
        return { type: "TSAnyKeyword" };
      }, exports2.tSArrayType = exports2.tsArrayType = function(elementType) {
        const node = { type: "TSArrayType", elementType }, defs = NODE_FIELDS.TSArrayType;
        return validate(defs.elementType, node, "elementType", elementType, 1), node;
      }, exports2.tSAsExpression = exports2.tsAsExpression = function(expression, typeAnnotation) {
        const node = { type: "TSAsExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TSAsExpression;
        return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSBigIntKeyword = exports2.tsBigIntKeyword = function() {
        return { type: "TSBigIntKeyword" };
      }, exports2.tSBooleanKeyword = exports2.tsBooleanKeyword = function() {
        return { type: "TSBooleanKeyword" };
      }, exports2.tSCallSignatureDeclaration = exports2.tsCallSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
        const node = { type: "TSCallSignatureDeclaration", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSCallSignatureDeclaration;
        return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSConditionalType = exports2.tsConditionalType = function(checkType, extendsType, trueType, falseType) {
        const node = { type: "TSConditionalType", checkType, extendsType, trueType, falseType }, defs = NODE_FIELDS.TSConditionalType;
        return validate(defs.checkType, node, "checkType", checkType, 1), validate(defs.extendsType, node, "extendsType", extendsType, 1), validate(defs.trueType, node, "trueType", trueType, 1), validate(defs.falseType, node, "falseType", falseType, 1), node;
      }, exports2.tSConstructSignatureDeclaration = exports2.tsConstructSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
        const node = { type: "TSConstructSignatureDeclaration", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSConstructSignatureDeclaration;
        return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSConstructorType = exports2.tsConstructorType = function(typeParameters = null, parameters, typeAnnotation = null) {
        const node = { type: "TSConstructorType", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSConstructorType;
        return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSDeclareFunction = exports2.tsDeclareFunction = function(id = null, typeParameters = null, params, returnType = null) {
        const node = { type: "TSDeclareFunction", id, typeParameters, params, returnType }, defs = NODE_FIELDS.TSDeclareFunction;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
      }, exports2.tSDeclareMethod = exports2.tsDeclareMethod = function(decorators = null, key, typeParameters = null, params, returnType = null) {
        const node = { type: "TSDeclareMethod", decorators, key, typeParameters, params, returnType }, defs = NODE_FIELDS.TSDeclareMethod;
        return validate(defs.decorators, node, "decorators", decorators, 1), validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.params, node, "params", params, 1), validate(defs.returnType, node, "returnType", returnType, 1), node;
      }, exports2.tSEnumDeclaration = exports2.tsEnumDeclaration = function(id, members) {
        const node = { type: "TSEnumDeclaration", id, members }, defs = NODE_FIELDS.TSEnumDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.members, node, "members", members, 1), node;
      }, exports2.tSEnumMember = exports2.tsEnumMember = function(id, initializer = null) {
        const node = { type: "TSEnumMember", id, initializer }, defs = NODE_FIELDS.TSEnumMember;
        return validate(defs.id, node, "id", id, 1), validate(defs.initializer, node, "initializer", initializer, 1), node;
      }, exports2.tSExportAssignment = exports2.tsExportAssignment = function(expression) {
        const node = { type: "TSExportAssignment", expression }, defs = NODE_FIELDS.TSExportAssignment;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.tSExpressionWithTypeArguments = exports2.tsExpressionWithTypeArguments = function(expression, typeParameters = null) {
        const node = { type: "TSExpressionWithTypeArguments", expression, typeParameters }, defs = NODE_FIELDS.TSExpressionWithTypeArguments;
        return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.tSExternalModuleReference = exports2.tsExternalModuleReference = function(expression) {
        const node = { type: "TSExternalModuleReference", expression }, defs = NODE_FIELDS.TSExternalModuleReference;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.tSFunctionType = exports2.tsFunctionType = function(typeParameters = null, parameters, typeAnnotation = null) {
        const node = { type: "TSFunctionType", typeParameters, parameters, typeAnnotation }, defs = NODE_FIELDS.TSFunctionType;
        return validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSImportEqualsDeclaration = exports2.tsImportEqualsDeclaration = function(id, moduleReference) {
        const node = { type: "TSImportEqualsDeclaration", id, moduleReference, isExport: null }, defs = NODE_FIELDS.TSImportEqualsDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.moduleReference, node, "moduleReference", moduleReference, 1), node;
      }, exports2.tSImportType = exports2.tsImportType = function(argument, qualifier = null, typeParameters = null) {
        const node = { type: "TSImportType", argument, qualifier, typeParameters }, defs = NODE_FIELDS.TSImportType;
        return validate(defs.argument, node, "argument", argument, 1), validate(defs.qualifier, node, "qualifier", qualifier, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.tSIndexSignature = exports2.tsIndexSignature = function(parameters, typeAnnotation = null) {
        const node = { type: "TSIndexSignature", parameters, typeAnnotation }, defs = NODE_FIELDS.TSIndexSignature;
        return validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSIndexedAccessType = exports2.tsIndexedAccessType = function(objectType, indexType) {
        const node = { type: "TSIndexedAccessType", objectType, indexType }, defs = NODE_FIELDS.TSIndexedAccessType;
        return validate(defs.objectType, node, "objectType", objectType, 1), validate(defs.indexType, node, "indexType", indexType, 1), node;
      }, exports2.tSInferType = exports2.tsInferType = function(typeParameter) {
        const node = { type: "TSInferType", typeParameter }, defs = NODE_FIELDS.TSInferType;
        return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), node;
      }, exports2.tSInstantiationExpression = exports2.tsInstantiationExpression = function(expression, typeParameters = null) {
        const node = { type: "TSInstantiationExpression", expression, typeParameters }, defs = NODE_FIELDS.TSInstantiationExpression;
        return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.tSInterfaceBody = exports2.tsInterfaceBody = function(body) {
        const node = { type: "TSInterfaceBody", body }, defs = NODE_FIELDS.TSInterfaceBody;
        return validate(defs.body, node, "body", body, 1), node;
      }, exports2.tSInterfaceDeclaration = exports2.tsInterfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
        const node = { type: "TSInterfaceDeclaration", id, typeParameters, extends: _extends, body }, defs = NODE_FIELDS.TSInterfaceDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.extends, node, "extends", _extends, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.tSIntersectionType = exports2.tsIntersectionType = function(types) {
        const node = { type: "TSIntersectionType", types }, defs = NODE_FIELDS.TSIntersectionType;
        return validate(defs.types, node, "types", types, 1), node;
      }, exports2.tSIntrinsicKeyword = exports2.tsIntrinsicKeyword = function() {
        return { type: "TSIntrinsicKeyword" };
      }, exports2.tSLiteralType = exports2.tsLiteralType = function(literal) {
        const node = { type: "TSLiteralType", literal }, defs = NODE_FIELDS.TSLiteralType;
        return validate(defs.literal, node, "literal", literal, 1), node;
      }, exports2.tSMappedType = exports2.tsMappedType = function(typeParameter, typeAnnotation = null, nameType = null) {
        const node = { type: "TSMappedType", typeParameter, typeAnnotation, nameType }, defs = NODE_FIELDS.TSMappedType;
        return validate(defs.typeParameter, node, "typeParameter", typeParameter, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.nameType, node, "nameType", nameType, 1), node;
      }, exports2.tSMethodSignature = exports2.tsMethodSignature = function(key, typeParameters = null, parameters, typeAnnotation = null) {
        const node = { type: "TSMethodSignature", key, typeParameters, parameters, typeAnnotation, kind: null }, defs = NODE_FIELDS.TSMethodSignature;
        return validate(defs.key, node, "key", key, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.parameters, node, "parameters", parameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSModuleBlock = exports2.tsModuleBlock = function(body) {
        const node = { type: "TSModuleBlock", body }, defs = NODE_FIELDS.TSModuleBlock;
        return validate(defs.body, node, "body", body, 1), node;
      }, exports2.tSModuleDeclaration = exports2.tsModuleDeclaration = function(id, body) {
        const node = { type: "TSModuleDeclaration", id, body, kind: null }, defs = NODE_FIELDS.TSModuleDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.tSNamedTupleMember = exports2.tsNamedTupleMember = function(label, elementType, optional = false) {
        const node = { type: "TSNamedTupleMember", label, elementType, optional }, defs = NODE_FIELDS.TSNamedTupleMember;
        return validate(defs.label, node, "label", label, 1), validate(defs.elementType, node, "elementType", elementType, 1), validate(defs.optional, node, "optional", optional), node;
      }, exports2.tSNamespaceExportDeclaration = exports2.tsNamespaceExportDeclaration = function(id) {
        const node = { type: "TSNamespaceExportDeclaration", id }, defs = NODE_FIELDS.TSNamespaceExportDeclaration;
        return validate(defs.id, node, "id", id, 1), node;
      }, exports2.tSNeverKeyword = exports2.tsNeverKeyword = function() {
        return { type: "TSNeverKeyword" };
      }, exports2.tSNonNullExpression = exports2.tsNonNullExpression = function(expression) {
        const node = { type: "TSNonNullExpression", expression }, defs = NODE_FIELDS.TSNonNullExpression;
        return validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.tSNullKeyword = exports2.tsNullKeyword = function() {
        return { type: "TSNullKeyword" };
      }, exports2.tSNumberKeyword = exports2.tsNumberKeyword = function() {
        return { type: "TSNumberKeyword" };
      }, exports2.tSObjectKeyword = exports2.tsObjectKeyword = function() {
        return { type: "TSObjectKeyword" };
      }, exports2.tSOptionalType = exports2.tsOptionalType = function(typeAnnotation) {
        const node = { type: "TSOptionalType", typeAnnotation }, defs = NODE_FIELDS.TSOptionalType;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSParameterProperty = exports2.tsParameterProperty = function(parameter) {
        const node = { type: "TSParameterProperty", parameter }, defs = NODE_FIELDS.TSParameterProperty;
        return validate(defs.parameter, node, "parameter", parameter, 1), node;
      }, exports2.tSParenthesizedType = exports2.tsParenthesizedType = function(typeAnnotation) {
        const node = { type: "TSParenthesizedType", typeAnnotation }, defs = NODE_FIELDS.TSParenthesizedType;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSPropertySignature = exports2.tsPropertySignature = function(key, typeAnnotation = null) {
        const node = { type: "TSPropertySignature", key, typeAnnotation, kind: null }, defs = NODE_FIELDS.TSPropertySignature;
        return validate(defs.key, node, "key", key, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSQualifiedName = exports2.tsQualifiedName = function(left, right) {
        const node = { type: "TSQualifiedName", left, right }, defs = NODE_FIELDS.TSQualifiedName;
        return validate(defs.left, node, "left", left, 1), validate(defs.right, node, "right", right, 1), node;
      }, exports2.tSRestType = exports2.tsRestType = function(typeAnnotation) {
        const node = { type: "TSRestType", typeAnnotation }, defs = NODE_FIELDS.TSRestType;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSSatisfiesExpression = exports2.tsSatisfiesExpression = function(expression, typeAnnotation) {
        const node = { type: "TSSatisfiesExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TSSatisfiesExpression;
        return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSStringKeyword = exports2.tsStringKeyword = function() {
        return { type: "TSStringKeyword" };
      }, exports2.tSSymbolKeyword = exports2.tsSymbolKeyword = function() {
        return { type: "TSSymbolKeyword" };
      }, exports2.tSThisType = exports2.tsThisType = function() {
        return { type: "TSThisType" };
      }, exports2.tSTupleType = exports2.tsTupleType = function(elementTypes) {
        const node = { type: "TSTupleType", elementTypes }, defs = NODE_FIELDS.TSTupleType;
        return validate(defs.elementTypes, node, "elementTypes", elementTypes, 1), node;
      }, exports2.tSTypeAliasDeclaration = exports2.tsTypeAliasDeclaration = function(id, typeParameters = null, typeAnnotation) {
        const node = { type: "TSTypeAliasDeclaration", id, typeParameters, typeAnnotation }, defs = NODE_FIELDS.TSTypeAliasDeclaration;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSTypeAnnotation = exports2.tsTypeAnnotation = function(typeAnnotation) {
        const node = { type: "TSTypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.TSTypeAnnotation;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSTypeAssertion = exports2.tsTypeAssertion = function(typeAnnotation, expression) {
        const node = { type: "TSTypeAssertion", typeAnnotation, expression }, defs = NODE_FIELDS.TSTypeAssertion;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.expression, node, "expression", expression, 1), node;
      }, exports2.tSTypeLiteral = exports2.tsTypeLiteral = function(members) {
        const node = { type: "TSTypeLiteral", members }, defs = NODE_FIELDS.TSTypeLiteral;
        return validate(defs.members, node, "members", members, 1), node;
      }, exports2.tSTypeOperator = exports2.tsTypeOperator = function(typeAnnotation) {
        const node = { type: "TSTypeOperator", typeAnnotation, operator: null }, defs = NODE_FIELDS.TSTypeOperator;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.tSTypeParameter = exports2.tsTypeParameter = function(constraint = null, _default = null, name) {
        const node = { type: "TSTypeParameter", constraint, default: _default, name }, defs = NODE_FIELDS.TSTypeParameter;
        return validate(defs.constraint, node, "constraint", constraint, 1), validate(defs.default, node, "default", _default, 1), validate(defs.name, node, "name", name), node;
      }, exports2.tSTypeParameterDeclaration = exports2.tsTypeParameterDeclaration = function(params) {
        const node = { type: "TSTypeParameterDeclaration", params }, defs = NODE_FIELDS.TSTypeParameterDeclaration;
        return validate(defs.params, node, "params", params, 1), node;
      }, exports2.tSTypeParameterInstantiation = exports2.tsTypeParameterInstantiation = function(params) {
        const node = { type: "TSTypeParameterInstantiation", params }, defs = NODE_FIELDS.TSTypeParameterInstantiation;
        return validate(defs.params, node, "params", params, 1), node;
      }, exports2.tSTypePredicate = exports2.tsTypePredicate = function(parameterName, typeAnnotation = null, asserts = null) {
        const node = { type: "TSTypePredicate", parameterName, typeAnnotation, asserts }, defs = NODE_FIELDS.TSTypePredicate;
        return validate(defs.parameterName, node, "parameterName", parameterName, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), validate(defs.asserts, node, "asserts", asserts), node;
      }, exports2.tSTypeQuery = exports2.tsTypeQuery = function(exprName, typeParameters = null) {
        const node = { type: "TSTypeQuery", exprName, typeParameters }, defs = NODE_FIELDS.TSTypeQuery;
        return validate(defs.exprName, node, "exprName", exprName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.tSTypeReference = exports2.tsTypeReference = function(typeName, typeParameters = null) {
        const node = { type: "TSTypeReference", typeName, typeParameters }, defs = NODE_FIELDS.TSTypeReference;
        return validate(defs.typeName, node, "typeName", typeName, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), node;
      }, exports2.tSUndefinedKeyword = exports2.tsUndefinedKeyword = function() {
        return { type: "TSUndefinedKeyword" };
      }, exports2.tSUnionType = exports2.tsUnionType = function(types) {
        const node = { type: "TSUnionType", types }, defs = NODE_FIELDS.TSUnionType;
        return validate(defs.types, node, "types", types, 1), node;
      }, exports2.tSUnknownKeyword = exports2.tsUnknownKeyword = function() {
        return { type: "TSUnknownKeyword" };
      }, exports2.tSVoidKeyword = exports2.tsVoidKeyword = function() {
        return { type: "TSVoidKeyword" };
      }, exports2.tupleExpression = function(elements = []) {
        const node = { type: "TupleExpression", elements }, defs = NODE_FIELDS.TupleExpression;
        return validate(defs.elements, node, "elements", elements, 1), node;
      }, exports2.tupleTypeAnnotation = function(types) {
        const node = { type: "TupleTypeAnnotation", types }, defs = NODE_FIELDS.TupleTypeAnnotation;
        return validate(defs.types, node, "types", types, 1), node;
      }, exports2.typeAlias = function(id, typeParameters = null, right) {
        const node = { type: "TypeAlias", id, typeParameters, right }, defs = NODE_FIELDS.TypeAlias;
        return validate(defs.id, node, "id", id, 1), validate(defs.typeParameters, node, "typeParameters", typeParameters, 1), validate(defs.right, node, "right", right, 1), node;
      }, exports2.typeAnnotation = function(typeAnnotation) {
        const node = { type: "TypeAnnotation", typeAnnotation }, defs = NODE_FIELDS.TypeAnnotation;
        return validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.typeCastExpression = function(expression, typeAnnotation) {
        const node = { type: "TypeCastExpression", expression, typeAnnotation }, defs = NODE_FIELDS.TypeCastExpression;
        return validate(defs.expression, node, "expression", expression, 1), validate(defs.typeAnnotation, node, "typeAnnotation", typeAnnotation, 1), node;
      }, exports2.typeParameter = function(bound = null, _default = null, variance = null) {
        const node = { type: "TypeParameter", bound, default: _default, variance, name: null }, defs = NODE_FIELDS.TypeParameter;
        return validate(defs.bound, node, "bound", bound, 1), validate(defs.default, node, "default", _default, 1), validate(defs.variance, node, "variance", variance, 1), node;
      }, exports2.typeParameterDeclaration = function(params) {
        const node = { type: "TypeParameterDeclaration", params }, defs = NODE_FIELDS.TypeParameterDeclaration;
        return validate(defs.params, node, "params", params, 1), node;
      }, exports2.typeParameterInstantiation = function(params) {
        const node = { type: "TypeParameterInstantiation", params }, defs = NODE_FIELDS.TypeParameterInstantiation;
        return validate(defs.params, node, "params", params, 1), node;
      }, exports2.typeofTypeAnnotation = function(argument) {
        const node = { type: "TypeofTypeAnnotation", argument }, defs = NODE_FIELDS.TypeofTypeAnnotation;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }, exports2.unaryExpression = function(operator, argument, prefix = true) {
        const node = { type: "UnaryExpression", operator, argument, prefix }, defs = NODE_FIELDS.UnaryExpression;
        return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
      }, exports2.unionTypeAnnotation = function(types) {
        const node = { type: "UnionTypeAnnotation", types }, defs = NODE_FIELDS.UnionTypeAnnotation;
        return validate(defs.types, node, "types", types, 1), node;
      }, exports2.updateExpression = function(operator, argument, prefix = false) {
        const node = { type: "UpdateExpression", operator, argument, prefix }, defs = NODE_FIELDS.UpdateExpression;
        return validate(defs.operator, node, "operator", operator), validate(defs.argument, node, "argument", argument, 1), validate(defs.prefix, node, "prefix", prefix), node;
      }, exports2.v8IntrinsicIdentifier = function(name) {
        const node = { type: "V8IntrinsicIdentifier", name }, defs = NODE_FIELDS.V8IntrinsicIdentifier;
        return validate(defs.name, node, "name", name), node;
      }, exports2.variableDeclaration = function(kind, declarations) {
        const node = { type: "VariableDeclaration", kind, declarations }, defs = NODE_FIELDS.VariableDeclaration;
        return validate(defs.kind, node, "kind", kind), validate(defs.declarations, node, "declarations", declarations, 1), node;
      }, exports2.variableDeclarator = function(id, init = null) {
        const node = { type: "VariableDeclarator", id, init }, defs = NODE_FIELDS.VariableDeclarator;
        return validate(defs.id, node, "id", id, 1), validate(defs.init, node, "init", init, 1), node;
      }, exports2.variance = function(kind) {
        const node = { type: "Variance", kind }, defs = NODE_FIELDS.Variance;
        return validate(defs.kind, node, "kind", kind), node;
      }, exports2.voidTypeAnnotation = function() {
        return { type: "VoidTypeAnnotation" };
      }, exports2.whileStatement = function(test, body) {
        const node = { type: "WhileStatement", test, body }, defs = NODE_FIELDS.WhileStatement;
        return validate(defs.test, node, "test", test, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.withStatement = function(object, body) {
        const node = { type: "WithStatement", object, body }, defs = NODE_FIELDS.WithStatement;
        return validate(defs.object, node, "object", object, 1), validate(defs.body, node, "body", body, 1), node;
      }, exports2.yieldExpression = function(argument = null, delegate = false) {
        const node = { type: "YieldExpression", argument, delegate }, defs = NODE_FIELDS.YieldExpression;
        return validate(defs.argument, node, "argument", argument, 1), validate(defs.delegate, node, "delegate", delegate), node;
      };
      var _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js"), utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
      const { validateInternal: validate } = _validate, { NODE_FIELDS } = utils;
      function numericLiteral(value2) {
        const node = { type: "NumericLiteral", value: value2 }, defs = NODE_FIELDS.NumericLiteral;
        return validate(defs.value, node, "value", value2), node;
      }
      function regExpLiteral(pattern, flags = "") {
        const node = { type: "RegExpLiteral", pattern, flags }, defs = NODE_FIELDS.RegExpLiteral;
        return validate(defs.pattern, node, "pattern", pattern), validate(defs.flags, node, "flags", flags), node;
      }
      function restElement(argument) {
        const node = { type: "RestElement", argument }, defs = NODE_FIELDS.RestElement;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }
      function spreadElement(argument) {
        const node = { type: "SpreadElement", argument }, defs = NODE_FIELDS.SpreadElement;
        return validate(defs.argument, node, "argument", argument, 1), node;
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "AnyTypeAnnotation", { enumerable: true, get: function() {
        return _index.anyTypeAnnotation;
      } }), Object.defineProperty(exports2, "ArgumentPlaceholder", { enumerable: true, get: function() {
        return _index.argumentPlaceholder;
      } }), Object.defineProperty(exports2, "ArrayExpression", { enumerable: true, get: function() {
        return _index.arrayExpression;
      } }), Object.defineProperty(exports2, "ArrayPattern", { enumerable: true, get: function() {
        return _index.arrayPattern;
      } }), Object.defineProperty(exports2, "ArrayTypeAnnotation", { enumerable: true, get: function() {
        return _index.arrayTypeAnnotation;
      } }), Object.defineProperty(exports2, "ArrowFunctionExpression", { enumerable: true, get: function() {
        return _index.arrowFunctionExpression;
      } }), Object.defineProperty(exports2, "AssignmentExpression", { enumerable: true, get: function() {
        return _index.assignmentExpression;
      } }), Object.defineProperty(exports2, "AssignmentPattern", { enumerable: true, get: function() {
        return _index.assignmentPattern;
      } }), Object.defineProperty(exports2, "AwaitExpression", { enumerable: true, get: function() {
        return _index.awaitExpression;
      } }), Object.defineProperty(exports2, "BigIntLiteral", { enumerable: true, get: function() {
        return _index.bigIntLiteral;
      } }), Object.defineProperty(exports2, "BinaryExpression", { enumerable: true, get: function() {
        return _index.binaryExpression;
      } }), Object.defineProperty(exports2, "BindExpression", { enumerable: true, get: function() {
        return _index.bindExpression;
      } }), Object.defineProperty(exports2, "BlockStatement", { enumerable: true, get: function() {
        return _index.blockStatement;
      } }), Object.defineProperty(exports2, "BooleanLiteral", { enumerable: true, get: function() {
        return _index.booleanLiteral;
      } }), Object.defineProperty(exports2, "BooleanLiteralTypeAnnotation", { enumerable: true, get: function() {
        return _index.booleanLiteralTypeAnnotation;
      } }), Object.defineProperty(exports2, "BooleanTypeAnnotation", { enumerable: true, get: function() {
        return _index.booleanTypeAnnotation;
      } }), Object.defineProperty(exports2, "BreakStatement", { enumerable: true, get: function() {
        return _index.breakStatement;
      } }), Object.defineProperty(exports2, "CallExpression", { enumerable: true, get: function() {
        return _index.callExpression;
      } }), Object.defineProperty(exports2, "CatchClause", { enumerable: true, get: function() {
        return _index.catchClause;
      } }), Object.defineProperty(exports2, "ClassAccessorProperty", { enumerable: true, get: function() {
        return _index.classAccessorProperty;
      } }), Object.defineProperty(exports2, "ClassBody", { enumerable: true, get: function() {
        return _index.classBody;
      } }), Object.defineProperty(exports2, "ClassDeclaration", { enumerable: true, get: function() {
        return _index.classDeclaration;
      } }), Object.defineProperty(exports2, "ClassExpression", { enumerable: true, get: function() {
        return _index.classExpression;
      } }), Object.defineProperty(exports2, "ClassImplements", { enumerable: true, get: function() {
        return _index.classImplements;
      } }), Object.defineProperty(exports2, "ClassMethod", { enumerable: true, get: function() {
        return _index.classMethod;
      } }), Object.defineProperty(exports2, "ClassPrivateMethod", { enumerable: true, get: function() {
        return _index.classPrivateMethod;
      } }), Object.defineProperty(exports2, "ClassPrivateProperty", { enumerable: true, get: function() {
        return _index.classPrivateProperty;
      } }), Object.defineProperty(exports2, "ClassProperty", { enumerable: true, get: function() {
        return _index.classProperty;
      } }), Object.defineProperty(exports2, "ConditionalExpression", { enumerable: true, get: function() {
        return _index.conditionalExpression;
      } }), Object.defineProperty(exports2, "ContinueStatement", { enumerable: true, get: function() {
        return _index.continueStatement;
      } }), Object.defineProperty(exports2, "DebuggerStatement", { enumerable: true, get: function() {
        return _index.debuggerStatement;
      } }), Object.defineProperty(exports2, "DecimalLiteral", { enumerable: true, get: function() {
        return _index.decimalLiteral;
      } }), Object.defineProperty(exports2, "DeclareClass", { enumerable: true, get: function() {
        return _index.declareClass;
      } }), Object.defineProperty(exports2, "DeclareExportAllDeclaration", { enumerable: true, get: function() {
        return _index.declareExportAllDeclaration;
      } }), Object.defineProperty(exports2, "DeclareExportDeclaration", { enumerable: true, get: function() {
        return _index.declareExportDeclaration;
      } }), Object.defineProperty(exports2, "DeclareFunction", { enumerable: true, get: function() {
        return _index.declareFunction;
      } }), Object.defineProperty(exports2, "DeclareInterface", { enumerable: true, get: function() {
        return _index.declareInterface;
      } }), Object.defineProperty(exports2, "DeclareModule", { enumerable: true, get: function() {
        return _index.declareModule;
      } }), Object.defineProperty(exports2, "DeclareModuleExports", { enumerable: true, get: function() {
        return _index.declareModuleExports;
      } }), Object.defineProperty(exports2, "DeclareOpaqueType", { enumerable: true, get: function() {
        return _index.declareOpaqueType;
      } }), Object.defineProperty(exports2, "DeclareTypeAlias", { enumerable: true, get: function() {
        return _index.declareTypeAlias;
      } }), Object.defineProperty(exports2, "DeclareVariable", { enumerable: true, get: function() {
        return _index.declareVariable;
      } }), Object.defineProperty(exports2, "DeclaredPredicate", { enumerable: true, get: function() {
        return _index.declaredPredicate;
      } }), Object.defineProperty(exports2, "Decorator", { enumerable: true, get: function() {
        return _index.decorator;
      } }), Object.defineProperty(exports2, "Directive", { enumerable: true, get: function() {
        return _index.directive;
      } }), Object.defineProperty(exports2, "DirectiveLiteral", { enumerable: true, get: function() {
        return _index.directiveLiteral;
      } }), Object.defineProperty(exports2, "DoExpression", { enumerable: true, get: function() {
        return _index.doExpression;
      } }), Object.defineProperty(exports2, "DoWhileStatement", { enumerable: true, get: function() {
        return _index.doWhileStatement;
      } }), Object.defineProperty(exports2, "EmptyStatement", { enumerable: true, get: function() {
        return _index.emptyStatement;
      } }), Object.defineProperty(exports2, "EmptyTypeAnnotation", { enumerable: true, get: function() {
        return _index.emptyTypeAnnotation;
      } }), Object.defineProperty(exports2, "EnumBooleanBody", { enumerable: true, get: function() {
        return _index.enumBooleanBody;
      } }), Object.defineProperty(exports2, "EnumBooleanMember", { enumerable: true, get: function() {
        return _index.enumBooleanMember;
      } }), Object.defineProperty(exports2, "EnumDeclaration", { enumerable: true, get: function() {
        return _index.enumDeclaration;
      } }), Object.defineProperty(exports2, "EnumDefaultedMember", { enumerable: true, get: function() {
        return _index.enumDefaultedMember;
      } }), Object.defineProperty(exports2, "EnumNumberBody", { enumerable: true, get: function() {
        return _index.enumNumberBody;
      } }), Object.defineProperty(exports2, "EnumNumberMember", { enumerable: true, get: function() {
        return _index.enumNumberMember;
      } }), Object.defineProperty(exports2, "EnumStringBody", { enumerable: true, get: function() {
        return _index.enumStringBody;
      } }), Object.defineProperty(exports2, "EnumStringMember", { enumerable: true, get: function() {
        return _index.enumStringMember;
      } }), Object.defineProperty(exports2, "EnumSymbolBody", { enumerable: true, get: function() {
        return _index.enumSymbolBody;
      } }), Object.defineProperty(exports2, "ExistsTypeAnnotation", { enumerable: true, get: function() {
        return _index.existsTypeAnnotation;
      } }), Object.defineProperty(exports2, "ExportAllDeclaration", { enumerable: true, get: function() {
        return _index.exportAllDeclaration;
      } }), Object.defineProperty(exports2, "ExportDefaultDeclaration", { enumerable: true, get: function() {
        return _index.exportDefaultDeclaration;
      } }), Object.defineProperty(exports2, "ExportDefaultSpecifier", { enumerable: true, get: function() {
        return _index.exportDefaultSpecifier;
      } }), Object.defineProperty(exports2, "ExportNamedDeclaration", { enumerable: true, get: function() {
        return _index.exportNamedDeclaration;
      } }), Object.defineProperty(exports2, "ExportNamespaceSpecifier", { enumerable: true, get: function() {
        return _index.exportNamespaceSpecifier;
      } }), Object.defineProperty(exports2, "ExportSpecifier", { enumerable: true, get: function() {
        return _index.exportSpecifier;
      } }), Object.defineProperty(exports2, "ExpressionStatement", { enumerable: true, get: function() {
        return _index.expressionStatement;
      } }), Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
        return _index.file;
      } }), Object.defineProperty(exports2, "ForInStatement", { enumerable: true, get: function() {
        return _index.forInStatement;
      } }), Object.defineProperty(exports2, "ForOfStatement", { enumerable: true, get: function() {
        return _index.forOfStatement;
      } }), Object.defineProperty(exports2, "ForStatement", { enumerable: true, get: function() {
        return _index.forStatement;
      } }), Object.defineProperty(exports2, "FunctionDeclaration", { enumerable: true, get: function() {
        return _index.functionDeclaration;
      } }), Object.defineProperty(exports2, "FunctionExpression", { enumerable: true, get: function() {
        return _index.functionExpression;
      } }), Object.defineProperty(exports2, "FunctionTypeAnnotation", { enumerable: true, get: function() {
        return _index.functionTypeAnnotation;
      } }), Object.defineProperty(exports2, "FunctionTypeParam", { enumerable: true, get: function() {
        return _index.functionTypeParam;
      } }), Object.defineProperty(exports2, "GenericTypeAnnotation", { enumerable: true, get: function() {
        return _index.genericTypeAnnotation;
      } }), Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
        return _index.identifier;
      } }), Object.defineProperty(exports2, "IfStatement", { enumerable: true, get: function() {
        return _index.ifStatement;
      } }), Object.defineProperty(exports2, "Import", { enumerable: true, get: function() {
        return _index.import;
      } }), Object.defineProperty(exports2, "ImportAttribute", { enumerable: true, get: function() {
        return _index.importAttribute;
      } }), Object.defineProperty(exports2, "ImportDeclaration", { enumerable: true, get: function() {
        return _index.importDeclaration;
      } }), Object.defineProperty(exports2, "ImportDefaultSpecifier", { enumerable: true, get: function() {
        return _index.importDefaultSpecifier;
      } }), Object.defineProperty(exports2, "ImportExpression", { enumerable: true, get: function() {
        return _index.importExpression;
      } }), Object.defineProperty(exports2, "ImportNamespaceSpecifier", { enumerable: true, get: function() {
        return _index.importNamespaceSpecifier;
      } }), Object.defineProperty(exports2, "ImportSpecifier", { enumerable: true, get: function() {
        return _index.importSpecifier;
      } }), Object.defineProperty(exports2, "IndexedAccessType", { enumerable: true, get: function() {
        return _index.indexedAccessType;
      } }), Object.defineProperty(exports2, "InferredPredicate", { enumerable: true, get: function() {
        return _index.inferredPredicate;
      } }), Object.defineProperty(exports2, "InterfaceDeclaration", { enumerable: true, get: function() {
        return _index.interfaceDeclaration;
      } }), Object.defineProperty(exports2, "InterfaceExtends", { enumerable: true, get: function() {
        return _index.interfaceExtends;
      } }), Object.defineProperty(exports2, "InterfaceTypeAnnotation", { enumerable: true, get: function() {
        return _index.interfaceTypeAnnotation;
      } }), Object.defineProperty(exports2, "InterpreterDirective", { enumerable: true, get: function() {
        return _index.interpreterDirective;
      } }), Object.defineProperty(exports2, "IntersectionTypeAnnotation", { enumerable: true, get: function() {
        return _index.intersectionTypeAnnotation;
      } }), Object.defineProperty(exports2, "JSXAttribute", { enumerable: true, get: function() {
        return _index.jsxAttribute;
      } }), Object.defineProperty(exports2, "JSXClosingElement", { enumerable: true, get: function() {
        return _index.jsxClosingElement;
      } }), Object.defineProperty(exports2, "JSXClosingFragment", { enumerable: true, get: function() {
        return _index.jsxClosingFragment;
      } }), Object.defineProperty(exports2, "JSXElement", { enumerable: true, get: function() {
        return _index.jsxElement;
      } }), Object.defineProperty(exports2, "JSXEmptyExpression", { enumerable: true, get: function() {
        return _index.jsxEmptyExpression;
      } }), Object.defineProperty(exports2, "JSXExpressionContainer", { enumerable: true, get: function() {
        return _index.jsxExpressionContainer;
      } }), Object.defineProperty(exports2, "JSXFragment", { enumerable: true, get: function() {
        return _index.jsxFragment;
      } }), Object.defineProperty(exports2, "JSXIdentifier", { enumerable: true, get: function() {
        return _index.jsxIdentifier;
      } }), Object.defineProperty(exports2, "JSXMemberExpression", { enumerable: true, get: function() {
        return _index.jsxMemberExpression;
      } }), Object.defineProperty(exports2, "JSXNamespacedName", { enumerable: true, get: function() {
        return _index.jsxNamespacedName;
      } }), Object.defineProperty(exports2, "JSXOpeningElement", { enumerable: true, get: function() {
        return _index.jsxOpeningElement;
      } }), Object.defineProperty(exports2, "JSXOpeningFragment", { enumerable: true, get: function() {
        return _index.jsxOpeningFragment;
      } }), Object.defineProperty(exports2, "JSXSpreadAttribute", { enumerable: true, get: function() {
        return _index.jsxSpreadAttribute;
      } }), Object.defineProperty(exports2, "JSXSpreadChild", { enumerable: true, get: function() {
        return _index.jsxSpreadChild;
      } }), Object.defineProperty(exports2, "JSXText", { enumerable: true, get: function() {
        return _index.jsxText;
      } }), Object.defineProperty(exports2, "LabeledStatement", { enumerable: true, get: function() {
        return _index.labeledStatement;
      } }), Object.defineProperty(exports2, "LogicalExpression", { enumerable: true, get: function() {
        return _index.logicalExpression;
      } }), Object.defineProperty(exports2, "MemberExpression", { enumerable: true, get: function() {
        return _index.memberExpression;
      } }), Object.defineProperty(exports2, "MetaProperty", { enumerable: true, get: function() {
        return _index.metaProperty;
      } }), Object.defineProperty(exports2, "MixedTypeAnnotation", { enumerable: true, get: function() {
        return _index.mixedTypeAnnotation;
      } }), Object.defineProperty(exports2, "ModuleExpression", { enumerable: true, get: function() {
        return _index.moduleExpression;
      } }), Object.defineProperty(exports2, "NewExpression", { enumerable: true, get: function() {
        return _index.newExpression;
      } }), Object.defineProperty(exports2, "Noop", { enumerable: true, get: function() {
        return _index.noop;
      } }), Object.defineProperty(exports2, "NullLiteral", { enumerable: true, get: function() {
        return _index.nullLiteral;
      } }), Object.defineProperty(exports2, "NullLiteralTypeAnnotation", { enumerable: true, get: function() {
        return _index.nullLiteralTypeAnnotation;
      } }), Object.defineProperty(exports2, "NullableTypeAnnotation", { enumerable: true, get: function() {
        return _index.nullableTypeAnnotation;
      } }), Object.defineProperty(exports2, "NumberLiteral", { enumerable: true, get: function() {
        return _index.numberLiteral;
      } }), Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
        return _index.numberLiteralTypeAnnotation;
      } }), Object.defineProperty(exports2, "NumberTypeAnnotation", { enumerable: true, get: function() {
        return _index.numberTypeAnnotation;
      } }), Object.defineProperty(exports2, "NumericLiteral", { enumerable: true, get: function() {
        return _index.numericLiteral;
      } }), Object.defineProperty(exports2, "ObjectExpression", { enumerable: true, get: function() {
        return _index.objectExpression;
      } }), Object.defineProperty(exports2, "ObjectMethod", { enumerable: true, get: function() {
        return _index.objectMethod;
      } }), Object.defineProperty(exports2, "ObjectPattern", { enumerable: true, get: function() {
        return _index.objectPattern;
      } }), Object.defineProperty(exports2, "ObjectProperty", { enumerable: true, get: function() {
        return _index.objectProperty;
      } }), Object.defineProperty(exports2, "ObjectTypeAnnotation", { enumerable: true, get: function() {
        return _index.objectTypeAnnotation;
      } }), Object.defineProperty(exports2, "ObjectTypeCallProperty", { enumerable: true, get: function() {
        return _index.objectTypeCallProperty;
      } }), Object.defineProperty(exports2, "ObjectTypeIndexer", { enumerable: true, get: function() {
        return _index.objectTypeIndexer;
      } }), Object.defineProperty(exports2, "ObjectTypeInternalSlot", { enumerable: true, get: function() {
        return _index.objectTypeInternalSlot;
      } }), Object.defineProperty(exports2, "ObjectTypeProperty", { enumerable: true, get: function() {
        return _index.objectTypeProperty;
      } }), Object.defineProperty(exports2, "ObjectTypeSpreadProperty", { enumerable: true, get: function() {
        return _index.objectTypeSpreadProperty;
      } }), Object.defineProperty(exports2, "OpaqueType", { enumerable: true, get: function() {
        return _index.opaqueType;
      } }), Object.defineProperty(exports2, "OptionalCallExpression", { enumerable: true, get: function() {
        return _index.optionalCallExpression;
      } }), Object.defineProperty(exports2, "OptionalIndexedAccessType", { enumerable: true, get: function() {
        return _index.optionalIndexedAccessType;
      } }), Object.defineProperty(exports2, "OptionalMemberExpression", { enumerable: true, get: function() {
        return _index.optionalMemberExpression;
      } }), Object.defineProperty(exports2, "ParenthesizedExpression", { enumerable: true, get: function() {
        return _index.parenthesizedExpression;
      } }), Object.defineProperty(exports2, "PipelineBareFunction", { enumerable: true, get: function() {
        return _index.pipelineBareFunction;
      } }), Object.defineProperty(exports2, "PipelinePrimaryTopicReference", { enumerable: true, get: function() {
        return _index.pipelinePrimaryTopicReference;
      } }), Object.defineProperty(exports2, "PipelineTopicExpression", { enumerable: true, get: function() {
        return _index.pipelineTopicExpression;
      } }), Object.defineProperty(exports2, "Placeholder", { enumerable: true, get: function() {
        return _index.placeholder;
      } }), Object.defineProperty(exports2, "PrivateName", { enumerable: true, get: function() {
        return _index.privateName;
      } }), Object.defineProperty(exports2, "Program", { enumerable: true, get: function() {
        return _index.program;
      } }), Object.defineProperty(exports2, "QualifiedTypeIdentifier", { enumerable: true, get: function() {
        return _index.qualifiedTypeIdentifier;
      } }), Object.defineProperty(exports2, "RecordExpression", { enumerable: true, get: function() {
        return _index.recordExpression;
      } }), Object.defineProperty(exports2, "RegExpLiteral", { enumerable: true, get: function() {
        return _index.regExpLiteral;
      } }), Object.defineProperty(exports2, "RegexLiteral", { enumerable: true, get: function() {
        return _index.regexLiteral;
      } }), Object.defineProperty(exports2, "RestElement", { enumerable: true, get: function() {
        return _index.restElement;
      } }), Object.defineProperty(exports2, "RestProperty", { enumerable: true, get: function() {
        return _index.restProperty;
      } }), Object.defineProperty(exports2, "ReturnStatement", { enumerable: true, get: function() {
        return _index.returnStatement;
      } }), Object.defineProperty(exports2, "SequenceExpression", { enumerable: true, get: function() {
        return _index.sequenceExpression;
      } }), Object.defineProperty(exports2, "SpreadElement", { enumerable: true, get: function() {
        return _index.spreadElement;
      } }), Object.defineProperty(exports2, "SpreadProperty", { enumerable: true, get: function() {
        return _index.spreadProperty;
      } }), Object.defineProperty(exports2, "StaticBlock", { enumerable: true, get: function() {
        return _index.staticBlock;
      } }), Object.defineProperty(exports2, "StringLiteral", { enumerable: true, get: function() {
        return _index.stringLiteral;
      } }), Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
        return _index.stringLiteralTypeAnnotation;
      } }), Object.defineProperty(exports2, "StringTypeAnnotation", { enumerable: true, get: function() {
        return _index.stringTypeAnnotation;
      } }), Object.defineProperty(exports2, "Super", { enumerable: true, get: function() {
        return _index.super;
      } }), Object.defineProperty(exports2, "SwitchCase", { enumerable: true, get: function() {
        return _index.switchCase;
      } }), Object.defineProperty(exports2, "SwitchStatement", { enumerable: true, get: function() {
        return _index.switchStatement;
      } }), Object.defineProperty(exports2, "SymbolTypeAnnotation", { enumerable: true, get: function() {
        return _index.symbolTypeAnnotation;
      } }), Object.defineProperty(exports2, "TSAnyKeyword", { enumerable: true, get: function() {
        return _index.tsAnyKeyword;
      } }), Object.defineProperty(exports2, "TSArrayType", { enumerable: true, get: function() {
        return _index.tsArrayType;
      } }), Object.defineProperty(exports2, "TSAsExpression", { enumerable: true, get: function() {
        return _index.tsAsExpression;
      } }), Object.defineProperty(exports2, "TSBigIntKeyword", { enumerable: true, get: function() {
        return _index.tsBigIntKeyword;
      } }), Object.defineProperty(exports2, "TSBooleanKeyword", { enumerable: true, get: function() {
        return _index.tsBooleanKeyword;
      } }), Object.defineProperty(exports2, "TSCallSignatureDeclaration", { enumerable: true, get: function() {
        return _index.tsCallSignatureDeclaration;
      } }), Object.defineProperty(exports2, "TSConditionalType", { enumerable: true, get: function() {
        return _index.tsConditionalType;
      } }), Object.defineProperty(exports2, "TSConstructSignatureDeclaration", { enumerable: true, get: function() {
        return _index.tsConstructSignatureDeclaration;
      } }), Object.defineProperty(exports2, "TSConstructorType", { enumerable: true, get: function() {
        return _index.tsConstructorType;
      } }), Object.defineProperty(exports2, "TSDeclareFunction", { enumerable: true, get: function() {
        return _index.tsDeclareFunction;
      } }), Object.defineProperty(exports2, "TSDeclareMethod", { enumerable: true, get: function() {
        return _index.tsDeclareMethod;
      } }), Object.defineProperty(exports2, "TSEnumDeclaration", { enumerable: true, get: function() {
        return _index.tsEnumDeclaration;
      } }), Object.defineProperty(exports2, "TSEnumMember", { enumerable: true, get: function() {
        return _index.tsEnumMember;
      } }), Object.defineProperty(exports2, "TSExportAssignment", { enumerable: true, get: function() {
        return _index.tsExportAssignment;
      } }), Object.defineProperty(exports2, "TSExpressionWithTypeArguments", { enumerable: true, get: function() {
        return _index.tsExpressionWithTypeArguments;
      } }), Object.defineProperty(exports2, "TSExternalModuleReference", { enumerable: true, get: function() {
        return _index.tsExternalModuleReference;
      } }), Object.defineProperty(exports2, "TSFunctionType", { enumerable: true, get: function() {
        return _index.tsFunctionType;
      } }), Object.defineProperty(exports2, "TSImportEqualsDeclaration", { enumerable: true, get: function() {
        return _index.tsImportEqualsDeclaration;
      } }), Object.defineProperty(exports2, "TSImportType", { enumerable: true, get: function() {
        return _index.tsImportType;
      } }), Object.defineProperty(exports2, "TSIndexSignature", { enumerable: true, get: function() {
        return _index.tsIndexSignature;
      } }), Object.defineProperty(exports2, "TSIndexedAccessType", { enumerable: true, get: function() {
        return _index.tsIndexedAccessType;
      } }), Object.defineProperty(exports2, "TSInferType", { enumerable: true, get: function() {
        return _index.tsInferType;
      } }), Object.defineProperty(exports2, "TSInstantiationExpression", { enumerable: true, get: function() {
        return _index.tsInstantiationExpression;
      } }), Object.defineProperty(exports2, "TSInterfaceBody", { enumerable: true, get: function() {
        return _index.tsInterfaceBody;
      } }), Object.defineProperty(exports2, "TSInterfaceDeclaration", { enumerable: true, get: function() {
        return _index.tsInterfaceDeclaration;
      } }), Object.defineProperty(exports2, "TSIntersectionType", { enumerable: true, get: function() {
        return _index.tsIntersectionType;
      } }), Object.defineProperty(exports2, "TSIntrinsicKeyword", { enumerable: true, get: function() {
        return _index.tsIntrinsicKeyword;
      } }), Object.defineProperty(exports2, "TSLiteralType", { enumerable: true, get: function() {
        return _index.tsLiteralType;
      } }), Object.defineProperty(exports2, "TSMappedType", { enumerable: true, get: function() {
        return _index.tsMappedType;
      } }), Object.defineProperty(exports2, "TSMethodSignature", { enumerable: true, get: function() {
        return _index.tsMethodSignature;
      } }), Object.defineProperty(exports2, "TSModuleBlock", { enumerable: true, get: function() {
        return _index.tsModuleBlock;
      } }), Object.defineProperty(exports2, "TSModuleDeclaration", { enumerable: true, get: function() {
        return _index.tsModuleDeclaration;
      } }), Object.defineProperty(exports2, "TSNamedTupleMember", { enumerable: true, get: function() {
        return _index.tsNamedTupleMember;
      } }), Object.defineProperty(exports2, "TSNamespaceExportDeclaration", { enumerable: true, get: function() {
        return _index.tsNamespaceExportDeclaration;
      } }), Object.defineProperty(exports2, "TSNeverKeyword", { enumerable: true, get: function() {
        return _index.tsNeverKeyword;
      } }), Object.defineProperty(exports2, "TSNonNullExpression", { enumerable: true, get: function() {
        return _index.tsNonNullExpression;
      } }), Object.defineProperty(exports2, "TSNullKeyword", { enumerable: true, get: function() {
        return _index.tsNullKeyword;
      } }), Object.defineProperty(exports2, "TSNumberKeyword", { enumerable: true, get: function() {
        return _index.tsNumberKeyword;
      } }), Object.defineProperty(exports2, "TSObjectKeyword", { enumerable: true, get: function() {
        return _index.tsObjectKeyword;
      } }), Object.defineProperty(exports2, "TSOptionalType", { enumerable: true, get: function() {
        return _index.tsOptionalType;
      } }), Object.defineProperty(exports2, "TSParameterProperty", { enumerable: true, get: function() {
        return _index.tsParameterProperty;
      } }), Object.defineProperty(exports2, "TSParenthesizedType", { enumerable: true, get: function() {
        return _index.tsParenthesizedType;
      } }), Object.defineProperty(exports2, "TSPropertySignature", { enumerable: true, get: function() {
        return _index.tsPropertySignature;
      } }), Object.defineProperty(exports2, "TSQualifiedName", { enumerable: true, get: function() {
        return _index.tsQualifiedName;
      } }), Object.defineProperty(exports2, "TSRestType", { enumerable: true, get: function() {
        return _index.tsRestType;
      } }), Object.defineProperty(exports2, "TSSatisfiesExpression", { enumerable: true, get: function() {
        return _index.tsSatisfiesExpression;
      } }), Object.defineProperty(exports2, "TSStringKeyword", { enumerable: true, get: function() {
        return _index.tsStringKeyword;
      } }), Object.defineProperty(exports2, "TSSymbolKeyword", { enumerable: true, get: function() {
        return _index.tsSymbolKeyword;
      } }), Object.defineProperty(exports2, "TSThisType", { enumerable: true, get: function() {
        return _index.tsThisType;
      } }), Object.defineProperty(exports2, "TSTupleType", { enumerable: true, get: function() {
        return _index.tsTupleType;
      } }), Object.defineProperty(exports2, "TSTypeAliasDeclaration", { enumerable: true, get: function() {
        return _index.tsTypeAliasDeclaration;
      } }), Object.defineProperty(exports2, "TSTypeAnnotation", { enumerable: true, get: function() {
        return _index.tsTypeAnnotation;
      } }), Object.defineProperty(exports2, "TSTypeAssertion", { enumerable: true, get: function() {
        return _index.tsTypeAssertion;
      } }), Object.defineProperty(exports2, "TSTypeLiteral", { enumerable: true, get: function() {
        return _index.tsTypeLiteral;
      } }), Object.defineProperty(exports2, "TSTypeOperator", { enumerable: true, get: function() {
        return _index.tsTypeOperator;
      } }), Object.defineProperty(exports2, "TSTypeParameter", { enumerable: true, get: function() {
        return _index.tsTypeParameter;
      } }), Object.defineProperty(exports2, "TSTypeParameterDeclaration", { enumerable: true, get: function() {
        return _index.tsTypeParameterDeclaration;
      } }), Object.defineProperty(exports2, "TSTypeParameterInstantiation", { enumerable: true, get: function() {
        return _index.tsTypeParameterInstantiation;
      } }), Object.defineProperty(exports2, "TSTypePredicate", { enumerable: true, get: function() {
        return _index.tsTypePredicate;
      } }), Object.defineProperty(exports2, "TSTypeQuery", { enumerable: true, get: function() {
        return _index.tsTypeQuery;
      } }), Object.defineProperty(exports2, "TSTypeReference", { enumerable: true, get: function() {
        return _index.tsTypeReference;
      } }), Object.defineProperty(exports2, "TSUndefinedKeyword", { enumerable: true, get: function() {
        return _index.tsUndefinedKeyword;
      } }), Object.defineProperty(exports2, "TSUnionType", { enumerable: true, get: function() {
        return _index.tsUnionType;
      } }), Object.defineProperty(exports2, "TSUnknownKeyword", { enumerable: true, get: function() {
        return _index.tsUnknownKeyword;
      } }), Object.defineProperty(exports2, "TSVoidKeyword", { enumerable: true, get: function() {
        return _index.tsVoidKeyword;
      } }), Object.defineProperty(exports2, "TaggedTemplateExpression", { enumerable: true, get: function() {
        return _index.taggedTemplateExpression;
      } }), Object.defineProperty(exports2, "TemplateElement", { enumerable: true, get: function() {
        return _index.templateElement;
      } }), Object.defineProperty(exports2, "TemplateLiteral", { enumerable: true, get: function() {
        return _index.templateLiteral;
      } }), Object.defineProperty(exports2, "ThisExpression", { enumerable: true, get: function() {
        return _index.thisExpression;
      } }), Object.defineProperty(exports2, "ThisTypeAnnotation", { enumerable: true, get: function() {
        return _index.thisTypeAnnotation;
      } }), Object.defineProperty(exports2, "ThrowStatement", { enumerable: true, get: function() {
        return _index.throwStatement;
      } }), Object.defineProperty(exports2, "TopicReference", { enumerable: true, get: function() {
        return _index.topicReference;
      } }), Object.defineProperty(exports2, "TryStatement", { enumerable: true, get: function() {
        return _index.tryStatement;
      } }), Object.defineProperty(exports2, "TupleExpression", { enumerable: true, get: function() {
        return _index.tupleExpression;
      } }), Object.defineProperty(exports2, "TupleTypeAnnotation", { enumerable: true, get: function() {
        return _index.tupleTypeAnnotation;
      } }), Object.defineProperty(exports2, "TypeAlias", { enumerable: true, get: function() {
        return _index.typeAlias;
      } }), Object.defineProperty(exports2, "TypeAnnotation", { enumerable: true, get: function() {
        return _index.typeAnnotation;
      } }), Object.defineProperty(exports2, "TypeCastExpression", { enumerable: true, get: function() {
        return _index.typeCastExpression;
      } }), Object.defineProperty(exports2, "TypeParameter", { enumerable: true, get: function() {
        return _index.typeParameter;
      } }), Object.defineProperty(exports2, "TypeParameterDeclaration", { enumerable: true, get: function() {
        return _index.typeParameterDeclaration;
      } }), Object.defineProperty(exports2, "TypeParameterInstantiation", { enumerable: true, get: function() {
        return _index.typeParameterInstantiation;
      } }), Object.defineProperty(exports2, "TypeofTypeAnnotation", { enumerable: true, get: function() {
        return _index.typeofTypeAnnotation;
      } }), Object.defineProperty(exports2, "UnaryExpression", { enumerable: true, get: function() {
        return _index.unaryExpression;
      } }), Object.defineProperty(exports2, "UnionTypeAnnotation", { enumerable: true, get: function() {
        return _index.unionTypeAnnotation;
      } }), Object.defineProperty(exports2, "UpdateExpression", { enumerable: true, get: function() {
        return _index.updateExpression;
      } }), Object.defineProperty(exports2, "V8IntrinsicIdentifier", { enumerable: true, get: function() {
        return _index.v8IntrinsicIdentifier;
      } }), Object.defineProperty(exports2, "VariableDeclaration", { enumerable: true, get: function() {
        return _index.variableDeclaration;
      } }), Object.defineProperty(exports2, "VariableDeclarator", { enumerable: true, get: function() {
        return _index.variableDeclarator;
      } }), Object.defineProperty(exports2, "Variance", { enumerable: true, get: function() {
        return _index.variance;
      } }), Object.defineProperty(exports2, "VoidTypeAnnotation", { enumerable: true, get: function() {
        return _index.voidTypeAnnotation;
      } }), Object.defineProperty(exports2, "WhileStatement", { enumerable: true, get: function() {
        return _index.whileStatement;
      } }), Object.defineProperty(exports2, "WithStatement", { enumerable: true, get: function() {
        return _index.withStatement;
      } }), Object.defineProperty(exports2, "YieldExpression", { enumerable: true, get: function() {
        return _index.yieldExpression;
      } });
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildUndefinedNode = function() {
        return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        const elements = [];
        for (let i = 0;i < node.children.length; i++) {
          let child = node.children[i];
          (0, _index.isJSXText)(child) ? (0, _cleanJSXElementLiteralChild.default)(child, elements) : ((0, _index.isJSXExpressionContainer)(child) && (child = child.expression), (0, _index.isJSXEmptyExpression)(child) || elements.push(child));
        }
        return elements;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cleanJSXElementLiteralChild = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(typeAnnotations) {
        const types = typeAnnotations.map((type) => (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type), flattened = (0, _removeTypeDuplicates.default)(types);
        return flattened.length === 1 ? flattened[0] : (0, _index.tsUnionType)(flattened);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return (0, _cloneNode.default)(node, false);
      };
      var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return (0, _cloneNode.default)(node);
      };
      var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return (0, _cloneNode.default)(node, true, true);
      };
      var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, deep = true, withoutLoc = false) {
        return cloneNodeInternal(node, deep, withoutLoc, new Map);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      const { hasOwn } = { hasOwn: Function.call.bind(Object.prototype.hasOwnProperty) };
      function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
        return obj && typeof obj.type == "string" ? cloneNodeInternal(obj, deep, withoutLoc, commentsCache) : obj;
      }
      function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
        return Array.isArray(obj) ? obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache)) : cloneIfNode(obj, deep, withoutLoc, commentsCache);
      }
      function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
        if (!node)
          return node;
        const { type } = node, newNode = { type: node.type };
        if ((0, _index2.isIdentifier)(node))
          newNode.name = node.name, hasOwn(node, "optional") && typeof node.optional == "boolean" && (newNode.optional = node.optional), hasOwn(node, "typeAnnotation") && (newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation), hasOwn(node, "decorators") && (newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache) : node.decorators);
        else {
          if (!hasOwn(_index.NODE_FIELDS, type))
            throw new Error(`Unknown node type: "${type}"`);
          for (const field of Object.keys(_index.NODE_FIELDS[type]))
            hasOwn(node, field) && (newNode[field] = deep ? (0, _index2.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache) : node[field]);
        }
        return hasOwn(node, "loc") && (newNode.loc = withoutLoc ? null : node.loc), hasOwn(node, "leadingComments") && (newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache)), hasOwn(node, "innerComments") && (newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache)), hasOwn(node, "trailingComments") && (newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache)), hasOwn(node, "extra") && (newNode.extra = Object.assign({}, node.extra)), newNode;
      }
      function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
        return comments && deep ? comments.map((comment) => {
          const cache = commentsCache.get(comment);
          if (cache)
            return cache;
          const { type, value: value2, loc } = comment, ret = { type, value: value2, loc };
          return withoutLoc && (ret.loc = null), commentsCache.set(comment, ret), ret;
        }) : comments;
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return (0, _cloneNode.default)(node, false, true);
      };
      var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, content, line) {
        return (0, _addComments.default)(node, type, [{ type: line ? "CommentLine" : "CommentBlock", value: content }]);
      };
      var _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, comments) {
        if (!comments || !node)
          return node;
        const key = `${type}Comments`;
        node[key] ? type === "leading" ? node[key] = comments.concat(node[key]) : node[key].push(...comments) : node[key] = comments;
        return node;
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
        (0, _inherit.default)("innerComments", child, parent);
      };
      var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
        (0, _inherit.default)("leadingComments", child, parent);
      };
      var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
        (0, _inherit.default)("trailingComments", child, parent);
      };
      var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
        return (0, _inheritTrailingComments.default)(child, parent), (0, _inheritLeadingComments.default)(child, parent), (0, _inheritInnerComments.default)(child, parent), child;
      };
      var _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return _index.COMMENT_KEYS.forEach((key) => {
          node[key] = null;
        }), node;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.WHILE_TYPES = exports2.USERWHITESPACABLE_TYPES = exports2.UNARYLIKE_TYPES = exports2.TYPESCRIPT_TYPES = exports2.TSTYPE_TYPES = exports2.TSTYPEELEMENT_TYPES = exports2.TSENTITYNAME_TYPES = exports2.TSBASETYPE_TYPES = exports2.TERMINATORLESS_TYPES = exports2.STATEMENT_TYPES = exports2.STANDARDIZED_TYPES = exports2.SCOPABLE_TYPES = exports2.PUREISH_TYPES = exports2.PROPERTY_TYPES = exports2.PRIVATE_TYPES = exports2.PATTERN_TYPES = exports2.PATTERNLIKE_TYPES = exports2.OBJECTMEMBER_TYPES = exports2.MODULESPECIFIER_TYPES = exports2.MODULEDECLARATION_TYPES = exports2.MISCELLANEOUS_TYPES = exports2.METHOD_TYPES = exports2.LVAL_TYPES = exports2.LOOP_TYPES = exports2.LITERAL_TYPES = exports2.JSX_TYPES = exports2.IMPORTOREXPORTDECLARATION_TYPES = exports2.IMMUTABLE_TYPES = exports2.FUNCTION_TYPES = exports2.FUNCTIONPARENT_TYPES = exports2.FOR_TYPES = exports2.FORXSTATEMENT_TYPES = exports2.FLOW_TYPES = exports2.FLOWTYPE_TYPES = exports2.FLOWPREDICATE_TYPES = exports2.FLOWDECLARATION_TYPES = exports2.FLOWBASEANNOTATION_TYPES = exports2.EXPRESSION_TYPES = exports2.EXPRESSIONWRAPPER_TYPES = exports2.EXPORTDECLARATION_TYPES = exports2.ENUMMEMBER_TYPES = exports2.ENUMBODY_TYPES = exports2.DECLARATION_TYPES = exports2.CONDITIONAL_TYPES = exports2.COMPLETIONSTATEMENT_TYPES = exports2.CLASS_TYPES = exports2.BLOCK_TYPES = exports2.BLOCKPARENT_TYPES = exports2.BINARY_TYPES = exports2.ACCESSOR_TYPES = undefined;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      exports2.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS.Standardized, exports2.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS.Expression, exports2.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS.Binary, exports2.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Scopable, exports2.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.BlockParent, exports2.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS.Block, exports2.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.Statement, exports2.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS.Terminatorless, exports2.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.CompletionStatement, exports2.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Conditional, exports2.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS.Loop, exports2.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS.While, exports2.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS.ExpressionWrapper, exports2.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS.For, exports2.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.ForXStatement, exports2.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS.Function, exports2.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS.FunctionParent, exports2.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS.Pureish, exports2.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.Declaration, exports2.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.PatternLike, exports2.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS.LVal, exports2.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS.TSEntityName, exports2.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS.Literal, exports2.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.Immutable, exports2.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS.UserWhitespacable, exports2.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS.Method, exports2.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.ObjectMember, exports2.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS.Property, exports2.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS.UnaryLike, exports2.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS.Pattern, exports2.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS.Class;
      const IMPORTOREXPORTDECLARATION_TYPES = exports2.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration;
      exports2.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.ExportDeclaration, exports2.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS.ModuleSpecifier, exports2.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS.Accessor, exports2.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS.Private, exports2.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS.Flow, exports2.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowType, exports2.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation, exports2.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowDeclaration, exports2.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS.FlowPredicate, exports2.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumBody, exports2.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS.EnumMember, exports2.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS.JSX, exports2.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS.Miscellaneous, exports2.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS.TypeScript, exports2.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS.TSTypeElement, exports2.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSType, exports2.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS.TSBaseType, exports2.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.UPDATE_OPERATORS = exports2.UNARY_OPERATORS = exports2.STRING_UNARY_OPERATORS = exports2.STATEMENT_OR_BLOCK_KEYS = exports2.NUMBER_UNARY_OPERATORS = exports2.NUMBER_BINARY_OPERATORS = exports2.NOT_LOCAL_BINDING = exports2.LOGICAL_OPERATORS = exports2.INHERIT_KEYS = exports2.FOR_INIT_KEYS = exports2.FLATTENABLE_KEYS = exports2.EQUALITY_BINARY_OPERATORS = exports2.COMPARISON_BINARY_OPERATORS = exports2.COMMENT_KEYS = exports2.BOOLEAN_UNARY_OPERATORS = exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = exports2.BOOLEAN_BINARY_OPERATORS = exports2.BLOCK_SCOPED_SYMBOL = exports2.BINARY_OPERATORS = exports2.ASSIGNMENT_OPERATORS = undefined;
      exports2.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"], exports2.FLATTENABLE_KEYS = ["body", "expressions"], exports2.FOR_INIT_KEYS = ["left", "init"], exports2.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
      const LOGICAL_OPERATORS = exports2.LOGICAL_OPERATORS = ["||", "&&", "??"], BOOLEAN_NUMBER_BINARY_OPERATORS = (exports2.UPDATE_OPERATORS = ["++", "--"], exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="]), EQUALITY_BINARY_OPERATORS = exports2.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="], COMPARISON_BINARY_OPERATORS = exports2.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"], BOOLEAN_BINARY_OPERATORS = exports2.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS], NUMBER_BINARY_OPERATORS = exports2.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"], BOOLEAN_UNARY_OPERATORS = (exports2.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"], exports2.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")], exports2.BOOLEAN_UNARY_OPERATORS = ["delete", "!"]), NUMBER_UNARY_OPERATORS = exports2.NUMBER_UNARY_OPERATORS = ["+", "-", "~"], STRING_UNARY_OPERATORS = exports2.STRING_UNARY_OPERATORS = ["typeof"];
      exports2.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS], exports2.INHERIT_KEYS = { optional: ["typeAnnotation", "typeParameters", "returnType"], force: ["start", "loc", "end"] }, exports2.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped"), exports2.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = "body") {
        const result = (0, _toBlock.default)(node[key], node);
        return node[key] = result, result;
      };
      var _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function gatherSequenceExpressions(nodes, declars) {
        const exprs = [];
        let ensureLastUndefined = true;
        for (const node of nodes)
          if ((0, _index.isEmptyStatement)(node) || (ensureLastUndefined = false), (0, _index.isExpression)(node))
            exprs.push(node);
          else if ((0, _index.isExpressionStatement)(node))
            exprs.push(node.expression);
          else if ((0, _index.isVariableDeclaration)(node)) {
            if (node.kind !== "var")
              return;
            for (const declar of node.declarations) {
              const bindings = (0, _getBindingIdentifiers.default)(declar);
              for (const key of Object.keys(bindings))
                declars.push({ kind: node.kind, id: (0, _cloneNode.default)(bindings[key]) });
              declar.init && exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
            }
            ensureLastUndefined = true;
          } else if ((0, _index.isIfStatement)(node)) {
            const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();
            if (!consequent || !alternate)
              return;
            exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
          } else if ((0, _index.isBlockStatement)(node)) {
            const body = gatherSequenceExpressions(node.body, declars);
            if (!body)
              return;
            exprs.push(body);
          } else {
            if (!(0, _index.isEmptyStatement)(node))
              return;
            nodes.indexOf(node) === 0 && (ensureLastUndefined = true);
          }
        ensureLastUndefined && exprs.push((0, _productions.buildUndefinedNode)());
        return exprs.length === 1 ? exprs[0] : (0, _index2.sequenceExpression)(exprs);
      };
      var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _productions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
        (name = (0, _toIdentifier.default)(name)) !== "eval" && name !== "arguments" || (name = "_" + name);
        return name;
      };
      var _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
        if ((0, _index.isBlockStatement)(node))
          return node;
        let blockNodes = [];
        (0, _index.isEmptyStatement)(node) ? blockNodes = [] : ((0, _index.isStatement)(node) || (node = (0, _index.isFunction)(parent) ? (0, _index2.returnStatement)(node) : (0, _index2.expressionStatement)(node)), blockNodes = [node]);
        return (0, _index2.blockStatement)(blockNodes);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = node.key || node.property) {
        !node.computed && (0, _index.isIdentifier)(key) && (key = (0, _index2.stringLiteral)(key.name));
        return key;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      exports2.default = function(node) {
        (0, _index.isExpressionStatement)(node) && (node = node.expression);
        if ((0, _index.isExpression)(node))
          return node;
        (0, _index.isClass)(node) ? node.type = "ClassExpression" : (0, _index.isFunction)(node) && (node.type = "FunctionExpression");
        if (!(0, _index.isExpression)(node))
          throw new Error(`cannot turn ${node.type} to an expression`);
        return node;
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(input) {
        input += "";
        let name = "";
        for (const c of input)
          name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
        name = name.replace(/^[-0-9]+/, ""), name = name.replace(/[-\s]+(.)?/g, function(match, c) {
          return c ? c.toUpperCase() : "";
        }), (0, _isValidIdentifier.default)(name) || (name = `_${name}`);
        return name || "_";
      };
      var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = toKeyAlias;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");
      function toKeyAlias(node, key = node.key) {
        let alias;
        return node.kind === "method" ? toKeyAlias.increment() + "" : (alias = (0, _index.isIdentifier)(key) ? key.name : (0, _index.isStringLiteral)(key) ? JSON.stringify(key.value) : JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))), node.computed && (alias = `[${alias}]`), node.static && (alias = `static:${alias}`), alias);
      }
      toKeyAlias.uid = 0, toKeyAlias.increment = function() {
        return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      exports2.default = function(nodes, scope) {
        if (nodes == null || !nodes.length)
          return;
        const declars = [], result = (0, _gatherSequenceExpressions.default)(nodes, declars);
        if (!result)
          return;
        for (const declar of declars)
          scope.push(declar);
        return result;
      };
      var _gatherSequenceExpressions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      exports2.default = function(node, ignore) {
        if ((0, _index.isStatement)(node))
          return node;
        let newType, mustHaveId = false;
        if ((0, _index.isClass)(node))
          mustHaveId = true, newType = "ClassDeclaration";
        else if ((0, _index.isFunction)(node))
          mustHaveId = true, newType = "FunctionDeclaration";
        else if ((0, _index.isAssignmentExpression)(node))
          return (0, _index2.expressionStatement)(node);
        mustHaveId && !node.id && (newType = false);
        if (!newType) {
          if (ignore)
            return false;
          throw new Error(`cannot turn ${node.type} to a statement`);
        }
        return node.type = newType, node;
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      exports2.default = function valueToNode(value2) {
        if (value2 === undefined)
          return (0, _index.identifier)("undefined");
        if (value2 === true || value2 === false)
          return (0, _index.booleanLiteral)(value2);
        if (value2 === null)
          return (0, _index.nullLiteral)();
        if (typeof value2 == "string")
          return (0, _index.stringLiteral)(value2);
        if (typeof value2 == "number") {
          let result;
          if (Number.isFinite(value2))
            result = (0, _index.numericLiteral)(Math.abs(value2));
          else {
            let numerator;
            numerator = Number.isNaN(value2) ? (0, _index.numericLiteral)(0) : (0, _index.numericLiteral)(1), result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
          }
          return (value2 < 0 || Object.is(value2, -0)) && (result = (0, _index.unaryExpression)("-", result)), result;
        }
        if (function(value3) {
          return objectToString(value3) === "[object RegExp]";
        }(value2)) {
          const pattern = value2.source, flags = /\/([a-z]*)$/.exec(value2.toString())[1];
          return (0, _index.regExpLiteral)(pattern, flags);
        }
        if (Array.isArray(value2))
          return (0, _index.arrayExpression)(value2.map(valueToNode));
        if (function(value3) {
          if (typeof value3 != "object" || value3 === null || Object.prototype.toString.call(value3) !== "[object Object]")
            return false;
          const proto = Object.getPrototypeOf(value3);
          return proto === null || Object.getPrototypeOf(proto) === null;
        }(value2)) {
          const props = [];
          for (const key of Object.keys(value2)) {
            let nodeKey;
            nodeKey = (0, _isValidIdentifier.default)(key) ? (0, _index.identifier)(key) : (0, _index.stringLiteral)(key), props.push((0, _index.objectProperty)(nodeKey, valueToNode(value2[key])));
          }
          return (0, _index.objectExpression)(props);
        }
        throw new Error("don't know how to turn this value into a node");
      };
      const objectToString = Function.call.bind(Object.prototype.toString);
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.patternLikeCommon = exports2.importAttributes = exports2.functionTypeAnnotationCommon = exports2.functionDeclarationCommon = exports2.functionCommon = exports2.classMethodOrPropertyCommon = exports2.classMethodOrDeclareMethodCommon = undefined;
      var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperStringParser = __webpack_require__2("./node_modules/.pnpm/@babel+helper-string-parser@7.25.9/node_modules/@babel/helper-string-parser/lib/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
      const defineType = (0, _utils.defineAliasedType)("Standardized");
      defineType("ArrayExpression", { fields: { elements: { validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement")), default: process.env.BABEL_TYPES_8_BREAKING ? undefined : [] } }, visitor: ["elements"], aliases: ["Expression"] }), defineType("AssignmentExpression", { fields: { operator: { validate: process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function() {
        const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS), pattern = (0, _utils.assertOneOf)("=");
        return function(node, key, val) {
          ((0, _is.default)("Pattern", node.left) ? pattern : identifier)(node, key, val);
        };
      }(), { type: "string" }) : (0, _utils.assertValueType)("string") }, left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Expression"] }), defineType("BinaryExpression", { builder: ["operator", "left", "right"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS) }, left: { validate: function() {
        const expression = (0, _utils.assertNodeType)("Expression"), inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
        return Object.assign(function(node, key, val) {
          (node.operator === "in" ? inOp : expression)(node, key, val);
        }, { oneOfNodeTypes: ["Expression", "PrivateName"] });
      }() }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, visitor: ["left", "right"], aliases: ["Binary", "Expression"] }), defineType("InterpreterDirective", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("Directive", { visitor: ["value"], fields: { value: { validate: (0, _utils.assertNodeType)("DirectiveLiteral") } } }), defineType("DirectiveLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("BlockStatement", { builder: ["body", "directives"], visitor: ["directives", "body"], fields: { directives: { validate: (0, _utils.arrayOfType)("Directive"), default: [] }, body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "Block", "Statement"] }), defineType("BreakStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("CallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments"], aliases: ["Expression"], fields: Object.assign({ callee: { validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") }, arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, { typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } }) }), defineType("CatchClause", { visitor: ["param", "body"], fields: { param: { validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }, aliases: ["Scopable", "BlockParent"] }), defineType("ConditionalExpression", { visitor: ["test", "consequent", "alternate"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Expression") }, alternate: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression", "Conditional"] }), defineType("ContinueStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("DebuggerStatement", { aliases: ["Statement"] }), defineType("DoWhileStatement", { builder: ["test", "body"], visitor: ["body", "test"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } }, aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"] }), defineType("EmptyStatement", { aliases: ["Statement"] }), defineType("ExpressionStatement", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Statement", "ExpressionWrapper"] }), defineType("File", { builder: ["program", "comments", "tokens"], visitor: ["program"], fields: { program: { validate: (0, _utils.assertNodeType)("Program") }, comments: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(() => {
      }, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }), optional: true }, tokens: { validate: (0, _utils.assertEach)(Object.assign(() => {
      }, { type: "any" })), optional: true } } }), defineType("ForInStatement", { visitor: ["left", "right", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("VariableDeclaration", "LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("ForStatement", { visitor: ["init", "test", "update", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"], fields: { init: { validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"), optional: true }, test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, update: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, body: { validate: (0, _utils.assertNodeType)("Statement") } } });
      const functionCommon = () => ({ params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement"), generator: { default: false }, async: { default: false } });
      exports2.functionCommon = functionCommon;
      const functionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true } });
      exports2.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
      const functionDeclarationCommon = () => Object.assign({}, functionCommon(), { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } });
      exports2.functionDeclarationCommon = functionDeclarationCommon, defineType("FunctionDeclaration", { builder: ["id", "params", "body", "generator", "async"], visitor: ["id", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }), aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"], validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
        const identifier = (0, _utils.assertNodeType)("Identifier");
        return function(parent, key, node) {
          (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
        };
      }() : undefined }), defineType("FunctionExpression", { inherits: "FunctionDeclaration", aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) });
      const patternLikeCommon = () => ({ typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } });
      exports2.patternLikeCommon = patternLikeCommon, defineType("Identifier", { builder: ["name"], visitor: ["typeAnnotation", "decorators"], aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"], fields: Object.assign({}, patternLikeCommon(), { name: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
        if (!(0, _isValidIdentifier.default)(val, false))
          throw new TypeError(`"${val}" is not a valid identifier name`);
      }, { type: "string" })) : (0, _utils.assertValueType)("string") } }), validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key, node) {
        const match = /\.(\w+)$/.exec(key);
        if (!match)
          return;
        const [, parentKey] = match, nonComp = { computed: false };
        if (parentKey === "property") {
          if ((0, _is.default)("MemberExpression", parent, nonComp))
            return;
          if ((0, _is.default)("OptionalMemberExpression", parent, nonComp))
            return;
        } else if (parentKey === "key") {
          if ((0, _is.default)("Property", parent, nonComp))
            return;
          if ((0, _is.default)("Method", parent, nonComp))
            return;
        } else if (parentKey === "exported") {
          if ((0, _is.default)("ExportSpecifier", parent))
            return;
        } else if (parentKey === "imported") {
          if ((0, _is.default)("ImportSpecifier", parent, { imported: node }))
            return;
        } else if (parentKey === "meta" && (0, _is.default)("MetaProperty", parent, { meta: node }))
          return;
        if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== "this")
          throw new TypeError(`"${node.name}" is not a valid identifier`);
      } : undefined }), defineType("IfStatement", { visitor: ["test", "consequent", "alternate"], aliases: ["Statement", "Conditional"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Statement") }, alternate: { optional: true, validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("LabeledStatement", { visitor: ["label", "body"], aliases: ["Statement"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("StringLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NumericLiteral", { builder: ["value"], deprecatedAlias: "NumberLiteral", fields: { value: { validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function(node, key, val) {
        if (1 / val < 0 || !Number.isFinite(val)) {
          new Error(`NumericLiterals must be non-negative finite numbers. You can use t.valueToNode(${val}) instead.`);
        }
      }, { type: "number" })) } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NullLiteral", { aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("BooleanLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("boolean") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("RegExpLiteral", { builder: ["pattern", "flags"], deprecatedAlias: "RegexLiteral", aliases: ["Expression", "Pureish", "Literal"], fields: { pattern: { validate: (0, _utils.assertValueType)("string") }, flags: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
        const invalid = /[^gimsuy]/.exec(val);
        if (invalid)
          throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
      }, { type: "string" })) : (0, _utils.assertValueType)("string"), default: "" } } }), defineType("LogicalExpression", { builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Binary", "Expression"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS) }, left: { validate: (0, _utils.assertNodeType)("Expression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("MemberExpression", { builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]], visitor: ["object", "property"], aliases: ["Expression", "LVal"], fields: Object.assign({ object: { validate: (0, _utils.assertNodeType)("Expression", "Super") }, property: { validate: function() {
        const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
          (node.computed ? computed : normal)(node, key, val);
        };
        return validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], validator;
      }() }, computed: { default: false } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("NewExpression", { inherits: "CallExpression" }), defineType("Program", { visitor: ["directives", "body"], builder: ["body", "directives", "sourceType", "interpreter"], fields: { sourceType: { validate: (0, _utils.assertOneOf)("script", "module"), default: "script" }, interpreter: { validate: (0, _utils.assertNodeType)("InterpreterDirective"), default: null, optional: true }, directives: { validate: (0, _utils.arrayOfType)("Directive"), default: [] }, body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "Block"] }), defineType("ObjectExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: (0, _utils.validateArrayOfType)("ObjectMethod", "ObjectProperty", "SpreadElement") } }), defineType("ObjectMethod", { builder: ["kind", "key", "params", "body", "computed", "generator", "async"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { kind: Object.assign({ validate: (0, _utils.assertOneOf)("method", "get", "set") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { default: "method" }), computed: { default: false }, key: { validate: function() {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
          (node.computed ? computed : normal)(node, key, val);
        };
        return validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], validator;
      }() }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }), aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"] }), defineType("ObjectProperty", { builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]], fields: { computed: { default: false }, key: { validate: function() {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
        return Object.assign(function(node, key, val) {
          (node.computed ? computed : normal)(node, key, val);
        }, { oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"] });
      }() }, value: { validate: (0, _utils.assertNodeType)("Expression", "PatternLike") }, shorthand: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, shorthand) {
        if (shorthand) {
          if (node.computed)
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
          if (!(0, _is.default)("Identifier", node.key))
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
        }
      }, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"), default: false }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } }, visitor: ["key", "value", "decorators"], aliases: ["UserWhitespacable", "Property", "ObjectMember"], validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
        const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion"), expression = (0, _utils.assertNodeType)("Expression");
        return function(parent, key, node) {
          ((0, _is.default)("ObjectPattern", parent) ? pattern : expression)(node, "value", node.value);
        };
      }() : undefined }), defineType("RestElement", { visitor: ["argument", "typeAnnotation"], builder: ["argument"], aliases: ["LVal", "PatternLike"], deprecatedAlias: "RestProperty", fields: Object.assign({}, patternLikeCommon(), { argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") } }), validate: process.env.BABEL_TYPES_8_BREAKING ? function(parent, key) {
        const match = /(\w+)\[(\d+)\]/.exec(key);
        if (!match)
          throw new Error("Internal Babel error: malformed key.");
        const [, listKey, index] = match;
        if (parent[listKey].length > +index + 1)
          throw new TypeError(`RestElement must be last element of ${listKey}`);
      } : undefined }), defineType("ReturnStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("SequenceExpression", { visitor: ["expressions"], fields: { expressions: (0, _utils.validateArrayOfType)("Expression") }, aliases: ["Expression"] }), defineType("ParenthesizedExpression", { visitor: ["expression"], aliases: ["Expression", "ExpressionWrapper"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("SwitchCase", { visitor: ["test", "consequent"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, consequent: (0, _utils.validateArrayOfType)("Statement") } }), defineType("SwitchStatement", { visitor: ["discriminant", "cases"], aliases: ["Statement", "BlockParent", "Scopable"], fields: { discriminant: { validate: (0, _utils.assertNodeType)("Expression") }, cases: (0, _utils.validateArrayOfType)("SwitchCase") } }), defineType("ThisExpression", { aliases: ["Expression"] }), defineType("ThrowStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("TryStatement", { visitor: ["block", "handler", "finalizer"], aliases: ["Statement"], fields: { block: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
        if (!node.handler && !node.finalizer)
          throw new TypeError("TryStatement expects either a handler or finalizer, or both");
      }, { oneOfNodeTypes: ["BlockStatement"] })) : (0, _utils.assertNodeType)("BlockStatement") }, handler: { optional: true, validate: (0, _utils.assertNodeType)("CatchClause") }, finalizer: { optional: true, validate: (0, _utils.assertNodeType)("BlockStatement") } } }), defineType("UnaryExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: true }, argument: { validate: (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS) } }, visitor: ["argument"], aliases: ["UnaryLike", "Expression"] }), defineType("UpdateExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: false }, argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression") : (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS) } }, visitor: ["argument"], aliases: ["Expression"] }), defineType("VariableDeclaration", { builder: ["kind", "declarations"], visitor: ["declarations"], aliases: ["Statement", "Declaration"], fields: { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, kind: { validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using") }, declarations: (0, _utils.validateArrayOfType)("VariableDeclarator") }, validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {
        const withoutInit = (0, _utils.assertNodeType)("Identifier");
        return function(parent, key, node) {
          if ((0, _is.default)("ForXStatement", parent, { left: node })) {
            if (node.declarations.length !== 1)
              throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
          } else
            node.declarations.forEach((decl) => {
              decl.init || withoutInit(decl, "id", decl.id);
            });
        };
      })() : undefined }), defineType("VariableDeclarator", { visitor: ["id", "init"], fields: { id: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern") : (0, _utils.assertNodeType)("LVal") }, definite: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, init: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("WhileStatement", { visitor: ["test", "body"], aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("WithStatement", { visitor: ["object", "body"], aliases: ["Statement"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("AssignmentPattern", { visitor: ["left", "right", "decorators"], builder: ["left", "right"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { left: { validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } }) }), defineType("ArrayPattern", { visitor: ["elements", "typeAnnotation"], builder: ["elements"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal"))) } }) }), defineType("ArrowFunctionExpression", { builder: ["params", "body", "async"], visitor: ["typeParameters", "params", "returnType", "body"], aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { expression: { validate: (0, _utils.assertValueType)("boolean") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement", "Expression") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) }), defineType("ClassBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock") } }), defineType("ClassExpression", { builder: ["id", "superClass", "body", "decorators"], visitor: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body"], aliases: ["Scopable", "Class", "Expression"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true } } }), defineType("ClassDeclaration", { inherits: "ClassExpression", aliases: ["Scopable", "Class", "Statement", "Declaration"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.arrayOfType)("TSExpressionWithTypeArguments", "ClassImplements"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, validate: process.env.BABEL_TYPES_8_BREAKING ? function() {
        const identifier = (0, _utils.assertNodeType)("Identifier");
        return function(parent, key, node) {
          (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
        };
      }() : undefined });
      const importAttributes = exports2.importAttributes = { attributes: { optional: true, validate: (0, _utils.arrayOfType)("ImportAttribute") }, assertions: { deprecated: true, optional: true, validate: (0, _utils.arrayOfType)("ImportAttribute") } };
      defineType("ExportAllDeclaration", { builder: ["source"], visitor: ["source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: Object.assign({ source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }, importAttributes) }), defineType("ExportDefaultDeclaration", { visitor: ["declaration"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { declaration: (0, _utils.validateType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value")) } }), defineType("ExportNamedDeclaration", { builder: ["declaration", "specifiers", "source"], visitor: process.env ? ["declaration", "specifiers", "source", "attributes"] : ["declaration", "specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: Object.assign({ declaration: { optional: true, validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
        if (val && node.specifiers.length)
          throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
        if (val && node.source)
          throw new TypeError("Cannot export a declaration from a source");
      }, { oneOfNodeTypes: ["Declaration"] })) : (0, _utils.assertNodeType)("Declaration") } }, importAttributes, { specifiers: { default: [], validate: (0, _utils.arrayOf)(function() {
        const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
        return process.env.BABEL_TYPES_8_BREAKING ? Object.assign(function(node, key, val) {
          (node.source ? sourced : sourceless)(node, key, val);
        }, { oneOfNodeTypes: ["ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"] }) : sourced;
      }()) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral"), optional: true }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }) }), defineType("ExportSpecifier", { visitor: ["local", "exported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, exported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, exportKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("ForOfStatement", { visitor: ["left", "right", "body"], builder: ["left", "right", "body", "await"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: function() {
        if (!process.env.BABEL_TYPES_8_BREAKING)
          return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
        const declaration = (0, _utils.assertNodeType)("VariableDeclaration"), lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
        return Object.assign(function(node, key, val) {
          (0, _is.default)("VariableDeclaration", val) ? declaration(node, key, val) : lval(node, key, val);
        }, { oneOfNodeTypes: ["VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression"] });
      }() }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") }, await: { default: false } } }), defineType("ImportDeclaration", { builder: ["specifiers", "source"], visitor: ["specifiers", "source", "attributes", "assertions"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"], fields: Object.assign({}, importAttributes, { module: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, specifiers: (0, _utils.validateArrayOfType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"), source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } }) }), defineType("ImportDefaultSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportNamespaceSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportSpecifier", { visitor: ["imported", "local"], builder: ["local", "imported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, imported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("ImportExpression", { visitor: ["source", "options"], aliases: ["Expression"], fields: { phase: { default: null, validate: (0, _utils.assertOneOf)("source", "defer") }, source: { validate: (0, _utils.assertNodeType)("Expression") }, options: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("MetaProperty", { visitor: ["meta", "property"], aliases: ["Expression"], fields: { meta: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
        let property;
        switch (val.name) {
          case "function":
            property = "sent";
            break;
          case "new":
            property = "target";
            break;
          case "import":
            property = "meta";
        }
        if (!(0, _is.default)("Identifier", node.property, { name: property }))
          throw new TypeError("Unrecognised MetaProperty");
      }, { oneOfNodeTypes: ["Identifier"] })) : (0, _utils.assertNodeType)("Identifier") }, property: { validate: (0, _utils.assertNodeType)("Identifier") } } });
      const classMethodOrPropertyCommon = () => ({ abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, static: { default: false }, override: { default: false }, computed: { default: false }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, key: { validate: (0, _utils.chain)(function() {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression");
        return function(node, key, val) {
          (node.computed ? computed : normal)(node, key, val);
        };
      }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) } });
      exports2.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
      const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), { params: (0, _utils.validateArrayOfType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"), kind: { validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"), default: "method" }, access: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } });
      exports2.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon, defineType("ClassMethod", { aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"], builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("ObjectPattern", { visitor: ["properties", "typeAnnotation", "decorators"], builder: ["properties"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { properties: (0, _utils.validateArrayOfType)("RestElement", "ObjectProperty") }) }), defineType("SpreadElement", { visitor: ["argument"], aliases: ["UnaryLike"], deprecatedAlias: "SpreadProperty", fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Super", { aliases: ["Expression"] }), defineType("TaggedTemplateExpression", { visitor: ["tag", "typeParameters", "quasi"], builder: ["tag", "quasi"], aliases: ["Expression"], fields: { tag: { validate: (0, _utils.assertNodeType)("Expression") }, quasi: { validate: (0, _utils.assertNodeType)("TemplateLiteral") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("TemplateElement", { builder: ["value", "tail"], fields: { value: { validate: (0, _utils.chain)((0, _utils.assertShape)({ raw: { validate: (0, _utils.assertValueType)("string") }, cooked: { validate: (0, _utils.assertValueType)("string"), optional: true } }), function(node) {
        const raw = node.value.raw;
        let unterminatedCalled = false;
        const error = () => {
          throw new Error("Internal @babel/types error.");
        }, { str, firstInvalidLoc } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, { unterminated() {
          unterminatedCalled = true;
        }, strictNumericEscape: error, invalidEscapeSequence: error, numericSeparatorInEscapeSequence: error, unexpectedNumericSeparator: error, invalidDigit: error, invalidCodePoint: error });
        if (!unterminatedCalled)
          throw new Error("Invalid raw");
        node.value.cooked = firstInvalidLoc ? null : str;
      }) }, tail: { default: false } } }), defineType("TemplateLiteral", { visitor: ["quasis", "expressions"], aliases: ["Expression", "Literal"], fields: { quasis: (0, _utils.validateArrayOfType)("TemplateElement"), expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
        if (node.quasis.length !== val.length + 1)
          throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
      }) } } }), defineType("YieldExpression", { builder: ["argument", "delegate"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { delegate: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
        if (val && !node.argument)
          throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
      }, { type: "boolean" })) : (0, _utils.assertValueType)("boolean"), default: false }, argument: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("AwaitExpression", { builder: ["argument"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Import", { aliases: ["Expression"] }), defineType("BigIntLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("ExportNamespaceSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("OptionalMemberExpression", { builder: ["object", "property", "computed", "optional"], visitor: ["object", "property"], aliases: ["Expression"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, property: { validate: function() {
        const normal = (0, _utils.assertNodeType)("Identifier"), computed = (0, _utils.assertNodeType)("Expression");
        return Object.assign(function(node, key, val) {
          (node.computed ? computed : normal)(node, key, val);
        }, { oneOfNodeTypes: ["Expression", "Identifier"] });
      }() }, computed: { default: false }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") } } }), defineType("OptionalCallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments", "optional"], aliases: ["Expression"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") }, arguments: (0, _utils.validateArrayOfType)("Expression", "SpreadElement", "ArgumentPlaceholder"), optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") }, typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } } }), defineType("ClassProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property"], fields: Object.assign({}, classMethodOrPropertyCommon(), { value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassAccessorProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property", "Accessor"], fields: Object.assign({}, classMethodOrPropertyCommon(), { key: { validate: (0, _utils.chain)(function() {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
        return function(node, key, val) {
          (node.computed ? computed : normal)(node, key, val);
        };
      }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassPrivateProperty", { visitor: ["decorators", "key", "typeAnnotation", "value"], builder: ["key", "value", "decorators", "static"], aliases: ["Property", "Private"], fields: { key: { validate: (0, _utils.assertNodeType)("PrivateName") }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true }, static: { validate: (0, _utils.assertValueType)("boolean"), default: false }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } } }), defineType("ClassPrivateMethod", { builder: ["kind", "key", "params", "body", "static"], visitor: ["decorators", "key", "typeParameters", "params", "returnType", "body"], aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { kind: { validate: (0, _utils.assertOneOf)("get", "set", "method"), default: "method" }, key: { validate: (0, _utils.assertNodeType)("PrivateName") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("PrivateName", { visitor: ["id"], aliases: ["Private"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("StaticBlock", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") }, aliases: ["Scopable", "BlockParent", "FunctionParent"] });
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.DEPRECATED_ALIASES = undefined;
      exports2.DEPRECATED_ALIASES = { ModuleDeclaration: "ImportOrExportDeclaration" };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
      var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
      (0, _utils.default)("ArgumentPlaceholder", {}), (0, _utils.default)("BindExpression", { visitor: ["object", "callee"], aliases: ["Expression"], fields: process.env.BABEL_TYPES_8_BREAKING ? { object: { validate: (0, _utils.assertNodeType)("Expression") }, callee: { validate: (0, _utils.assertNodeType)("Expression") } } : { object: { validate: Object.assign(() => {
      }, { oneOfNodeTypes: ["Expression"] }) }, callee: { validate: Object.assign(() => {
      }, { oneOfNodeTypes: ["Expression"] }) } } }), (0, _utils.default)("ImportAttribute", { visitor: ["key", "value"], fields: { key: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, value: { validate: (0, _utils.assertNodeType)("StringLiteral") } } }), (0, _utils.default)("Decorator", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), (0, _utils.default)("DoExpression", { visitor: ["body"], builder: ["body", "async"], aliases: ["Expression"], fields: { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, async: { validate: (0, _utils.assertValueType)("boolean"), default: false } } }), (0, _utils.default)("ExportDefaultSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), (0, _utils.default)("RecordExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: (0, _utils.validateArrayOfType)("ObjectProperty", "SpreadElement") } }), (0, _utils.default)("TupleExpression", { fields: { elements: { validate: (0, _utils.arrayOfType)("Expression", "SpreadElement"), default: [] } }, visitor: ["elements"], aliases: ["Expression"] }), (0, _utils.default)("DecimalLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), (0, _utils.default)("ModuleExpression", { visitor: ["body"], fields: { body: { validate: (0, _utils.assertNodeType)("Program") } }, aliases: ["Expression"] }), (0, _utils.default)("TopicReference", { aliases: ["Expression"] }), (0, _utils.default)("PipelineTopicExpression", { builder: ["expression"], visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelineBareFunction", { builder: ["callee"], visitor: ["callee"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
      var _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
      const defineType = (0, _utils.defineAliasedType)("Flow"), defineInterfaceishType = (name) => {
        const isDeclareClass = name === "DeclareClass";
        defineType(name, { builder: ["id", "typeParameters", "extends", "body"], visitor: ["id", "typeParameters", "extends", ...isDeclareClass ? ["mixins", "implements"] : [], "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")) }, isDeclareClass ? { mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")) } : {}, { body: (0, _utils.validateType)("ObjectTypeAnnotation") }) });
      };
      defineType("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ArrayTypeAnnotation", { visitor: ["elementType"], aliases: ["FlowType"], fields: { elementType: (0, _utils.validateType)("FlowType") } }), defineType("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("BooleanLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ClassImplements", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("DeclareClass"), defineType("DeclareFunction", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), predicate: (0, _utils.validateOptionalType)("DeclaredPredicate") } }), defineInterfaceishType("DeclareInterface"), defineType("DeclareModule", { builder: ["id", "body", "kind"], visitor: ["id", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier", "StringLiteral"), body: (0, _utils.validateType)("BlockStatement"), kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES")) } }), defineType("DeclareModuleExports", { visitor: ["typeAnnotation"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("DeclareTypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("DeclareOpaqueType", { visitor: ["id", "typeParameters", "supertype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateOptionalType)("FlowType") } }), defineType("DeclareVariable", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("DeclareExportDeclaration", { visitor: ["declaration", "specifiers", "source", "attributes"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ declaration: (0, _utils.validateOptionalType)("Flow"), specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ExportSpecifier", "ExportNamespaceSpecifier")), source: (0, _utils.validateOptionalType)("StringLiteral"), default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) }, _core.importAttributes) }), defineType("DeclareExportAllDeclaration", { visitor: ["source", "attributes"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: Object.assign({ source: (0, _utils.validateType)("StringLiteral"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) }, _core.importAttributes) }), defineType("DeclaredPredicate", { visitor: ["value"], aliases: ["FlowPredicate"], fields: { value: (0, _utils.validateType)("Flow") } }), defineType("ExistsTypeAnnotation", { aliases: ["FlowType"] }), defineType("FunctionTypeAnnotation", { visitor: ["typeParameters", "params", "rest", "returnType"], aliases: ["FlowType"], fields: { typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), params: (0, _utils.validateArrayOfType)("FunctionTypeParam"), rest: (0, _utils.validateOptionalType)("FunctionTypeParam"), this: (0, _utils.validateOptionalType)("FunctionTypeParam"), returnType: (0, _utils.validateType)("FlowType") } }), defineType("FunctionTypeParam", { visitor: ["name", "typeAnnotation"], fields: { name: (0, _utils.validateOptionalType)("Identifier"), typeAnnotation: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("GenericTypeAnnotation", { visitor: ["id", "typeParameters"], aliases: ["FlowType"], fields: { id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineType("InferredPredicate", { aliases: ["FlowPredicate"] }), defineType("InterfaceExtends", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("InterfaceDeclaration"), defineType("InterfaceTypeAnnotation", { visitor: ["extends", "body"], aliases: ["FlowType"], fields: { extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } }), defineType("IntersectionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("NullableTypeAnnotation", { visitor: ["typeAnnotation"], aliases: ["FlowType"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("NumberLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("number")) } }), defineType("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ObjectTypeAnnotation", { visitor: ["properties", "indexers", "callProperties", "internalSlots"], aliases: ["FlowType"], builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"], fields: { properties: (0, _utils.validate)((0, _utils.arrayOfType)("ObjectTypeProperty", "ObjectTypeSpreadProperty")), indexers: { validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"), optional: true, default: [] }, callProperties: { validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"), optional: true, default: [] }, internalSlots: { validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"), optional: true, default: [] }, exact: { validate: (0, _utils.assertValueType)("boolean"), default: false }, inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeInternalSlot", { visitor: ["id", "value"], builder: ["id", "value", "optional", "static", "method"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateType)("Identifier"), value: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeCallProperty", { visitor: ["value"], aliases: ["UserWhitespacable"], fields: { value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeIndexer", { visitor: ["variance", "id", "key", "value"], builder: ["id", "key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateOptionalType)("Identifier"), key: (0, _utils.validateType)("FlowType"), value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("ObjectTypeProperty", { visitor: ["key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { key: (0, _utils.validateType)("Identifier", "StringLiteral"), value: (0, _utils.validateType)("FlowType"), kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance"), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeSpreadProperty", { visitor: ["argument"], aliases: ["UserWhitespacable"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("OpaqueType", { visitor: ["id", "typeParameters", "supertype", "impltype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateType)("FlowType") } }), defineType("QualifiedTypeIdentifier", { visitor: ["qualification", "id"], builder: ["id", "qualification"], fields: { id: (0, _utils.validateType)("Identifier"), qualification: (0, _utils.validateType)("Identifier", "QualifiedTypeIdentifier") } }), defineType("StringLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("string")) } }), defineType("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("TupleTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("TypeofTypeAnnotation", { visitor: ["argument"], aliases: ["FlowType"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("TypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("TypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("TypeCastExpression", { visitor: ["expression", "typeAnnotation"], aliases: ["ExpressionWrapper", "Expression"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("TypeParameter", { visitor: ["bound", "default", "variance"], fields: { name: (0, _utils.validate)((0, _utils.assertValueType)("string")), bound: (0, _utils.validateOptionalType)("TypeAnnotation"), default: (0, _utils.validateOptionalType)("FlowType"), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("TypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter")) } }), defineType("TypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("UnionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("Variance", { builder: ["kind"], fields: { kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus")) } }), defineType("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { id: (0, _utils.validateType)("Identifier"), body: (0, _utils.validateType)("EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody") } }), defineType("EnumBooleanBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumBooleanMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumNumberBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumNumberMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumStringBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumStringMember", "EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumSymbolBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumBooleanMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("BooleanLiteral") } }), defineType("EnumNumberMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("NumericLiteral") } }), defineType("EnumStringMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("StringLiteral") } }), defineType("EnumDefaultedMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("IndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType") } }), defineType("OptionalIndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } });
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ALIAS_KEYS", { enumerable: true, get: function() {
        return _utils.ALIAS_KEYS;
      } }), Object.defineProperty(exports2, "BUILDER_KEYS", { enumerable: true, get: function() {
        return _utils.BUILDER_KEYS;
      } }), Object.defineProperty(exports2, "DEPRECATED_ALIASES", { enumerable: true, get: function() {
        return _deprecatedAliases.DEPRECATED_ALIASES;
      } }), Object.defineProperty(exports2, "DEPRECATED_KEYS", { enumerable: true, get: function() {
        return _utils.DEPRECATED_KEYS;
      } }), Object.defineProperty(exports2, "FLIPPED_ALIAS_KEYS", { enumerable: true, get: function() {
        return _utils.FLIPPED_ALIAS_KEYS;
      } }), Object.defineProperty(exports2, "NODE_FIELDS", { enumerable: true, get: function() {
        return _utils.NODE_FIELDS;
      } }), Object.defineProperty(exports2, "NODE_PARENT_VALIDATIONS", { enumerable: true, get: function() {
        return _utils.NODE_PARENT_VALIDATIONS;
      } }), Object.defineProperty(exports2, "PLACEHOLDERS", { enumerable: true, get: function() {
        return _placeholders.PLACEHOLDERS;
      } }), Object.defineProperty(exports2, "PLACEHOLDERS_ALIAS", { enumerable: true, get: function() {
        return _placeholders.PLACEHOLDERS_ALIAS;
      } }), Object.defineProperty(exports2, "PLACEHOLDERS_FLIPPED_ALIAS", { enumerable: true, get: function() {
        return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
      } }), exports2.TYPES = undefined, Object.defineProperty(exports2, "VISITOR_KEYS", { enumerable: true, get: function() {
        return _utils.VISITOR_KEYS;
      } }), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/flow.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/experimental.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js");
      var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _deprecatedAliases = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js");
      Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
        _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
      });
      exports2.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/jsx.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
      var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
      const defineType = (0, _utils.defineAliasedType)("JSX");
      defineType("JSXAttribute", { visitor: ["name", "value"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName") }, value: { optional: true, validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer") } } }), defineType("JSXClosingElement", { visitor: ["name"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } } }), defineType("JSXElement", { builder: ["openingElement", "closingElement", "children", "selfClosing"], visitor: ["openingElement", "children", "closingElement"], aliases: ["Immutable", "Expression"], fields: Object.assign({ openingElement: { validate: (0, _utils.assertNodeType)("JSXOpeningElement") }, closingElement: { optional: true, validate: (0, _utils.assertNodeType)("JSXClosingElement") }, children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment") }, { selfClosing: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("JSXEmptyExpression", {}), defineType("JSXExpressionContainer", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression") } } }), defineType("JSXSpreadChild", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXMemberExpression", { visitor: ["object", "property"], fields: { object: { validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier") }, property: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXNamespacedName", { visitor: ["namespace", "name"], fields: { namespace: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }, name: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXOpeningElement", { builder: ["name", "attributes", "selfClosing"], visitor: ["name", "attributes"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") }, selfClosing: { default: false }, attributes: (0, _utils.validateArrayOfType)("JSXAttribute", "JSXSpreadAttribute"), typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("JSXSpreadAttribute", { visitor: ["argument"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXText", { aliases: ["Immutable"], builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXFragment", { builder: ["openingFragment", "closingFragment", "children"], visitor: ["openingFragment", "children", "closingFragment"], aliases: ["Immutable", "Expression"], fields: { openingFragment: { validate: (0, _utils.assertNodeType)("JSXOpeningFragment") }, closingFragment: { validate: (0, _utils.assertNodeType)("JSXClosingFragment") }, children: (0, _utils.validateArrayOfType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment") } }), defineType("JSXOpeningFragment", { aliases: ["Immutable"] }), defineType("JSXClosingFragment", { aliases: ["Immutable"] });
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/misc.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
      var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js");
      const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
      defineType("Noop", { visitor: [] }), defineType("Placeholder", { visitor: [], builder: ["expectedNode", "name"], fields: Object.assign({ name: { validate: (0, _utils.assertNodeType)("Identifier") }, expectedNode: { validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS) } }, (0, _core.patternLikeCommon)()) }), defineType("V8IntrinsicIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } });
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/placeholders.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.PLACEHOLDERS_FLIPPED_ALIAS = exports2.PLACEHOLDERS_ALIAS = exports2.PLACEHOLDERS = undefined;
      var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js");
      const PLACEHOLDERS = exports2.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"], PLACEHOLDERS_ALIAS = exports2.PLACEHOLDERS_ALIAS = { Declaration: ["Statement"], Pattern: ["PatternLike", "LVal"] };
      for (const type of PLACEHOLDERS) {
        const alias = _utils.ALIAS_KEYS[type];
        alias != null && alias.length && (PLACEHOLDERS_ALIAS[type] = alias);
      }
      const PLACEHOLDERS_FLIPPED_ALIAS = exports2.PLACEHOLDERS_FLIPPED_ALIAS = {};
      Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
        PLACEHOLDERS_ALIAS[type].forEach((alias) => {
          hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias) || (PLACEHOLDERS_FLIPPED_ALIAS[alias] = []), PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
        });
      });
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/typescript.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
      var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/core.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js");
      const defineType = (0, _utils.defineAliasedType)("TypeScript"), bool = (0, _utils.assertValueType)("boolean"), tSFunctionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"), optional: true } });
      defineType("TSParameterProperty", { aliases: ["LVal"], visitor: ["parameter"], fields: { accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, parameter: { validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern") }, override: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.arrayOfType)("Decorator"), optional: true } } }), defineType("TSDeclareFunction", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSDeclareMethod", { visitor: ["decorators", "key", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSQualifiedName", { aliases: ["TSEntityName"], visitor: ["left", "right"], fields: { left: (0, _utils.validateType)("TSEntityName"), right: (0, _utils.validateType)("Identifier") } });
      const signatureDeclarationCommon = () => ({ typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), parameters: (0, _utils.validateArrayOfType)("ArrayPattern", "Identifier", "ObjectPattern", "RestElement"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") }), callConstructSignatureDeclaration = { aliases: ["TSTypeElement"], visitor: ["typeParameters", "parameters", "typeAnnotation"], fields: signatureDeclarationCommon() };
      defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration), defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
      const namedTypeElementCommon = () => ({ key: (0, _utils.validateType)("Expression"), computed: { default: false }, optional: (0, _utils.validateOptional)(bool) });
      defineType("TSPropertySignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeAnnotation"], fields: Object.assign({}, namedTypeElementCommon(), { readonly: (0, _utils.validateOptional)(bool), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), kind: { validate: (0, _utils.assertOneOf)("get", "set") } }) }), defineType("TSMethodSignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeParameters", "parameters", "typeAnnotation"], fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils.assertOneOf)("method", "get", "set") } }) }), defineType("TSIndexSignature", { aliases: ["TSTypeElement"], visitor: ["parameters", "typeAnnotation"], fields: { readonly: (0, _utils.validateOptional)(bool), static: (0, _utils.validateOptional)(bool), parameters: (0, _utils.validateArrayOfType)("Identifier"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") } });
      const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
      for (const type of tsKeywordTypes)
        defineType(type, { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
      defineType("TSThisType", { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
      const fnOrCtrBase = { aliases: ["TSType"], visitor: ["typeParameters", "parameters", "typeAnnotation"] };
      defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() })), defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils.validateOptional)(bool) }) })), defineType("TSTypeReference", { aliases: ["TSType"], visitor: ["typeName", "typeParameters"], fields: { typeName: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypePredicate", { aliases: ["TSType"], visitor: ["parameterName", "typeAnnotation"], builder: ["parameterName", "typeAnnotation", "asserts"], fields: { parameterName: (0, _utils.validateType)("Identifier", "TSThisType"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), asserts: (0, _utils.validateOptional)(bool) } }), defineType("TSTypeQuery", { aliases: ["TSType"], visitor: ["exprName", "typeParameters"], fields: { exprName: (0, _utils.validateType)("TSEntityName", "TSImportType"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypeLiteral", { aliases: ["TSType"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSArrayType", { aliases: ["TSType"], visitor: ["elementType"], fields: { elementType: (0, _utils.validateType)("TSType") } }), defineType("TSTupleType", { aliases: ["TSType"], visitor: ["elementTypes"], fields: { elementTypes: (0, _utils.validateArrayOfType)("TSType", "TSNamedTupleMember") } }), defineType("TSOptionalType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSRestType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSNamedTupleMember", { visitor: ["label", "elementType"], builder: ["label", "elementType", "optional"], fields: { label: (0, _utils.validateType)("Identifier"), optional: { validate: bool, default: false }, elementType: (0, _utils.validateType)("TSType") } });
      const unionOrIntersection = { aliases: ["TSType"], visitor: ["types"], fields: { types: (0, _utils.validateArrayOfType)("TSType") } };
      defineType("TSUnionType", unionOrIntersection), defineType("TSIntersectionType", unionOrIntersection), defineType("TSConditionalType", { aliases: ["TSType"], visitor: ["checkType", "extendsType", "trueType", "falseType"], fields: { checkType: (0, _utils.validateType)("TSType"), extendsType: (0, _utils.validateType)("TSType"), trueType: (0, _utils.validateType)("TSType"), falseType: (0, _utils.validateType)("TSType") } }), defineType("TSInferType", { aliases: ["TSType"], visitor: ["typeParameter"], fields: { typeParameter: (0, _utils.validateType)("TSTypeParameter") } }), defineType("TSParenthesizedType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSTypeOperator", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { operator: (0, _utils.validate)((0, _utils.assertValueType)("string")), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSIndexedAccessType", { aliases: ["TSType"], visitor: ["objectType", "indexType"], fields: { objectType: (0, _utils.validateType)("TSType"), indexType: (0, _utils.validateType)("TSType") } }), defineType("TSMappedType", { aliases: ["TSType"], visitor: ["typeParameter", "nameType", "typeAnnotation"], builder: ["typeParameter", "typeAnnotation", "nameType"], fields: Object.assign({}, { typeParameter: (0, _utils.validateType)("TSTypeParameter") }, { readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeAnnotation: (0, _utils.validateOptionalType)("TSType"), nameType: (0, _utils.validateOptionalType)("TSType") }) }), defineType("TSLiteralType", { aliases: ["TSType", "TSBaseType"], visitor: ["literal"], fields: { literal: { validate: function() {
        const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral"), unaryOperator = (0, _utils.assertOneOf)("-"), literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
        function validator(parent, key, node) {
          (0, _is.default)("UnaryExpression", node) ? (unaryOperator(node, "operator", node.operator), unaryExpression(node, "argument", node.argument)) : literal(parent, key, node);
        }
        return validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"], validator;
      }() } } });
      defineType("TSExpressionWithTypeArguments", { aliases: ["TSType"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSInterfaceDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "extends", "body"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")), body: (0, _utils.validateType)("TSInterfaceBody") } }), defineType("TSInterfaceBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSTypeAliasDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "typeAnnotation"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSInstantiationExpression", { aliases: ["Expression"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("Expression"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } });
      const TSTypeExpression = { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression", "typeAnnotation"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TSType") } };
      defineType("TSAsExpression", TSTypeExpression), defineType("TSSatisfiesExpression", TSTypeExpression), defineType("TSTypeAssertion", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["typeAnnotation", "expression"], fields: { typeAnnotation: (0, _utils.validateType)("TSType"), expression: (0, _utils.validateType)("Expression") } }), defineType("TSEnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "members"], fields: { declare: (0, _utils.validateOptional)(bool), const: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), members: (0, _utils.validateArrayOfType)("TSEnumMember"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSEnumMember", { visitor: ["id", "initializer"], fields: { id: (0, _utils.validateType)("Identifier", "StringLiteral"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSModuleDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: Object.assign({ kind: { validate: (0, _utils.assertOneOf)("global", "module", "namespace") }, declare: (0, _utils.validateOptional)(bool) }, { global: (0, _utils.validateOptional)(bool) }, { id: (0, _utils.validateType)("Identifier", "StringLiteral"), body: (0, _utils.validateType)("TSModuleBlock", "TSModuleDeclaration") }) }), defineType("TSModuleBlock", { aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"], visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") } }), defineType("TSImportType", { aliases: ["TSType"], visitor: ["argument", "qualifier", "typeParameters"], fields: { argument: (0, _utils.validateType)("StringLiteral"), qualifier: (0, _utils.validateOptionalType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"), options: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("TSImportEqualsDeclaration", { aliases: ["Statement"], visitor: ["id", "moduleReference"], fields: { isExport: (0, _utils.validate)(bool), id: (0, _utils.validateType)("Identifier"), moduleReference: (0, _utils.validateType)("TSEntityName", "TSExternalModuleReference"), importKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("TSExternalModuleReference", { visitor: ["expression"], fields: { expression: (0, _utils.validateType)("StringLiteral") } }), defineType("TSNonNullExpression", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSExportAssignment", { aliases: ["Statement"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSNamespaceExportDeclaration", { aliases: ["Statement"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("TSTypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: { validate: (0, _utils.assertNodeType)("TSType") } } }), defineType("TSTypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validateArrayOfType)("TSType") } }), defineType("TSTypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validateArrayOfType)("TSTypeParameter") } }), defineType("TSTypeParameter", { builder: ["constraint", "default", "name"], visitor: ["constraint", "default"], fields: { name: { validate: (0, _utils.assertValueType)("string") }, in: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, out: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, const: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, constraint: { validate: (0, _utils.assertNodeType)("TSType"), optional: true }, default: { validate: (0, _utils.assertNodeType)("TSType"), optional: true } } });
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.VISITOR_KEYS = exports2.NODE_PARENT_VALIDATIONS = exports2.NODE_FIELDS = exports2.FLIPPED_ALIAS_KEYS = exports2.DEPRECATED_KEYS = exports2.BUILDER_KEYS = exports2.ALIAS_KEYS = undefined, exports2.arrayOf = arrayOf, exports2.arrayOfType = arrayOfType, exports2.assertEach = assertEach, exports2.assertNodeOrValueType = function(...types) {
        function validate2(node, key, val) {
          for (const type of types)
            if (getType(val) === type || (0, _is.default)(type, val))
              return void (0, _validate.validateChild)(node, key, val);
          throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? undefined : val.type)}`);
        }
        return validate2.oneOfNodeOrValueTypes = types, validate2;
      }, exports2.assertNodeType = assertNodeType, exports2.assertOneOf = function(...values) {
        function validate2(node, key, val) {
          if (!values.includes(val))
            throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
        }
        return validate2.oneOf = values, validate2;
      }, exports2.assertOptionalChainStart = function() {
        return function(node) {
          var _current;
          let current = node;
          for (;node; ) {
            const { type } = current;
            if (type !== "OptionalCallExpression") {
              if (type !== "OptionalMemberExpression")
                break;
              if (current.optional)
                return;
              current = current.object;
            } else {
              if (current.optional)
                return;
              current = current.callee;
            }
          }
          throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? undefined : _current.type}`);
        };
      }, exports2.assertShape = function(shape) {
        function validate2(node, key, val) {
          const errors = [];
          for (const property of Object.keys(shape))
            try {
              (0, _validate.validateField)(node, property, val[property], shape[property]);
            } catch (error) {
              if (error instanceof TypeError) {
                errors.push(error.message);
                continue;
              }
              throw error;
            }
          if (errors.length)
            throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join(`
`)}`);
        }
        return validate2.shapeOf = shape, validate2;
      }, exports2.assertValueType = assertValueType, exports2.chain = chain, exports2.default = defineType, exports2.defineAliasedType = function(...aliases) {
        return (type, opts = {}) => {
          let defined = opts.aliases;
          var _store$opts$inherits$;
          defined || (opts.inherits && (defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? undefined : _store$opts$inherits$.slice()), defined != null || (defined = []), opts.aliases = defined);
          const additional = aliases.filter((a) => !defined.includes(a));
          defined.unshift(...additional), defineType(type, opts);
        };
      }, exports2.validate = validate, exports2.validateArrayOfType = function(...typeNames) {
        return validate(arrayOfType(...typeNames));
      }, exports2.validateOptional = function(validate2) {
        return { validate: validate2, optional: true };
      }, exports2.validateOptionalType = function(...typeNames) {
        return { validate: assertNodeType(...typeNames), optional: true };
      }, exports2.validateType = function(...typeNames) {
        return validate(assertNodeType(...typeNames));
      };
      var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js");
      const VISITOR_KEYS = exports2.VISITOR_KEYS = {}, ALIAS_KEYS = exports2.ALIAS_KEYS = {}, FLIPPED_ALIAS_KEYS = exports2.FLIPPED_ALIAS_KEYS = {}, NODE_FIELDS = exports2.NODE_FIELDS = {}, BUILDER_KEYS = exports2.BUILDER_KEYS = {}, DEPRECATED_KEYS = exports2.DEPRECATED_KEYS = {}, NODE_PARENT_VALIDATIONS = exports2.NODE_PARENT_VALIDATIONS = {};
      function getType(val) {
        return Array.isArray(val) ? "array" : val === null ? "null" : typeof val;
      }
      function validate(validate2) {
        return { validate: validate2 };
      }
      function arrayOf(elementType) {
        return chain(assertValueType("array"), assertEach(elementType));
      }
      function arrayOfType(...typeNames) {
        return arrayOf(assertNodeType(...typeNames));
      }
      function assertEach(callback) {
        const childValidator = process.env.BABEL_TYPES_8_BREAKING ? _validate.validateChild : () => {
        };
        function validator(node, key, val) {
          if (Array.isArray(val))
            for (let i = 0;i < val.length; i++) {
              const subkey = `${key}[${i}]`, v = val[i];
              callback(node, subkey, v), childValidator(node, subkey, v);
            }
        }
        return validator.each = callback, validator;
      }
      function assertNodeType(...types) {
        function validate2(node, key, val) {
          for (const type of types)
            if ((0, _is.default)(type, val))
              return void (0, _validate.validateChild)(node, key, val);
          throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? undefined : val.type)}`);
        }
        return validate2.oneOfNodeTypes = types, validate2;
      }
      function assertValueType(type) {
        function validate2(node, key, val) {
          if (!(getType(val) === type))
            throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
        }
        return validate2.type = type, validate2;
      }
      function chain(...fns) {
        function validate2(...args) {
          for (const fn of fns)
            fn(...args);
        }
        if (validate2.chainOf = fns, fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1]))
          throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
        return validate2;
      }
      const validTypeOpts = new Set(["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"]), validFieldKeys = new Set(["default", "optional", "deprecated", "validate"]), store = {};
      function defineType(type, opts = {}) {
        const inherits = opts.inherits && store[opts.inherits] || {};
        let fields = opts.fields;
        if (!fields && (fields = {}, inherits.fields)) {
          const keys = Object.getOwnPropertyNames(inherits.fields);
          for (const key of keys) {
            const field = inherits.fields[key], def = field.default;
            if (Array.isArray(def) ? def.length > 0 : def && typeof def == "object")
              throw new Error("field defaults can only be primitives or empty arrays currently");
            fields[key] = { default: Array.isArray(def) ? [] : def, optional: field.optional, deprecated: field.deprecated, validate: field.validate };
          }
        }
        const visitor = opts.visitor || inherits.visitor || [], aliases = opts.aliases || inherits.aliases || [], builder = opts.builder || inherits.builder || opts.visitor || [];
        for (const k of Object.keys(opts))
          if (!validTypeOpts.has(k))
            throw new Error(`Unknown type option "${k}" on ${type}`);
        opts.deprecatedAlias && (DEPRECATED_KEYS[opts.deprecatedAlias] = type);
        for (const key of visitor.concat(builder))
          fields[key] = fields[key] || {};
        for (const key of Object.keys(fields)) {
          const field = fields[key];
          field.default === undefined || builder.includes(key) || (field.optional = true), field.default === undefined ? field.default = null : field.validate || field.default == null || (field.validate = assertValueType(getType(field.default)));
          for (const k of Object.keys(field))
            if (!validFieldKeys.has(k))
              throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
        }
        VISITOR_KEYS[type] = opts.visitor = visitor, BUILDER_KEYS[type] = opts.builder = builder, NODE_FIELDS[type] = opts.fields = fields, ALIAS_KEYS[type] = opts.aliases = aliases, aliases.forEach((alias) => {
          FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [], FLIPPED_ALIAS_KEYS[alias].push(type);
        }), opts.validate && (NODE_PARENT_VALIDATIONS[type] = opts.validate), store[type] = opts;
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true });
      var _exportNames = { react: true, assertNode: true, createTypeAnnotationBasedOnTypeof: true, createUnionTypeAnnotation: true, createFlowUnionType: true, createTSUnionType: true, cloneNode: true, clone: true, cloneDeep: true, cloneDeepWithoutLoc: true, cloneWithoutLoc: true, addComment: true, addComments: true, inheritInnerComments: true, inheritLeadingComments: true, inheritsComments: true, inheritTrailingComments: true, removeComments: true, ensureBlock: true, toBindingIdentifierName: true, toBlock: true, toComputedKey: true, toExpression: true, toIdentifier: true, toKeyAlias: true, toStatement: true, valueToNode: true, appendToMemberExpression: true, inherits: true, prependToMemberExpression: true, removeProperties: true, removePropertiesDeep: true, removeTypeDuplicates: true, getAssignmentIdentifiers: true, getBindingIdentifiers: true, getOuterBindingIdentifiers: true, getFunctionName: true, traverse: true, traverseFast: true, shallowEqual: true, is: true, isBinding: true, isBlockScoped: true, isImmutable: true, isLet: true, isNode: true, isNodesEquivalent: true, isPlaceholderType: true, isReferenced: true, isScope: true, isSpecifierDefault: true, isType: true, isValidES3Identifier: true, isValidIdentifier: true, isVar: true, matchesPattern: true, validate: true, buildMatchMemberExpression: true, __internal__deprecationWarning: true };
      Object.defineProperty(exports2, "__internal__deprecationWarning", { enumerable: true, get: function() {
        return _deprecationWarning.default;
      } }), Object.defineProperty(exports2, "addComment", { enumerable: true, get: function() {
        return _addComment.default;
      } }), Object.defineProperty(exports2, "addComments", { enumerable: true, get: function() {
        return _addComments.default;
      } }), Object.defineProperty(exports2, "appendToMemberExpression", { enumerable: true, get: function() {
        return _appendToMemberExpression.default;
      } }), Object.defineProperty(exports2, "assertNode", { enumerable: true, get: function() {
        return _assertNode.default;
      } }), Object.defineProperty(exports2, "buildMatchMemberExpression", { enumerable: true, get: function() {
        return _buildMatchMemberExpression.default;
      } }), Object.defineProperty(exports2, "clone", { enumerable: true, get: function() {
        return _clone.default;
      } }), Object.defineProperty(exports2, "cloneDeep", { enumerable: true, get: function() {
        return _cloneDeep.default;
      } }), Object.defineProperty(exports2, "cloneDeepWithoutLoc", { enumerable: true, get: function() {
        return _cloneDeepWithoutLoc.default;
      } }), Object.defineProperty(exports2, "cloneNode", { enumerable: true, get: function() {
        return _cloneNode.default;
      } }), Object.defineProperty(exports2, "cloneWithoutLoc", { enumerable: true, get: function() {
        return _cloneWithoutLoc.default;
      } }), Object.defineProperty(exports2, "createFlowUnionType", { enumerable: true, get: function() {
        return _createFlowUnionType.default;
      } }), Object.defineProperty(exports2, "createTSUnionType", { enumerable: true, get: function() {
        return _createTSUnionType.default;
      } }), Object.defineProperty(exports2, "createTypeAnnotationBasedOnTypeof", { enumerable: true, get: function() {
        return _createTypeAnnotationBasedOnTypeof.default;
      } }), Object.defineProperty(exports2, "createUnionTypeAnnotation", { enumerable: true, get: function() {
        return _createFlowUnionType.default;
      } }), Object.defineProperty(exports2, "ensureBlock", { enumerable: true, get: function() {
        return _ensureBlock.default;
      } }), Object.defineProperty(exports2, "getAssignmentIdentifiers", { enumerable: true, get: function() {
        return _getAssignmentIdentifiers.default;
      } }), Object.defineProperty(exports2, "getBindingIdentifiers", { enumerable: true, get: function() {
        return _getBindingIdentifiers.default;
      } }), Object.defineProperty(exports2, "getFunctionName", { enumerable: true, get: function() {
        return _getFunctionName.default;
      } }), Object.defineProperty(exports2, "getOuterBindingIdentifiers", { enumerable: true, get: function() {
        return _getOuterBindingIdentifiers.default;
      } }), Object.defineProperty(exports2, "inheritInnerComments", { enumerable: true, get: function() {
        return _inheritInnerComments.default;
      } }), Object.defineProperty(exports2, "inheritLeadingComments", { enumerable: true, get: function() {
        return _inheritLeadingComments.default;
      } }), Object.defineProperty(exports2, "inheritTrailingComments", { enumerable: true, get: function() {
        return _inheritTrailingComments.default;
      } }), Object.defineProperty(exports2, "inherits", { enumerable: true, get: function() {
        return _inherits.default;
      } }), Object.defineProperty(exports2, "inheritsComments", { enumerable: true, get: function() {
        return _inheritsComments.default;
      } }), Object.defineProperty(exports2, "is", { enumerable: true, get: function() {
        return _is.default;
      } }), Object.defineProperty(exports2, "isBinding", { enumerable: true, get: function() {
        return _isBinding.default;
      } }), Object.defineProperty(exports2, "isBlockScoped", { enumerable: true, get: function() {
        return _isBlockScoped.default;
      } }), Object.defineProperty(exports2, "isImmutable", { enumerable: true, get: function() {
        return _isImmutable.default;
      } }), Object.defineProperty(exports2, "isLet", { enumerable: true, get: function() {
        return _isLet.default;
      } }), Object.defineProperty(exports2, "isNode", { enumerable: true, get: function() {
        return _isNode.default;
      } }), Object.defineProperty(exports2, "isNodesEquivalent", { enumerable: true, get: function() {
        return _isNodesEquivalent.default;
      } }), Object.defineProperty(exports2, "isPlaceholderType", { enumerable: true, get: function() {
        return _isPlaceholderType.default;
      } }), Object.defineProperty(exports2, "isReferenced", { enumerable: true, get: function() {
        return _isReferenced.default;
      } }), Object.defineProperty(exports2, "isScope", { enumerable: true, get: function() {
        return _isScope.default;
      } }), Object.defineProperty(exports2, "isSpecifierDefault", { enumerable: true, get: function() {
        return _isSpecifierDefault.default;
      } }), Object.defineProperty(exports2, "isType", { enumerable: true, get: function() {
        return _isType.default;
      } }), Object.defineProperty(exports2, "isValidES3Identifier", { enumerable: true, get: function() {
        return _isValidES3Identifier.default;
      } }), Object.defineProperty(exports2, "isValidIdentifier", { enumerable: true, get: function() {
        return _isValidIdentifier.default;
      } }), Object.defineProperty(exports2, "isVar", { enumerable: true, get: function() {
        return _isVar.default;
      } }), Object.defineProperty(exports2, "matchesPattern", { enumerable: true, get: function() {
        return _matchesPattern.default;
      } }), Object.defineProperty(exports2, "prependToMemberExpression", { enumerable: true, get: function() {
        return _prependToMemberExpression.default;
      } }), exports2.react = undefined, Object.defineProperty(exports2, "removeComments", { enumerable: true, get: function() {
        return _removeComments.default;
      } }), Object.defineProperty(exports2, "removeProperties", { enumerable: true, get: function() {
        return _removeProperties.default;
      } }), Object.defineProperty(exports2, "removePropertiesDeep", { enumerable: true, get: function() {
        return _removePropertiesDeep.default;
      } }), Object.defineProperty(exports2, "removeTypeDuplicates", { enumerable: true, get: function() {
        return _removeTypeDuplicates.default;
      } }), Object.defineProperty(exports2, "shallowEqual", { enumerable: true, get: function() {
        return _shallowEqual.default;
      } }), Object.defineProperty(exports2, "toBindingIdentifierName", { enumerable: true, get: function() {
        return _toBindingIdentifierName.default;
      } }), Object.defineProperty(exports2, "toBlock", { enumerable: true, get: function() {
        return _toBlock.default;
      } }), Object.defineProperty(exports2, "toComputedKey", { enumerable: true, get: function() {
        return _toComputedKey.default;
      } }), Object.defineProperty(exports2, "toExpression", { enumerable: true, get: function() {
        return _toExpression.default;
      } }), Object.defineProperty(exports2, "toIdentifier", { enumerable: true, get: function() {
        return _toIdentifier.default;
      } }), Object.defineProperty(exports2, "toKeyAlias", { enumerable: true, get: function() {
        return _toKeyAlias.default;
      } }), Object.defineProperty(exports2, "toStatement", { enumerable: true, get: function() {
        return _toStatement.default;
      } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
        return _traverse.default;
      } }), Object.defineProperty(exports2, "traverseFast", { enumerable: true, get: function() {
        return _traverseFast.default;
      } }), Object.defineProperty(exports2, "validate", { enumerable: true, get: function() {
        return _validate.default;
      } }), Object.defineProperty(exports2, "valueToNode", { enumerable: true, get: function() {
        return _valueToNode.default;
      } });
      var _isReactComponent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js"), _isCompatTag = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js"), _buildChildren = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/react/buildChildren.js"), _assertNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/assertNode.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/asserts/generated/index.js");
      Object.keys(_index).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _index[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _index[key];
        } }));
      });
      var _createTypeAnnotationBasedOnTypeof = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"), _createFlowUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"), _createTSUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
      Object.keys(_index2).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _index2[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _index2[key];
        } }));
      });
      var _uppercase = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/uppercase.js");
      Object.keys(_uppercase).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _uppercase[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _uppercase[key];
        } }));
      });
      var _productions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/productions.js");
      Object.keys(_productions).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _productions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _productions[key];
        } }));
      });
      var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _clone = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/clone.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeep.js"), _cloneDeepWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"), _cloneWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"), _addComment = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComment.js"), _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/addComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js"), _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _removeComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/removeComments.js"), _index3 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/generated/index.js");
      Object.keys(_index3).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _index3[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _index3[key];
        } }));
      });
      var _index4 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      Object.keys(_index4).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _index4[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _index4[key];
        } }));
      });
      var _ensureBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/ensureBlock.js"), _toBindingIdentifierName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"), _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toBlock.js"), _toComputedKey = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toComputedKey.js"), _toExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toExpression.js"), _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toIdentifier.js"), _toKeyAlias = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toKeyAlias.js"), _toStatement = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toStatement.js"), _valueToNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/valueToNode.js"), _index5 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      Object.keys(_index5).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _index5[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _index5[key];
        } }));
      });
      var _appendToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"), _inherits = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js"), _prependToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"), _getAssignmentIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js"), _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _getOuterBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"), _getFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js");
      Object.keys(_traverse).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _traverse[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _traverse[key];
        } }));
      });
      var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js"), _isBinding = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js"), _isBlockScoped = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js"), _isImmutable = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js"), _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js"), _isNodesEquivalent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _isReferenced = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js"), _isScope = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js"), _isSpecifierDefault = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isValidES3Identifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _isVar = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js"), _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js"), _buildMatchMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"), _index6 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      Object.keys(_index6).forEach(function(key) {
        key !== "default" && key !== "__esModule" && (Object.prototype.hasOwnProperty.call(_exportNames, key) || (key in exports2) && exports2[key] === _index6[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
          return _index6[key];
        } }));
      });
      var _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
      exports2.react = { isReactComponent: _isReactComponent.default, isCompatTag: _isCompatTag.default, buildChildren: _buildChildren.default };
      exports2.toSequenceExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js").default, process.env.BABEL_TYPES_8_BREAKING && console.warn("BABEL_TYPES_8_BREAKING is not supported anymore. Use the latest Babel 8.0.0 pre-release instead!");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, append, computed = false) {
        return member.object = (0, _index.memberExpression)(member.object, member.property, member.computed), member.property = append, member.computed = !!computed, member;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodesIn) {
        const nodes = Array.from(nodesIn), generics = new Map, bases = new Map, typeGroups = new Set, types = [];
        for (let i = 0;i < nodes.length; i++) {
          const node = nodes[i];
          if (node && !types.includes(node)) {
            if ((0, _index.isAnyTypeAnnotation)(node))
              return [node];
            if ((0, _index.isFlowBaseAnnotation)(node))
              bases.set(node.type, node);
            else if ((0, _index.isUnionTypeAnnotation)(node))
              typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
            else if ((0, _index.isGenericTypeAnnotation)(node)) {
              const name = getQualifiedName(node.id);
              if (generics.has(name)) {
                let existing = generics.get(name);
                existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
              } else
                generics.set(name, node);
            } else
              types.push(node);
          }
        }
        for (const [, baseType] of bases)
          types.push(baseType);
        for (const [, genericName] of generics)
          types.push(genericName);
        return types;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      function getQualifiedName(node) {
        return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/inherits.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
        if (!child || !parent)
          return child;
        for (const key of _index.INHERIT_KEYS.optional)
          child[key] == null && (child[key] = parent[key]);
        for (const key of Object.keys(parent))
          key[0] === "_" && key !== "__clone" && (child[key] = parent[key]);
        for (const key of _index.INHERIT_KEYS.force)
          child[key] = parent[key];
        return (0, _inheritsComments.default)(child, parent), child;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/comments/inheritsComments.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, prepend) {
        if ((0, _index2.isSuper)(member.object))
          throw new Error("Cannot prepend node to super property access (`super.foo`).");
        return member.object = (0, _index.memberExpression)(prepend, member.object), member;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, opts = {}) {
        const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
        for (const key of map)
          node[key] != null && (node[key] = undefined);
        for (const key of Object.keys(node))
          key[0] === "_" && node[key] != null && (node[key] = undefined);
        const symbols = Object.getOwnPropertySymbols(node);
        for (const sym of symbols)
          node[sym] = null;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
      const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"], CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tree, opts) {
        return (0, _traverseFast.default)(tree, _removeProperties.default, opts), tree;
      };
      var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/removeProperties.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodesIn) {
        const nodes = Array.from(nodesIn), generics = new Map, bases = new Map, typeGroups = new Set, types = [];
        for (let i = 0;i < nodes.length; i++) {
          const node = nodes[i];
          if (node && !types.includes(node)) {
            if ((0, _index.isTSAnyKeyword)(node))
              return [node];
            if ((0, _index.isTSBaseType)(node))
              bases.set(node.type, node);
            else if ((0, _index.isTSUnionType)(node))
              typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
            else if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {
              const name = getQualifiedName(node.typeName);
              if (generics.has(name)) {
                let existing = generics.get(name);
                existing.typeParameters ? node.typeParameters && (existing.typeParameters.params.push(...node.typeParameters.params), existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params)) : existing = node.typeParameters;
              } else
                generics.set(name, node);
            } else
              types.push(node);
          }
        }
        for (const [, baseType] of bases)
          types.push(baseType);
        for (const [, genericName] of generics)
          types.push(genericName);
        return types;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      function getQualifiedName(node) {
        return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getAssignmentIdentifiers.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        const search = [].concat(node), ids = Object.create(null);
        for (;search.length; ) {
          const id = search.pop();
          if (id)
            switch (id.type) {
              case "ArrayPattern":
                search.push(...id.elements);
                break;
              case "AssignmentExpression":
              case "AssignmentPattern":
              case "ForInStatement":
              case "ForOfStatement":
                search.push(id.left);
                break;
              case "ObjectPattern":
                search.push(...id.properties);
                break;
              case "ObjectProperty":
                search.push(id.value);
                break;
              case "RestElement":
              case "UpdateExpression":
                search.push(id.argument);
                break;
              case "UnaryExpression":
                id.operator === "delete" && search.push(id.argument);
                break;
              case "Identifier":
                ids[id.name] = id;
            }
        }
        return ids;
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getBindingIdentifiers;
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      function getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {
        const search = [].concat(node), ids = Object.create(null);
        for (;search.length; ) {
          const id = search.shift();
          if (!id)
            continue;
          if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id)))
            continue;
          if ((0, _index.isIdentifier)(id)) {
            if (duplicates) {
              (ids[id.name] = ids[id.name] || []).push(id);
            } else
              ids[id.name] = id;
            continue;
          }
          if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
            (0, _index.isDeclaration)(id.declaration) && search.push(id.declaration);
            continue;
          }
          if (outerOnly) {
            if ((0, _index.isFunctionDeclaration)(id)) {
              search.push(id.id);
              continue;
            }
            if ((0, _index.isFunctionExpression)(id))
              continue;
          }
          const keys = getBindingIdentifiers.keys[id.type];
          if (keys)
            for (let i = 0;i < keys.length; i++) {
              const nodes = id[keys[i]];
              nodes && (Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes));
            }
        }
        return ids;
      }
      getBindingIdentifiers.keys = { DeclareClass: ["id"], DeclareFunction: ["id"], DeclareModule: ["id"], DeclareVariable: ["id"], DeclareInterface: ["id"], DeclareTypeAlias: ["id"], DeclareOpaqueType: ["id"], InterfaceDeclaration: ["id"], TypeAlias: ["id"], OpaqueType: ["id"], CatchClause: ["param"], LabeledStatement: ["label"], UnaryExpression: ["argument"], AssignmentExpression: ["left"], ImportSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportDefaultSpecifier: ["local"], ImportDeclaration: ["specifiers"], ExportSpecifier: ["exported"], ExportNamespaceSpecifier: ["exported"], ExportDefaultSpecifier: ["exported"], FunctionDeclaration: ["id", "params"], FunctionExpression: ["id", "params"], ArrowFunctionExpression: ["params"], ObjectMethod: ["params"], ClassMethod: ["params"], ClassPrivateMethod: ["params"], ForInStatement: ["left"], ForOfStatement: ["left"], ClassDeclaration: ["id"], ClassExpression: ["id"], RestElement: ["argument"], UpdateExpression: ["argument"], ObjectProperty: ["value"], AssignmentPattern: ["left"], ArrayPattern: ["elements"], ObjectPattern: ["properties"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id"] };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getFunctionName.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
        if ("id" in node && node.id)
          return { name: node.id.name, originalNode: node.id };
        let id, prefix = "";
        (0, _index.isObjectProperty)(parent, { value: node }) ? id = getObjectMemberKey(parent) : (0, _index.isObjectMethod)(node) || (0, _index.isClassMethod)(node) ? (id = getObjectMemberKey(node), node.kind === "get" ? prefix = "get " : node.kind === "set" && (prefix = "set ")) : (0, _index.isVariableDeclarator)(parent, { init: node }) ? id = parent.id : (0, _index.isAssignmentExpression)(parent, { operator: "=", right: node }) && (id = parent.left);
        if (!id)
          return null;
        const name = (0, _index.isLiteral)(id) ? function(id2) {
          if ((0, _index.isNullLiteral)(id2))
            return "null";
          if ((0, _index.isRegExpLiteral)(id2))
            return `/${id2.pattern}/${id2.flags}`;
          if ((0, _index.isTemplateLiteral)(id2))
            return id2.quasis.map((quasi) => quasi.value.raw).join("");
          if (id2.value !== undefined)
            return String(id2.value);
          return null;
        }(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;
        return name == null ? null : { name: prefix + name, originalNode: id };
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
      function getObjectMemberKey(node) {
        if (!node.computed || (0, _index.isLiteral)(node.key))
          return node.key;
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
      exports2.default = function(node, duplicates) {
        return (0, _getBindingIdentifiers.default)(node, duplicates, true);
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, handlers, state) {
        typeof handlers == "function" && (handlers = { enter: handlers });
        const { enter, exit } = handlers;
        traverseSimpleImpl(node, enter, exit, state, []);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      function traverseSimpleImpl(node, enter, exit, state, ancestors) {
        const keys = _index.VISITOR_KEYS[node.type];
        if (keys) {
          enter && enter(node, ancestors, state);
          for (const key of keys) {
            const subNode = node[key];
            if (Array.isArray(subNode))
              for (let i = 0;i < subNode.length; i++) {
                const child = subNode[i];
                child && (ancestors.push({ node, key, index: i }), traverseSimpleImpl(child, enter, exit, state, ancestors), ancestors.pop());
              }
            else
              subNode && (ancestors.push({ node, key }), traverseSimpleImpl(subNode, enter, exit, state, ancestors), ancestors.pop());
          }
          exit && exit(node, ancestors, state);
        }
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/traverse/traverseFast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function traverseFast(node, enter, opts) {
        if (!node)
          return;
        const keys = _index.VISITOR_KEYS[node.type];
        if (!keys)
          return;
        enter(node, opts = opts || {});
        for (const key of keys) {
          const subNode = node[key];
          if (Array.isArray(subNode))
            for (const node2 of subNode)
              traverseFast(node2, enter, opts);
          else
            traverseFast(subNode, enter, opts);
        }
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(oldName, newName, prefix = "") {
        if (warnings.has(oldName))
          return;
        warnings.add(oldName);
        const { internal, trace } = function(skip, length) {
          const { stackTraceLimit, prepareStackTrace } = Error;
          let stackTrace;
          if (Error.stackTraceLimit = 1 + skip + length, Error.prepareStackTrace = function(err, stack) {
            stackTrace = stack;
          }, new Error().stack, Error.stackTraceLimit = stackTraceLimit, Error.prepareStackTrace = prepareStackTrace, !stackTrace)
            return { internal: false, trace: "" };
          const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
          return { internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()), trace: shortStackTrace.map((frame) => `    at ${frame}`).join(`
`) };
        }(1, 2);
        if (internal)
          return;
        console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
      };
      const warnings = new Set;
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/inherit.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(key, child, parent) {
        child && parent && (child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean))));
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, args) {
        const lines = child.value.split(/\r\n|\n|\r/);
        let lastNonEmptyLine = 0;
        for (let i = 0;i < lines.length; i++)
          /[^ \t]/.exec(lines[i]) && (lastNonEmptyLine = i);
        let str = "";
        for (let i = 0;i < lines.length; i++) {
          const line = lines[i], isFirstLine = i === 0, isLastLine = i === lines.length - 1, isLastNonEmptyLine = i === lastNonEmptyLine;
          let trimmedLine = line.replace(/\t/g, " ");
          isFirstLine || (trimmedLine = trimmedLine.replace(/^ +/, "")), isLastLine || (trimmedLine = trimmedLine.replace(/ +$/, "")), trimmedLine && (isLastNonEmptyLine || (trimmedLine += " "), str += trimmedLine);
        }
        str && args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/builders/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(actual, expected) {
        const keys = Object.keys(expected);
        for (const key of keys)
          if (actual[key] !== expected[key])
            return false;
        return true;
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(match, allowPartial) {
        const parts = match.split(".");
        return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
      };
      var _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isAccessor = function(node, opts) {
        if (!node)
          return false;
        if (node.type !== "ClassAccessorProperty")
          return false;
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isAnyTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "AnyTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isArgumentPlaceholder = function(node, opts) {
        return !!node && (node.type === "ArgumentPlaceholder" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isArrayExpression = function(node, opts) {
        return !!node && (node.type === "ArrayExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isArrayPattern = function(node, opts) {
        return !!node && (node.type === "ArrayPattern" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isArrayTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "ArrayTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isArrowFunctionExpression = function(node, opts) {
        return !!node && (node.type === "ArrowFunctionExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isAssignmentExpression = function(node, opts) {
        return !!node && (node.type === "AssignmentExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isAssignmentPattern = function(node, opts) {
        return !!node && (node.type === "AssignmentPattern" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isAwaitExpression = function(node, opts) {
        return !!node && (node.type === "AwaitExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBigIntLiteral = function(node, opts) {
        return !!node && (node.type === "BigIntLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBinary = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BinaryExpression":
          case "LogicalExpression":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isBinaryExpression = function(node, opts) {
        return !!node && (node.type === "BinaryExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBindExpression = function(node, opts) {
        return !!node && (node.type === "BindExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBlock = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "Program":
          case "TSModuleBlock":
            break;
          case "Placeholder":
            if (node.expectedNode === "BlockStatement")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isBlockParent = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "CatchClause":
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "Program":
          case "ObjectMethod":
          case "SwitchStatement":
          case "WhileStatement":
          case "ArrowFunctionExpression":
          case "ForOfStatement":
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "StaticBlock":
          case "TSModuleBlock":
            break;
          case "Placeholder":
            if (node.expectedNode === "BlockStatement")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isBlockStatement = function(node, opts) {
        return !!node && (node.type === "BlockStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBooleanLiteral = function(node, opts) {
        return !!node && (node.type === "BooleanLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBooleanLiteralTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "BooleanLiteralTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBooleanTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "BooleanTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isBreakStatement = function(node, opts) {
        return !!node && (node.type === "BreakStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isCallExpression = function(node, opts) {
        return !!node && (node.type === "CallExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isCatchClause = function(node, opts) {
        return !!node && (node.type === "CatchClause" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClass = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ClassExpression":
          case "ClassDeclaration":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isClassAccessorProperty = function(node, opts) {
        return !!node && (node.type === "ClassAccessorProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassBody = function(node, opts) {
        return !!node && (node.type === "ClassBody" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassDeclaration = function(node, opts) {
        return !!node && (node.type === "ClassDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassExpression = function(node, opts) {
        return !!node && (node.type === "ClassExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassImplements = function(node, opts) {
        return !!node && (node.type === "ClassImplements" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassMethod = function(node, opts) {
        return !!node && (node.type === "ClassMethod" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassPrivateMethod = function(node, opts) {
        return !!node && (node.type === "ClassPrivateMethod" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassPrivateProperty = function(node, opts) {
        return !!node && (node.type === "ClassPrivateProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isClassProperty = function(node, opts) {
        return !!node && (node.type === "ClassProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isCompletionStatement = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BreakStatement":
          case "ContinueStatement":
          case "ReturnStatement":
          case "ThrowStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isConditional = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ConditionalExpression":
          case "IfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isConditionalExpression = function(node, opts) {
        return !!node && (node.type === "ConditionalExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isContinueStatement = function(node, opts) {
        return !!node && (node.type === "ContinueStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDebuggerStatement = function(node, opts) {
        return !!node && (node.type === "DebuggerStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDecimalLiteral = function(node, opts) {
        return !!node && (node.type === "DecimalLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclaration = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "VariableDeclaration":
          case "ClassDeclaration":
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ImportDeclaration":
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "InterfaceDeclaration":
          case "OpaqueType":
          case "TypeAlias":
          case "EnumDeclaration":
          case "TSDeclareFunction":
          case "TSInterfaceDeclaration":
          case "TSTypeAliasDeclaration":
          case "TSEnumDeclaration":
          case "TSModuleDeclaration":
            break;
          case "Placeholder":
            if (node.expectedNode === "Declaration")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isDeclareClass = function(node, opts) {
        return !!node && (node.type === "DeclareClass" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareExportAllDeclaration = function(node, opts) {
        return !!node && (node.type === "DeclareExportAllDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareExportDeclaration = function(node, opts) {
        return !!node && (node.type === "DeclareExportDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareFunction = function(node, opts) {
        return !!node && (node.type === "DeclareFunction" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareInterface = function(node, opts) {
        return !!node && (node.type === "DeclareInterface" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareModule = function(node, opts) {
        return !!node && (node.type === "DeclareModule" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareModuleExports = function(node, opts) {
        return !!node && (node.type === "DeclareModuleExports" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareOpaqueType = function(node, opts) {
        return !!node && (node.type === "DeclareOpaqueType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareTypeAlias = function(node, opts) {
        return !!node && (node.type === "DeclareTypeAlias" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclareVariable = function(node, opts) {
        return !!node && (node.type === "DeclareVariable" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDeclaredPredicate = function(node, opts) {
        return !!node && (node.type === "DeclaredPredicate" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDecorator = function(node, opts) {
        return !!node && (node.type === "Decorator" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDirective = function(node, opts) {
        return !!node && (node.type === "Directive" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDirectiveLiteral = function(node, opts) {
        return !!node && (node.type === "DirectiveLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDoExpression = function(node, opts) {
        return !!node && (node.type === "DoExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isDoWhileStatement = function(node, opts) {
        return !!node && (node.type === "DoWhileStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEmptyStatement = function(node, opts) {
        return !!node && (node.type === "EmptyStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEmptyTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "EmptyTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumBody = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "EnumBooleanBody":
          case "EnumNumberBody":
          case "EnumStringBody":
          case "EnumSymbolBody":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isEnumBooleanBody = function(node, opts) {
        return !!node && (node.type === "EnumBooleanBody" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumBooleanMember = function(node, opts) {
        return !!node && (node.type === "EnumBooleanMember" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumDeclaration = function(node, opts) {
        return !!node && (node.type === "EnumDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumDefaultedMember = function(node, opts) {
        return !!node && (node.type === "EnumDefaultedMember" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumMember = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "EnumBooleanMember":
          case "EnumNumberMember":
          case "EnumStringMember":
          case "EnumDefaultedMember":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isEnumNumberBody = function(node, opts) {
        return !!node && (node.type === "EnumNumberBody" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumNumberMember = function(node, opts) {
        return !!node && (node.type === "EnumNumberMember" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumStringBody = function(node, opts) {
        return !!node && (node.type === "EnumStringBody" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumStringMember = function(node, opts) {
        return !!node && (node.type === "EnumStringMember" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isEnumSymbolBody = function(node, opts) {
        return !!node && (node.type === "EnumSymbolBody" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExistsTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "ExistsTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExportAllDeclaration = function(node, opts) {
        return !!node && (node.type === "ExportAllDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExportDeclaration = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isExportDefaultDeclaration = function(node, opts) {
        return !!node && (node.type === "ExportDefaultDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExportDefaultSpecifier = function(node, opts) {
        return !!node && (node.type === "ExportDefaultSpecifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExportNamedDeclaration = function(node, opts) {
        return !!node && (node.type === "ExportNamedDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExportNamespaceSpecifier = function(node, opts) {
        return !!node && (node.type === "ExportNamespaceSpecifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExportSpecifier = function(node, opts) {
        return !!node && (node.type === "ExportSpecifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExpression = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ArrayExpression":
          case "AssignmentExpression":
          case "BinaryExpression":
          case "CallExpression":
          case "ConditionalExpression":
          case "FunctionExpression":
          case "Identifier":
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "LogicalExpression":
          case "MemberExpression":
          case "NewExpression":
          case "ObjectExpression":
          case "SequenceExpression":
          case "ParenthesizedExpression":
          case "ThisExpression":
          case "UnaryExpression":
          case "UpdateExpression":
          case "ArrowFunctionExpression":
          case "ClassExpression":
          case "ImportExpression":
          case "MetaProperty":
          case "Super":
          case "TaggedTemplateExpression":
          case "TemplateLiteral":
          case "YieldExpression":
          case "AwaitExpression":
          case "Import":
          case "BigIntLiteral":
          case "OptionalMemberExpression":
          case "OptionalCallExpression":
          case "TypeCastExpression":
          case "JSXElement":
          case "JSXFragment":
          case "BindExpression":
          case "DoExpression":
          case "RecordExpression":
          case "TupleExpression":
          case "DecimalLiteral":
          case "ModuleExpression":
          case "TopicReference":
          case "PipelineTopicExpression":
          case "PipelineBareFunction":
          case "PipelinePrimaryTopicReference":
          case "TSInstantiationExpression":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Expression":
              case "Identifier":
              case "StringLiteral":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isExpressionStatement = function(node, opts) {
        return !!node && (node.type === "ExpressionStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isExpressionWrapper = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExpressionStatement":
          case "ParenthesizedExpression":
          case "TypeCastExpression":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFile = function(node, opts) {
        return !!node && (node.type === "File" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isFlow = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AnyTypeAnnotation":
          case "ArrayTypeAnnotation":
          case "BooleanTypeAnnotation":
          case "BooleanLiteralTypeAnnotation":
          case "NullLiteralTypeAnnotation":
          case "ClassImplements":
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "DeclaredPredicate":
          case "ExistsTypeAnnotation":
          case "FunctionTypeAnnotation":
          case "FunctionTypeParam":
          case "GenericTypeAnnotation":
          case "InferredPredicate":
          case "InterfaceExtends":
          case "InterfaceDeclaration":
          case "InterfaceTypeAnnotation":
          case "IntersectionTypeAnnotation":
          case "MixedTypeAnnotation":
          case "EmptyTypeAnnotation":
          case "NullableTypeAnnotation":
          case "NumberLiteralTypeAnnotation":
          case "NumberTypeAnnotation":
          case "ObjectTypeAnnotation":
          case "ObjectTypeInternalSlot":
          case "ObjectTypeCallProperty":
          case "ObjectTypeIndexer":
          case "ObjectTypeProperty":
          case "ObjectTypeSpreadProperty":
          case "OpaqueType":
          case "QualifiedTypeIdentifier":
          case "StringLiteralTypeAnnotation":
          case "StringTypeAnnotation":
          case "SymbolTypeAnnotation":
          case "ThisTypeAnnotation":
          case "TupleTypeAnnotation":
          case "TypeofTypeAnnotation":
          case "TypeAlias":
          case "TypeAnnotation":
          case "TypeCastExpression":
          case "TypeParameter":
          case "TypeParameterDeclaration":
          case "TypeParameterInstantiation":
          case "UnionTypeAnnotation":
          case "Variance":
          case "VoidTypeAnnotation":
          case "EnumDeclaration":
          case "EnumBooleanBody":
          case "EnumNumberBody":
          case "EnumStringBody":
          case "EnumSymbolBody":
          case "EnumBooleanMember":
          case "EnumNumberMember":
          case "EnumStringMember":
          case "EnumDefaultedMember":
          case "IndexedAccessType":
          case "OptionalIndexedAccessType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFlowBaseAnnotation = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AnyTypeAnnotation":
          case "BooleanTypeAnnotation":
          case "NullLiteralTypeAnnotation":
          case "MixedTypeAnnotation":
          case "EmptyTypeAnnotation":
          case "NumberTypeAnnotation":
          case "StringTypeAnnotation":
          case "SymbolTypeAnnotation":
          case "ThisTypeAnnotation":
          case "VoidTypeAnnotation":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFlowDeclaration = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "InterfaceDeclaration":
          case "OpaqueType":
          case "TypeAlias":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFlowPredicate = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DeclaredPredicate":
          case "InferredPredicate":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFlowType = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AnyTypeAnnotation":
          case "ArrayTypeAnnotation":
          case "BooleanTypeAnnotation":
          case "BooleanLiteralTypeAnnotation":
          case "NullLiteralTypeAnnotation":
          case "ExistsTypeAnnotation":
          case "FunctionTypeAnnotation":
          case "GenericTypeAnnotation":
          case "InterfaceTypeAnnotation":
          case "IntersectionTypeAnnotation":
          case "MixedTypeAnnotation":
          case "EmptyTypeAnnotation":
          case "NullableTypeAnnotation":
          case "NumberLiteralTypeAnnotation":
          case "NumberTypeAnnotation":
          case "ObjectTypeAnnotation":
          case "StringLiteralTypeAnnotation":
          case "StringTypeAnnotation":
          case "SymbolTypeAnnotation":
          case "ThisTypeAnnotation":
          case "TupleTypeAnnotation":
          case "TypeofTypeAnnotation":
          case "UnionTypeAnnotation":
          case "VoidTypeAnnotation":
          case "IndexedAccessType":
          case "OptionalIndexedAccessType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFor = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ForInStatement":
          case "ForStatement":
          case "ForOfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isForInStatement = function(node, opts) {
        return !!node && (node.type === "ForInStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isForOfStatement = function(node, opts) {
        return !!node && (node.type === "ForOfStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isForStatement = function(node, opts) {
        return !!node && (node.type === "ForStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isForXStatement = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ForInStatement":
          case "ForOfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFunction = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ObjectMethod":
          case "ArrowFunctionExpression":
          case "ClassMethod":
          case "ClassPrivateMethod":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFunctionDeclaration = function(node, opts) {
        return !!node && (node.type === "FunctionDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isFunctionExpression = function(node, opts) {
        return !!node && (node.type === "FunctionExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isFunctionParent = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ObjectMethod":
          case "ArrowFunctionExpression":
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "StaticBlock":
          case "TSModuleBlock":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isFunctionTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "FunctionTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isFunctionTypeParam = function(node, opts) {
        return !!node && (node.type === "FunctionTypeParam" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isGenericTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "GenericTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isIdentifier = function(node, opts) {
        return !!node && (node.type === "Identifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isIfStatement = function(node, opts) {
        return !!node && (node.type === "IfStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isImmutable = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "BigIntLiteral":
          case "JSXAttribute":
          case "JSXClosingElement":
          case "JSXElement":
          case "JSXExpressionContainer":
          case "JSXSpreadChild":
          case "JSXOpeningElement":
          case "JSXText":
          case "JSXFragment":
          case "JSXOpeningFragment":
          case "JSXClosingFragment":
          case "DecimalLiteral":
            break;
          case "Placeholder":
            if (node.expectedNode === "StringLiteral")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isImport = function(node, opts) {
        return !!node && (node.type === "Import" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isImportAttribute = function(node, opts) {
        return !!node && (node.type === "ImportAttribute" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isImportDeclaration = function(node, opts) {
        return !!node && (node.type === "ImportDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isImportDefaultSpecifier = function(node, opts) {
        return !!node && (node.type === "ImportDefaultSpecifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isImportExpression = function(node, opts) {
        return !!node && (node.type === "ImportExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isImportNamespaceSpecifier = function(node, opts) {
        return !!node && (node.type === "ImportNamespaceSpecifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isImportOrExportDeclaration = isImportOrExportDeclaration, exports2.isImportSpecifier = function(node, opts) {
        return !!node && (node.type === "ImportSpecifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isIndexedAccessType = function(node, opts) {
        return !!node && (node.type === "IndexedAccessType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isInferredPredicate = function(node, opts) {
        return !!node && (node.type === "InferredPredicate" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isInterfaceDeclaration = function(node, opts) {
        return !!node && (node.type === "InterfaceDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isInterfaceExtends = function(node, opts) {
        return !!node && (node.type === "InterfaceExtends" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isInterfaceTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "InterfaceTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isInterpreterDirective = function(node, opts) {
        return !!node && (node.type === "InterpreterDirective" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isIntersectionTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "IntersectionTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSX = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "JSXAttribute":
          case "JSXClosingElement":
          case "JSXElement":
          case "JSXEmptyExpression":
          case "JSXExpressionContainer":
          case "JSXSpreadChild":
          case "JSXIdentifier":
          case "JSXMemberExpression":
          case "JSXNamespacedName":
          case "JSXOpeningElement":
          case "JSXSpreadAttribute":
          case "JSXText":
          case "JSXFragment":
          case "JSXOpeningFragment":
          case "JSXClosingFragment":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isJSXAttribute = function(node, opts) {
        return !!node && (node.type === "JSXAttribute" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXClosingElement = function(node, opts) {
        return !!node && (node.type === "JSXClosingElement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXClosingFragment = function(node, opts) {
        return !!node && (node.type === "JSXClosingFragment" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXElement = function(node, opts) {
        return !!node && (node.type === "JSXElement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXEmptyExpression = function(node, opts) {
        return !!node && (node.type === "JSXEmptyExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXExpressionContainer = function(node, opts) {
        return !!node && (node.type === "JSXExpressionContainer" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXFragment = function(node, opts) {
        return !!node && (node.type === "JSXFragment" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXIdentifier = function(node, opts) {
        return !!node && (node.type === "JSXIdentifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXMemberExpression = function(node, opts) {
        return !!node && (node.type === "JSXMemberExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXNamespacedName = function(node, opts) {
        return !!node && (node.type === "JSXNamespacedName" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXOpeningElement = function(node, opts) {
        return !!node && (node.type === "JSXOpeningElement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXOpeningFragment = function(node, opts) {
        return !!node && (node.type === "JSXOpeningFragment" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXSpreadAttribute = function(node, opts) {
        return !!node && (node.type === "JSXSpreadAttribute" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXSpreadChild = function(node, opts) {
        return !!node && (node.type === "JSXSpreadChild" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isJSXText = function(node, opts) {
        return !!node && (node.type === "JSXText" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isLVal = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Identifier":
          case "MemberExpression":
          case "RestElement":
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ObjectPattern":
          case "TSParameterProperty":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Pattern":
              case "Identifier":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isLabeledStatement = function(node, opts) {
        return !!node && (node.type === "LabeledStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isLiteral = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "TemplateLiteral":
          case "BigIntLiteral":
          case "DecimalLiteral":
            break;
          case "Placeholder":
            if (node.expectedNode === "StringLiteral")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isLogicalExpression = function(node, opts) {
        return !!node && (node.type === "LogicalExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isLoop = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForStatement":
          case "WhileStatement":
          case "ForOfStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isMemberExpression = function(node, opts) {
        return !!node && (node.type === "MemberExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isMetaProperty = function(node, opts) {
        return !!node && (node.type === "MetaProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isMethod = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectMethod":
          case "ClassMethod":
          case "ClassPrivateMethod":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isMiscellaneous = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Noop":
          case "Placeholder":
          case "V8IntrinsicIdentifier":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isMixedTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "MixedTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isModuleDeclaration = function(node, opts) {
        return (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration"), isImportOrExportDeclaration(node, opts);
      }, exports2.isModuleExpression = function(node, opts) {
        return !!node && (node.type === "ModuleExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isModuleSpecifier = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExportSpecifier":
          case "ImportDefaultSpecifier":
          case "ImportNamespaceSpecifier":
          case "ImportSpecifier":
          case "ExportNamespaceSpecifier":
          case "ExportDefaultSpecifier":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isNewExpression = function(node, opts) {
        return !!node && (node.type === "NewExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNoop = function(node, opts) {
        return !!node && (node.type === "Noop" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNullLiteral = function(node, opts) {
        return !!node && (node.type === "NullLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNullLiteralTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "NullLiteralTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNullableTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "NullableTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNumberLiteral = function(node, opts) {
        return (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral"), !!node && (node.type === "NumberLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNumberLiteralTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "NumberLiteralTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNumberTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "NumberTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isNumericLiteral = function(node, opts) {
        return !!node && (node.type === "NumericLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectExpression = function(node, opts) {
        return !!node && (node.type === "ObjectExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectMember = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectMethod":
          case "ObjectProperty":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isObjectMethod = function(node, opts) {
        return !!node && (node.type === "ObjectMethod" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectPattern = function(node, opts) {
        return !!node && (node.type === "ObjectPattern" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectProperty = function(node, opts) {
        return !!node && (node.type === "ObjectProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "ObjectTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectTypeCallProperty = function(node, opts) {
        return !!node && (node.type === "ObjectTypeCallProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectTypeIndexer = function(node, opts) {
        return !!node && (node.type === "ObjectTypeIndexer" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectTypeInternalSlot = function(node, opts) {
        return !!node && (node.type === "ObjectTypeInternalSlot" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectTypeProperty = function(node, opts) {
        return !!node && (node.type === "ObjectTypeProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isObjectTypeSpreadProperty = function(node, opts) {
        return !!node && (node.type === "ObjectTypeSpreadProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isOpaqueType = function(node, opts) {
        return !!node && (node.type === "OpaqueType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isOptionalCallExpression = function(node, opts) {
        return !!node && (node.type === "OptionalCallExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isOptionalIndexedAccessType = function(node, opts) {
        return !!node && (node.type === "OptionalIndexedAccessType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isOptionalMemberExpression = function(node, opts) {
        return !!node && (node.type === "OptionalMemberExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isParenthesizedExpression = function(node, opts) {
        return !!node && (node.type === "ParenthesizedExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isPattern = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ObjectPattern":
            break;
          case "Placeholder":
            if (node.expectedNode === "Pattern")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isPatternLike = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Identifier":
          case "RestElement":
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ObjectPattern":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSNonNullExpression":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Pattern":
              case "Identifier":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isPipelineBareFunction = function(node, opts) {
        return !!node && (node.type === "PipelineBareFunction" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isPipelinePrimaryTopicReference = function(node, opts) {
        return !!node && (node.type === "PipelinePrimaryTopicReference" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isPipelineTopicExpression = function(node, opts) {
        return !!node && (node.type === "PipelineTopicExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isPlaceholder = function(node, opts) {
        return !!node && (node.type === "Placeholder" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isPrivate = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ClassPrivateProperty":
          case "ClassPrivateMethod":
          case "PrivateName":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isPrivateName = function(node, opts) {
        return !!node && (node.type === "PrivateName" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isProgram = function(node, opts) {
        return !!node && (node.type === "Program" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isProperty = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectProperty":
          case "ClassProperty":
          case "ClassAccessorProperty":
          case "ClassPrivateProperty":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isPureish = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "ArrowFunctionExpression":
          case "BigIntLiteral":
          case "DecimalLiteral":
            break;
          case "Placeholder":
            if (node.expectedNode === "StringLiteral")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isQualifiedTypeIdentifier = function(node, opts) {
        return !!node && (node.type === "QualifiedTypeIdentifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isRecordExpression = function(node, opts) {
        return !!node && (node.type === "RecordExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isRegExpLiteral = function(node, opts) {
        return !!node && (node.type === "RegExpLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isRegexLiteral = function(node, opts) {
        return (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral"), !!node && (node.type === "RegexLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isRestElement = function(node, opts) {
        return !!node && (node.type === "RestElement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isRestProperty = function(node, opts) {
        return (0, _deprecationWarning.default)("isRestProperty", "isRestElement"), !!node && (node.type === "RestProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isReturnStatement = function(node, opts) {
        return !!node && (node.type === "ReturnStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isScopable = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "CatchClause":
          case "DoWhileStatement":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "Program":
          case "ObjectMethod":
          case "SwitchStatement":
          case "WhileStatement":
          case "ArrowFunctionExpression":
          case "ClassExpression":
          case "ClassDeclaration":
          case "ForOfStatement":
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "StaticBlock":
          case "TSModuleBlock":
            break;
          case "Placeholder":
            if (node.expectedNode === "BlockStatement")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isSequenceExpression = function(node, opts) {
        return !!node && (node.type === "SequenceExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isSpreadElement = function(node, opts) {
        return !!node && (node.type === "SpreadElement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isSpreadProperty = function(node, opts) {
        return (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement"), !!node && (node.type === "SpreadProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isStandardized = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ArrayExpression":
          case "AssignmentExpression":
          case "BinaryExpression":
          case "InterpreterDirective":
          case "Directive":
          case "DirectiveLiteral":
          case "BlockStatement":
          case "BreakStatement":
          case "CallExpression":
          case "CatchClause":
          case "ConditionalExpression":
          case "ContinueStatement":
          case "DebuggerStatement":
          case "DoWhileStatement":
          case "EmptyStatement":
          case "ExpressionStatement":
          case "File":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "Identifier":
          case "IfStatement":
          case "LabeledStatement":
          case "StringLiteral":
          case "NumericLiteral":
          case "NullLiteral":
          case "BooleanLiteral":
          case "RegExpLiteral":
          case "LogicalExpression":
          case "MemberExpression":
          case "NewExpression":
          case "Program":
          case "ObjectExpression":
          case "ObjectMethod":
          case "ObjectProperty":
          case "RestElement":
          case "ReturnStatement":
          case "SequenceExpression":
          case "ParenthesizedExpression":
          case "SwitchCase":
          case "SwitchStatement":
          case "ThisExpression":
          case "ThrowStatement":
          case "TryStatement":
          case "UnaryExpression":
          case "UpdateExpression":
          case "VariableDeclaration":
          case "VariableDeclarator":
          case "WhileStatement":
          case "WithStatement":
          case "AssignmentPattern":
          case "ArrayPattern":
          case "ArrowFunctionExpression":
          case "ClassBody":
          case "ClassExpression":
          case "ClassDeclaration":
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ExportSpecifier":
          case "ForOfStatement":
          case "ImportDeclaration":
          case "ImportDefaultSpecifier":
          case "ImportNamespaceSpecifier":
          case "ImportSpecifier":
          case "ImportExpression":
          case "MetaProperty":
          case "ClassMethod":
          case "ObjectPattern":
          case "SpreadElement":
          case "Super":
          case "TaggedTemplateExpression":
          case "TemplateElement":
          case "TemplateLiteral":
          case "YieldExpression":
          case "AwaitExpression":
          case "Import":
          case "BigIntLiteral":
          case "ExportNamespaceSpecifier":
          case "OptionalMemberExpression":
          case "OptionalCallExpression":
          case "ClassProperty":
          case "ClassAccessorProperty":
          case "ClassPrivateProperty":
          case "ClassPrivateMethod":
          case "PrivateName":
          case "StaticBlock":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Identifier":
              case "StringLiteral":
              case "BlockStatement":
              case "ClassBody":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isStatement = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BlockStatement":
          case "BreakStatement":
          case "ContinueStatement":
          case "DebuggerStatement":
          case "DoWhileStatement":
          case "EmptyStatement":
          case "ExpressionStatement":
          case "ForInStatement":
          case "ForStatement":
          case "FunctionDeclaration":
          case "IfStatement":
          case "LabeledStatement":
          case "ReturnStatement":
          case "SwitchStatement":
          case "ThrowStatement":
          case "TryStatement":
          case "VariableDeclaration":
          case "WhileStatement":
          case "WithStatement":
          case "ClassDeclaration":
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ForOfStatement":
          case "ImportDeclaration":
          case "DeclareClass":
          case "DeclareFunction":
          case "DeclareInterface":
          case "DeclareModule":
          case "DeclareModuleExports":
          case "DeclareTypeAlias":
          case "DeclareOpaqueType":
          case "DeclareVariable":
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
          case "InterfaceDeclaration":
          case "OpaqueType":
          case "TypeAlias":
          case "EnumDeclaration":
          case "TSDeclareFunction":
          case "TSInterfaceDeclaration":
          case "TSTypeAliasDeclaration":
          case "TSEnumDeclaration":
          case "TSModuleDeclaration":
          case "TSImportEqualsDeclaration":
          case "TSExportAssignment":
          case "TSNamespaceExportDeclaration":
            break;
          case "Placeholder":
            switch (node.expectedNode) {
              case "Statement":
              case "Declaration":
              case "BlockStatement":
                break;
              default:
                return false;
            }
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isStaticBlock = function(node, opts) {
        return !!node && (node.type === "StaticBlock" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isStringLiteral = function(node, opts) {
        return !!node && (node.type === "StringLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isStringLiteralTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "StringLiteralTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isStringTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "StringTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isSuper = function(node, opts) {
        return !!node && (node.type === "Super" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isSwitchCase = function(node, opts) {
        return !!node && (node.type === "SwitchCase" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isSwitchStatement = function(node, opts) {
        return !!node && (node.type === "SwitchStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isSymbolTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "SymbolTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSAnyKeyword = function(node, opts) {
        return !!node && (node.type === "TSAnyKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSArrayType = function(node, opts) {
        return !!node && (node.type === "TSArrayType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSAsExpression = function(node, opts) {
        return !!node && (node.type === "TSAsExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSBaseType = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSAnyKeyword":
          case "TSBooleanKeyword":
          case "TSBigIntKeyword":
          case "TSIntrinsicKeyword":
          case "TSNeverKeyword":
          case "TSNullKeyword":
          case "TSNumberKeyword":
          case "TSObjectKeyword":
          case "TSStringKeyword":
          case "TSSymbolKeyword":
          case "TSUndefinedKeyword":
          case "TSUnknownKeyword":
          case "TSVoidKeyword":
          case "TSThisType":
          case "TSLiteralType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isTSBigIntKeyword = function(node, opts) {
        return !!node && (node.type === "TSBigIntKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSBooleanKeyword = function(node, opts) {
        return !!node && (node.type === "TSBooleanKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSCallSignatureDeclaration = function(node, opts) {
        return !!node && (node.type === "TSCallSignatureDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSConditionalType = function(node, opts) {
        return !!node && (node.type === "TSConditionalType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSConstructSignatureDeclaration = function(node, opts) {
        return !!node && (node.type === "TSConstructSignatureDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSConstructorType = function(node, opts) {
        return !!node && (node.type === "TSConstructorType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSDeclareFunction = function(node, opts) {
        return !!node && (node.type === "TSDeclareFunction" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSDeclareMethod = function(node, opts) {
        return !!node && (node.type === "TSDeclareMethod" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSEntityName = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "Identifier":
          case "TSQualifiedName":
            break;
          case "Placeholder":
            if (node.expectedNode === "Identifier")
              break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isTSEnumDeclaration = function(node, opts) {
        return !!node && (node.type === "TSEnumDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSEnumMember = function(node, opts) {
        return !!node && (node.type === "TSEnumMember" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSExportAssignment = function(node, opts) {
        return !!node && (node.type === "TSExportAssignment" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSExpressionWithTypeArguments = function(node, opts) {
        return !!node && (node.type === "TSExpressionWithTypeArguments" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSExternalModuleReference = function(node, opts) {
        return !!node && (node.type === "TSExternalModuleReference" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSFunctionType = function(node, opts) {
        return !!node && (node.type === "TSFunctionType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSImportEqualsDeclaration = function(node, opts) {
        return !!node && (node.type === "TSImportEqualsDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSImportType = function(node, opts) {
        return !!node && (node.type === "TSImportType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSIndexSignature = function(node, opts) {
        return !!node && (node.type === "TSIndexSignature" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSIndexedAccessType = function(node, opts) {
        return !!node && (node.type === "TSIndexedAccessType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSInferType = function(node, opts) {
        return !!node && (node.type === "TSInferType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSInstantiationExpression = function(node, opts) {
        return !!node && (node.type === "TSInstantiationExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSInterfaceBody = function(node, opts) {
        return !!node && (node.type === "TSInterfaceBody" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSInterfaceDeclaration = function(node, opts) {
        return !!node && (node.type === "TSInterfaceDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSIntersectionType = function(node, opts) {
        return !!node && (node.type === "TSIntersectionType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSIntrinsicKeyword = function(node, opts) {
        return !!node && (node.type === "TSIntrinsicKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSLiteralType = function(node, opts) {
        return !!node && (node.type === "TSLiteralType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSMappedType = function(node, opts) {
        return !!node && (node.type === "TSMappedType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSMethodSignature = function(node, opts) {
        return !!node && (node.type === "TSMethodSignature" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSModuleBlock = function(node, opts) {
        return !!node && (node.type === "TSModuleBlock" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSModuleDeclaration = function(node, opts) {
        return !!node && (node.type === "TSModuleDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSNamedTupleMember = function(node, opts) {
        return !!node && (node.type === "TSNamedTupleMember" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSNamespaceExportDeclaration = function(node, opts) {
        return !!node && (node.type === "TSNamespaceExportDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSNeverKeyword = function(node, opts) {
        return !!node && (node.type === "TSNeverKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSNonNullExpression = function(node, opts) {
        return !!node && (node.type === "TSNonNullExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSNullKeyword = function(node, opts) {
        return !!node && (node.type === "TSNullKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSNumberKeyword = function(node, opts) {
        return !!node && (node.type === "TSNumberKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSObjectKeyword = function(node, opts) {
        return !!node && (node.type === "TSObjectKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSOptionalType = function(node, opts) {
        return !!node && (node.type === "TSOptionalType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSParameterProperty = function(node, opts) {
        return !!node && (node.type === "TSParameterProperty" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSParenthesizedType = function(node, opts) {
        return !!node && (node.type === "TSParenthesizedType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSPropertySignature = function(node, opts) {
        return !!node && (node.type === "TSPropertySignature" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSQualifiedName = function(node, opts) {
        return !!node && (node.type === "TSQualifiedName" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSRestType = function(node, opts) {
        return !!node && (node.type === "TSRestType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSSatisfiesExpression = function(node, opts) {
        return !!node && (node.type === "TSSatisfiesExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSStringKeyword = function(node, opts) {
        return !!node && (node.type === "TSStringKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSSymbolKeyword = function(node, opts) {
        return !!node && (node.type === "TSSymbolKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSThisType = function(node, opts) {
        return !!node && (node.type === "TSThisType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTupleType = function(node, opts) {
        return !!node && (node.type === "TSTupleType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSType = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSAnyKeyword":
          case "TSBooleanKeyword":
          case "TSBigIntKeyword":
          case "TSIntrinsicKeyword":
          case "TSNeverKeyword":
          case "TSNullKeyword":
          case "TSNumberKeyword":
          case "TSObjectKeyword":
          case "TSStringKeyword":
          case "TSSymbolKeyword":
          case "TSUndefinedKeyword":
          case "TSUnknownKeyword":
          case "TSVoidKeyword":
          case "TSThisType":
          case "TSFunctionType":
          case "TSConstructorType":
          case "TSTypeReference":
          case "TSTypePredicate":
          case "TSTypeQuery":
          case "TSTypeLiteral":
          case "TSArrayType":
          case "TSTupleType":
          case "TSOptionalType":
          case "TSRestType":
          case "TSUnionType":
          case "TSIntersectionType":
          case "TSConditionalType":
          case "TSInferType":
          case "TSParenthesizedType":
          case "TSTypeOperator":
          case "TSIndexedAccessType":
          case "TSMappedType":
          case "TSLiteralType":
          case "TSExpressionWithTypeArguments":
          case "TSImportType":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isTSTypeAliasDeclaration = function(node, opts) {
        return !!node && (node.type === "TSTypeAliasDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "TSTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeAssertion = function(node, opts) {
        return !!node && (node.type === "TSTypeAssertion" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeElement = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSCallSignatureDeclaration":
          case "TSConstructSignatureDeclaration":
          case "TSPropertySignature":
          case "TSMethodSignature":
          case "TSIndexSignature":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isTSTypeLiteral = function(node, opts) {
        return !!node && (node.type === "TSTypeLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeOperator = function(node, opts) {
        return !!node && (node.type === "TSTypeOperator" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeParameter = function(node, opts) {
        return !!node && (node.type === "TSTypeParameter" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeParameterDeclaration = function(node, opts) {
        return !!node && (node.type === "TSTypeParameterDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeParameterInstantiation = function(node, opts) {
        return !!node && (node.type === "TSTypeParameterInstantiation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypePredicate = function(node, opts) {
        return !!node && (node.type === "TSTypePredicate" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeQuery = function(node, opts) {
        return !!node && (node.type === "TSTypeQuery" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSTypeReference = function(node, opts) {
        return !!node && (node.type === "TSTypeReference" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSUndefinedKeyword = function(node, opts) {
        return !!node && (node.type === "TSUndefinedKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSUnionType = function(node, opts) {
        return !!node && (node.type === "TSUnionType" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSUnknownKeyword = function(node, opts) {
        return !!node && (node.type === "TSUnknownKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTSVoidKeyword = function(node, opts) {
        return !!node && (node.type === "TSVoidKeyword" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTaggedTemplateExpression = function(node, opts) {
        return !!node && (node.type === "TaggedTemplateExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTemplateElement = function(node, opts) {
        return !!node && (node.type === "TemplateElement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTemplateLiteral = function(node, opts) {
        return !!node && (node.type === "TemplateLiteral" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTerminatorless = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "BreakStatement":
          case "ContinueStatement":
          case "ReturnStatement":
          case "ThrowStatement":
          case "YieldExpression":
          case "AwaitExpression":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isThisExpression = function(node, opts) {
        return !!node && (node.type === "ThisExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isThisTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "ThisTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isThrowStatement = function(node, opts) {
        return !!node && (node.type === "ThrowStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTopicReference = function(node, opts) {
        return !!node && (node.type === "TopicReference" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTryStatement = function(node, opts) {
        return !!node && (node.type === "TryStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTupleExpression = function(node, opts) {
        return !!node && (node.type === "TupleExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTupleTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "TupleTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTypeAlias = function(node, opts) {
        return !!node && (node.type === "TypeAlias" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "TypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTypeCastExpression = function(node, opts) {
        return !!node && (node.type === "TypeCastExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTypeParameter = function(node, opts) {
        return !!node && (node.type === "TypeParameter" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTypeParameterDeclaration = function(node, opts) {
        return !!node && (node.type === "TypeParameterDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTypeParameterInstantiation = function(node, opts) {
        return !!node && (node.type === "TypeParameterInstantiation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isTypeScript = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "TSParameterProperty":
          case "TSDeclareFunction":
          case "TSDeclareMethod":
          case "TSQualifiedName":
          case "TSCallSignatureDeclaration":
          case "TSConstructSignatureDeclaration":
          case "TSPropertySignature":
          case "TSMethodSignature":
          case "TSIndexSignature":
          case "TSAnyKeyword":
          case "TSBooleanKeyword":
          case "TSBigIntKeyword":
          case "TSIntrinsicKeyword":
          case "TSNeverKeyword":
          case "TSNullKeyword":
          case "TSNumberKeyword":
          case "TSObjectKeyword":
          case "TSStringKeyword":
          case "TSSymbolKeyword":
          case "TSUndefinedKeyword":
          case "TSUnknownKeyword":
          case "TSVoidKeyword":
          case "TSThisType":
          case "TSFunctionType":
          case "TSConstructorType":
          case "TSTypeReference":
          case "TSTypePredicate":
          case "TSTypeQuery":
          case "TSTypeLiteral":
          case "TSArrayType":
          case "TSTupleType":
          case "TSOptionalType":
          case "TSRestType":
          case "TSNamedTupleMember":
          case "TSUnionType":
          case "TSIntersectionType":
          case "TSConditionalType":
          case "TSInferType":
          case "TSParenthesizedType":
          case "TSTypeOperator":
          case "TSIndexedAccessType":
          case "TSMappedType":
          case "TSLiteralType":
          case "TSExpressionWithTypeArguments":
          case "TSInterfaceDeclaration":
          case "TSInterfaceBody":
          case "TSTypeAliasDeclaration":
          case "TSInstantiationExpression":
          case "TSAsExpression":
          case "TSSatisfiesExpression":
          case "TSTypeAssertion":
          case "TSEnumDeclaration":
          case "TSEnumMember":
          case "TSModuleDeclaration":
          case "TSModuleBlock":
          case "TSImportType":
          case "TSImportEqualsDeclaration":
          case "TSExternalModuleReference":
          case "TSNonNullExpression":
          case "TSExportAssignment":
          case "TSNamespaceExportDeclaration":
          case "TSTypeAnnotation":
          case "TSTypeParameterInstantiation":
          case "TSTypeParameterDeclaration":
          case "TSTypeParameter":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isTypeofTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "TypeofTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isUnaryExpression = function(node, opts) {
        return !!node && (node.type === "UnaryExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isUnaryLike = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "UnaryExpression":
          case "SpreadElement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isUnionTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "UnionTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isUpdateExpression = function(node, opts) {
        return !!node && (node.type === "UpdateExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isUserWhitespacable = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ObjectMethod":
          case "ObjectProperty":
          case "ObjectTypeInternalSlot":
          case "ObjectTypeCallProperty":
          case "ObjectTypeIndexer":
          case "ObjectTypeProperty":
          case "ObjectTypeSpreadProperty":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isV8IntrinsicIdentifier = function(node, opts) {
        return !!node && (node.type === "V8IntrinsicIdentifier" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isVariableDeclaration = function(node, opts) {
        return !!node && (node.type === "VariableDeclaration" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isVariableDeclarator = function(node, opts) {
        return !!node && (node.type === "VariableDeclarator" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isVariance = function(node, opts) {
        return !!node && (node.type === "Variance" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isVoidTypeAnnotation = function(node, opts) {
        return !!node && (node.type === "VoidTypeAnnotation" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isWhile = function(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "DoWhileStatement":
          case "WhileStatement":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }, exports2.isWhileStatement = function(node, opts) {
        return !!node && (node.type === "WhileStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isWithStatement = function(node, opts) {
        return !!node && (node.type === "WithStatement" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      }, exports2.isYieldExpression = function(node, opts) {
        return !!node && (node.type === "YieldExpression" && (opts == null || (0, _shallowEqual.default)(node, opts)));
      };
      var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
      function isImportOrExportDeclaration(node, opts) {
        if (!node)
          return false;
        switch (node.type) {
          case "ExportAllDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
          case "ImportDeclaration":
            break;
          default:
            return false;
        }
        return opts == null || (0, _shallowEqual.default)(node, opts);
      }
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/is.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(type, node, opts) {
        if (!node)
          return false;
        if (!(0, _isType.default)(node.type, type))
          return !opts && node.type === "Placeholder" && type in _index.FLIPPED_ALIAS_KEYS && (0, _isPlaceholderType.default)(node.expectedNode, type);
        return opts === undefined || (0, _shallowEqual.default)(node, opts);
      };
      var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBinding.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
        if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression")
          return false;
        const keys = _getBindingIdentifiers.default.keys[parent.type];
        if (keys)
          for (let i = 0;i < keys.length; i++) {
            const val = parent[keys[i]];
            if (Array.isArray(val)) {
              if (val.includes(node))
                return true;
            } else if (val === node)
              return true;
          }
        return false;
      };
      var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isBlockScoped.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isImmutable.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        if ((0, _isType.default)(node.type, "Immutable"))
          return true;
        if ((0, _index.isIdentifier)(node))
          return node.name === "undefined";
        return false;
      };
      var _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isLet.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return (0, _index.isVariableDeclaration)(node) && (node.kind !== "var" || node[_index2.BLOCK_SCOPED_SYMBOL]);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return !(!node || !_index.VISITOR_KEYS[node.type]);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function isNodesEquivalent(a, b) {
        if (typeof a != "object" || typeof b != "object" || a == null || b == null)
          return a === b;
        if (a.type !== b.type)
          return false;
        const fields = Object.keys(_index.NODE_FIELDS[a.type] || a.type), visitorKeys = _index.VISITOR_KEYS[a.type];
        for (const field of fields) {
          const val_a = a[field], val_b = b[field];
          if (typeof val_a != typeof val_b)
            return false;
          if (val_a != null || val_b != null) {
            if (val_a == null || val_b == null)
              return false;
            if (Array.isArray(val_a)) {
              if (!Array.isArray(val_b))
                return false;
              if (val_a.length !== val_b.length)
                return false;
              for (let i = 0;i < val_a.length; i++)
                if (!isNodesEquivalent(val_a[i], val_b[i]))
                  return false;
            } else if (typeof val_a != "object" || visitorKeys != null && visitorKeys.includes(field)) {
              if (!isNodesEquivalent(val_a, val_b))
                return false;
            } else
              for (const key of Object.keys(val_a))
                if (val_a[key] !== val_b[key])
                  return false;
          }
        }
        return true;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(placeholderType, targetType) {
        if (placeholderType === targetType)
          return true;
        const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
        if (aliases) {
          for (const alias of aliases)
            if (targetType === alias)
              return true;
        }
        return false;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isReferenced.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
        switch (parent.type) {
          case "MemberExpression":
          case "OptionalMemberExpression":
            return parent.property === node ? !!parent.computed : parent.object === node;
          case "JSXMemberExpression":
            return parent.object === node;
          case "VariableDeclarator":
            return parent.init === node;
          case "ArrowFunctionExpression":
            return parent.body === node;
          case "PrivateName":
          case "LabeledStatement":
          case "CatchClause":
          case "RestElement":
          case "BreakStatement":
          case "ContinueStatement":
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "ExportNamespaceSpecifier":
          case "ExportDefaultSpecifier":
          case "ImportDefaultSpecifier":
          case "ImportNamespaceSpecifier":
          case "ImportSpecifier":
          case "ImportAttribute":
          case "JSXAttribute":
          case "ObjectPattern":
          case "ArrayPattern":
          case "MetaProperty":
            return false;
          case "ClassMethod":
          case "ClassPrivateMethod":
          case "ObjectMethod":
            return parent.key === node && !!parent.computed;
          case "ObjectProperty":
            return parent.key === node ? !!parent.computed : !grandparent || grandparent.type !== "ObjectPattern";
          case "ClassProperty":
          case "ClassAccessorProperty":
          case "TSPropertySignature":
            return parent.key !== node || !!parent.computed;
          case "ClassPrivateProperty":
          case "ObjectTypeProperty":
            return parent.key !== node;
          case "ClassDeclaration":
          case "ClassExpression":
            return parent.superClass === node;
          case "AssignmentExpression":
          case "AssignmentPattern":
            return parent.right === node;
          case "ExportSpecifier":
            return (grandparent == null || !grandparent.source) && parent.local === node;
          case "TSEnumMember":
            return parent.id !== node;
        }
        return true;
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isScope.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
        if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent)))
          return false;
        if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent)))
          return true;
        return (0, _index.isScopable)(node);
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(specifier) {
        return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(nodeType, targetType) {
        if (nodeType === targetType)
          return true;
        if (nodeType == null)
          return false;
        if (_index.ALIAS_KEYS[targetType])
          return false;
        const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
        if (aliases) {
          if (aliases[0] === nodeType)
            return true;
          for (const alias of aliases)
            if (nodeType === alias)
              return true;
        }
        return false;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
        return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
      };
      var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js");
      const RESERVED_WORDS_ES3_ONLY = new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name, reserved = true) {
        if (typeof name != "string")
          return false;
        if (reserved && ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)))
          return false;
        return (0, _helperValidatorIdentifier.isIdentifierName)(name);
      };
      var _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.25.9/node_modules/@babel/helper-validator-identifier/lib/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/isVar.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
        return (0, _index.isVariableDeclaration)(node, { kind: "var" }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/constants/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/matchesPattern.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, match, allowPartial) {
        if (!(0, _index.isMemberExpression)(member))
          return false;
        const parts = Array.isArray(match) ? match : match.split("."), nodes = [];
        let node;
        for (node = member;(0, _index.isMemberExpression)(node); node = node.object)
          nodes.push(node.property);
        if (nodes.push(node), nodes.length < parts.length)
          return false;
        if (!allowPartial && nodes.length > parts.length)
          return false;
        for (let i = 0, j = nodes.length - 1;i < parts.length; i++, j--) {
          const node2 = nodes[j];
          let value2;
          if ((0, _index.isIdentifier)(node2))
            value2 = node2.name;
          else if ((0, _index.isStringLiteral)(node2))
            value2 = node2.value;
          else {
            if (!(0, _index.isThisExpression)(node2))
              return false;
            value2 = "this";
          }
          if (parts[i] !== value2)
            return false;
        }
        return true;
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/generated/index.js");
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js": (__unused_webpack_module, exports2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tagName) {
        return !!tagName && /^[a-z]/.test(tagName);
      };
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = undefined;
      const isReactComponent = (0, __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");
      exports2.default = isReactComponent;
    }, "./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/validators/validate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
      Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key, val) {
        if (!node)
          return;
        const fields = _index.NODE_FIELDS[node.type];
        if (!fields)
          return;
        const field = fields[key];
        validateField(node, key, val, field), validateChild(node, key, val);
      }, exports2.validateChild = validateChild, exports2.validateField = validateField, exports2.validateInternal = function(field, node, key, val, maybeNode) {
        if (field == null || !field.validate)
          return;
        if (field.optional && val == null)
          return;
        if (field.validate(node, key, val), maybeNode) {
          var _NODE_PARENT_VALIDATI;
          const type = val.type;
          if (type == null)
            return;
          (_NODE_PARENT_VALIDATI = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI.call(_index.NODE_PARENT_VALIDATIONS, node, key, val);
        }
      };
      var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.26.3/node_modules/@babel/types/lib/definitions/index.js");
      function validateField(node, key, val, field) {
        field != null && field.validate && (field.optional && val == null || field.validate(node, key, val));
      }
      function validateChild(node, key, val) {
        var _NODE_PARENT_VALIDATI2;
        const type = val == null ? undefined : val.type;
        type != null && ((_NODE_PARENT_VALIDATI2 = _index.NODE_PARENT_VALIDATIONS[type]) == null || _NODE_PARENT_VALIDATI2.call(_index.NODE_PARENT_VALIDATIONS, node, key, val));
      }
    }, "./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
      __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => __WEBPACK_DEFAULT_EXPORT__ });
      var unicode = { Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/, ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/, ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ }, util = { isSpaceSeparator: (c2) => typeof c2 == "string" && unicode.Space_Separator.test(c2), isIdStartChar: (c2) => typeof c2 == "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 === "$" || c2 === "_" || unicode.ID_Start.test(c2)), isIdContinueChar: (c2) => typeof c2 == "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || c2 === "$" || c2 === "_" || c2 === "\u200C" || c2 === "\u200D" || unicode.ID_Continue.test(c2)), isDigit: (c2) => typeof c2 == "string" && /[0-9]/.test(c2), isHexDigit: (c2) => typeof c2 == "string" && /[0-9A-Fa-f]/.test(c2) };
      let source, parseState, stack, pos, line, column, token, key, root;
      function internalize(holder, name, reviver) {
        const value2 = holder[name];
        if (value2 != null && typeof value2 == "object")
          if (Array.isArray(value2))
            for (let i = 0;i < value2.length; i++) {
              const key2 = String(i), replacement = internalize(value2, key2, reviver);
              replacement === undefined ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
            }
          else
            for (const key2 in value2) {
              const replacement = internalize(value2, key2, reviver);
              replacement === undefined ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
            }
        return reviver.call(holder, name, value2);
      }
      let lexState, buffer, doubleQuote, sign, c;
      function lex() {
        for (lexState = "default", buffer = "", doubleQuote = false, sign = 1;; ) {
          c = peek();
          const token2 = lexStates[lexState]();
          if (token2)
            return token2;
        }
      }
      function peek() {
        if (source[pos])
          return String.fromCodePoint(source.codePointAt(pos));
      }
      function read() {
        const c2 = peek();
        return c2 === `
` ? (line++, column = 0) : c2 ? column += c2.length : column++, c2 && (pos += c2.length), c2;
      }
      const lexStates = { default() {
        switch (c) {
          case "\t":
          case "\v":
          case "\f":
          case " ":
          case "\xA0":
          case "\uFEFF":
          case `
`:
          case "\r":
          case "\u2028":
          case "\u2029":
            return void read();
          case "/":
            return read(), void (lexState = "comment");
          case undefined:
            return read(), newToken("eof");
        }
        if (!util.isSpaceSeparator(c))
          return lexStates[parseState]();
        read();
      }, comment() {
        switch (c) {
          case "*":
            return read(), void (lexState = "multiLineComment");
          case "/":
            return read(), void (lexState = "singleLineComment");
        }
        throw invalidChar(read());
      }, multiLineComment() {
        switch (c) {
          case "*":
            return read(), void (lexState = "multiLineCommentAsterisk");
          case undefined:
            throw invalidChar(read());
        }
        read();
      }, multiLineCommentAsterisk() {
        switch (c) {
          case "*":
            return void read();
          case "/":
            return read(), void (lexState = "default");
          case undefined:
            throw invalidChar(read());
        }
        read(), lexState = "multiLineComment";
      }, singleLineComment() {
        switch (c) {
          case `
`:
          case "\r":
          case "\u2028":
          case "\u2029":
            return read(), void (lexState = "default");
          case undefined:
            return read(), newToken("eof");
        }
        read();
      }, value() {
        switch (c) {
          case "{":
          case "[":
            return newToken("punctuator", read());
          case "n":
            return read(), literal("ull"), newToken("null", null);
          case "t":
            return read(), literal("rue"), newToken("boolean", true);
          case "f":
            return read(), literal("alse"), newToken("boolean", false);
          case "-":
          case "+":
            return read() === "-" && (sign = -1), void (lexState = "sign");
          case ".":
            return buffer = read(), void (lexState = "decimalPointLeading");
          case "0":
            return buffer = read(), void (lexState = "zero");
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            return buffer = read(), void (lexState = "decimalInteger");
          case "I":
            return read(), literal("nfinity"), newToken("numeric", 1 / 0);
          case "N":
            return read(), literal("aN"), newToken("numeric", NaN);
          case '"':
          case "'":
            return doubleQuote = read() === '"', buffer = "", void (lexState = "string");
        }
        throw invalidChar(read());
      }, identifierNameStartEscape() {
        if (c !== "u")
          throw invalidChar(read());
        read();
        const u = unicodeEscape();
        switch (u) {
          case "$":
          case "_":
            break;
          default:
            if (!util.isIdStartChar(u))
              throw invalidIdentifier();
        }
        buffer += u, lexState = "identifierName";
      }, identifierName() {
        switch (c) {
          case "$":
          case "_":
          case "\u200C":
          case "\u200D":
            return void (buffer += read());
          case "\\":
            return read(), void (lexState = "identifierNameEscape");
        }
        if (!util.isIdContinueChar(c))
          return newToken("identifier", buffer);
        buffer += read();
      }, identifierNameEscape() {
        if (c !== "u")
          throw invalidChar(read());
        read();
        const u = unicodeEscape();
        switch (u) {
          case "$":
          case "_":
          case "\u200C":
          case "\u200D":
            break;
          default:
            if (!util.isIdContinueChar(u))
              throw invalidIdentifier();
        }
        buffer += u, lexState = "identifierName";
      }, sign() {
        switch (c) {
          case ".":
            return buffer = read(), void (lexState = "decimalPointLeading");
          case "0":
            return buffer = read(), void (lexState = "zero");
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            return buffer = read(), void (lexState = "decimalInteger");
          case "I":
            return read(), literal("nfinity"), newToken("numeric", sign * (1 / 0));
          case "N":
            return read(), literal("aN"), newToken("numeric", NaN);
        }
        throw invalidChar(read());
      }, zero() {
        switch (c) {
          case ".":
            return buffer += read(), void (lexState = "decimalPoint");
          case "e":
          case "E":
            return buffer += read(), void (lexState = "decimalExponent");
          case "x":
          case "X":
            return buffer += read(), void (lexState = "hexadecimal");
        }
        return newToken("numeric", 0 * sign);
      }, decimalInteger() {
        switch (c) {
          case ".":
            return buffer += read(), void (lexState = "decimalPoint");
          case "e":
          case "E":
            return buffer += read(), void (lexState = "decimalExponent");
        }
        if (!util.isDigit(c))
          return newToken("numeric", sign * Number(buffer));
        buffer += read();
      }, decimalPointLeading() {
        if (util.isDigit(c))
          return buffer += read(), void (lexState = "decimalFraction");
        throw invalidChar(read());
      }, decimalPoint() {
        switch (c) {
          case "e":
          case "E":
            return buffer += read(), void (lexState = "decimalExponent");
        }
        return util.isDigit(c) ? (buffer += read(), void (lexState = "decimalFraction")) : newToken("numeric", sign * Number(buffer));
      }, decimalFraction() {
        switch (c) {
          case "e":
          case "E":
            return buffer += read(), void (lexState = "decimalExponent");
        }
        if (!util.isDigit(c))
          return newToken("numeric", sign * Number(buffer));
        buffer += read();
      }, decimalExponent() {
        switch (c) {
          case "+":
          case "-":
            return buffer += read(), void (lexState = "decimalExponentSign");
        }
        if (util.isDigit(c))
          return buffer += read(), void (lexState = "decimalExponentInteger");
        throw invalidChar(read());
      }, decimalExponentSign() {
        if (util.isDigit(c))
          return buffer += read(), void (lexState = "decimalExponentInteger");
        throw invalidChar(read());
      }, decimalExponentInteger() {
        if (!util.isDigit(c))
          return newToken("numeric", sign * Number(buffer));
        buffer += read();
      }, hexadecimal() {
        if (util.isHexDigit(c))
          return buffer += read(), void (lexState = "hexadecimalInteger");
        throw invalidChar(read());
      }, hexadecimalInteger() {
        if (!util.isHexDigit(c))
          return newToken("numeric", sign * Number(buffer));
        buffer += read();
      }, string() {
        switch (c) {
          case "\\":
            return read(), void (buffer += function() {
              switch (peek()) {
                case "b":
                  return read(), "\b";
                case "f":
                  return read(), "\f";
                case "n":
                  return read(), `
`;
                case "r":
                  return read(), "\r";
                case "t":
                  return read(), "\t";
                case "v":
                  return read(), "\v";
                case "0":
                  if (read(), util.isDigit(peek()))
                    throw invalidChar(read());
                  return "\x00";
                case "x":
                  return read(), function() {
                    let buffer2 = "", c2 = peek();
                    if (!util.isHexDigit(c2))
                      throw invalidChar(read());
                    if (buffer2 += read(), c2 = peek(), !util.isHexDigit(c2))
                      throw invalidChar(read());
                    return buffer2 += read(), String.fromCodePoint(parseInt(buffer2, 16));
                  }();
                case "u":
                  return read(), unicodeEscape();
                case `
`:
                case "\u2028":
                case "\u2029":
                  return read(), "";
                case "\r":
                  return read(), peek() === `
` && read(), "";
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                case undefined:
                  throw invalidChar(read());
              }
              return read();
            }());
          case '"':
            return doubleQuote ? (read(), newToken("string", buffer)) : void (buffer += read());
          case "'":
            return doubleQuote ? void (buffer += read()) : (read(), newToken("string", buffer));
          case `
`:
          case "\r":
            throw invalidChar(read());
          case "\u2028":
          case "\u2029":
            (function(c2) {
              console.warn(`JSON5: '${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping`);
            })(c);
            break;
          case undefined:
            throw invalidChar(read());
        }
        buffer += read();
      }, start() {
        switch (c) {
          case "{":
          case "[":
            return newToken("punctuator", read());
        }
        lexState = "value";
      }, beforePropertyName() {
        switch (c) {
          case "$":
          case "_":
            return buffer = read(), void (lexState = "identifierName");
          case "\\":
            return read(), void (lexState = "identifierNameStartEscape");
          case "}":
            return newToken("punctuator", read());
          case '"':
          case "'":
            return doubleQuote = read() === '"', void (lexState = "string");
        }
        if (util.isIdStartChar(c))
          return buffer += read(), void (lexState = "identifierName");
        throw invalidChar(read());
      }, afterPropertyName() {
        if (c === ":")
          return newToken("punctuator", read());
        throw invalidChar(read());
      }, beforePropertyValue() {
        lexState = "value";
      }, afterPropertyValue() {
        switch (c) {
          case ",":
          case "}":
            return newToken("punctuator", read());
        }
        throw invalidChar(read());
      }, beforeArrayValue() {
        if (c === "]")
          return newToken("punctuator", read());
        lexState = "value";
      }, afterArrayValue() {
        switch (c) {
          case ",":
          case "]":
            return newToken("punctuator", read());
        }
        throw invalidChar(read());
      }, end() {
        throw invalidChar(read());
      } };
      function newToken(type, value2) {
        return { type, value: value2, line, column };
      }
      function literal(s) {
        for (const c2 of s) {
          if (peek() !== c2)
            throw invalidChar(read());
          read();
        }
      }
      function unicodeEscape() {
        let buffer2 = "", count = 4;
        for (;count-- > 0; ) {
          const c2 = peek();
          if (!util.isHexDigit(c2))
            throw invalidChar(read());
          buffer2 += read();
        }
        return String.fromCodePoint(parseInt(buffer2, 16));
      }
      const parseStates = { start() {
        if (token.type === "eof")
          throw invalidEOF();
        push();
      }, beforePropertyName() {
        switch (token.type) {
          case "identifier":
          case "string":
            return key = token.value, void (parseState = "afterPropertyName");
          case "punctuator":
            return void pop();
          case "eof":
            throw invalidEOF();
        }
      }, afterPropertyName() {
        if (token.type === "eof")
          throw invalidEOF();
        parseState = "beforePropertyValue";
      }, beforePropertyValue() {
        if (token.type === "eof")
          throw invalidEOF();
        push();
      }, beforeArrayValue() {
        if (token.type === "eof")
          throw invalidEOF();
        token.type !== "punctuator" || token.value !== "]" ? push() : pop();
      }, afterPropertyValue() {
        if (token.type === "eof")
          throw invalidEOF();
        switch (token.value) {
          case ",":
            return void (parseState = "beforePropertyName");
          case "}":
            pop();
        }
      }, afterArrayValue() {
        if (token.type === "eof")
          throw invalidEOF();
        switch (token.value) {
          case ",":
            return void (parseState = "beforeArrayValue");
          case "]":
            pop();
        }
      }, end() {
      } };
      function push() {
        let value2;
        switch (token.type) {
          case "punctuator":
            switch (token.value) {
              case "{":
                value2 = {};
                break;
              case "[":
                value2 = [];
            }
            break;
          case "null":
          case "boolean":
          case "numeric":
          case "string":
            value2 = token.value;
        }
        if (root === undefined)
          root = value2;
        else {
          const parent = stack[stack.length - 1];
          Array.isArray(parent) ? parent.push(value2) : Object.defineProperty(parent, key, { value: value2, writable: true, enumerable: true, configurable: true });
        }
        if (value2 !== null && typeof value2 == "object")
          stack.push(value2), parseState = Array.isArray(value2) ? "beforeArrayValue" : "beforePropertyName";
        else {
          const current = stack[stack.length - 1];
          parseState = current == null ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
        }
      }
      function pop() {
        stack.pop();
        const current = stack[stack.length - 1];
        parseState = current == null ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
      }
      function invalidChar(c2) {
        return syntaxError(c2 === undefined ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(c2)}' at ${line}:${column}`);
      }
      function invalidEOF() {
        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
      }
      function invalidIdentifier() {
        return column -= 5, syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
      }
      function formatChar(c2) {
        const replacements = { "'": "\\'", '"': "\\\"", "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\v": "\\v", "\x00": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
        if (replacements[c2])
          return replacements[c2];
        if (c2 < " ") {
          const hexString = c2.charCodeAt(0).toString(16);
          return "\\x" + ("00" + hexString).substring(hexString.length);
        }
        return c2;
      }
      function syntaxError(message) {
        const err = new SyntaxError(message);
        return err.lineNumber = line, err.columnNumber = column, err;
      }
      const JSON5 = { parse: function(text, reviver) {
        source = String(text), parseState = "start", stack = [], pos = 0, line = 1, column = 0, token = undefined, key = undefined, root = undefined;
        do {
          token = lex(), parseStates[parseState]();
        } while (token.type !== "eof");
        return typeof reviver == "function" ? internalize({ "": root }, "", reviver) : root;
      }, stringify: function(value2, replacer, space) {
        const stack2 = [];
        let propertyList, replacerFunc, quote, indent = "", gap = "";
        if (replacer == null || typeof replacer != "object" || Array.isArray(replacer) || (space = replacer.space, quote = replacer.quote, replacer = replacer.replacer), typeof replacer == "function")
          replacerFunc = replacer;
        else if (Array.isArray(replacer)) {
          propertyList = [];
          for (const v of replacer) {
            let item;
            typeof v == "string" ? item = v : (typeof v == "number" || v instanceof String || v instanceof Number) && (item = String(v)), item !== undefined && propertyList.indexOf(item) < 0 && propertyList.push(item);
          }
        }
        return space instanceof Number ? space = Number(space) : space instanceof String && (space = String(space)), typeof space == "number" ? space > 0 && (space = Math.min(10, Math.floor(space)), gap = "          ".substr(0, space)) : typeof space == "string" && (gap = space.substr(0, 10)), serializeProperty("", { "": value2 });
        function serializeProperty(key2, holder) {
          let value3 = holder[key2];
          switch (value3 != null && (typeof value3.toJSON5 == "function" ? value3 = value3.toJSON5(key2) : typeof value3.toJSON == "function" && (value3 = value3.toJSON(key2))), replacerFunc && (value3 = replacerFunc.call(holder, key2, value3)), value3 instanceof Number ? value3 = Number(value3) : value3 instanceof String ? value3 = String(value3) : value3 instanceof Boolean && (value3 = value3.valueOf()), value3) {
            case null:
              return "null";
            case true:
              return "true";
            case false:
              return "false";
          }
          return typeof value3 == "string" ? quoteString(value3) : typeof value3 == "number" ? String(value3) : typeof value3 == "object" ? Array.isArray(value3) ? function(value4) {
            if (stack2.indexOf(value4) >= 0)
              throw TypeError("Converting circular structure to JSON5");
            stack2.push(value4);
            let stepback = indent;
            indent += gap;
            let final, partial = [];
            for (let i = 0;i < value4.length; i++) {
              const propertyString = serializeProperty(String(i), value4);
              partial.push(propertyString !== undefined ? propertyString : "null");
            }
            if (partial.length === 0)
              final = "[]";
            else if (gap === "") {
              final = "[" + partial.join(",") + "]";
            } else {
              let separator = `,
` + indent, properties = partial.join(separator);
              final = `[
` + indent + properties + `,
` + stepback + "]";
            }
            return stack2.pop(), indent = stepback, final;
          }(value3) : function(value4) {
            if (stack2.indexOf(value4) >= 0)
              throw TypeError("Converting circular structure to JSON5");
            stack2.push(value4);
            let stepback = indent;
            indent += gap;
            let final, keys = propertyList || Object.keys(value4), partial = [];
            for (const key3 of keys) {
              const propertyString = serializeProperty(key3, value4);
              if (propertyString !== undefined) {
                let member = serializeKey(key3) + ":";
                gap !== "" && (member += " "), member += propertyString, partial.push(member);
              }
            }
            if (partial.length === 0)
              final = "{}";
            else {
              let properties;
              if (gap === "")
                properties = partial.join(","), final = "{" + properties + "}";
              else {
                let separator = `,
` + indent;
                properties = partial.join(separator), final = `{
` + indent + properties + `,
` + stepback + "}";
              }
            }
            return stack2.pop(), indent = stepback, final;
          }(value3) : undefined;
        }
        function quoteString(value3) {
          const quotes = { "'": 0.1, '"': 0.2 }, replacements = { "'": "\\'", '"': "\\\"", "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\v": "\\v", "\x00": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
          let product = "";
          for (let i = 0;i < value3.length; i++) {
            const c2 = value3[i];
            switch (c2) {
              case "'":
              case '"':
                quotes[c2]++, product += c2;
                continue;
              case "\x00":
                if (util.isDigit(value3[i + 1])) {
                  product += "\\x00";
                  continue;
                }
            }
            if (replacements[c2])
              product += replacements[c2];
            else if (c2 < " ") {
              let hexString = c2.charCodeAt(0).toString(16);
              product += "\\x" + ("00" + hexString).substring(hexString.length);
            } else
              product += c2;
          }
          const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);
          return product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]), quoteChar + product + quoteChar;
        }
        function serializeKey(key2) {
          if (key2.length === 0)
            return quoteString(key2);
          const firstChar = String.fromCodePoint(key2.codePointAt(0));
          if (!util.isIdStartChar(firstChar))
            return quoteString(key2);
          for (let i = firstChar.length;i < key2.length; i++)
            if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i))))
              return quoteString(key2);
          return key2;
        }
      } };
      const __WEBPACK_DEFAULT_EXPORT__ = JSON5;
    }, "./stubs/babel-codeframe.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
      function codeFrameColumns() {
        return "";
      }
      __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { codeFrameColumns: () => codeFrameColumns });
    }, "./stubs/helper-compilation-targets.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
      function getTargets() {
        return {};
      }
      __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => getTargets });
    }, "./node_modules/.pnpm/@babel+preset-typescript@7.26.0_@babel+core@7.26.0/node_modules/@babel/preset-typescript/package.json": (module2) => {
      module2.exports = JSON.parse('{"name":"@babel/preset-typescript","version":"7.26.0","description":"Babel preset for TypeScript.","repository":{"type":"git","url":"https://github.com/babel/babel.git","directory":"packages/babel-preset-typescript"},"license":"MIT","publishConfig":{"access":"public"},"main":"./lib/index.js","keywords":["babel-preset","typescript"],"dependencies":{"@babel/helper-plugin-utils":"^7.25.9","@babel/helper-validator-option":"^7.25.9","@babel/plugin-syntax-jsx":"^7.25.9","@babel/plugin-transform-modules-commonjs":"^7.25.9","@babel/plugin-transform-typescript":"^7.25.9"},"peerDependencies":{"@babel/core":"^7.0.0-0"},"devDependencies":{"@babel/core":"^7.26.0","@babel/helper-plugin-test-runner":"^7.25.9"},"homepage":"https://babel.dev/docs/en/next/babel-preset-typescript","bugs":"https://github.com/babel/babel/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3A%22area%3A%20typescript%22+is%3Aopen","engines":{"node":">=6.9.0"},"author":"The Babel Team (https://babel.dev/team)","type":"commonjs"}');
    }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json": (module2) => {
      module2.exports = JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}');
    } }, __webpack_module_cache__ = {};
    function __webpack_require__(moduleId) {
      var cachedModule = __webpack_module_cache__[moduleId];
      if (cachedModule !== undefined)
        return cachedModule.exports;
      var module2 = __webpack_module_cache__[moduleId] = { exports: {} };
      return __webpack_modules__[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__), module2.exports;
    }
    __webpack_require__.n = (module2) => {
      var getter = module2 && module2.__esModule ? () => module2.default : () => module2;
      return __webpack_require__.d(getter, { a: getter }), getter;
    }, __webpack_require__.d = (exports2, definition) => {
      for (var key in definition)
        __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
    }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports2) => {
      typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports2, "__esModule", { value: true });
    };
    var __webpack_exports__ = {};
    (() => {
      __webpack_require__.d(__webpack_exports__, { default: () => transform });
      var lib = __webpack_require__("./node_modules/.pnpm/@babel+core@7.26.0/node_modules/@babel/core/lib/index.js"), plugin_proposal_decorators_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-proposal-decorators/lib/index.js"), plugin_syntax_class_properties_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-class-properties/lib/index.js"), plugin_syntax_import_assertions_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.26.0_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js"), plugin_syntax_jsx_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-syntax-jsx/lib/index.js"), plugin_transform_export_namespace_from_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-export-namespace-from@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-export-namespace-from/lib/index.js"), plugin_transform_react_jsx_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-react-jsx@7.25.9_@babel+core@7.26.0/node_modules/@babel/plugin-transform-react-jsx/lib/index.js"), plugin_transform_typescript_lib = __webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.26.3_@babel+core@7.26.0/node_modules/@babel/plugin-transform-typescript/lib/index.js"), babel_plugin_parameter_decorator_lib = __webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js"), babel_plugin_parameter_decorator_lib_default = __webpack_require__.n(babel_plugin_parameter_decorator_lib), helper_plugin_utils_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.25.9/node_modules/@babel/helper-plugin-utils/lib/index.js");
      function createParamDecorator(paramIndex, decoratorExpression, isConstructor = false) {
        return lib.types.decorator(lib.types.functionExpression(null, [lib.types.identifier("target"), lib.types.identifier("key")], lib.types.blockStatement([lib.types.returnStatement(lib.types.callExpression(decoratorExpression, [lib.types.identifier("target"), lib.types.identifier(isConstructor ? "undefined" : "key"), lib.types.numericLiteral(paramIndex)]))])));
      }
      function parameterVisitor(classPath, path4) {
        if (path4.type !== "ClassMethod")
          return;
        if (path4.node.type !== "ClassMethod")
          return;
        if (path4.node.key.type !== "Identifier")
          return;
        const methodPath = path4, params = methodPath.get("params") || [];
        for (const param of params) {
          if ((param.node.type === "Identifier" || param.node.type === "ObjectPattern" ? param.node : param.node.type === "TSParameterProperty" && param.node.parameter.type === "Identifier" ? param.node.parameter : null) == null)
            continue;
          let resultantDecorator;
          for (const decorator of param.node.decorators || [])
            methodPath.node.kind === "constructor" ? (resultantDecorator = createParamDecorator(param.key, decorator.expression, true), classPath.node.decorators || (classPath.node.decorators = []), classPath.node.decorators.push(resultantDecorator)) : (resultantDecorator = createParamDecorator(param.key, decorator.expression, false), methodPath.node.decorators || (methodPath.node.decorators = []), methodPath.node.decorators.push(resultantDecorator));
          resultantDecorator && (param.node.decorators = null);
        }
      }
      function createVoidZero() {
        return lib.types.unaryExpression("void", lib.types.numericLiteral(0));
      }
      function getTypedNode(param) {
        return param == null ? null : param.type === "ClassProperty" || param.type === "Identifier" || param.type === "ObjectPattern" ? param : param.type === "AssignmentPattern" && param.left.type === "Identifier" ? param.left : param.type === "TSParameterProperty" ? getTypedNode(param.parameter) : null;
      }
      function serializeType(classPath, param) {
        const node = getTypedNode(param);
        if (node == null)
          return createVoidZero();
        if (!node.typeAnnotation || node.typeAnnotation.type !== "TSTypeAnnotation")
          return createVoidZero();
        const annotation = node.typeAnnotation.typeAnnotation;
        return serializeTypeNode(classPath.node.id ? classPath.node.id.name : "", annotation);
      }
      function serializeTypeReferenceNode(className, node) {
        const reference = serializeReference(node.typeName);
        return isClassType(className, reference) ? lib.types.identifier("Object") : lib.types.conditionalExpression(lib.types.binaryExpression("===", lib.types.unaryExpression("typeof", reference), lib.types.stringLiteral("undefined")), lib.types.identifier("Object"), lib.types.cloneDeep(reference));
      }
      function isClassType(className, node) {
        switch (node.type) {
          case "Identifier":
            return node.name === className;
          case "MemberExpression":
            return isClassType(className, node.object);
          default:
            throw new Error(`The property expression at ${node.start} is not valid as a Type to be used in Reflect.metadata`);
        }
      }
      function serializeReference(typeName) {
        return typeName.type === "Identifier" ? lib.types.identifier(typeName.name) : lib.types.memberExpression(serializeReference(typeName.left), typeName.right);
      }
      function serializeTypeNode(className, node) {
        if (node === undefined)
          return lib.types.identifier("Object");
        switch (node.type) {
          case "TSVoidKeyword":
          case "TSUndefinedKeyword":
          case "TSNullKeyword":
          case "TSNeverKeyword":
            return createVoidZero();
          case "TSParenthesizedType":
            return serializeTypeNode(className, node.typeAnnotation);
          case "TSFunctionType":
          case "TSConstructorType":
            return lib.types.identifier("Function");
          case "TSArrayType":
          case "TSTupleType":
            return lib.types.identifier("Array");
          case "TSTypePredicate":
          case "TSBooleanKeyword":
            return lib.types.identifier("Boolean");
          case "TSStringKeyword":
            return lib.types.identifier("String");
          case "TSObjectKeyword":
            return lib.types.identifier("Object");
          case "TSLiteralType":
            switch (node.literal.type) {
              case "StringLiteral":
                return lib.types.identifier("String");
              case "NumericLiteral":
                return lib.types.identifier("Number");
              case "BooleanLiteral":
                return lib.types.identifier("Boolean");
              default:
                throw new Error("Bad type for decorator" + node.literal);
            }
          case "TSNumberKeyword":
          case "TSBigIntKeyword":
            return lib.types.identifier("Number");
          case "TSSymbolKeyword":
            return lib.types.identifier("Symbol");
          case "TSTypeReference":
            return serializeTypeReferenceNode(className, node);
          case "TSIntersectionType":
          case "TSUnionType":
            return serializeTypeList(className, node.types);
          case "TSConditionalType":
            return serializeTypeList(className, [node.trueType, node.falseType]);
          case "TSTypeQuery":
          case "TSTypeOperator":
          case "TSIndexedAccessType":
          case "TSMappedType":
          case "TSTypeLiteral":
          case "TSAnyKeyword":
          case "TSUnknownKeyword":
          case "TSThisType":
            break;
          default:
            throw new Error("Bad type for decorator");
        }
        return lib.types.identifier("Object");
      }
      function serializeTypeList(className, types2) {
        let serializedUnion;
        for (let typeNode of types2) {
          for (;typeNode.type === "TSParenthesizedType"; )
            typeNode = typeNode.typeAnnotation;
          if (typeNode.type === "TSNeverKeyword")
            continue;
          if (typeNode.type === "TSNullKeyword" || typeNode.type === "TSUndefinedKeyword")
            continue;
          const serializedIndividual = serializeTypeNode(className, typeNode);
          if (lib.types.isIdentifier(serializedIndividual) && serializedIndividual.name === "Object")
            return serializedIndividual;
          if (serializedUnion) {
            if (!lib.types.isIdentifier(serializedUnion) || !lib.types.isIdentifier(serializedIndividual) || serializedUnion.name !== serializedIndividual.name)
              return lib.types.identifier("Object");
          } else
            serializedUnion = serializedIndividual;
        }
        return serializedUnion || createVoidZero();
      }
      function createMetadataDesignDecorator(design, typeArg) {
        return lib.types.decorator(lib.types.logicalExpression("||", lib.types.optionalCallExpression(lib.types.memberExpression(lib.types.identifier("Reflect"), lib.types.identifier("metadata")), [lib.types.stringLiteral(design), typeArg], true), lib.types.arrowFunctionExpression([lib.types.identifier("t")], lib.types.identifier("t"))));
      }
      function metadataVisitor(classPath, path4) {
        const field = path4.node, classNode = classPath.node;
        switch (field.type) {
          case "ClassMethod": {
            const decorators = field.kind === "constructor" ? classNode.decorators : field.decorators;
            if (!decorators || decorators.length === 0)
              return;
            decorators.push(createMetadataDesignDecorator("design:type", lib.types.identifier("Function"))), decorators.push(createMetadataDesignDecorator("design:paramtypes", lib.types.arrayExpression(field.params.map((param) => serializeType(classPath, param)))));
            break;
          }
          case "ClassProperty":
            if (!field.decorators || field.decorators.length === 0)
              return;
            if (!field.typeAnnotation || field.typeAnnotation.type !== "TSTypeAnnotation")
              return;
            field.decorators.push(createMetadataDesignDecorator("design:type", serializeType(classPath, field)));
        }
      }
      const babel_plugin_transform_typescript_metadata = (0, helper_plugin_utils_lib.declare)((api) => (api.assertVersion(7), { visitor: { Program(programPath) {
        programPath.traverse({ ClassDeclaration(path4) {
          for (const field of path4.get("body").get("body"))
            field.type !== "ClassMethod" && field.type !== "ClassProperty" || (parameterVisitor(path4, field), metadataVisitor(path4, field));
          path4.parentPath.scope.crawl();
        } });
      } } }));
      function importMetaEnvPlugin({ template, types: types2 }) {
        return { name: "@import-meta-env/babel", visitor: { Identifier(path4) {
          if (!types2.isIdentifier(path4))
            return;
          if (!types2.isMemberExpression(path4.parentPath) && !types2.isOptionalMemberExpression(path4.parentPath))
            return;
          if (!types2.isMemberExpression(path4.parentPath.node))
            return;
          const parentNode = path4.parentPath.node;
          if (!types2.isMetaProperty(parentNode.object))
            return;
          const parentNodeObjMeta = parentNode.object;
          parentNodeObjMeta.meta.name === "import" && parentNodeObjMeta.property.name === "meta" && parentNode.property.name === "env" && path4.parentPath.replaceWith(template.expression.ast("process.env"));
        } } };
      }
      function importMetaResolvePlugin(_ctx) {
        return { name: "import-meta-resolve", visitor: { Program(path4) {
          const metas = [];
          if (path4.traverse({ MemberExpression(memberExpPath) {
            const { node } = memberExpPath;
            node.object.type === "MetaProperty" && node.object.meta.name === "import" && node.object.property.name === "meta" && node.property.type === "Identifier" && node.property.name === "resolve" && metas.push(memberExpPath);
          } }), metas.length !== 0)
            for (const meta of metas)
              meta.replaceWith({ type: "ExpressionStatement", expression: { type: "Identifier", name: "jitiESMResolve" } });
        } } };
      }
      var template_lib = __webpack_require__("./node_modules/.pnpm/@babel+template@7.25.9/node_modules/@babel/template/lib/index.js");
      const _DRIVE_LETTER_START_RE = /^[A-Za-z]:\//;
      function normalizeWindowsPath(input = "") {
        return input ? input.replace(/\\/g, "/").replace(_DRIVE_LETTER_START_RE, (r) => r.toUpperCase()) : input;
      }
      const _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/;
      const pathe_ff20891b_isAbsolute = function(p) {
        return _IS_ABSOLUTE_RE.test(p);
      }, pathe_ff20891b_dirname = function(p) {
        const segments = normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1);
        return segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (pathe_ff20891b_isAbsolute(p) ? "/" : ".");
      };
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191], nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", reservedWords = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = { 5: ecma5AndLessKeywords, "5module": ecma5AndLessKeywords + " export import", 6: ecma5AndLessKeywords + " const class extends export import super" }, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65]");
      function isInAstralSet(code, set) {
        for (var pos = 65536, i2 = 0;i2 < set.length; i2 += 2) {
          if ((pos += set[i2]) > code)
            return false;
          if ((pos += set[i2 + 1]) >= code)
            return true;
        }
        return false;
      }
      function isIdentifierStart(code, astral) {
        return code < 65 ? code === 36 : code < 91 || (code < 97 ? code === 95 : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : astral !== false && isInAstralSet(code, astralIdentifierStartCodes)));
      }
      function isIdentifierChar(code, astral) {
        return code < 48 ? code === 36 : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? code === 95 : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : astral !== false && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
      }
      var TokenType = function(label, conf) {
        conf === undefined && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
      };
      function binop(name, prec) {
        return new TokenType(name, { beforeExpr: true, binop: prec });
      }
      var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true }, keywords = {};
      function kw(name, options) {
        return options === undefined && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
      }
      var types$1 = { num: new TokenType("num", startsExpr), regexp: new TokenType("regexp", startsExpr), string: new TokenType("string", startsExpr), name: new TokenType("name", startsExpr), privateId: new TokenType("privateId", startsExpr), eof: new TokenType("eof"), bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType("]"), braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType("}"), parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType(")"), comma: new TokenType(",", beforeExpr), semi: new TokenType(";", beforeExpr), colon: new TokenType(":", beforeExpr), dot: new TokenType("."), question: new TokenType("?", beforeExpr), questionDot: new TokenType("?."), arrow: new TokenType("=>", beforeExpr), template: new TokenType("template"), invalidTemplate: new TokenType("invalidTemplate"), ellipsis: new TokenType("...", beforeExpr), backQuote: new TokenType("`", startsExpr), dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType("=", { beforeExpr: true, isAssign: true }), assign: new TokenType("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop("||", 1), logicalAND: binop("&&", 2), bitwiseOR: binop("|", 3), bitwiseXOR: binop("^", 4), bitwiseAND: binop("&", 5), equality: binop("==/!=/===/!==", 6), relational: binop("</>/<=/>=", 7), bitShift: binop("<</>>/>>>", 8), plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop("%", 10), star: binop("*", 10), slash: binop("/", 10), starstar: new TokenType("**", { beforeExpr: true }), coalesce: binop("??", 1), _break: kw("break"), _case: kw("case", beforeExpr), _catch: kw("catch"), _continue: kw("continue"), _debugger: kw("debugger"), _default: kw("default", beforeExpr), _do: kw("do", { isLoop: true, beforeExpr: true }), _else: kw("else", beforeExpr), _finally: kw("finally"), _for: kw("for", { isLoop: true }), _function: kw("function", startsExpr), _if: kw("if"), _return: kw("return", beforeExpr), _switch: kw("switch"), _throw: kw("throw", beforeExpr), _try: kw("try"), _var: kw("var"), _const: kw("const"), _while: kw("while", { isLoop: true }), _with: kw("with"), _new: kw("new", { beforeExpr: true, startsExpr: true }), _this: kw("this", startsExpr), _super: kw("super", startsExpr), _class: kw("class", startsExpr), _extends: kw("extends", beforeExpr), _export: kw("export"), _import: kw("import", startsExpr), _null: kw("null", startsExpr), _true: kw("true", startsExpr), _false: kw("false", startsExpr), _in: kw("in", { beforeExpr: true, binop: 7 }), _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
      function isNewLine(code) {
        return code === 10 || code === 13 || code === 8232 || code === 8233;
      }
      function nextLineBreak(code, from, end) {
        end === undefined && (end = code.length);
        for (var i2 = from;i2 < end; i2++) {
          var next = code.charCodeAt(i2);
          if (isNewLine(next))
            return i2 < end - 1 && next === 13 && code.charCodeAt(i2 + 1) === 10 ? i2 + 2 : i2 + 1;
        }
        return -1;
      }
      var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn = Object.hasOwn || function(obj, propName) {
        return acorn_hasOwnProperty.call(obj, propName);
      }, isArray = Array.isArray || function(obj) {
        return acorn_toString.call(obj) === "[object Array]";
      }, regexpCache = Object.create(null);
      function wordsRegexp(words) {
        return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
      }
      function codePointToString(code) {
        return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
      }
      var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
        this.line = line, this.column = col;
      };
      Position.prototype.offset = function(n) {
        return new Position(this.line, this.column + n);
      };
      var SourceLocation = function(p, start, end) {
        this.start = start, this.end = end, p.sourceFile !== null && (this.source = p.sourceFile);
      };
      function getLineInfo(input, offset) {
        for (var line = 1, cur = 0;; ) {
          var nextBreak = nextLineBreak(input, cur, offset);
          if (nextBreak < 0)
            return new Position(line, offset - cur);
          ++line, cur = nextBreak;
        }
      }
      var defaultOptions = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, checkPrivateFields: true, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion = false;
      function getOptions(opts) {
        var options = {};
        for (var opt in defaultOptions)
          options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
        if (options.ecmaVersion === "latest" ? options.ecmaVersion = 1e8 : options.ecmaVersion == null ? (!warnedAboutEcmaVersion && typeof console == "object" && console.warn && (warnedAboutEcmaVersion = true, console.warn(`Since Acorn 8.0.0, options.ecmaVersion is required.
Defaulting to 2020, but this will stop working in the future.`)), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), options.allowReserved == null && (options.allowReserved = options.ecmaVersion < 5), opts && opts.allowHashBang != null || (options.allowHashBang = options.ecmaVersion >= 14), isArray(options.onToken)) {
          var tokens = options.onToken;
          options.onToken = function(token) {
            return tokens.push(token);
          };
        }
        return isArray(options.onComment) && (options.onComment = function(options2, array) {
          return function(block, text, start, end, startLoc, endLoc) {
            var comment = { type: block ? "Block" : "Line", value: text, start, end };
            options2.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
          };
        }(options, options.onComment)), options;
      }
      function functionFlags(async, generator) {
        return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
      }
      var Parser = function(options, input, startPos) {
        this.options = options = getOptions(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
        var reserved = "";
        options.allowReserved !== true && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3], options.sourceType === "module" && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
        var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
        this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf(`
`, startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = options.sourceType === "module", this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = Object.create(null), this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!" && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
      }, prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
      Parser.prototype.parse = function() {
        var node = this.options.program || this.startNode();
        return this.nextToken(), this.parseTopLevel(node);
      }, prototypeAccessors.inFunction.get = function() {
        return (2 & this.currentVarScope().flags) > 0;
      }, prototypeAccessors.inGenerator.get = function() {
        return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
      }, prototypeAccessors.inAsync.get = function() {
        return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
      }, prototypeAccessors.canAwait.get = function() {
        for (var i2 = this.scopeStack.length - 1;i2 >= 0; i2--) {
          var scope = this.scopeStack[i2];
          if (scope.inClassFieldInit || 256 & scope.flags)
            return false;
          if (2 & scope.flags)
            return (4 & scope.flags) > 0;
        }
        return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
      }, prototypeAccessors.allowSuper.get = function() {
        var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
        return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
      }, prototypeAccessors.allowDirectSuper.get = function() {
        return (128 & this.currentThisScope().flags) > 0;
      }, prototypeAccessors.treatFunctionsAsVar.get = function() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      }, prototypeAccessors.allowNewDotTarget.get = function() {
        var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
        return (258 & flags) > 0 || inClassFieldInit;
      }, prototypeAccessors.inClassStaticBlock.get = function() {
        return (256 & this.currentVarScope().flags) > 0;
      }, Parser.extend = function() {
        for (var plugins = [], len = arguments.length;len--; )
          plugins[len] = arguments[len];
        for (var cls = this, i2 = 0;i2 < plugins.length; i2++)
          cls = plugins[i2](cls);
        return cls;
      }, Parser.parse = function(input, options) {
        return new this(options, input).parse();
      }, Parser.parseExpressionAt = function(input, pos, options) {
        var parser = new this(options, input, pos);
        return parser.nextToken(), parser.parseExpression();
      }, Parser.tokenizer = function(input, options) {
        return new this(options, input);
      }, Object.defineProperties(Parser.prototype, prototypeAccessors);
      var pp$9 = Parser.prototype, literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
      pp$9.strictDirective = function(start) {
        if (this.options.ecmaVersion < 5)
          return false;
        for (;; ) {
          skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
          var match = literal.exec(this.input.slice(start));
          if (!match)
            return false;
          if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace.lastIndex = start + match[0].length;
            var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
          }
          start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, this.input[start] === ";" && start++;
        }
      }, pp$9.eat = function(type) {
        return this.type === type && (this.next(), true);
      }, pp$9.isContextual = function(name) {
        return this.type === types$1.name && this.value === name && !this.containsEsc;
      }, pp$9.eatContextual = function(name) {
        return !!this.isContextual(name) && (this.next(), true);
      }, pp$9.expectContextual = function(name) {
        this.eatContextual(name) || this.unexpected();
      }, pp$9.canInsertSemicolon = function() {
        return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      }, pp$9.insertSemicolon = function() {
        if (this.canInsertSemicolon())
          return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
      }, pp$9.semicolon = function() {
        this.eat(types$1.semi) || this.insertSemicolon() || this.unexpected();
      }, pp$9.afterTrailingComma = function(tokType, notNext) {
        if (this.type === tokType)
          return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
      }, pp$9.expect = function(type) {
        this.eat(type) || this.unexpected();
      }, pp$9.unexpected = function(pos) {
        this.raise(pos != null ? pos : this.start, "Unexpected token");
      };
      var DestructuringErrors = function() {
        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
      };
      pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
        if (refDestructuringErrors) {
          refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
          var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
          parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
        }
      }, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
        if (!refDestructuringErrors)
          return false;
        var { shorthandAssign, doubleProto } = refDestructuringErrors;
        if (!andThrow)
          return shorthandAssign >= 0 || doubleProto >= 0;
        shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
      }, pp$9.checkYieldAwaitInDefaultParams = function() {
        this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
      }, pp$9.isSimpleAssignTarget = function(expr) {
        return expr.type === "ParenthesizedExpression" ? this.isSimpleAssignTarget(expr.expression) : expr.type === "Identifier" || expr.type === "MemberExpression";
      };
      var pp$8 = Parser.prototype;
      pp$8.parseTopLevel = function(node) {
        var exports2 = Object.create(null);
        for (node.body || (node.body = []);this.type !== types$1.eof; ) {
          var stmt = this.parseStatement(null, true, exports2);
          node.body.push(stmt);
        }
        if (this.inModule)
          for (var i2 = 0, list2 = Object.keys(this.undefinedExports);i2 < list2.length; i2 += 1) {
            var name = list2[i2];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
        return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
      };
      var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
      pp$8.isLet = function(context) {
        if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
          return false;
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 91 || nextCh === 92)
          return true;
        if (context)
          return false;
        if (nextCh === 123 || nextCh > 55295 && nextCh < 56320)
          return true;
        if (isIdentifierStart(nextCh, true)) {
          for (var pos = next + 1;isIdentifierChar(nextCh = this.input.charCodeAt(pos), true); )
            ++pos;
          if (nextCh === 92 || nextCh > 55295 && nextCh < 56320)
            return true;
          var ident = this.input.slice(next, pos);
          if (!keywordRelationalOperator.test(ident))
            return true;
        }
        return false;
      }, pp$8.isAsyncFunction = function() {
        if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
          return false;
        skipWhiteSpace.lastIndex = this.pos;
        var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
        return !(lineBreak.test(this.input.slice(this.pos, next)) || this.input.slice(next, next + 8) !== "function" || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
      }, pp$8.parseStatement = function(context, topLevel, exports2) {
        var kind, starttype = this.type, node = this.startNode();
        switch (this.isLet(context) && (starttype = types$1._var, kind = "let"), starttype) {
          case types$1._break:
          case types$1._continue:
            return this.parseBreakContinueStatement(node, starttype.keyword);
          case types$1._debugger:
            return this.parseDebuggerStatement(node);
          case types$1._do:
            return this.parseDoStatement(node);
          case types$1._for:
            return this.parseForStatement(node);
          case types$1._function:
            return context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
          case types$1._class:
            return context && this.unexpected(), this.parseClass(node, true);
          case types$1._if:
            return this.parseIfStatement(node);
          case types$1._return:
            return this.parseReturnStatement(node);
          case types$1._switch:
            return this.parseSwitchStatement(node);
          case types$1._throw:
            return this.parseThrowStatement(node);
          case types$1._try:
            return this.parseTryStatement(node);
          case types$1._const:
          case types$1._var:
            return kind = kind || this.value, context && kind !== "var" && this.unexpected(), this.parseVarStatement(node, kind);
          case types$1._while:
            return this.parseWhileStatement(node);
          case types$1._with:
            return this.parseWithStatement(node);
          case types$1.braceL:
            return this.parseBlock(true, node);
          case types$1.semi:
            return this.parseEmptyStatement(node);
          case types$1._export:
          case types$1._import:
            if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
              skipWhiteSpace.lastIndex = this.pos;
              var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46)
                return this.parseExpressionStatement(node, this.parseExpression());
            }
            return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports2);
          default:
            if (this.isAsyncFunction())
              return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
            var maybeName = this.value, expr = this.parseExpression();
            return starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
        }
      }, pp$8.parseBreakContinueStatement = function(node, keyword) {
        var isBreak = keyword === "break";
        this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
        for (var i2 = 0;i2 < this.labels.length; ++i2) {
          var lab = this.labels[i2];
          if (node.label == null || lab.name === node.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop"))
              break;
            if (node.label && isBreak)
              break;
          }
        }
        return i2 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
      }, pp$8.parseDebuggerStatement = function(node) {
        return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
      }, pp$8.parseDoStatement = function(node) {
        return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
      }, pp$8.parseForStatement = function(node) {
        this.next();
        var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
        if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1.parenL), this.type === types$1.semi)
          return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
        var isLet = this.isLet();
        if (this.type === types$1._var || this.type === types$1._const || isLet) {
          var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
          return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1 ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
        }
        var startsWithLet = this.isContextual("let"), isForOf = false, containsEsc = this.containsEsc, refDestructuringErrors = new DestructuringErrors, initPos = this.start, init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
        return this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (awaitAt > -1 ? (this.type === types$1._in && this.unexpected(awaitAt), node.await = true) : isForOf && this.options.ecmaVersion >= 8 && (init.start !== initPos || containsEsc || init.type !== "Identifier" || init.name !== "async" ? this.options.ecmaVersion >= 9 && (node.await = false) : this.unexpected()), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
      }, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
        return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
      }, pp$8.parseIfStatement = function(node) {
        return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
      }, pp$8.parseReturnStatement = function(node) {
        return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
      }, pp$8.parseSwitchStatement = function(node) {
        var cur;
        this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
        for (var sawDefault = false;this.type !== types$1.braceR; )
          if (this.type === types$1._case || this.type === types$1._default) {
            var isCase = this.type === types$1._case;
            cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$1.colon);
          } else
            cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
        return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
      }, pp$8.parseThrowStatement = function(node) {
        return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
      };
      var empty$1 = [];
      pp$8.parseCatchClauseParam = function() {
        var param = this.parseBindingAtom(), simple = param.type === "Identifier";
        return this.enterScope(simple ? 32 : 0), this.checkLValPattern(param, simple ? 4 : 2), this.expect(types$1.parenR), param;
      }, pp$8.parseTryStatement = function(node) {
        if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1._catch) {
          var clause = this.startNode();
          this.next(), this.eat(types$1.parenL) ? clause.param = this.parseCatchClauseParam() : (this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0)), clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
        }
        return node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
      }, pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
        return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
      }, pp$8.parseWhileStatement = function(node) {
        return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
      }, pp$8.parseWithStatement = function(node) {
        return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
      }, pp$8.parseEmptyStatement = function(node) {
        return this.next(), this.finishNode(node, "EmptyStatement");
      }, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
        for (var i$1 = 0, list2 = this.labels;i$1 < list2.length; i$1 += 1) {
          list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
        }
        for (var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null, i2 = this.labels.length - 1;i2 >= 0; i2--) {
          var label$1 = this.labels[i2];
          if (label$1.statementStart !== node.start)
            break;
          label$1.statementStart = this.start, label$1.kind = kind;
        }
        return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
      }, pp$8.parseExpressionStatement = function(node, expr) {
        return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
      }, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
        for (createNewLexicalScope === undefined && (createNewLexicalScope = true), node === undefined && (node = this.startNode()), node.body = [], this.expect(types$1.braceL), createNewLexicalScope && this.enterScope(0);this.type !== types$1.braceR; ) {
          var stmt = this.parseStatement(null);
          node.body.push(stmt);
        }
        return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
      }, pp$8.parseFor = function(node, init) {
        return node.init = init, this.expect(types$1.semi), node.test = this.type === types$1.semi ? null : this.parseExpression(), this.expect(types$1.semi), node.update = this.type === types$1.parenR ? null : this.parseExpression(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
      }, pp$8.parseForIn = function(node, init) {
        var isForIn = this.type === types$1._in;
        return this.next(), init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier") && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
      }, pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
        for (node.declarations = [], node.kind = kind;; ) {
          var decl = this.startNode();
          if (this.parseVarId(decl, kind), this.eat(types$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : allowMissingInitializer || kind !== "const" || this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? allowMissingInitializer || decl.id.type === "Identifier" || isFor && (this.type === types$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1.comma))
            break;
        }
        return node;
      }, pp$8.parseVarId = function(decl, kind) {
        decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, kind === "var" ? 1 : 2, false);
      };
      var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
      function isPrivateNameConflicted(privateNameMap, element) {
        var name = element.key.name, curr = privateNameMap[name], next = "true";
        return element.type !== "MethodDefinition" || element.kind !== "get" && element.kind !== "set" || (next = (element.static ? "s" : "i") + element.kind), curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget" ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
      }
      function checkKeyName(node, name) {
        var { computed, key } = node;
        return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
      }
      pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
        this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
      }, pp$8.parseFunctionParams = function(node) {
        this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
      }, pp$8.parseClass = function(node, isStatement) {
        this.next();
        var oldStrict = this.strict;
        this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
        var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
        for (classBody.body = [], this.expect(types$1.braceL);this.type !== types$1.braceR; ) {
          var element = this.parseClassElement(node.superClass !== null);
          element && (classBody.body.push(element), element.type === "MethodDefinition" && element.kind === "constructor" ? (hadConstructor && this.raiseRecoverable(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
        }
        return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
      }, pp$8.parseClassElement = function(constructorAllowsSuper) {
        if (this.eat(types$1.semi))
          return null;
        var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = false, isAsync = false, kind = "method", isStatic = false;
        if (this.eatContextual("static")) {
          if (ecmaVersion >= 13 && this.eat(types$1.braceL))
            return this.parseClassStaticBlock(node), node;
          this.isClassElementNameStart() || this.type === types$1.star ? isStatic = true : keyName = "static";
        }
        if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star) && (isGenerator = true), !keyName && !isAsync && !isGenerator) {
          var lastValue = this.value;
          (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
        }
        if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
          var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
          isConstructor && kind !== "method" && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
        } else
          this.parseClassField(node);
        return node;
      }, pp$8.isClassElementNameStart = function() {
        return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
      }, pp$8.parseClassElementName = function(element) {
        this.type === types$1.privateId ? (this.value === "constructor" && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
      }, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
        var key = method.key;
        method.kind === "constructor" ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
        var value2 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
        return method.kind === "get" && value2.params.length !== 0 && this.raiseRecoverable(value2.start, "getter should have no params"), method.kind === "set" && value2.params.length !== 1 && this.raiseRecoverable(value2.start, "setter should have exactly one param"), method.kind === "set" && value2.params[0].type === "RestElement" && this.raiseRecoverable(value2.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
      }, pp$8.parseClassField = function(field) {
        if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1.eq)) {
          var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
          scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
        } else
          field.value = null;
        return this.semicolon(), this.finishNode(field, "PropertyDefinition");
      }, pp$8.parseClassStaticBlock = function(node) {
        node.body = [];
        var oldLabels = this.labels;
        for (this.labels = [], this.enterScope(320);this.type !== types$1.braceR; ) {
          var stmt = this.parseStatement(null);
          node.body.push(stmt);
        }
        return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
      }, pp$8.parseClassId = function(node, isStatement) {
        this.type === types$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (isStatement === true && this.unexpected(), node.id = null);
      }, pp$8.parseClassSuper = function(node) {
        node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
      }, pp$8.enterClassBody = function() {
        var element = { declared: Object.create(null), used: [] };
        return this.privateNameStack.push(element), element.declared;
      }, pp$8.exitClassBody = function() {
        var ref2 = this.privateNameStack.pop(), declared = ref2.declared, used = ref2.used;
        if (this.options.checkPrivateFields)
          for (var len = this.privateNameStack.length, parent = len === 0 ? null : this.privateNameStack[len - 1], i2 = 0;i2 < used.length; ++i2) {
            var id = used[i2];
            hasOwn(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
      }, pp$8.parseExportAllDeclaration = function(node, exports2) {
        return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports2, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
      }, pp$8.parseExport = function(node, exports2) {
        if (this.next(), this.eat(types$1.star))
          return this.parseExportAllDeclaration(node, exports2);
        if (this.eat(types$1._default))
          return this.checkExport(exports2, "default", this.lastTokStart), node.declaration = this.parseExportDefaultDeclaration(), this.finishNode(node, "ExportDefaultDeclaration");
        if (this.shouldParseExportStatement())
          node.declaration = this.parseExportDeclaration(node), node.declaration.type === "VariableDeclaration" ? this.checkVariableExport(exports2, node.declaration.declarations) : this.checkExport(exports2, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
        else {
          if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports2), this.eatContextual("from"))
            this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause());
          else {
            for (var i2 = 0, list2 = node.specifiers;i2 < list2.length; i2 += 1) {
              var spec = list2[i2];
              this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), spec.local.type === "Literal" && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
            }
            node.source = null;
          }
          this.semicolon();
        }
        return this.finishNode(node, "ExportNamedDeclaration");
      }, pp$8.parseExportDeclaration = function(node) {
        return this.parseStatement(null);
      }, pp$8.parseExportDefaultDeclaration = function() {
        var isAsync;
        if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
          var fNode = this.startNode();
          return this.next(), isAsync && this.next(), this.parseFunction(fNode, 4 | FUNC_STATEMENT, false, isAsync);
        }
        if (this.type === types$1._class) {
          var cNode = this.startNode();
          return this.parseClass(cNode, "nullableID");
        }
        var declaration = this.parseMaybeAssign();
        return this.semicolon(), declaration;
      }, pp$8.checkExport = function(exports2, name, pos) {
        exports2 && (typeof name != "string" && (name = name.type === "Identifier" ? name.name : name.value), hasOwn(exports2, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports2[name] = true);
      }, pp$8.checkPatternExport = function(exports2, pat) {
        var type = pat.type;
        if (type === "Identifier")
          this.checkExport(exports2, pat, pat.start);
        else if (type === "ObjectPattern")
          for (var i2 = 0, list2 = pat.properties;i2 < list2.length; i2 += 1) {
            var prop = list2[i2];
            this.checkPatternExport(exports2, prop);
          }
        else if (type === "ArrayPattern")
          for (var i$1 = 0, list$1 = pat.elements;i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            elt && this.checkPatternExport(exports2, elt);
          }
        else
          type === "Property" ? this.checkPatternExport(exports2, pat.value) : type === "AssignmentPattern" ? this.checkPatternExport(exports2, pat.left) : type === "RestElement" && this.checkPatternExport(exports2, pat.argument);
      }, pp$8.checkVariableExport = function(exports2, decls) {
        if (exports2)
          for (var i2 = 0, list2 = decls;i2 < list2.length; i2 += 1) {
            var decl = list2[i2];
            this.checkPatternExport(exports2, decl.id);
          }
      }, pp$8.shouldParseExportStatement = function() {
        return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
      }, pp$8.parseExportSpecifier = function(exports2) {
        var node = this.startNode();
        return node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports2, node.exported, node.exported.start), this.finishNode(node, "ExportSpecifier");
      }, pp$8.parseExportSpecifiers = function(exports2) {
        var nodes = [], first = true;
        for (this.expect(types$1.braceL);!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
            break;
          nodes.push(this.parseExportSpecifier(exports2));
        }
        return nodes;
      }, pp$8.parseImport = function(node) {
        return this.next(), this.type === types$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()), this.options.ecmaVersion >= 16 && (node.attributes = this.parseWithClause()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
      }, pp$8.parseImportSpecifier = function() {
        var node = this.startNode();
        return node.imported = this.parseModuleExportName(), this.eatContextual("as") ? node.local = this.parseIdent() : (this.checkUnreserved(node.imported), node.local = node.imported), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportSpecifier");
      }, pp$8.parseImportDefaultSpecifier = function() {
        var node = this.startNode();
        return node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportDefaultSpecifier");
      }, pp$8.parseImportNamespaceSpecifier = function() {
        var node = this.startNode();
        return this.next(), this.expectContextual("as"), node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), this.finishNode(node, "ImportNamespaceSpecifier");
      }, pp$8.parseImportSpecifiers = function() {
        var nodes = [], first = true;
        if (this.type === types$1.name && (nodes.push(this.parseImportDefaultSpecifier()), !this.eat(types$1.comma)))
          return nodes;
        if (this.type === types$1.star)
          return nodes.push(this.parseImportNamespaceSpecifier()), nodes;
        for (this.expect(types$1.braceL);!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
            break;
          nodes.push(this.parseImportSpecifier());
        }
        return nodes;
      }, pp$8.parseWithClause = function() {
        var nodes = [];
        if (!this.eat(types$1._with))
          return nodes;
        this.expect(types$1.braceL);
        for (var attributeKeys = {}, first = true;!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
            break;
          var attr = this.parseImportAttribute(), keyName = attr.key.type === "Identifier" ? attr.key.name : attr.key.value;
          hasOwn(attributeKeys, keyName) && this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'"), attributeKeys[keyName] = true, nodes.push(attr);
        }
        return nodes;
      }, pp$8.parseImportAttribute = function() {
        var node = this.startNode();
        return node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never"), this.expect(types$1.colon), this.type !== types$1.string && this.unexpected(), node.value = this.parseExprAtom(), this.finishNode(node, "ImportAttribute");
      }, pp$8.parseModuleExportName = function() {
        if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
          var stringLiteral = this.parseLiteral(this.value);
          return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
        }
        return this.parseIdent(true);
      }, pp$8.adaptDirectivePrologue = function(statements) {
        for (var i2 = 0;i2 < statements.length && this.isDirectiveCandidate(statements[i2]); ++i2)
          statements[i2].directive = statements[i2].expression.raw.slice(1, -1);
      }, pp$8.isDirectiveCandidate = function(statement) {
        return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value == "string" && (this.input[statement.start] === '"' || this.input[statement.start] === "'");
      };
      var pp$7 = Parser.prototype;
      pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 6 && node)
          switch (node.type) {
            case "Identifier":
              this.inAsync && node.name === "await" && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
              for (var i2 = 0, list2 = node.properties;i2 < list2.length; i2 += 1) {
                var prop = list2[i2];
                this.toAssignable(prop, isBinding), prop.type !== "RestElement" || prop.argument.type !== "ArrayPattern" && prop.argument.type !== "ObjectPattern" || this.raise(prop.argument.start, "Unexpected token");
              }
              break;
            case "Property":
              node.kind !== "init" && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement", this.toAssignable(node.argument, isBinding), node.argument.type === "AssignmentPattern" && this.raise(node.argument.start, "Rest elements cannot have a default value");
              break;
            case "AssignmentExpression":
              node.operator !== "=" && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding)
                break;
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
        else
          refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
        return node;
      }, pp$7.toAssignableList = function(exprList, isBinding) {
        for (var end = exprList.length, i2 = 0;i2 < end; i2++) {
          var elt = exprList[i2];
          elt && this.toAssignable(elt, isBinding);
        }
        if (end) {
          var last = exprList[end - 1];
          this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier" && this.unexpected(last.argument.start);
        }
        return exprList;
      }, pp$7.parseSpread = function(refDestructuringErrors) {
        var node = this.startNode();
        return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
      }, pp$7.parseRestBinding = function() {
        var node = this.startNode();
        return this.next(), this.options.ecmaVersion === 6 && this.type !== types$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
      }, pp$7.parseBindingAtom = function() {
        if (this.options.ecmaVersion >= 6)
          switch (this.type) {
            case types$1.bracketL:
              var node = this.startNode();
              return this.next(), node.elements = this.parseBindingList(types$1.bracketR, true, true), this.finishNode(node, "ArrayPattern");
            case types$1.braceL:
              return this.parseObj(true);
          }
        return this.parseIdent();
      }, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
        for (var elts = [], first = true;!this.eat(close); )
          if (first ? first = false : this.expect(types$1.comma), allowEmpty && this.type === types$1.comma)
            elts.push(null);
          else {
            if (allowTrailingComma && this.afterTrailingComma(close))
              break;
            if (this.type === types$1.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest), elts.push(rest), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.expect(close);
              break;
            }
            elts.push(this.parseAssignableListItem(allowModifiers));
          }
        return elts;
      }, pp$7.parseAssignableListItem = function(allowModifiers) {
        var elem = this.parseMaybeDefault(this.start, this.startLoc);
        return this.parseBindingListItem(elem), elem;
      }, pp$7.parseBindingListItem = function(param) {
        return param;
      }, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
        if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1.eq))
          return left;
        var node = this.startNodeAt(startPos, startLoc);
        return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
      }, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
        bindingType === undefined && (bindingType = 0);
        var isBind = bindingType !== 0;
        switch (expr.type) {
          case "Identifier":
            this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (bindingType === 2 && expr.name === "let" && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), bindingType !== 5 && this.declareName(expr.name, bindingType, expr.start));
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            isBind && this.raiseRecoverable(expr.start, "Binding member expression");
            break;
          case "ParenthesizedExpression":
            return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
          default:
            this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
        }
      }, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
        switch (bindingType === undefined && (bindingType = 0), expr.type) {
          case "ObjectPattern":
            for (var i2 = 0, list2 = expr.properties;i2 < list2.length; i2 += 1) {
              var prop = list2[i2];
              this.checkLValInnerPattern(prop, bindingType, checkClashes);
            }
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements;i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
            }
            break;
          default:
            this.checkLValSimple(expr, bindingType, checkClashes);
        }
      }, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
        switch (bindingType === undefined && (bindingType = 0), expr.type) {
          case "Property":
            this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
            break;
          case "AssignmentPattern":
            this.checkLValPattern(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLValPattern(expr.argument, bindingType, checkClashes);
            break;
          default:
            this.checkLValPattern(expr, bindingType, checkClashes);
        }
      };
      var TokContext = function(token, isExpr, preserveSpace, override, generator) {
        this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
      }, types = { b_stat: new TokContext("{", false), b_expr: new TokContext("{", true), b_tmpl: new TokContext("${", false), p_stat: new TokContext("(", false), p_expr: new TokContext("(", true), q_tmpl: new TokContext("`", true, true, function(p) {
        return p.tryReadTemplateToken();
      }), f_stat: new TokContext("function", false), f_expr: new TokContext("function", true), f_expr_gen: new TokContext("function", true, false, null, true), f_gen: new TokContext("function", false, false, null, true) }, pp$6 = Parser.prototype;
      pp$6.initialContext = function() {
        return [types.b_stat];
      }, pp$6.curContext = function() {
        return this.context[this.context.length - 1];
      }, pp$6.braceIsBlock = function(prevType) {
        var parent = this.curContext();
        return parent === types.f_expr || parent === types.f_stat || (prevType !== types$1.colon || parent !== types.b_stat && parent !== types.b_expr ? prevType === types$1._return || prevType === types$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow || (prevType === types$1.braceL ? parent === types.b_stat : prevType !== types$1._var && prevType !== types$1._const && prevType !== types$1.name && !this.exprAllowed) : !parent.isExpr);
      }, pp$6.inGeneratorContext = function() {
        for (var i2 = this.context.length - 1;i2 >= 1; i2--) {
          var context = this.context[i2];
          if (context.token === "function")
            return context.generator;
        }
        return false;
      }, pp$6.updateContext = function(prevType) {
        var update, type = this.type;
        type.keyword && prevType === types$1.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
      }, pp$6.overrideContext = function(tokenCtx) {
        this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
      }, types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
        if (this.context.length !== 1) {
          var out = this.context.pop();
          out === types.b_stat && this.curContext().token === "function" && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
        } else
          this.exprAllowed = true;
      }, types$1.braceL.updateContext = function(prevType) {
        this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr), this.exprAllowed = true;
      }, types$1.dollarBraceL.updateContext = function() {
        this.context.push(types.b_tmpl), this.exprAllowed = true;
      }, types$1.parenL.updateContext = function(prevType) {
        var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
        this.context.push(statementParens ? types.p_stat : types.p_expr), this.exprAllowed = true;
      }, types$1.incDec.updateContext = function() {
      }, types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
        !prevType.beforeExpr || prevType === types$1._else || prevType === types$1.semi && this.curContext() !== types.p_stat || prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat ? this.context.push(types.f_stat) : this.context.push(types.f_expr), this.exprAllowed = false;
      }, types$1.colon.updateContext = function() {
        this.curContext().token === "function" && this.context.pop(), this.exprAllowed = true;
      }, types$1.backQuote.updateContext = function() {
        this.curContext() === types.q_tmpl ? this.context.pop() : this.context.push(types.q_tmpl), this.exprAllowed = false;
      }, types$1.star.updateContext = function(prevType) {
        if (prevType === types$1._function) {
          var index = this.context.length - 1;
          this.context[index] === types.f_expr ? this.context[index] = types.f_expr_gen : this.context[index] = types.f_gen;
        }
        this.exprAllowed = true;
      }, types$1.name.updateContext = function(prevType) {
        var allowed = false;
        this.options.ecmaVersion >= 6 && prevType !== types$1.dot && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
      };
      var pp$5 = Parser.prototype;
      function isLocalVariableAccess(node) {
        return node.type === "Identifier" || node.type === "ParenthesizedExpression" && isLocalVariableAccess(node.expression);
      }
      function isPrivateFieldAccess(node) {
        return node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" || node.type === "ChainExpression" && isPrivateFieldAccess(node.expression) || node.type === "ParenthesizedExpression" && isPrivateFieldAccess(node.expression);
      }
      pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
        if (!(this.options.ecmaVersion >= 9 && prop.type === "SpreadElement" || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
          var name, key = prop.key;
          switch (key.type) {
            case "Identifier":
              name = key.name;
              break;
            case "Literal":
              name = String(key.value);
              break;
            default:
              return;
          }
          var kind = prop.kind;
          if (this.options.ecmaVersion >= 6)
            name === "__proto__" && kind === "init" && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
          else {
            var other = propHash[name = "$" + name];
            if (other)
              (kind === "init" ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
            else
              other = propHash[name] = { init: false, get: false, set: false };
            other[kind] = true;
          }
        }
      }, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
        if (this.type === types$1.comma) {
          var node = this.startNodeAt(startPos, startLoc);
          for (node.expressions = [expr];this.eat(types$1.comma); )
            node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
          return this.finishNode(node, "SequenceExpression");
        }
        return expr;
      }, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
        if (this.isContextual("yield")) {
          if (this.inGenerator)
            return this.parseYield(forInit);
          this.exprAllowed = false;
        }
        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
        refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors, ownDestructuringErrors = true);
        var startPos = this.start, startLoc = this.startLoc;
        this.type !== types$1.parenL && this.type !== types$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = forInit === "await");
        var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
        if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
          var node = this.startNodeAt(startPos, startLoc);
          return node.operator = this.value, this.type === types$1.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
        }
        return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
      }, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors))
          return expr;
        if (this.eat(types$1.question)) {
          var node = this.startNodeAt(startPos, startLoc);
          return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
        }
        return expr;
      }, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
        return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
      }, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
        var prec = this.type.binop;
        if (prec != null && (!forInit || this.type !== types$1._in) && prec > minPrec) {
          var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND, coalesce = this.type === types$1.coalesce;
          coalesce && (prec = types$1.logicalAND.binop);
          var op = this.value;
          this.next();
          var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
          return (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
        }
        return left;
      }, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
        right.type === "PrivateIdentifier" && this.raise(right.start, "Private identifier can only be left side of binary expression");
        var node = this.startNodeAt(startPos, startLoc);
        return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
      }, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
        var expr, startPos = this.start, startLoc = this.startLoc;
        if (this.isContextual("await") && this.canAwait)
          expr = this.parseAwait(forInit), sawUnary = true;
        else if (this.type.prefix) {
          var node = this.startNode(), update = this.type === types$1.incDec;
          node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && node.operator === "delete" && isLocalVariableAccess(node.argument) ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : node.operator === "delete" && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
        } else if (sawUnary || this.type !== types$1.privateId) {
          if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors))
            return expr;
          for (;this.type.postfix && !this.canInsertSemicolon(); ) {
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
          }
        } else
          (forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1._in && this.unexpected();
        return incDec || !this.eat(types$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
      }, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
        var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
        if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
          return expr;
        var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
        return refDestructuringErrors && result.type === "MemberExpression" && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
      }, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
        for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false;; ) {
          var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
          if (element.optional && (optionalChained = true), element === base || element.type === "ArrowFunctionExpression") {
            if (optionalChained) {
              var chainNode = this.startNodeAt(startPos, startLoc);
              chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
            }
            return element;
          }
          base = element;
        }
      }, pp$5.shouldParseAsyncArrow = function() {
        return !this.canInsertSemicolon() && this.eat(types$1.arrow);
      }, pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
      }, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
        var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1.questionDot);
        noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
        var computed = this.eat(types$1.bracketL);
        if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
          var node = this.startNodeAt(startPos, startLoc);
          node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1.bracketR)) : this.type === types$1.privateId && base.type !== "Super" ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent(this.options.allowReserved !== "never"), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
        } else if (!noCalls && this.eat(types$1.parenL)) {
          var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
          var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
          if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow())
            return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
          this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
        } else if (this.type === types$1.backQuote) {
          (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
          var node$2 = this.startNodeAt(startPos, startLoc);
          node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
        }
        return base;
      }, pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
        this.type === types$1.slash && this.readRegexp();
        var node, canBeArrow = this.potentialArrowAt === this.start;
        switch (this.type) {
          case types$1._super:
            return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL && this.unexpected(), this.finishNode(node, "Super");
          case types$1._this:
            return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
          case types$1.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function))
              return this.overrideContext(types.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types$1.arrow))
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
              if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc))
                return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
            }
            return id;
          case types$1.regexp:
            var value2 = this.value;
            return (node = this.parseLiteral(value2.value)).regex = { pattern: value2.pattern, flags: value2.flags }, node;
          case types$1.num:
          case types$1.string:
            return this.parseLiteral(this.value);
          case types$1._null:
          case types$1._true:
          case types$1._false:
            return (node = this.startNode()).value = this.type === types$1._null ? null : this.type === types$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
          case types$1.parenL:
            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
            return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
          case types$1.bracketL:
            return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
          case types$1.braceL:
            return this.overrideContext(types.b_expr), this.parseObj(false, refDestructuringErrors);
          case types$1._function:
            return node = this.startNode(), this.next(), this.parseFunction(node, 0);
          case types$1._class:
            return this.parseClass(this.startNode(), false);
          case types$1._new:
            return this.parseNew();
          case types$1.backQuote:
            return this.parseTemplate();
          case types$1._import:
            return this.options.ecmaVersion >= 11 ? this.parseExprImport(forNew) : this.unexpected();
          default:
            return this.parseExprAtomDefault();
        }
      }, pp$5.parseExprAtomDefault = function() {
        this.unexpected();
      }, pp$5.parseExprImport = function(forNew) {
        var node = this.startNode();
        if (this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import"), this.next(), this.type === types$1.parenL && !forNew)
          return this.parseDynamicImport(node);
        if (this.type === types$1.dot) {
          var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
          return meta.name = "import", node.meta = this.finishNode(meta, "Identifier"), this.parseImportMeta(node);
        }
        this.unexpected();
      }, pp$5.parseDynamicImport = function(node) {
        if (this.next(), node.source = this.parseMaybeAssign(), this.options.ecmaVersion >= 16)
          this.eat(types$1.parenR) ? node.options = null : (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) ? node.options = null : (node.options = this.parseMaybeAssign(), this.eat(types$1.parenR) || (this.expect(types$1.comma), this.afterTrailingComma(types$1.parenR) || this.unexpected())));
        else if (!this.eat(types$1.parenR)) {
          var errorPos = this.start;
          this.eat(types$1.comma) && this.eat(types$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
        }
        return this.finishNode(node, "ImportExpression");
      }, pp$5.parseImportMeta = function(node) {
        this.next();
        var containsEsc = this.containsEsc;
        return node.property = this.parseIdent(true), node.property.name !== "meta" && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), this.options.sourceType === "module" || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
      }, pp$5.parseLiteral = function(value2) {
        var node = this.startNode();
        return node.value = value2, node.raw = this.input.slice(this.start, this.end), node.raw.charCodeAt(node.raw.length - 1) === 110 && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
      }, pp$5.parseParenExpression = function() {
        this.expect(types$1.parenL);
        var val = this.parseExpression();
        return this.expect(types$1.parenR), val;
      }, pp$5.shouldParseArrow = function(exprList) {
        return !this.canInsertSemicolon();
      }, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
        var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
        if (this.options.ecmaVersion >= 6) {
          this.next();
          var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
          for (this.yieldPos = 0, this.awaitPos = 0;this.type !== types$1.parenR; ) {
            if (first ? first = false : this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
              lastIsComma = true;
              break;
            }
            if (this.type === types$1.ellipsis) {
              spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
              break;
            }
            exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
          }
          var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
          if (this.expect(types$1.parenR), canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow))
            return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
          exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
        } else
          val = this.parseParenExpression();
        if (this.options.preserveParens) {
          var par = this.startNodeAt(startPos, startLoc);
          return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
        }
        return val;
      }, pp$5.parseParenItem = function(item) {
        return item;
      }, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
      };
      var empty = [];
      pp$5.parseNew = function() {
        this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
        var node = this.startNode();
        if (this.next(), this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
          var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
          meta.name = "new", node.meta = this.finishNode(meta, "Identifier"), this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), node.property.name !== "target" && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
        }
        var startPos = this.start, startLoc = this.startLoc;
        return node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false), this.eat(types$1.parenL) ? node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty, this.finishNode(node, "NewExpression");
      }, pp$5.parseTemplateElement = function(ref2) {
        var isTagged = ref2.isTagged, elem = this.startNode();
        return this.type === types$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value.replace(/\r\n?/g, `
`), cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, `
`), cooked: this.value }, this.next(), elem.tail = this.type === types$1.backQuote, this.finishNode(elem, "TemplateElement");
      }, pp$5.parseTemplate = function(ref2) {
        ref2 === undefined && (ref2 = {});
        var isTagged = ref2.isTagged;
        isTagged === undefined && (isTagged = false);
        var node = this.startNode();
        this.next(), node.expressions = [];
        var curElt = this.parseTemplateElement({ isTagged });
        for (node.quasis = [curElt];!curElt.tail; )
          this.type === types$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
        return this.next(), this.finishNode(node, "TemplateLiteral");
      }, pp$5.isAsyncProp = function(prop) {
        return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      }, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
        var node = this.startNode(), first = true, propHash = {};
        for (node.properties = [], this.next();!this.eat(types$1.braceR); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR))
            break;
          var prop = this.parseProperty(isPattern, refDestructuringErrors);
          isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
        }
        return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
      }, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
        var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
        if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis))
          return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$1.comma && this.raiseRecoverable(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
        this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1.star)));
        var containsEsc = this.containsEsc;
        return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = true, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star), this.parsePropertyName(prop)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
      }, pp$5.parseGetterSetter = function(prop) {
        prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
        var paramCount = prop.kind === "get" ? 0 : 1;
        if (prop.value.params.length !== paramCount) {
          var start = prop.value.start;
          prop.kind === "get" ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
        } else
          prop.kind === "set" && prop.value.params[0].type === "RestElement" && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
      }, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
        (isGenerator || isAsync) && this.type === types$1.colon && this.unexpected(), this.eat(types$1.colon) ? (prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init") : this.options.ecmaVersion >= 6 && this.type === types$1.parenL ? (isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator, isAsync)) : isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || prop.key.type !== "Identifier" || prop.key.name !== "get" && prop.key.name !== "set" || this.type === types$1.comma || this.type === types$1.braceR || this.type === types$1.eq ? this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier" ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), prop.key.name !== "await" || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected() : ((isGenerator || isAsync) && this.unexpected(), this.parseGetterSetter(prop));
      }, pp$5.parsePropertyName = function(prop) {
        if (this.options.ecmaVersion >= 6) {
          if (this.eat(types$1.bracketL))
            return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$1.bracketR), prop.key;
          prop.computed = false;
        }
        return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
      }, pp$5.initFunction = function(node) {
        node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
      }, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
        var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
      }, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        return this.enterScope(16 | functionFlags(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
      }, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
        var isExpression = isArrowFunction && this.type !== types$1.braceL, oldStrict = this.strict, useStrict = false;
        if (isExpression)
          node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
        else {
          var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
          oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
          var oldLabels = this.labels;
          this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, undefined, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
        }
        this.exitScope();
      }, pp$5.isSimpleParamList = function(params) {
        for (var i2 = 0, list2 = params;i2 < list2.length; i2 += 1) {
          if (list2[i2].type !== "Identifier")
            return false;
        }
        return true;
      }, pp$5.checkParams = function(node, allowDuplicates) {
        for (var nameHash = Object.create(null), i2 = 0, list2 = node.params;i2 < list2.length; i2 += 1) {
          var param = list2[i2];
          this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
        }
      }, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
        for (var elts = [], first = true;!this.eat(close); ) {
          if (first)
            first = false;
          else if (this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(close))
            break;
          var elt = undefined;
          allowEmpty && this.type === types$1.comma ? elt = null : this.type === types$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
        }
        return elts;
      }, pp$5.checkUnreserved = function(ref2) {
        var { start, end, name } = ref2;
        (this.inGenerator && name === "yield" && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && name === "await" && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && name === "arguments" && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || name !== "arguments" && name !== "await" || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || name !== "await" || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
      }, pp$5.parseIdent = function(liberal) {
        var node = this.parseIdentNode();
        return this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), node.name !== "await" || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
      }, pp$5.parseIdentNode = function() {
        var node = this.startNode();
        return this.type === types$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, node.name !== "class" && node.name !== "function" || this.lastTokEnd === this.lastTokStart + 1 && this.input.charCodeAt(this.lastTokStart) === 46 || this.context.pop(), this.type = types$1.name) : this.unexpected(), node;
      }, pp$5.parsePrivateIdent = function() {
        var node = this.startNode();
        return this.type === types$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), this.options.checkPrivateFields && (this.privateNameStack.length === 0 ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node)), node;
      }, pp$5.parseYield = function(forInit) {
        this.yieldPos || (this.yieldPos = this.start);
        var node = this.startNode();
        return this.next(), this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
      }, pp$5.parseAwait = function(forInit) {
        this.awaitPos || (this.awaitPos = this.start);
        var node = this.startNode();
        return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
      };
      var pp$4 = Parser.prototype;
      pp$4.raise = function(pos, message) {
        var loc = getLineInfo(this.input, pos);
        message += " (" + loc.line + ":" + loc.column + ")";
        var err = new SyntaxError(message);
        throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
      }, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
        if (this.options.locations)
          return new Position(this.curLine, this.pos - this.lineStart);
      };
      var pp$3 = Parser.prototype, Scope = function(flags) {
        this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
      };
      pp$3.enterScope = function(flags) {
        this.scopeStack.push(new Scope(flags));
      }, pp$3.exitScope = function() {
        this.scopeStack.pop();
      }, pp$3.treatFunctionsAsVarInScope = function(scope) {
        return 2 & scope.flags || !this.inModule && 1 & scope.flags;
      }, pp$3.declareName = function(name, bindingType, pos) {
        var redeclared = false;
        if (bindingType === 2) {
          var scope = this.currentScope();
          redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
        } else if (bindingType === 4) {
          this.currentScope().lexical.push(name);
        } else if (bindingType === 3) {
          var scope$2 = this.currentScope();
          redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
        } else
          for (var i2 = this.scopeStack.length - 1;i2 >= 0; --i2) {
            var scope$3 = this.scopeStack[i2];
            if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags)
              break;
          }
        redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
      }, pp$3.checkLocalExport = function(id) {
        this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && (this.undefinedExports[id.name] = id);
      }, pp$3.currentScope = function() {
        return this.scopeStack[this.scopeStack.length - 1];
      }, pp$3.currentVarScope = function() {
        for (var i2 = this.scopeStack.length - 1;; i2--) {
          var scope = this.scopeStack[i2];
          if (259 & scope.flags)
            return scope;
        }
      }, pp$3.currentThisScope = function() {
        for (var i2 = this.scopeStack.length - 1;; i2--) {
          var scope = this.scopeStack[i2];
          if (259 & scope.flags && !(16 & scope.flags))
            return scope;
        }
      };
      var Node = function(parser, pos, loc) {
        this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
      }, pp$2 = Parser.prototype;
      function finishNodeAt(node, type, pos, loc) {
        return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
      }
      pp$2.startNode = function() {
        return new Node(this, this.start, this.startLoc);
      }, pp$2.startNodeAt = function(pos, loc) {
        return new Node(this, pos, loc);
      }, pp$2.finishNode = function(node, type) {
        return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
      }, pp$2.finishNodeAt = function(node, type, pos, loc) {
        return finishNodeAt.call(this, node, type, pos, loc);
      }, pp$2.copyNode = function(node) {
        var newNode = new Node(this, node.start, this.startLoc);
        for (var prop in node)
          newNode[prop] = node[prop];
        return newNode;
      };
      var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = { 9: ecma9BinaryProperties, 10: ecma10BinaryProperties, 11: ecma10BinaryProperties, 12: ecma12BinaryProperties, 13: ecma12BinaryProperties, 14: ecma12BinaryProperties }, unicodeBinaryPropertiesOfStrings = { 9: "", 10: "", 11: "", 12: "", 13: "", 14: "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji" }, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = { 9: ecma9ScriptValues, 10: ecma10ScriptValues, 11: ecma11ScriptValues, 12: ecma12ScriptValues, 13: ecma13ScriptValues, 14: ecma13ScriptValues + " Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz" }, data = {};
      function buildUnicodeData(ecmaVersion) {
        var d = data[ecmaVersion] = { binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues), binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]), nonBinary: { General_Category: wordsRegexp(unicodeGeneralCategoryValues), Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };
        d.nonBinary.Script_Extensions = d.nonBinary.Script, d.nonBinary.gc = d.nonBinary.General_Category, d.nonBinary.sc = d.nonBinary.Script, d.nonBinary.scx = d.nonBinary.Script_Extensions;
      }
      for (var i = 0, list = [9, 10, 11, 12, 13, 14];i < list.length; i += 1) {
        buildUnicodeData(list[i]);
      }
      var pp$1 = Parser.prototype, BranchID = function(parent, base) {
        this.parent = parent, this.base = base || this;
      };
      BranchID.prototype.separatedFrom = function(alt) {
        for (var self = this;self; self = self.parent)
          for (var other = alt;other; other = other.parent)
            if (self.base === other.base && self !== other)
              return true;
        return false;
      }, BranchID.prototype.sibling = function() {
        return new BranchID(this.parent, this.base);
      };
      var RegExpValidationState = function(parser) {
        this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchV = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = Object.create(null), this.backReferenceNames = [], this.branchID = null;
      };
      function isRegularExpressionModifier(ch) {
        return ch === 105 || ch === 109 || ch === 115;
      }
      function isSyntaxCharacter(ch) {
        return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
      }
      function isControlLetter(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
      }
      RegExpValidationState.prototype.reset = function(start, pattern, flags) {
        var unicodeSets = flags.indexOf("v") !== -1, unicode = flags.indexOf("u") !== -1;
        this.start = 0 | start, this.source = pattern + "", this.flags = flags, unicodeSets && this.parser.options.ecmaVersion >= 15 ? (this.switchU = true, this.switchV = true, this.switchN = true) : (this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchV = false, this.switchN = unicode && this.parser.options.ecmaVersion >= 9);
      }, RegExpValidationState.prototype.raise = function(message) {
        this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
      }, RegExpValidationState.prototype.at = function(i2, forceU) {
        forceU === undefined && (forceU = false);
        var s = this.source, l = s.length;
        if (i2 >= l)
          return -1;
        var c = s.charCodeAt(i2);
        if (!forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l)
          return c;
        var next = s.charCodeAt(i2 + 1);
        return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
      }, RegExpValidationState.prototype.nextIndex = function(i2, forceU) {
        forceU === undefined && (forceU = false);
        var s = this.source, l = s.length;
        if (i2 >= l)
          return l;
        var next, c = s.charCodeAt(i2);
        return !forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l || (next = s.charCodeAt(i2 + 1)) < 56320 || next > 57343 ? i2 + 1 : i2 + 2;
      }, RegExpValidationState.prototype.current = function(forceU) {
        return forceU === undefined && (forceU = false), this.at(this.pos, forceU);
      }, RegExpValidationState.prototype.lookahead = function(forceU) {
        return forceU === undefined && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
      }, RegExpValidationState.prototype.advance = function(forceU) {
        forceU === undefined && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
      }, RegExpValidationState.prototype.eat = function(ch, forceU) {
        return forceU === undefined && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
      }, RegExpValidationState.prototype.eatChars = function(chs, forceU) {
        forceU === undefined && (forceU = false);
        for (var pos = this.pos, i2 = 0, list2 = chs;i2 < list2.length; i2 += 1) {
          var ch = list2[i2], current = this.at(pos, forceU);
          if (current === -1 || current !== ch)
            return false;
          pos = this.nextIndex(pos, forceU);
        }
        return this.pos = pos, true;
      }, pp$1.validateRegExpFlags = function(state) {
        for (var { validFlags, flags } = state, u = false, v = false, i2 = 0;i2 < flags.length; i2++) {
          var flag = flags.charAt(i2);
          validFlags.indexOf(flag) === -1 && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i2 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag"), flag === "u" && (u = true), flag === "v" && (v = true);
        }
        this.options.ecmaVersion >= 15 && u && v && this.raise(state.start, "Invalid regular expression flag");
      }, pp$1.validateRegExpPattern = function(state) {
        this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && function(obj) {
          for (var _ in obj)
            return true;
          return false;
        }(state.groupNames) && (state.switchN = true, this.regexp_pattern(state));
      }, pp$1.regexp_pattern = function(state) {
        state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames = Object.create(null), state.backReferenceNames.length = 0, state.branchID = null, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
        for (var i2 = 0, list2 = state.backReferenceNames;i2 < list2.length; i2 += 1) {
          var name = list2[i2];
          state.groupNames[name] || state.raise("Invalid named capture referenced");
        }
      }, pp$1.regexp_disjunction = function(state) {
        var trackDisjunction = this.options.ecmaVersion >= 16;
        for (trackDisjunction && (state.branchID = new BranchID(state.branchID, null)), this.regexp_alternative(state);state.eat(124); )
          trackDisjunction && (state.branchID = state.branchID.sibling()), this.regexp_alternative(state);
        trackDisjunction && (state.branchID = state.branchID.parent), this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
      }, pp$1.regexp_alternative = function(state) {
        for (;state.pos < state.source.length && this.regexp_eatTerm(state); )
          ;
      }, pp$1.regexp_eatTerm = function(state) {
        return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
      }, pp$1.regexp_eatAssertion = function(state) {
        var start = state.pos;
        if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36))
          return true;
        if (state.eat(92)) {
          if (state.eat(66) || state.eat(98))
            return true;
          state.pos = start;
        }
        if (state.eat(40) && state.eat(63)) {
          var lookbehind = false;
          if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33))
            return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
        }
        return state.pos = start, false;
      }, pp$1.regexp_eatQuantifier = function(state, noError) {
        return noError === undefined && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
      }, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
        return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
      }, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
        var start = state.pos;
        if (state.eat(123)) {
          var min = 0, max = -1;
          if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125)))
            return max !== -1 && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
          state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatAtom = function(state) {
        return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
      }, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatAtomEscape(state))
            return true;
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatUncapturingGroup = function(state) {
        var start = state.pos;
        if (state.eat(40)) {
          if (state.eat(63)) {
            if (this.options.ecmaVersion >= 16) {
              var addModifiers = this.regexp_eatModifiers(state), hasHyphen = state.eat(45);
              if (addModifiers || hasHyphen) {
                for (var i2 = 0;i2 < addModifiers.length; i2++) {
                  var modifier = addModifiers.charAt(i2);
                  addModifiers.indexOf(modifier, i2 + 1) > -1 && state.raise("Duplicate regular expression modifiers");
                }
                if (hasHyphen) {
                  var removeModifiers = this.regexp_eatModifiers(state);
                  addModifiers || removeModifiers || state.current() !== 58 || state.raise("Invalid regular expression modifiers");
                  for (var i$1 = 0;i$1 < removeModifiers.length; i$1++) {
                    var modifier$1 = removeModifiers.charAt(i$1);
                    (removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) && state.raise("Duplicate regular expression modifiers");
                  }
                }
              }
            }
            if (state.eat(58)) {
              if (this.regexp_disjunction(state), state.eat(41))
                return true;
              state.raise("Unterminated group");
            }
          }
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatCapturingGroup = function(state) {
        if (state.eat(40)) {
          if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : state.current() === 63 && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41))
            return state.numCapturingParens += 1, true;
          state.raise("Unterminated group");
        }
        return false;
      }, pp$1.regexp_eatModifiers = function(state) {
        for (var modifiers = "", ch = 0;(ch = state.current()) !== -1 && isRegularExpressionModifier(ch); )
          modifiers += codePointToString(ch), state.advance();
        return modifiers;
      }, pp$1.regexp_eatExtendedAtom = function(state) {
        return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
      }, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
        return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
      }, pp$1.regexp_eatSyntaxCharacter = function(state) {
        var ch = state.current();
        return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatPatternCharacters = function(state) {
        for (var start = state.pos, ch = 0;(ch = state.current()) !== -1 && !isSyntaxCharacter(ch); )
          state.advance();
        return state.pos !== start;
      }, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
        var ch = state.current();
        return !(ch === -1 || ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch === 91 || ch === 94 || ch === 124) && (state.advance(), true);
      }, pp$1.regexp_groupSpecifier = function(state) {
        if (state.eat(63)) {
          this.regexp_eatGroupName(state) || state.raise("Invalid group");
          var trackDisjunction = this.options.ecmaVersion >= 16, known = state.groupNames[state.lastStringValue];
          if (known)
            if (trackDisjunction)
              for (var i2 = 0, list2 = known;i2 < list2.length; i2 += 1) {
                list2[i2].separatedFrom(state.branchID) || state.raise("Duplicate capture group name");
              }
            else
              state.raise("Duplicate capture group name");
          trackDisjunction ? (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID) : state.groupNames[state.lastStringValue] = true;
        }
      }, pp$1.regexp_eatGroupName = function(state) {
        if (state.lastStringValue = "", state.eat(60)) {
          if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62))
            return true;
          state.raise("Invalid capture group name");
        }
        return false;
      }, pp$1.regexp_eatRegExpIdentifierName = function(state) {
        if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
          for (state.lastStringValue += codePointToString(state.lastIntValue);this.regexp_eatRegExpIdentifierPart(state); )
            state.lastStringValue += codePointToString(state.lastIntValue);
          return true;
        }
        return false;
      }, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
        var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
        return state.advance(forceU), ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
          return isIdentifierStart(ch2, true) || ch2 === 36 || ch2 === 95;
        }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
      }, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
        var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
        return state.advance(forceU), ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
          return isIdentifierChar(ch2, true) || ch2 === 36 || ch2 === 95 || ch2 === 8204 || ch2 === 8205;
        }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
      }, pp$1.regexp_eatAtomEscape = function(state) {
        return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (state.current() === 99 && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
      }, pp$1.regexp_eatBackReference = function(state) {
        var start = state.pos;
        if (this.regexp_eatDecimalEscape(state)) {
          var n = state.lastIntValue;
          if (state.switchU)
            return n > state.maxBackReference && (state.maxBackReference = n), true;
          if (n <= state.numCapturingParens)
            return true;
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatKGroupName = function(state) {
        if (state.eat(107)) {
          if (this.regexp_eatGroupName(state))
            return state.backReferenceNames.push(state.lastStringValue), true;
          state.raise("Invalid named reference");
        }
        return false;
      }, pp$1.regexp_eatCharacterEscape = function(state) {
        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
      }, pp$1.regexp_eatCControlLetter = function(state) {
        var start = state.pos;
        if (state.eat(99)) {
          if (this.regexp_eatControlLetter(state))
            return true;
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatZero = function(state) {
        return state.current() === 48 && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
      }, pp$1.regexp_eatControlEscape = function(state) {
        var ch = state.current();
        return ch === 116 ? (state.lastIntValue = 9, state.advance(), true) : ch === 110 ? (state.lastIntValue = 10, state.advance(), true) : ch === 118 ? (state.lastIntValue = 11, state.advance(), true) : ch === 102 ? (state.lastIntValue = 12, state.advance(), true) : ch === 114 && (state.lastIntValue = 13, state.advance(), true);
      }, pp$1.regexp_eatControlLetter = function(state) {
        var ch = state.current();
        return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
      }, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
        forceU === undefined && (forceU = false);
        var ch, start = state.pos, switchU = forceU || state.switchU;
        if (state.eat(117)) {
          if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 55296 && lead <= 56319) {
              var leadSurrogateEnd = state.pos;
              if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                var trail = state.lastIntValue;
                if (trail >= 56320 && trail <= 57343)
                  return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
              }
              state.pos = leadSurrogateEnd, state.lastIntValue = lead;
            }
            return true;
          }
          if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111))
            return true;
          switchU && state.raise("Invalid unicode escape"), state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatIdentityEscape = function(state) {
        if (state.switchU)
          return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
        var ch = state.current();
        return !(ch === 99 || state.switchN && ch === 107) && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatDecimalEscape = function(state) {
        state.lastIntValue = 0;
        var ch = state.current();
        if (ch >= 49 && ch <= 57) {
          do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          } while ((ch = state.current()) >= 48 && ch <= 57);
          return true;
        }
        return false;
      };
      function isUnicodePropertyNameCharacter(ch) {
        return isControlLetter(ch) || ch === 95;
      }
      function isUnicodePropertyValueCharacter(ch) {
        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
      }
      function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      function isHexDigit(ch) {
        return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
      }
      function hexToInt(ch) {
        return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
      }
      function isOctalDigit(ch) {
        return ch >= 48 && ch <= 55;
      }
      pp$1.regexp_eatCharacterClassEscape = function(state) {
        var ch = state.current();
        if (function(ch2) {
          return ch2 === 100 || ch2 === 68 || ch2 === 115 || ch2 === 83 || ch2 === 119 || ch2 === 87;
        }(ch))
          return state.lastIntValue = -1, state.advance(), 1;
        var negate = false;
        if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 80) || ch === 112)) {
          var result;
          if (state.lastIntValue = -1, state.advance(), state.eat(123) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(125))
            return negate && result === 2 && state.raise("Invalid property name"), result;
          state.raise("Invalid property name");
        }
        return 0;
      }, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
        var start = state.pos;
        if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
          var name = state.lastStringValue;
          if (this.regexp_eatUnicodePropertyValue(state)) {
            var value2 = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameAndValue(state, name, value2), 1;
          }
        }
        if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
          var nameOrValue = state.lastStringValue;
          return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
        }
        return 0;
      }, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value2) {
        hasOwn(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value2) || state.raise("Invalid property value");
      }, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
        return state.unicodeProperties.binary.test(nameOrValue) ? 1 : state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue) ? 2 : void state.raise("Invalid property name");
      }, pp$1.regexp_eatUnicodePropertyName = function(state) {
        var ch = 0;
        for (state.lastStringValue = "";isUnicodePropertyNameCharacter(ch = state.current()); )
          state.lastStringValue += codePointToString(ch), state.advance();
        return state.lastStringValue !== "";
      }, pp$1.regexp_eatUnicodePropertyValue = function(state) {
        var ch = 0;
        for (state.lastStringValue = "";isUnicodePropertyValueCharacter(ch = state.current()); )
          state.lastStringValue += codePointToString(ch), state.advance();
        return state.lastStringValue !== "";
      }, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
        return this.regexp_eatUnicodePropertyValue(state);
      }, pp$1.regexp_eatCharacterClass = function(state) {
        if (state.eat(91)) {
          var negate = state.eat(94), result = this.regexp_classContents(state);
          return state.eat(93) || state.raise("Unterminated character class"), negate && result === 2 && state.raise("Negated character class may contain strings"), true;
        }
        return false;
      }, pp$1.regexp_classContents = function(state) {
        return state.current() === 93 ? 1 : state.switchV ? this.regexp_classSetExpression(state) : (this.regexp_nonEmptyClassRanges(state), 1);
      }, pp$1.regexp_nonEmptyClassRanges = function(state) {
        for (;this.regexp_eatClassAtom(state); ) {
          var left = state.lastIntValue;
          if (state.eat(45) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            !state.switchU || left !== -1 && right !== -1 || state.raise("Invalid character class"), left !== -1 && right !== -1 && left > right && state.raise("Range out of order in character class");
          }
        }
      }, pp$1.regexp_eatClassAtom = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatClassEscape(state))
            return true;
          if (state.switchU) {
            var ch$1 = state.current();
            (ch$1 === 99 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
          }
          state.pos = start;
        }
        var ch = state.current();
        return ch !== 93 && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatClassEscape = function(state) {
        var start = state.pos;
        if (state.eat(98))
          return state.lastIntValue = 8, true;
        if (state.switchU && state.eat(45))
          return state.lastIntValue = 45, true;
        if (!state.switchU && state.eat(99)) {
          if (this.regexp_eatClassControlLetter(state))
            return true;
          state.pos = start;
        }
        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
      }, pp$1.regexp_classSetExpression = function(state) {
        var subResult, result = 1;
        if (this.regexp_eatClassSetRange(state))
          ;
        else if (subResult = this.regexp_eatClassSetOperand(state)) {
          subResult === 2 && (result = 2);
          for (var start = state.pos;state.eatChars([38, 38]); )
            state.current() !== 38 && (subResult = this.regexp_eatClassSetOperand(state)) ? subResult !== 2 && (result = 1) : state.raise("Invalid character in character class");
          if (start !== state.pos)
            return result;
          for (;state.eatChars([45, 45]); )
            this.regexp_eatClassSetOperand(state) || state.raise("Invalid character in character class");
          if (start !== state.pos)
            return result;
        } else
          state.raise("Invalid character in character class");
        for (;; )
          if (!this.regexp_eatClassSetRange(state)) {
            if (!(subResult = this.regexp_eatClassSetOperand(state)))
              return result;
            subResult === 2 && (result = 2);
          }
      }, pp$1.regexp_eatClassSetRange = function(state) {
        var start = state.pos;
        if (this.regexp_eatClassSetCharacter(state)) {
          var left = state.lastIntValue;
          if (state.eat(45) && this.regexp_eatClassSetCharacter(state)) {
            var right = state.lastIntValue;
            return left !== -1 && right !== -1 && left > right && state.raise("Range out of order in character class"), true;
          }
          state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatClassSetOperand = function(state) {
        return this.regexp_eatClassSetCharacter(state) ? 1 : this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
      }, pp$1.regexp_eatNestedClass = function(state) {
        var start = state.pos;
        if (state.eat(91)) {
          var negate = state.eat(94), result = this.regexp_classContents(state);
          if (state.eat(93))
            return negate && result === 2 && state.raise("Negated character class may contain strings"), result;
          state.pos = start;
        }
        if (state.eat(92)) {
          var result$1 = this.regexp_eatCharacterClassEscape(state);
          if (result$1)
            return result$1;
          state.pos = start;
        }
        return null;
      }, pp$1.regexp_eatClassStringDisjunction = function(state) {
        var start = state.pos;
        if (state.eatChars([92, 113])) {
          if (state.eat(123)) {
            var result = this.regexp_classStringDisjunctionContents(state);
            if (state.eat(125))
              return result;
          } else
            state.raise("Invalid escape");
          state.pos = start;
        }
        return null;
      }, pp$1.regexp_classStringDisjunctionContents = function(state) {
        for (var result = this.regexp_classString(state);state.eat(124); )
          this.regexp_classString(state) === 2 && (result = 2);
        return result;
      }, pp$1.regexp_classString = function(state) {
        for (var count = 0;this.regexp_eatClassSetCharacter(state); )
          count++;
        return count === 1 ? 1 : 2;
      }, pp$1.regexp_eatClassSetCharacter = function(state) {
        var start = state.pos;
        if (state.eat(92))
          return !(!this.regexp_eatCharacterEscape(state) && !this.regexp_eatClassSetReservedPunctuator(state)) || (state.eat(98) ? (state.lastIntValue = 8, true) : (state.pos = start, false));
        var ch = state.current();
        return !(ch < 0 || ch === state.lookahead() && function(ch2) {
          return ch2 === 33 || ch2 >= 35 && ch2 <= 38 || ch2 >= 42 && ch2 <= 44 || ch2 === 46 || ch2 >= 58 && ch2 <= 64 || ch2 === 94 || ch2 === 96 || ch2 === 126;
        }(ch)) && (!function(ch2) {
          return ch2 === 40 || ch2 === 41 || ch2 === 45 || ch2 === 47 || ch2 >= 91 && ch2 <= 93 || ch2 >= 123 && ch2 <= 125;
        }(ch) && (state.advance(), state.lastIntValue = ch, true));
      }, pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
        var ch = state.current();
        return !!function(ch2) {
          return ch2 === 33 || ch2 === 35 || ch2 === 37 || ch2 === 38 || ch2 === 44 || ch2 === 45 || ch2 >= 58 && ch2 <= 62 || ch2 === 64 || ch2 === 96 || ch2 === 126;
        }(ch) && (state.lastIntValue = ch, state.advance(), true);
      }, pp$1.regexp_eatClassControlLetter = function(state) {
        var ch = state.current();
        return !(!isDecimalDigit(ch) && ch !== 95) && (state.lastIntValue = ch % 32, state.advance(), true);
      }, pp$1.regexp_eatHexEscapeSequence = function(state) {
        var start = state.pos;
        if (state.eat(120)) {
          if (this.regexp_eatFixedHexDigits(state, 2))
            return true;
          state.switchU && state.raise("Invalid escape"), state.pos = start;
        }
        return false;
      }, pp$1.regexp_eatDecimalDigits = function(state) {
        var start = state.pos, ch = 0;
        for (state.lastIntValue = 0;isDecimalDigit(ch = state.current()); )
          state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
        return state.pos !== start;
      }, pp$1.regexp_eatHexDigits = function(state) {
        var start = state.pos, ch = 0;
        for (state.lastIntValue = 0;isHexDigit(ch = state.current()); )
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
        return state.pos !== start;
      }, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
        if (this.regexp_eatOctalDigit(state)) {
          var n1 = state.lastIntValue;
          if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
          } else
            state.lastIntValue = n1;
          return true;
        }
        return false;
      }, pp$1.regexp_eatOctalDigit = function(state) {
        var ch = state.current();
        return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
      }, pp$1.regexp_eatFixedHexDigits = function(state, length) {
        var start = state.pos;
        state.lastIntValue = 0;
        for (var i2 = 0;i2 < length; ++i2) {
          var ch = state.current();
          if (!isHexDigit(ch))
            return state.pos = start, false;
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
        }
        return true;
      };
      var Token = function(p) {
        this.type = p.type, this.value = p.value, this.start = p.start, this.end = p.end, p.options.locations && (this.loc = new SourceLocation(p, p.startLoc, p.endLoc)), p.options.ranges && (this.range = [p.start, p.end]);
      }, pp = Parser.prototype;
      function stringToBigInt(str) {
        return typeof BigInt != "function" ? null : BigInt(str.replace(/_/g, ""));
      }
      pp.next = function(ignoreEscapeSequenceInKeyword) {
        !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
      }, pp.getToken = function() {
        return this.next(), new Token(this);
      }, typeof Symbol != "undefined" && (pp[Symbol.iterator] = function() {
        var this$1$1 = this;
        return { next: function() {
          var token = this$1$1.getToken();
          return { done: token.type === types$1.eof, value: token };
        } };
      }), pp.nextToken = function() {
        var curContext = this.curContext();
        return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
      }, pp.readToken = function(code) {
        return isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 ? this.readWord() : this.getTokenFromCode(code);
      }, pp.fullCharCodeAtPos = function() {
        var code = this.input.charCodeAt(this.pos);
        if (code <= 55295 || code >= 56320)
          return code;
        var next = this.input.charCodeAt(this.pos + 1);
        return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
      }, pp.skipBlockComment = function() {
        var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
        if (end === -1 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations)
          for (var nextBreak = undefined, pos = start;(nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; )
            ++this.curLine, pos = this.lineStart = nextBreak;
        this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
      }, pp.skipLineComment = function(startSkip) {
        for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip);this.pos < this.input.length && !isNewLine(ch); )
          ch = this.input.charCodeAt(++this.pos);
        this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
      }, pp.skipSpace = function() {
        loop:
          for (;this.pos < this.input.length; ) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                this.input.charCodeAt(this.pos + 1) === 10 && ++this.pos;
              case 10:
              case 8232:
              case 8233:
                ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))))
                  break loop;
                ++this.pos;
            }
          }
      }, pp.finishToken = function(type, val) {
        this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
        var prevType = this.type;
        this.type = type, this.value = val, this.updateContext(prevType);
      }, pp.readToken_dot = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next >= 48 && next <= 57)
          return this.readNumber(true);
        var next2 = this.input.charCodeAt(this.pos + 2);
        return this.options.ecmaVersion >= 6 && next === 46 && next2 === 46 ? (this.pos += 3, this.finishToken(types$1.ellipsis)) : (++this.pos, this.finishToken(types$1.dot));
      }, pp.readToken_slash = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        return this.exprAllowed ? (++this.pos, this.readRegexp()) : next === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.slash, 1);
      }, pp.readToken_mult_modulo_exp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = code === 42 ? types$1.star : types$1.modulo;
        return this.options.ecmaVersion >= 7 && code === 42 && next === 42 && (++size, tokentype = types$1.starstar, next = this.input.charCodeAt(this.pos + 2)), next === 61 ? this.finishOp(types$1.assign, size + 1) : this.finishOp(tokentype, size);
      }, pp.readToken_pipe_amp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (this.options.ecmaVersion >= 12) {
            if (this.input.charCodeAt(this.pos + 2) === 61)
              return this.finishOp(types$1.assign, 3);
          }
          return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
        }
        return next === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
      }, pp.readToken_caret = function() {
        return this.input.charCodeAt(this.pos + 1) === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.bitwiseXOR, 1);
      }, pp.readToken_plus_min = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        return next === code ? next !== 45 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 62 || this.lastTokEnd !== 0 && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : next === 61 ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.plusMin, 1);
      }, pp.readToken_lt_gt = function(code) {
        var next = this.input.charCodeAt(this.pos + 1), size = 1;
        return next === code ? (size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.pos + size) === 61 ? this.finishOp(types$1.assign, size + 1) : this.finishOp(types$1.bitShift, size)) : next !== 33 || code !== 60 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 45 || this.input.charCodeAt(this.pos + 3) !== 45 ? (next === 61 && (size = 2), this.finishOp(types$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
      }, pp.readToken_eq_excl = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        return next === 61 ? this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) : code === 61 && next === 62 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1.arrow)) : this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);
      }, pp.readToken_question = function() {
        var ecmaVersion = this.options.ecmaVersion;
        if (ecmaVersion >= 11) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57)
              return this.finishOp(types$1.questionDot, 2);
          }
          if (next === 63) {
            if (ecmaVersion >= 12) {
              if (this.input.charCodeAt(this.pos + 2) === 61)
                return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(types$1.coalesce, 2);
          }
        }
        return this.finishOp(types$1.question, 1);
      }, pp.readToken_numberSign = function() {
        var code = 35;
        if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), true) || code === 92))
          return this.finishToken(types$1.privateId, this.readWord1());
        this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
      }, pp.getTokenFromCode = function(code) {
        switch (code) {
          case 46:
            return this.readToken_dot();
          case 40:
            return ++this.pos, this.finishToken(types$1.parenL);
          case 41:
            return ++this.pos, this.finishToken(types$1.parenR);
          case 59:
            return ++this.pos, this.finishToken(types$1.semi);
          case 44:
            return ++this.pos, this.finishToken(types$1.comma);
          case 91:
            return ++this.pos, this.finishToken(types$1.bracketL);
          case 93:
            return ++this.pos, this.finishToken(types$1.bracketR);
          case 123:
            return ++this.pos, this.finishToken(types$1.braceL);
          case 125:
            return ++this.pos, this.finishToken(types$1.braceR);
          case 58:
            return ++this.pos, this.finishToken(types$1.colon);
          case 96:
            if (this.options.ecmaVersion < 6)
              break;
            return ++this.pos, this.finishToken(types$1.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88)
              return this.readRadixNumber(16);
            if (this.options.ecmaVersion >= 6) {
              if (next === 111 || next === 79)
                return this.readRadixNumber(8);
              if (next === 98 || next === 66)
                return this.readRadixNumber(2);
            }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code);
          case 60:
          case 62:
            return this.readToken_lt_gt(code);
          case 61:
          case 33:
            return this.readToken_eq_excl(code);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types$1.prefix, 1);
          case 35:
            return this.readToken_numberSign();
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
      }, pp.finishOp = function(type, size) {
        var str = this.input.slice(this.pos, this.pos + size);
        return this.pos += size, this.finishToken(type, str);
      }, pp.readRegexp = function() {
        for (var escaped, inClass, start = this.pos;; ) {
          this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
          var ch = this.input.charAt(this.pos);
          if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped)
            escaped = false;
          else {
            if (ch === "[")
              inClass = true;
            else if (ch === "]" && inClass)
              inClass = false;
            else if (ch === "/" && !inClass)
              break;
            escaped = ch === "\\";
          }
          ++this.pos;
        }
        var pattern = this.input.slice(start, this.pos);
        ++this.pos;
        var flagsStart = this.pos, flags = this.readWord1();
        this.containsEsc && this.unexpected(flagsStart);
        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
        state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
        var value2 = null;
        try {
          value2 = new RegExp(pattern, flags);
        } catch (e) {
        }
        return this.finishToken(types$1.regexp, { pattern, flags, value: value2 });
      }, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
        for (var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48, start = this.pos, total = 0, lastCode = 0, i2 = 0, e = len == null ? 1 / 0 : len;i2 < e; ++i2, ++this.pos) {
          var code = this.input.charCodeAt(this.pos), val = undefined;
          if (allowSeparators && code === 95)
            isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), lastCode === 95 && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), i2 === 0 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
          else {
            if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix)
              break;
            lastCode = code, total = total * radix + val;
          }
        }
        return allowSeparators && lastCode === 95 && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || len != null && this.pos - start !== len ? null : total;
      }, pp.readRadixNumber = function(radix) {
        var start = this.pos;
        this.pos += 2;
        var val = this.readInt(radix);
        return val == null && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110 ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val);
      }, pp.readNumber = function(startsWithDot) {
        var start = this.pos;
        startsWithDot || this.readInt(10, undefined, true) !== null || this.raise(start, "Invalid number");
        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        octal && this.strict && this.raise(start, "Invalid number");
        var next = this.input.charCodeAt(this.pos);
        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
          var val$1 = stringToBigInt(this.input.slice(start, this.pos));
          return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val$1);
        }
        octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), next !== 46 || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), next !== 69 && next !== 101 || octal || ((next = this.input.charCodeAt(++this.pos)) !== 43 && next !== 45 || ++this.pos, this.readInt(10) === null && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
        var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
        return this.finishToken(types$1.num, val);
      }, pp.readCodePoint = function() {
        var code;
        if (this.input.charCodeAt(this.pos) === 123) {
          this.options.ecmaVersion < 6 && this.unexpected();
          var codePos = ++this.pos;
          code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
        } else
          code = this.readHexChar(4);
        return code;
      }, pp.readString = function(quote) {
        for (var out = "", chunkStart = ++this.pos;; ) {
          this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
          var ch = this.input.charCodeAt(this.pos);
          if (ch === quote)
            break;
          ch === 92 ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : ch === 8232 || ch === 8233 ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
        }
        return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1.string, out);
      };
      var INVALID_TEMPLATE_ESCAPE_ERROR = {};
      pp.tryReadTemplateToken = function() {
        this.inTemplateElement = true;
        try {
          this.readTmplToken();
        } catch (err) {
          if (err !== INVALID_TEMPLATE_ESCAPE_ERROR)
            throw err;
          this.readInvalidTemplateToken();
        }
        this.inTemplateElement = false;
      }, pp.invalidStringToken = function(position, message) {
        if (this.inTemplateElement && this.options.ecmaVersion >= 9)
          throw INVALID_TEMPLATE_ESCAPE_ERROR;
        this.raise(position, message);
      }, pp.readTmplToken = function() {
        for (var out = "", chunkStart = this.pos;; ) {
          this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
          var ch = this.input.charCodeAt(this.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123)
            return this.pos !== this.start || this.type !== types$1.template && this.type !== types$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1.template, out)) : ch === 36 ? (this.pos += 2, this.finishToken(types$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1.backQuote));
          if (ch === 92)
            out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
          else if (isNewLine(ch)) {
            switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
              case 13:
                this.input.charCodeAt(this.pos) === 10 && ++this.pos;
              case 10:
                out += `
`;
                break;
              default:
                out += String.fromCharCode(ch);
            }
            this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
          } else
            ++this.pos;
        }
      }, pp.readInvalidTemplateToken = function() {
        for (;this.pos < this.input.length; this.pos++)
          switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if (this.input[this.pos + 1] !== "{")
                break;
            case "`":
              return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
            case "\r":
              this.input[this.pos + 1] === `
` && ++this.pos;
            case `
`:
            case "\u2028":
            case "\u2029":
              ++this.curLine, this.lineStart = this.pos + 1;
          }
        this.raise(this.start, "Unterminated template");
      }, pp.readEscapedChar = function(inTemplate) {
        var ch = this.input.charCodeAt(++this.pos);
        switch (++this.pos, ch) {
          case 110:
            return `
`;
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString(this.readCodePoint());
          case 116:
            return "\t";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            this.input.charCodeAt(this.pos) === 10 && ++this.pos;
          case 10:
            return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
          case 56:
          case 57:
            if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
              var codePos = this.pos - 1;
              this.invalidStringToken(codePos, "Invalid escape sequence in template string");
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
              return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), octalStr === "0" && ch !== 56 && ch !== 57 || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
            }
            return isNewLine(ch) ? (this.options.locations && (this.lineStart = this.pos, ++this.curLine), "") : String.fromCharCode(ch);
        }
      }, pp.readHexChar = function(len) {
        var codePos = this.pos, n = this.readInt(16, len);
        return n === null && this.invalidStringToken(codePos, "Bad character escape sequence"), n;
      }, pp.readWord1 = function() {
        this.containsEsc = false;
        for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6;this.pos < this.input.length; ) {
          var ch = this.fullCharCodeAtPos();
          if (isIdentifierChar(ch, astral))
            this.pos += ch <= 65535 ? 1 : 2;
          else {
            if (ch !== 92)
              break;
            this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            this.input.charCodeAt(++this.pos) !== 117 && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
            var esc = this.readCodePoint();
            (first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.pos);
      }, pp.readWord = function() {
        var word = this.readWord1(), type = types$1.name;
        return this.keywords.test(word) && (type = keywords[word]), this.finishToken(type, word);
      };
      Parser.acorn = { Parser, version: "8.14.0", defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, tokTypes: types$1, keywordTypes: keywords, TokContext, tokContexts: types, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };
      const external_node_module_namespaceObject = __require2("node:module"), external_node_url_namespaceObject = (__require2("node:fs"), __require2("node:url")), external_node_assert_namespaceObject = __require2("node:assert"), external_node_v8_namespaceObject = (__require2("node:process"), __require2("node:path"), __require2("node:v8")), external_node_util_namespaceObject = __require2("node:util");
      new Set(external_node_module_namespaceObject.builtinModules);
      function normalizeSlash(path4) {
        return path4.replace(/\\/g, "/");
      }
      const own$1 = {}.hasOwnProperty, classRegExp = /^([A-Z][a-z\d]*)+$/, kTypes = new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]), codes = {};
      function formatList(array, type = "and") {
        return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
      }
      const messages = new Map;
      let userStackTraceLimit;
      function createError(sym, value2, constructor) {
        return messages.set(sym, value2), function(Base, key) {
          return NodeError;
          function NodeError(...parameters) {
            const limit = Error.stackTraceLimit;
            isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
            const error = new Base;
            isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
            const message = function(key2, parameters2, self) {
              const message2 = messages.get(key2);
              if (external_node_assert_namespaceObject(message2 !== undefined, "expected `message` to be found"), typeof message2 == "function")
                return external_node_assert_namespaceObject(message2.length <= parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self, parameters2);
              const regex = /%[dfijoOs]/g;
              let expectedLength = 0;
              for (;regex.exec(message2) !== null; )
                expectedLength++;
              return external_node_assert_namespaceObject(expectedLength === parameters2.length, `Code: ${key2}; The provided arguments length (${parameters2.length}) does not match the required ones (${expectedLength}).`), parameters2.length === 0 ? message2 : (parameters2.unshift(message2), Reflect.apply(external_node_util_namespaceObject.format, null, parameters2));
            }(key, parameters, error);
            return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
              return `${this.name} [${key}]: ${this.message}`;
            }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
          }
        }(constructor, sym);
      }
      function isErrorStackTraceLimitWritable() {
        try {
          if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot())
            return false;
        } catch {
        }
        const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
        return desc === undefined ? Object.isExtensible(Error) : own$1.call(desc, "writable") && desc.writable !== undefined ? desc.writable : desc.set !== undefined;
      }
      codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
        external_node_assert_namespaceObject(typeof name == "string", "'name' must be a string"), Array.isArray(expected) || (expected = [expected]);
        let message = "The ";
        if (name.endsWith(" argument"))
          message += `${name} `;
        else {
          const type = name.includes(".") ? "property" : "argument";
          message += `"${name}" ${type} `;
        }
        message += "must be ";
        const types2 = [], instances = [], other = [];
        for (const value2 of expected)
          external_node_assert_namespaceObject(typeof value2 == "string", "All expected entries have to be of type string"), kTypes.has(value2) ? types2.push(value2.toLowerCase()) : classRegExp.exec(value2) === null ? (external_node_assert_namespaceObject(value2 !== "object", 'The value "object" should be written as "Object"'), other.push(value2)) : instances.push(value2);
        if (instances.length > 0) {
          const pos = types2.indexOf("object");
          pos !== -1 && (types2.slice(pos, 1), instances.push("Object"));
        }
        return types2.length > 0 && (message += `${types2.length > 1 ? "one of type" : "of type"} ${formatList(types2, "or")}`, (instances.length > 0 || other.length > 0) && (message += " or ")), instances.length > 0 && (message += `an instance of ${formatList(instances, "or")}`, other.length > 0 && (message += " or ")), other.length > 0 && (other.length > 1 ? message += `one of ${formatList(other, "or")}` : (other[0].toLowerCase() !== other[0] && (message += "an "), message += `${other[0]}`)), message += `. Received ${function(value2) {
          if (value2 == null)
            return String(value2);
          if (typeof value2 == "function" && value2.name)
            return `function ${value2.name}`;
          if (typeof value2 == "object")
            return value2.constructor && value2.constructor.name ? `an instance of ${value2.constructor.name}` : `${(0, external_node_util_namespaceObject.inspect)(value2, { depth: -1 })}`;
          let inspected = (0, external_node_util_namespaceObject.inspect)(value2, { colors: false });
          inspected.length > 28 && (inspected = `${inspected.slice(0, 25)}...`);
          return `type ${typeof value2} (${inspected})`;
        }(actual)}`, message;
      }, TypeError), codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = undefined) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path4, base, message) => `Invalid package config ${path4}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = undefined) => {
        const relatedError = typeof target == "string" && !isImport && target.length > 0 && !target.startsWith("./");
        return key === "." ? (external_node_assert_namespaceObject(isImport === false), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? '; targets must start with "./"' : ""}`;
      }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path4, base, exactUrl = false) => `Cannot find ${exactUrl ? "module" : "package"} '${path4}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = undefined) => subpath === "." ? `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", 'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.', TypeError), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path4) => `Unknown file extension "${extension}" for ${path4}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
        let inspected = (0, external_node_util_namespaceObject.inspect)(value2);
        inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
        return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
      }, TypeError);
      const captureLargerStackTrace = function(wrappedFunction) {
        const hidden = "__node_internal_" + wrappedFunction.name;
        return Object.defineProperty(wrappedFunction, "name", { value: hidden }), wrappedFunction;
      }(function(error) {
        const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
        return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
      });
      const { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes;
      new Map;
      const { ERR_UNKNOWN_FILE_EXTENSION } = codes;
      RegExp.prototype[Symbol.replace];
      const { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_RESOLVE_REQUEST } = codes;
      new Set;
      function fileURLToPath(id) {
        return typeof id != "string" || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
      }
      function pathToFileURL3(id) {
        return (0, external_node_url_namespaceObject.pathToFileURL)(fileURLToPath(id)).toString();
      }
      function importMetaPathsPlugin(_ctx, opts) {
        return { name: "import-meta-paths", visitor: { Program(path4) {
          const metaUrls = [], metaDirnames = [], metaFilenames = [];
          path4.traverse({ MemberExpression(memberExpPath) {
            const { node } = memberExpPath;
            if (node.object.type === "MetaProperty" && node.object.meta.name === "import" && node.object.property.name === "meta" && node.property.type === "Identifier")
              switch (node.property.name) {
                case "url":
                  metaUrls.push(memberExpPath);
                  break;
                case "dirname":
                  metaDirnames.push(memberExpPath);
                  break;
                case "filename":
                  metaFilenames.push(memberExpPath);
              }
          } });
          for (const meta of metaUrls)
            meta.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(pathToFileURL3(opts.filename)) : "require('url').pathToFileURL(__filename).toString()"}`);
          for (const metaDirname of metaDirnames)
            metaDirname.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(pathe_ff20891b_dirname(fileURLToPath(pathToFileURL3(opts.filename)))) : "__dirname"}`);
          for (const metaFilename of metaFilenames)
            metaFilename.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify(fileURLToPath(pathToFileURL3(opts.filename))) : "__filename"}`);
        } } };
      }
      var helper_module_imports_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.25.9/node_modules/@babel/helper-module-imports/lib/index.js"), helper_module_transforms_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.26.0_@babel+core@7.26.0/node_modules/@babel/helper-module-transforms/lib/index.js"), helper_simple_access_lib = __webpack_require__("./node_modules/.pnpm/@babel+helper-simple-access@7.25.9/node_modules/@babel/helper-simple-access/lib/index.js");
      function transformDynamicImport(path4, noInterop, file) {
        path4.replaceWith((0, helper_module_transforms_lib.buildDynamicImport)(path4.node, true, false, (specifier) => ((source, file2, noInterop2) => {
          const exp = lib.template.expression.ast`jitiImport(${source})`;
          return noInterop2 ? exp : lib.types.callExpression(lib.types.memberExpression(exp, lib.types.identifier("then")), [lib.types.arrowFunctionExpression([lib.types.identifier("m")], lib.types.callExpression(file2.addHelper("interopRequireWildcard"), [lib.types.identifier("m")]))]);
        })(specifier, file, noInterop)));
      }
      const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
      function findMap(arr, cb) {
        if (arr)
          for (const el of arr) {
            const res = cb(el);
            if (res != null)
              return res;
          }
      }
      const transform_module = (0, helper_plugin_utils_lib.declare)((api, options) => {
        const { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false, async = false } = options, constantReexports = api.assumption("constantReexports") ?? loose, enumerableModuleMeta = api.assumption("enumerableModuleMeta") ?? loose, noIncompleteNsImportDetection = api.assumption("noIncompleteNsImportDetection") ?? false;
        if (!(typeof lazy == "boolean" || typeof lazy == "function" || Array.isArray(lazy) && lazy.every((item) => typeof item == "string")))
          throw new Error(".lazy must be a boolean, array of strings, or a function");
        if (typeof strictNamespace != "boolean")
          throw new TypeError(".strictNamespace must be a boolean, or undefined");
        if (typeof mjsStrictNamespace != "boolean")
          throw new TypeError(".mjsStrictNamespace must be a boolean, or undefined");
        const getAssertion = (localName) => lib.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path4) {
          const localName = path4.node.name;
          if (localName !== "module" && localName !== "exports")
            return;
          const localBinding = path4.scope.getBinding(localName);
          this.scope.getBinding(localName) !== localBinding || path4.parentPath.isObjectProperty({ value: path4.node }) && path4.parentPath.parentPath.isObjectPattern() || path4.parentPath.isAssignmentExpression({ left: path4.node }) || path4.isAssignmentExpression({ left: path4.node }) || path4.replaceWith(getAssertion(localName));
        }, UpdateExpression(path4) {
          const arg = path4.get("argument");
          if (!arg.isIdentifier())
            return;
          const localName = arg.node.name;
          if (localName !== "module" && localName !== "exports")
            return;
          const localBinding = path4.scope.getBinding(localName);
          this.scope.getBinding(localName) === localBinding && path4.replaceWith(lib.types.assignmentExpression(path4.node.operator[0] + "=", arg.node, getAssertion(localName)));
        }, AssignmentExpression(path4) {
          const left = path4.get("left");
          if (left.isIdentifier()) {
            const localName = left.node.name;
            if (localName !== "module" && localName !== "exports")
              return;
            const localBinding = path4.scope.getBinding(localName);
            if (this.scope.getBinding(localName) !== localBinding)
              return;
            const right = path4.get("right");
            right.replaceWith(lib.types.sequenceExpression([right.node, getAssertion(localName)]));
          } else if (left.isPattern()) {
            const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).find((localName2) => (localName2 === "module" || localName2 === "exports") && this.scope.getBinding(localName2) === path4.scope.getBinding(localName2));
            if (localName) {
              const right = path4.get("right");
              right.replaceWith(lib.types.sequenceExpression([right.node, getAssertion(localName)]));
            }
          }
        } };
        return { name: "transform-modules-commonjs", pre() {
          this.file.set("@babel/plugin-transform-modules-*", "commonjs"), lazy && function(file, hook) {
            let hooks = file.get(commonJSHooksKey);
            hooks || file.set(commonJSHooksKey, hooks = []), hooks.push(hook);
          }(this.file, ((lazy2) => ({ name: "babel-plugin-transform-modules-commonjs/lazy", version: "7.24.7", getWrapperPayload: (source, metadata) => (0, helper_module_transforms_lib.isSideEffectImport)(metadata) || metadata.reexportAll ? null : lazy2 === true ? source.includes(".") ? null : "lazy/function" : Array.isArray(lazy2) ? lazy2.includes(source) ? "lazy/function" : null : typeof lazy2 == "function" ? lazy2(source) ? "lazy/function" : null : undefined, buildRequireWrapper(name, init, payload, referenced) {
            if (payload === "lazy/function")
              return !!referenced && lib.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
          }, wrapReference(ref2, payload) {
            if (payload === "lazy/function")
              return lib.types.callExpression(ref2, []);
          } }))(lazy));
        }, visitor: { ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path4) {
          if (path4.isCallExpression() && !lib.types.isImport(path4.node.callee))
            return;
          let { scope } = path4;
          do {
            scope.rename("require");
          } while (scope = scope.parent);
          transformDynamicImport(path4, noInterop, this.file);
        }, Program: { exit(path4, state) {
          if (!(0, helper_module_imports_lib.isModule)(path4))
            return;
          path4.scope.rename("exports"), path4.scope.rename("module"), path4.scope.rename("require"), path4.scope.rename("__filename"), path4.scope.rename("__dirname"), allowCommonJSExports || (process.env.BABEL_8_BREAKING ? (0, helper_simple_access_lib.A)(path4, new Set(["module", "exports"])) : (0, helper_simple_access_lib.A)(path4, new Set(["module", "exports"]), false), path4.traverse(moduleExportsVisitor, { scope: path4.scope }));
          let moduleName = (0, helper_module_transforms_lib.getModuleName)(this.file.opts, options);
          moduleName && (moduleName = lib.types.stringLiteral(moduleName));
          const hooks = function(file) {
            const hooks2 = file.get(commonJSHooksKey);
            return { getWrapperPayload: (...args) => findMap(hooks2, (hook) => hook.getWrapperPayload?.(...args)), wrapReference: (...args) => findMap(hooks2, (hook) => hook.wrapReference?.(...args)), buildRequireWrapper: (...args) => findMap(hooks2, (hook) => hook.buildRequireWrapper?.(...args)) };
          }(this.file), { meta, headers } = (0, helper_module_transforms_lib.rewriteModuleStatementsAndPrepareHeader)(path4, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, wrapReference: hooks.wrapReference, getWrapperPayload: hooks.getWrapperPayload, esNamespaceOnly: typeof state.filename == "string" && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
          for (const [source, metadata] of meta.source) {
            const loadExpr = async ? lib.types.awaitExpression(lib.types.callExpression(lib.types.identifier("jitiImport"), [lib.types.stringLiteral(source)])) : lib.types.callExpression(lib.types.identifier("require"), [lib.types.stringLiteral(source)]);
            let header;
            if ((0, helper_module_transforms_lib.isSideEffectImport)(metadata)) {
              if (lazy && metadata.wrap === "function")
                throw new Error("Assertion failure");
              header = lib.types.expressionStatement(loadExpr);
            } else {
              const init = (0, helper_module_transforms_lib.wrapInterop)(path4, loadExpr, metadata.interop) || loadExpr;
              if (metadata.wrap) {
                const res = hooks.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                if (res === false)
                  continue;
                header = res;
              }
              header ??= lib.template.statement.ast`
                var ${metadata.name} = ${init};
              `;
            }
            header.loc = metadata.loc, headers.push(header), headers.push(...(0, helper_module_transforms_lib.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
          }
          (0, helper_module_transforms_lib.ensureStatementsHoisted)(headers), path4.unshiftContainer("body", headers), path4.get("body").forEach((path22) => {
            headers.includes(path22.node) && path22.isVariableDeclaration() && path22.scope.registerDeclaration(path22);
          });
        } } } };
      });
      function transform(opts) {
        const _opts = { babelrc: false, configFile: false, compact: false, retainLines: typeof opts.retainLines != "boolean" || opts.retainLines, filename: "", cwd: "/", ...opts.babel, plugins: [[transform_module, { allowTopLevelThis: true, noInterop: !opts.interopDefault, async: opts.async }], [importMetaPathsPlugin, { filename: opts.filename }], [importMetaEnvPlugin], [importMetaResolvePlugin], [plugin_syntax_class_properties_lib.A], [plugin_transform_export_namespace_from_lib.A]] };
        opts.jsx && _opts.plugins.push([plugin_syntax_jsx_lib.default], [plugin_transform_react_jsx_lib.A, Object.assign({}, opts.jsx)]), opts.ts && (_opts.plugins.push([plugin_transform_typescript_lib.default, { allowDeclareFields: true, isTSX: opts.jsx && /\.[cm]?tsx$/.test(opts.filename || "") }]), _opts.plugins.unshift([babel_plugin_transform_typescript_metadata], [plugin_proposal_decorators_lib.A, { legacy: true }]), _opts.plugins.push(babel_plugin_parameter_decorator_lib_default()), _opts.plugins.push(plugin_syntax_import_assertions_lib.A)), opts.babel && Array.isArray(opts.babel.plugins) && _opts.plugins?.push(...opts.babel.plugins);
        try {
          return { code: (0, lib.transformSync)(opts.source, _opts)?.code || "" };
        } catch (error) {
          return { error, code: "exports.__JITI_ERROR__ = " + JSON.stringify({ filename: opts.filename, line: error.loc?.line || 0, column: error.loc?.column || 0, code: error.code?.replace("BABEL_", "").replace("PARSE_ERROR", "ParseError"), message: error.message?.replace("/: ", "").replace(/\(.+\)\s*$/, "") }) };
        }
      }
    })(), module.exports = __webpack_exports__.default;
  })();
});
var exports_env = {};
__export(exports_env, {
  DEBUG: () => DEBUG
});
var DEBUG = resolveDebug(process.env.DEBUG);
function resolveDebug(debug) {
  if (debug === undefined) {
    return false;
  }
  if (debug === "true" || debug === "1") {
    return true;
  }
  if (debug === "false" || debug === "0") {
    return false;
  }
  if (debug === "*") {
    return true;
  }
  let debuggers = debug.split(",").map((d) => d.split(":")[0]);
  if (debuggers.includes("-tailwindcss")) {
    return false;
  }
  if (debuggers.includes("tailwindcss")) {
    return true;
  }
  return false;
}
var import_enhanced_resolve = __toESM(require_lib2(), 1);
var import_jiti = __toESM(require_jiti(), 1);
var import_babel = __toESM(require_babel(), 1);
function onError(err) {
  throw err;
}
var nativeImport = (id) => import(id);
function createJiti(id, opts = {}) {
  if (!opts.transform) {
    opts = { ...opts, transform: import_babel.default };
  }
  return import_jiti.default(id, opts, {
    onError,
    nativeImport,
    createRequire: createRequire22
  });
}
var version = "4.0.0-beta.9";
var BACKSLASH = 92;
var SLASH = 47;
var ASTERISK = 42;
var DOUBLE_QUOTE = 34;
var SINGLE_QUOTE = 39;
var COLON = 58;
var SEMICOLON = 59;
var LINE_BREAK = 10;
var SPACE = 32;
var TAB = 9;
var OPEN_CURLY = 123;
var CLOSE_CURLY = 125;
var OPEN_PAREN = 40;
var CLOSE_PAREN = 41;
var OPEN_BRACKET = 91;
var CLOSE_BRACKET = 93;
var DASH = 45;
var AT_SIGN = 64;
var EXCLAMATION_MARK = 33;
function parse(input) {
  input = input.replaceAll(`\r
`, `
`);
  let ast = [];
  let licenseComments = [];
  let stack = [];
  let parent = null;
  let node = null;
  let buffer = "";
  let closingBracketStack = "";
  let peekChar;
  for (let i = 0;i < input.length; i++) {
    let currentChar = input.charCodeAt(i);
    if (currentChar === BACKSLASH) {
      buffer += input.slice(i, i + 2);
      i += 1;
    } else if (currentChar === SLASH && input.charCodeAt(i + 1) === ASTERISK) {
      let start = i;
      for (let j = i + 2;j < input.length; j++) {
        peekChar = input.charCodeAt(j);
        if (peekChar === BACKSLASH) {
          j += 1;
        } else if (peekChar === ASTERISK && input.charCodeAt(j + 1) === SLASH) {
          i = j + 1;
          break;
        }
      }
      let commentString = input.slice(start, i + 1);
      if (commentString.charCodeAt(2) === EXCLAMATION_MARK) {
        licenseComments.push(comment(commentString.slice(2, -2)));
      }
    } else if (currentChar === SINGLE_QUOTE || currentChar === DOUBLE_QUOTE) {
      let start = i;
      for (let j = i + 1;j < input.length; j++) {
        peekChar = input.charCodeAt(j);
        if (peekChar === BACKSLASH) {
          j += 1;
        } else if (peekChar === currentChar) {
          i = j;
          break;
        } else if (peekChar === SEMICOLON && input.charCodeAt(j + 1) === LINE_BREAK) {
          throw new Error(`Unterminated string: ${input.slice(start, j + 1) + String.fromCharCode(currentChar)}`);
        } else if (peekChar === LINE_BREAK) {
          throw new Error(`Unterminated string: ${input.slice(start, j) + String.fromCharCode(currentChar)}`);
        }
      }
      buffer += input.slice(start, i + 1);
    } else if ((currentChar === SPACE || currentChar === LINE_BREAK || currentChar === TAB) && (peekChar = input.charCodeAt(i + 1)) && (peekChar === SPACE || peekChar === LINE_BREAK || peekChar === TAB)) {
      continue;
    } else if (currentChar === LINE_BREAK) {
      if (buffer.length === 0)
        continue;
      peekChar = buffer.charCodeAt(buffer.length - 1);
      if (peekChar !== SPACE && peekChar !== LINE_BREAK && peekChar !== TAB) {
        buffer += " ";
      }
    } else if (currentChar === DASH && input.charCodeAt(i + 1) === DASH && buffer.length === 0) {
      let closingBracketStack2 = "";
      let start = i;
      let colonIdx = -1;
      for (let j = i + 2;j < input.length; j++) {
        peekChar = input.charCodeAt(j);
        if (peekChar === BACKSLASH) {
          j += 1;
        } else if (peekChar === SLASH && input.charCodeAt(j + 1) === ASTERISK) {
          for (let k = j + 2;k < input.length; k++) {
            peekChar = input.charCodeAt(k);
            if (peekChar === BACKSLASH) {
              k += 1;
            } else if (peekChar === ASTERISK && input.charCodeAt(k + 1) === SLASH) {
              j = k + 1;
              break;
            }
          }
        } else if (colonIdx === -1 && peekChar === COLON) {
          colonIdx = buffer.length + j - start;
        } else if (peekChar === SEMICOLON && closingBracketStack2.length === 0) {
          buffer += input.slice(start, j);
          i = j;
          break;
        } else if (peekChar === OPEN_PAREN) {
          closingBracketStack2 += ")";
        } else if (peekChar === OPEN_BRACKET) {
          closingBracketStack2 += "]";
        } else if (peekChar === OPEN_CURLY) {
          closingBracketStack2 += "}";
        } else if ((peekChar === CLOSE_CURLY || input.length - 1 === j) && closingBracketStack2.length === 0) {
          i = j - 1;
          buffer += input.slice(start, j);
          break;
        } else if (peekChar === CLOSE_PAREN || peekChar === CLOSE_BRACKET || peekChar === CLOSE_CURLY) {
          if (closingBracketStack2.length > 0 && input[j] === closingBracketStack2[closingBracketStack2.length - 1]) {
            closingBracketStack2 = closingBracketStack2.slice(0, -1);
          }
        }
      }
      let declaration = parseDeclaration(buffer, colonIdx);
      if (parent) {
        parent.nodes.push(declaration);
      } else {
        ast.push(declaration);
      }
      buffer = "";
    } else if (currentChar === SEMICOLON && buffer.charCodeAt(0) === AT_SIGN) {
      node = parseAtRule(buffer);
      if (parent) {
        parent.nodes.push(node);
      } else {
        ast.push(node);
      }
      buffer = "";
      node = null;
    } else if (currentChar === SEMICOLON && closingBracketStack[closingBracketStack.length - 1] !== ")") {
      let declaration = parseDeclaration(buffer);
      if (parent) {
        parent.nodes.push(declaration);
      } else {
        ast.push(declaration);
      }
      buffer = "";
    } else if (currentChar === OPEN_CURLY && closingBracketStack[closingBracketStack.length - 1] !== ")") {
      closingBracketStack += "}";
      node = rule(buffer.trim());
      if (parent) {
        parent.nodes.push(node);
      }
      stack.push(parent);
      parent = node;
      buffer = "";
      node = null;
    } else if (currentChar === CLOSE_CURLY && closingBracketStack[closingBracketStack.length - 1] !== ")") {
      if (closingBracketStack === "") {
        throw new Error("Missing opening {");
      }
      closingBracketStack = closingBracketStack.slice(0, -1);
      if (buffer.length > 0) {
        if (buffer.charCodeAt(0) === AT_SIGN) {
          node = parseAtRule(buffer);
          if (parent) {
            parent.nodes.push(node);
          } else {
            ast.push(node);
          }
          buffer = "";
          node = null;
        } else {
          let colonIdx = buffer.indexOf(":");
          if (parent) {
            parent.nodes.push(parseDeclaration(buffer, colonIdx));
          }
        }
      }
      let grandParent = stack.pop() ?? null;
      if (grandParent === null && parent) {
        ast.push(parent);
      }
      parent = grandParent;
      buffer = "";
      node = null;
    } else if (currentChar === OPEN_PAREN) {
      closingBracketStack += ")";
      buffer += "(";
    } else if (currentChar === CLOSE_PAREN) {
      if (closingBracketStack[closingBracketStack.length - 1] !== ")") {
        throw new Error("Missing opening (");
      }
      closingBracketStack = closingBracketStack.slice(0, -1);
      buffer += ")";
    } else {
      if (buffer.length === 0 && (currentChar === SPACE || currentChar === LINE_BREAK || currentChar === TAB)) {
        continue;
      }
      buffer += String.fromCharCode(currentChar);
    }
  }
  if (buffer.charCodeAt(0) === AT_SIGN) {
    ast.push(parseAtRule(buffer));
  }
  if (closingBracketStack.length > 0 && parent) {
    if (parent.kind === "rule") {
      throw new Error(`Missing closing } at ${parent.selector}`);
    }
    if (parent.kind === "at-rule") {
      throw new Error(`Missing closing } at ${parent.name} ${parent.params}`);
    }
  }
  if (licenseComments.length > 0) {
    return licenseComments.concat(ast);
  }
  return ast;
}
function parseAtRule(buffer, nodes = []) {
  for (let i = 5;i < buffer.length; i++) {
    let currentChar = buffer.charCodeAt(i);
    if (currentChar === SPACE || currentChar === OPEN_PAREN) {
      let name = buffer.slice(0, i).trim();
      let params = buffer.slice(i).trim();
      return atRule(name, params, nodes);
    }
  }
  return atRule(buffer.trim(), "", nodes);
}
function parseDeclaration(buffer, colonIdx = buffer.indexOf(":")) {
  let importantIdx = buffer.indexOf("!important", colonIdx + 1);
  return decl(buffer.slice(0, colonIdx).trim(), buffer.slice(colonIdx + 1, importantIdx === -1 ? buffer.length : importantIdx).trim(), importantIdx !== -1);
}
var AT_SIGN2 = 64;
function styleRule(selector, nodes = []) {
  return {
    kind: "rule",
    selector,
    nodes
  };
}
function atRule(name, params = "", nodes = []) {
  return {
    kind: "at-rule",
    name,
    params,
    nodes
  };
}
function rule(selector, nodes = []) {
  if (selector.charCodeAt(0) === AT_SIGN2) {
    return parseAtRule(selector, nodes);
  }
  return styleRule(selector, nodes);
}
function decl(property, value2, important = false) {
  return {
    kind: "declaration",
    property,
    value: value2,
    important
  };
}
function comment(value2) {
  return {
    kind: "comment",
    value: value2
  };
}
function context(context2, nodes) {
  return {
    kind: "context",
    context: context2,
    nodes
  };
}
function atRoot(nodes) {
  return {
    kind: "at-root",
    nodes
  };
}
function walk(ast, visit, path4 = [], context2 = {}) {
  for (let i = 0;i < ast.length; i++) {
    let node = ast[i];
    let parent = path4[path4.length - 1] ?? null;
    if (node.kind === "context") {
      if (walk(node.nodes, visit, path4, { ...context2, ...node.context }) === 2) {
        return 2;
      }
      continue;
    }
    path4.push(node);
    let status = visit(node, {
      parent,
      context: context2,
      path: path4,
      replaceWith(newNode) {
        if (Array.isArray(newNode)) {
          if (newNode.length === 0) {
            ast.splice(i, 1);
          } else if (newNode.length === 1) {
            ast[i] = newNode[0];
          } else {
            ast.splice(i, 1, ...newNode);
          }
        } else {
          ast[i] = newNode;
        }
        i--;
      }
    }) ?? 0;
    path4.pop();
    if (status === 2)
      return 2;
    if (status === 1)
      continue;
    if (node.kind === "rule" || node.kind === "at-rule") {
      path4.push(node);
      let result = walk(node.nodes, visit, path4, context2);
      path4.pop();
      if (result === 2) {
        return 2;
      }
    }
  }
}
function walkDepth(ast, visit, path4 = [], context2 = {}) {
  for (let i = 0;i < ast.length; i++) {
    let node = ast[i];
    let parent = path4[path4.length - 1] ?? null;
    if (node.kind === "rule" || node.kind === "at-rule") {
      path4.push(node);
      walkDepth(node.nodes, visit, path4, context2);
      path4.pop();
    } else if (node.kind === "context") {
      walkDepth(node.nodes, visit, path4, { ...context2, ...node.context });
      continue;
    }
    path4.push(node);
    visit(node, {
      parent,
      context: context2,
      path: path4,
      replaceWith(newNode) {
        if (Array.isArray(newNode)) {
          if (newNode.length === 0) {
            ast.splice(i, 1);
          } else if (newNode.length === 1) {
            ast[i] = newNode[0];
          } else {
            ast.splice(i, 1, ...newNode);
          }
        } else {
          ast[i] = newNode;
        }
        i += newNode.length - 1;
      }
    });
    path4.pop();
  }
}
function optimizeAst(ast) {
  let atRoots = [];
  let seenAtProperties = new Set;
  function transform2(node, parent, depth = 0) {
    if (node.kind === "declaration") {
      if (node.property === "--tw-sort" || node.value === undefined || node.value === null) {
        return;
      }
      parent.push(node);
    } else if (node.kind === "rule") {
      let copy = { ...node, nodes: [] };
      for (let child of node.nodes) {
        transform2(child, copy.nodes, depth + 1);
      }
      parent.push(copy);
    } else if (node.kind === "at-rule" && node.name === "@property" && depth === 0) {
      if (seenAtProperties.has(node.params)) {
        return;
      }
      seenAtProperties.add(node.params);
      let copy = { ...node, nodes: [] };
      for (let child of node.nodes) {
        transform2(child, copy.nodes, depth + 1);
      }
      parent.push(copy);
    } else if (node.kind === "at-rule") {
      let copy = { ...node, nodes: [] };
      for (let child of node.nodes) {
        transform2(child, copy.nodes, depth + 1);
      }
      parent.push(copy);
    } else if (node.kind === "at-root") {
      for (let child of node.nodes) {
        let newParent = [];
        transform2(child, newParent, 0);
        for (let child2 of newParent) {
          atRoots.push(child2);
        }
      }
    } else if (node.kind === "context") {
      if (node.context.reference) {
        return;
      }
      for (let child of node.nodes) {
        transform2(child, parent, depth);
      }
    } else if (node.kind === "comment") {
      parent.push(node);
    } else {
    }
  }
  let newAst = [];
  for (let node of ast) {
    transform2(node, newAst, 0);
  }
  return newAst.concat(atRoots);
}
function toCss(ast) {
  function stringify(node, depth = 0) {
    let css2 = "";
    let indent = "  ".repeat(depth);
    if (node.kind === "declaration") {
      css2 += `${indent}${node.property}: ${node.value}${node.important ? " !important" : ""};
`;
    } else if (node.kind === "rule") {
      css2 += `${indent}${node.selector} {
`;
      for (let child of node.nodes) {
        css2 += stringify(child, depth + 1);
      }
      css2 += `${indent}}
`;
    } else if (node.kind === "at-rule") {
      if (node.nodes.length === 0) {
        return `${indent}${node.name} ${node.params};
`;
      }
      css2 += `${indent}${node.name}${node.params ? ` ${node.params} ` : " "}{
`;
      for (let child of node.nodes) {
        css2 += stringify(child, depth + 1);
      }
      css2 += `${indent}}
`;
    } else if (node.kind === "comment") {
      css2 += `${indent}/*${node.value}*/
`;
    } else if (node.kind === "context" || node.kind === "at-root") {
      return "";
    } else {
    }
    return css2;
  }
  let css = "";
  for (let node of ast) {
    let result = stringify(node);
    if (result !== "") {
      css += result;
    }
  }
  return css;
}
function compareBreakpoints(a, z, direction) {
  if (a === z)
    return 0;
  let aIsCssFunction = a.indexOf("(");
  let zIsCssFunction = z.indexOf("(");
  let aBucket = aIsCssFunction === -1 ? a.replace(/[\d.]+/g, "") : a.slice(0, aIsCssFunction);
  let zBucket = zIsCssFunction === -1 ? z.replace(/[\d.]+/g, "") : z.slice(0, zIsCssFunction);
  let order = (aBucket === zBucket ? 0 : aBucket < zBucket ? -1 : 1) || (direction === "asc" ? parseInt(a) - parseInt(z) : parseInt(z) - parseInt(a));
  if (Number.isNaN(order)) {
    return a < z ? -1 : 1;
  }
  return order;
}

class DefaultMap extends Map {
  factory;
  constructor(factory) {
    super();
    this.factory = factory;
  }
  get(key) {
    let value2 = super.get(key);
    if (value2 === undefined) {
      value2 = this.factory(key, this);
      this.set(key, value2);
    }
    return value2;
  }
}
var HASH = 35;
var NAMED_COLORS = new Set([
  "black",
  "silver",
  "gray",
  "white",
  "maroon",
  "red",
  "purple",
  "fuchsia",
  "green",
  "lime",
  "olive",
  "yellow",
  "navy",
  "blue",
  "teal",
  "aqua",
  "aliceblue",
  "antiquewhite",
  "aqua",
  "aquamarine",
  "azure",
  "beige",
  "bisque",
  "black",
  "blanchedalmond",
  "blue",
  "blueviolet",
  "brown",
  "burlywood",
  "cadetblue",
  "chartreuse",
  "chocolate",
  "coral",
  "cornflowerblue",
  "cornsilk",
  "crimson",
  "cyan",
  "darkblue",
  "darkcyan",
  "darkgoldenrod",
  "darkgray",
  "darkgreen",
  "darkgrey",
  "darkkhaki",
  "darkmagenta",
  "darkolivegreen",
  "darkorange",
  "darkorchid",
  "darkred",
  "darksalmon",
  "darkseagreen",
  "darkslateblue",
  "darkslategray",
  "darkslategrey",
  "darkturquoise",
  "darkviolet",
  "deeppink",
  "deepskyblue",
  "dimgray",
  "dimgrey",
  "dodgerblue",
  "firebrick",
  "floralwhite",
  "forestgreen",
  "fuchsia",
  "gainsboro",
  "ghostwhite",
  "gold",
  "goldenrod",
  "gray",
  "green",
  "greenyellow",
  "grey",
  "honeydew",
  "hotpink",
  "indianred",
  "indigo",
  "ivory",
  "khaki",
  "lavender",
  "lavenderblush",
  "lawngreen",
  "lemonchiffon",
  "lightblue",
  "lightcoral",
  "lightcyan",
  "lightgoldenrodyellow",
  "lightgray",
  "lightgreen",
  "lightgrey",
  "lightpink",
  "lightsalmon",
  "lightseagreen",
  "lightskyblue",
  "lightslategray",
  "lightslategrey",
  "lightsteelblue",
  "lightyellow",
  "lime",
  "limegreen",
  "linen",
  "magenta",
  "maroon",
  "mediumaquamarine",
  "mediumblue",
  "mediumorchid",
  "mediumpurple",
  "mediumseagreen",
  "mediumslateblue",
  "mediumspringgreen",
  "mediumturquoise",
  "mediumvioletred",
  "midnightblue",
  "mintcream",
  "mistyrose",
  "moccasin",
  "navajowhite",
  "navy",
  "oldlace",
  "olive",
  "olivedrab",
  "orange",
  "orangered",
  "orchid",
  "palegoldenrod",
  "palegreen",
  "paleturquoise",
  "palevioletred",
  "papayawhip",
  "peachpuff",
  "peru",
  "pink",
  "plum",
  "powderblue",
  "purple",
  "rebeccapurple",
  "red",
  "rosybrown",
  "royalblue",
  "saddlebrown",
  "salmon",
  "sandybrown",
  "seagreen",
  "seashell",
  "sienna",
  "silver",
  "skyblue",
  "slateblue",
  "slategray",
  "slategrey",
  "snow",
  "springgreen",
  "steelblue",
  "tan",
  "teal",
  "thistle",
  "tomato",
  "turquoise",
  "violet",
  "wheat",
  "white",
  "whitesmoke",
  "yellow",
  "yellowgreen",
  "transparent",
  "currentcolor",
  "canvas",
  "canvastext",
  "linktext",
  "visitedtext",
  "activetext",
  "buttonface",
  "buttontext",
  "buttonborder",
  "field",
  "fieldtext",
  "highlight",
  "highlighttext",
  "selecteditem",
  "selecteditemtext",
  "mark",
  "marktext",
  "graytext",
  "accentcolor",
  "accentcolortext"
]);
var IS_COLOR_FN = /^(rgba?|hsla?|hwb|color|(ok)?(lab|lch)|light-dark|color-mix)\(/i;
function isColor(value2) {
  return value2.charCodeAt(0) === HASH || IS_COLOR_FN.test(value2) || NAMED_COLORS.has(value2.toLowerCase());
}
var MATH_FUNCTIONS = [
  "calc",
  "min",
  "max",
  "clamp",
  "mod",
  "rem",
  "sin",
  "cos",
  "tan",
  "asin",
  "acos",
  "atan",
  "atan2",
  "pow",
  "sqrt",
  "hypot",
  "log",
  "exp",
  "round"
];
var KNOWN_DASHED_FUNCTIONS = ["anchor-size"];
var DASHED_FUNCTIONS_REGEX = new RegExp(`(${KNOWN_DASHED_FUNCTIONS.join("|")})\\(`, "g");
function hasMathFn(input) {
  return input.indexOf("(") !== -1 && MATH_FUNCTIONS.some((fn) => input.includes(`${fn}(`));
}
function addWhitespaceAroundMathOperators(input) {
  if (!MATH_FUNCTIONS.some((fn) => input.includes(fn))) {
    return input;
  }
  let hasKnownFunctions = false;
  if (KNOWN_DASHED_FUNCTIONS.some((fn) => input.includes(fn))) {
    DASHED_FUNCTIONS_REGEX.lastIndex = 0;
    input = input.replace(DASHED_FUNCTIONS_REGEX, (_, fn) => {
      hasKnownFunctions = true;
      return `$${KNOWN_DASHED_FUNCTIONS.indexOf(fn)}$(`;
    });
  }
  let result = "";
  let formattable = [];
  for (let i = 0;i < input.length; i++) {
    let char = input[i];
    if (char === "(") {
      result += char;
      let start = i;
      for (let j = i - 1;j >= 0; j--) {
        let inner = input.charCodeAt(j);
        if (inner >= 48 && inner <= 57) {
          start = j;
        } else if (inner >= 97 && inner <= 122) {
          start = j;
        } else {
          break;
        }
      }
      let fn = input.slice(start, i);
      if (MATH_FUNCTIONS.includes(fn)) {
        formattable.unshift(true);
        continue;
      } else if (formattable[0] && fn === "") {
        formattable.unshift(true);
        continue;
      }
      formattable.unshift(false);
      continue;
    } else if (char === ")") {
      result += char;
      formattable.shift();
    } else if (char === "," && formattable[0]) {
      result += `, `;
      continue;
    } else if (char === " " && formattable[0] && result[result.length - 1] === " ") {
      continue;
    } else if ((char === "+" || char === "*" || char === "/" || char === "-") && formattable[0]) {
      let trimmed = result.trimEnd();
      let prev = trimmed[trimmed.length - 1];
      if (prev === "+" || prev === "*" || prev === "/" || prev === "-") {
        result += char;
        continue;
      } else if (prev === "(" || prev === ",") {
        result += char;
        continue;
      } else if (input[i - 1] === " ") {
        result += `${char} `;
      } else {
        result += ` ${char} `;
      }
    } else if (formattable[0] && input.startsWith("to-zero", i)) {
      let start = i;
      i += 7;
      result += input.slice(start, i + 1);
    } else {
      result += char;
    }
  }
  if (hasKnownFunctions) {
    return result.replace(/\$(\d+)\$/g, (fn, idx) => KNOWN_DASHED_FUNCTIONS[idx] ?? fn);
  }
  return result;
}
var BACKSLASH2 = 92;
var OPEN_CURLY2 = 123;
var CLOSE_CURLY2 = 125;
var OPEN_PAREN2 = 40;
var CLOSE_PAREN2 = 41;
var OPEN_BRACKET2 = 91;
var CLOSE_BRACKET2 = 93;
var DOUBLE_QUOTE2 = 34;
var SINGLE_QUOTE2 = 39;
var closingBracketStack = new Uint8Array(256);
function segment(input, separator) {
  let stackPos = 0;
  let parts = [];
  let lastPos = 0;
  let len = input.length;
  let separatorCode = separator.charCodeAt(0);
  for (let idx = 0;idx < len; idx++) {
    let char = input.charCodeAt(idx);
    if (stackPos === 0 && char === separatorCode) {
      parts.push(input.slice(lastPos, idx));
      lastPos = idx + 1;
      continue;
    }
    switch (char) {
      case BACKSLASH2:
        idx += 1;
        break;
      case SINGLE_QUOTE2:
      case DOUBLE_QUOTE2:
        while (++idx < len) {
          let nextChar = input.charCodeAt(idx);
          if (nextChar === BACKSLASH2) {
            idx += 1;
            continue;
          }
          if (nextChar === char) {
            break;
          }
        }
        break;
      case OPEN_PAREN2:
        closingBracketStack[stackPos] = CLOSE_PAREN2;
        stackPos++;
        break;
      case OPEN_BRACKET2:
        closingBracketStack[stackPos] = CLOSE_BRACKET2;
        stackPos++;
        break;
      case OPEN_CURLY2:
        closingBracketStack[stackPos] = CLOSE_CURLY2;
        stackPos++;
        break;
      case CLOSE_BRACKET2:
      case CLOSE_CURLY2:
      case CLOSE_PAREN2:
        if (stackPos > 0 && char === closingBracketStack[stackPos - 1]) {
          stackPos--;
        }
        break;
    }
  }
  parts.push(input.slice(lastPos));
  return parts;
}
var checks = {
  color: isColor,
  length: isLength,
  percentage: isPercentage,
  ratio: isFraction,
  number: isNumber,
  integer: isPositiveInteger,
  url: isUrl,
  position: isBackgroundPosition,
  "bg-size": isBackgroundSize,
  "line-width": isLineWidth,
  image: isImage,
  "family-name": isFamilyName,
  "generic-name": isGenericName,
  "absolute-size": isAbsoluteSize,
  "relative-size": isRelativeSize,
  angle: isAngle,
  vector: isVector
};
function inferDataType(value2, types) {
  if (value2.startsWith("var("))
    return null;
  for (let type of types) {
    if (checks[type]?.(value2)) {
      return type;
    }
  }
  return null;
}
var IS_URL = /^url\(.*\)$/;
function isUrl(value2) {
  return IS_URL.test(value2);
}
function isLineWidth(value2) {
  return value2 === "thin" || value2 === "medium" || value2 === "thick";
}
var IS_IMAGE_FN = /^(?:element|image|cross-fade|image-set)\(/;
var IS_GRADIENT_FN = /^(repeating-)?(conic|linear|radial)-gradient\(/;
function isImage(value2) {
  let count = 0;
  for (let part of segment(value2, ",")) {
    if (part.startsWith("var("))
      continue;
    if (isUrl(part)) {
      count += 1;
      continue;
    }
    if (IS_GRADIENT_FN.test(part)) {
      count += 1;
      continue;
    }
    if (IS_IMAGE_FN.test(part)) {
      count += 1;
      continue;
    }
    return false;
  }
  return count > 0;
}
function isGenericName(value2) {
  return value2 === "serif" || value2 === "sans-serif" || value2 === "monospace" || value2 === "cursive" || value2 === "fantasy" || value2 === "system-ui" || value2 === "ui-serif" || value2 === "ui-sans-serif" || value2 === "ui-monospace" || value2 === "ui-rounded" || value2 === "math" || value2 === "emoji" || value2 === "fangsong";
}
function isFamilyName(value2) {
  let count = 0;
  for (let part of segment(value2, ",")) {
    let char = part.charCodeAt(0);
    if (char >= 48 && char <= 57)
      return false;
    if (part.startsWith("var("))
      continue;
    count += 1;
  }
  return count > 0;
}
function isAbsoluteSize(value2) {
  return value2 === "xx-small" || value2 === "x-small" || value2 === "small" || value2 === "medium" || value2 === "large" || value2 === "x-large" || value2 === "xx-large" || value2 === "xxx-large";
}
function isRelativeSize(value2) {
  return value2 === "larger" || value2 === "smaller";
}
var HAS_NUMBER = /[+-]?\d*\.?\d+(?:[eE][+-]?\d+)?/;
var IS_NUMBER = new RegExp(`^${HAS_NUMBER.source}$`);
function isNumber(value2) {
  return IS_NUMBER.test(value2) || hasMathFn(value2);
}
var IS_PERCENTAGE = new RegExp(`^${HAS_NUMBER.source}%$`);
function isPercentage(value2) {
  return IS_PERCENTAGE.test(value2) || hasMathFn(value2);
}
var IS_FRACTION = new RegExp(`^${HAS_NUMBER.source}s*/s*${HAS_NUMBER.source}$`);
function isFraction(value2) {
  return IS_FRACTION.test(value2) || hasMathFn(value2);
}
var LENGTH_UNITS = [
  "cm",
  "mm",
  "Q",
  "in",
  "pc",
  "pt",
  "px",
  "em",
  "ex",
  "ch",
  "rem",
  "lh",
  "rlh",
  "vw",
  "vh",
  "vmin",
  "vmax",
  "vb",
  "vi",
  "svw",
  "svh",
  "lvw",
  "lvh",
  "dvw",
  "dvh",
  "cqw",
  "cqh",
  "cqi",
  "cqb",
  "cqmin",
  "cqmax"
];
var IS_LENGTH = new RegExp(`^${HAS_NUMBER.source}(${LENGTH_UNITS.join("|")})$`);
function isLength(value2) {
  return IS_LENGTH.test(value2) || hasMathFn(value2);
}
function isBackgroundPosition(value2) {
  let count = 0;
  for (let part of segment(value2, " ")) {
    if (part === "center" || part === "top" || part === "right" || part === "bottom" || part === "left") {
      count += 1;
      continue;
    }
    if (part.startsWith("var("))
      continue;
    if (isLength(part) || isPercentage(part)) {
      count += 1;
      continue;
    }
    return false;
  }
  return count > 0;
}
function isBackgroundSize(value2) {
  let count = 0;
  for (let size of segment(value2, ",")) {
    if (size === "cover" || size === "contain") {
      count += 1;
      continue;
    }
    let values = segment(size, " ");
    if (values.length !== 1 && values.length !== 2) {
      return false;
    }
    if (values.every((value3) => value3 === "auto" || isLength(value3) || isPercentage(value3))) {
      count += 1;
      continue;
    }
  }
  return count > 0;
}
var ANGLE_UNITS = ["deg", "rad", "grad", "turn"];
var IS_ANGLE = new RegExp(`^${HAS_NUMBER.source}(${ANGLE_UNITS.join("|")})$`);
function isAngle(value2) {
  return IS_ANGLE.test(value2);
}
var IS_VECTOR = new RegExp(`^${HAS_NUMBER.source} +${HAS_NUMBER.source} +${HAS_NUMBER.source}$`);
function isVector(value2) {
  return IS_VECTOR.test(value2);
}
function isPositiveInteger(value2) {
  let num = Number(value2);
  return Number.isInteger(num) && num >= 0 && String(num) === String(value2);
}
function isValidSpacingMultiplier(value2) {
  return isMultipleOf(value2, 0.25);
}
function isValidOpacityValue(value2) {
  return isMultipleOf(value2, 0.25);
}
function isMultipleOf(value2, divisor) {
  let num = Number(value2);
  return num >= 0 && num % divisor === 0 && String(num) === String(value2);
}
var KEYWORDS = new Set(["inset", "inherit", "initial", "revert", "unset"]);
var LENGTH = /^-?(\d+|\.\d+)(.*?)$/g;
function replaceShadowColors(input, replacement) {
  let shadows = segment(input, ",").map((shadow) => {
    shadow = shadow.trim();
    let parts = segment(shadow, " ").filter((part) => part.trim() !== "");
    let color = null;
    let offsetX = null;
    let offsetY = null;
    for (let part of parts) {
      if (KEYWORDS.has(part)) {
        continue;
      } else if (LENGTH.test(part)) {
        if (offsetX === null) {
          offsetX = part;
        } else if (offsetY === null) {
          offsetY = part;
        }
        LENGTH.lastIndex = 0;
      } else if (color === null) {
        color = part;
      }
    }
    if (offsetX === null || offsetY === null)
      return shadow;
    let replacementColor = replacement(color ?? "currentcolor");
    if (color !== null) {
      return shadow.replace(color, replacementColor);
    }
    return `${shadow} ${replacementColor}`;
  });
  return shadows.join(", ");
}
function word(value2) {
  return {
    kind: "word",
    value: value2
  };
}
function fun(value2, nodes) {
  return {
    kind: "function",
    value: value2,
    nodes
  };
}
function separator(value2) {
  return {
    kind: "separator",
    value: value2
  };
}
function walk2(ast, visit, parent = null) {
  for (let i = 0;i < ast.length; i++) {
    let node = ast[i];
    let status = visit(node, {
      parent,
      replaceWith(newNode) {
        if (Array.isArray(newNode)) {
          if (newNode.length === 0) {
            ast.splice(i, 1);
          } else if (newNode.length === 1) {
            ast[i] = newNode[0];
          } else {
            ast.splice(i, 1, ...newNode);
          }
        } else {
          ast[i] = newNode;
        }
        i--;
      }
    }) ?? 0;
    if (status === 2)
      return 2;
    if (status === 1)
      continue;
    if (node.kind === "function") {
      if (walk2(node.nodes, visit, node) === 2) {
        return 2;
      }
    }
  }
}
function toCss2(ast) {
  let css = "";
  for (const node of ast) {
    switch (node.kind) {
      case "word":
      case "separator": {
        css += node.value;
        break;
      }
      case "function": {
        css += node.value + "(" + toCss2(node.nodes) + ")";
      }
    }
  }
  return css;
}
var BACKSLASH3 = 92;
var CLOSE_PAREN3 = 41;
var COLON2 = 58;
var COMMA = 44;
var DOUBLE_QUOTE3 = 34;
var EQUALS = 61;
var GREATER_THAN = 62;
var LESS_THAN = 60;
var NEWLINE = 10;
var OPEN_PAREN3 = 40;
var SINGLE_QUOTE3 = 39;
var SLASH2 = 47;
var SPACE2 = 32;
var TAB2 = 9;
function parse2(input) {
  input = input.replaceAll(`\r
`, `
`);
  let ast = [];
  let stack = [];
  let parent = null;
  let buffer = "";
  let peekChar;
  for (let i = 0;i < input.length; i++) {
    let currentChar = input.charCodeAt(i);
    switch (currentChar) {
      case COLON2:
      case COMMA:
      case EQUALS:
      case GREATER_THAN:
      case LESS_THAN:
      case NEWLINE:
      case SLASH2:
      case SPACE2:
      case TAB2: {
        if (buffer.length > 0) {
          let node2 = word(buffer);
          if (parent) {
            parent.nodes.push(node2);
          } else {
            ast.push(node2);
          }
          buffer = "";
        }
        let start = i;
        let end = i + 1;
        for (;end < input.length; end++) {
          peekChar = input.charCodeAt(end);
          if (peekChar !== COLON2 && peekChar !== COMMA && peekChar !== EQUALS && peekChar !== GREATER_THAN && peekChar !== LESS_THAN && peekChar !== NEWLINE && peekChar !== SLASH2 && peekChar !== SPACE2 && peekChar !== TAB2) {
            break;
          }
        }
        i = end - 1;
        let node = separator(input.slice(start, end));
        if (parent) {
          parent.nodes.push(node);
        } else {
          ast.push(node);
        }
        break;
      }
      case SINGLE_QUOTE3:
      case DOUBLE_QUOTE3: {
        let start = i;
        for (let j = i + 1;j < input.length; j++) {
          peekChar = input.charCodeAt(j);
          if (peekChar === BACKSLASH3) {
            j += 1;
          } else if (peekChar === currentChar) {
            i = j;
            break;
          }
        }
        buffer += input.slice(start, i + 1);
        break;
      }
      case OPEN_PAREN3: {
        let node = fun(buffer, []);
        buffer = "";
        if (parent) {
          parent.nodes.push(node);
        } else {
          ast.push(node);
        }
        stack.push(node);
        parent = node;
        break;
      }
      case CLOSE_PAREN3: {
        let tail = stack.pop();
        if (buffer.length > 0) {
          let node = word(buffer);
          tail.nodes.push(node);
          buffer = "";
        }
        if (stack.length > 0) {
          parent = stack[stack.length - 1];
        } else {
          parent = null;
        }
        break;
      }
      default: {
        buffer += String.fromCharCode(currentChar);
      }
    }
  }
  if (buffer.length > 0) {
    ast.push(word(buffer));
  }
  return ast;
}
var IS_VALID_STATIC_UTILITY_NAME = /^-?[a-z][a-zA-Z0-9/%._-]*$/;
var IS_VALID_FUNCTIONAL_UTILITY_NAME = /^-?[a-z][a-zA-Z0-9/%._-]*-\*$/;

class Utilities {
  utilities = new DefaultMap(() => []);
  completions = new Map;
  static(name, compileFn) {
    this.utilities.get(name).push({ kind: "static", compileFn });
  }
  functional(name, compileFn, options) {
    this.utilities.get(name).push({ kind: "functional", compileFn, options });
  }
  has(name, kind) {
    return this.utilities.has(name) && this.utilities.get(name).some((fn) => fn.kind === kind);
  }
  get(name) {
    return this.utilities.has(name) ? this.utilities.get(name) : [];
  }
  getCompletions(name) {
    return this.completions.get(name)?.() ?? [];
  }
  suggest(name, groups) {
    this.completions.set(name, groups);
  }
  keys(kind) {
    let keys = [];
    for (let [key, fns] of this.utilities.entries()) {
      for (let fn of fns) {
        if (fn.kind === kind) {
          keys.push(key);
          break;
        }
      }
    }
    return keys;
  }
}
function property(ident, initialValue, syntax) {
  return atRule("@property", ident, [
    decl("syntax", syntax ? `"${syntax}"` : `"*"`),
    decl("inherits", "false"),
    ...initialValue ? [decl("initial-value", initialValue)] : []
  ]);
}
function withAlpha(value2, alpha) {
  if (alpha === null)
    return value2;
  let alphaAsNumber = Number(alpha);
  if (!Number.isNaN(alphaAsNumber)) {
    alpha = `${alphaAsNumber * 100}%`;
  }
  return `color-mix(in oklab, ${value2} ${alpha}, transparent)`;
}
function asColor(value2, modifier, theme) {
  if (!modifier)
    return value2;
  if (modifier.kind === "arbitrary") {
    return withAlpha(value2, modifier.value);
  }
  let alpha = theme.resolve(modifier.value, ["--opacity"]);
  if (alpha) {
    return withAlpha(value2, alpha);
  }
  if (!isValidOpacityValue(modifier.value)) {
    return null;
  }
  return withAlpha(value2, `${modifier.value}%`);
}
function resolveThemeColor(candidate, theme, themeKeys) {
  if (false) {
  }
  let value2 = null;
  switch (candidate.value.value) {
    case "inherit": {
      value2 = "inherit";
      break;
    }
    case "transparent": {
      value2 = "transparent";
      break;
    }
    case "current": {
      value2 = "currentColor";
      break;
    }
    default: {
      value2 = theme.resolve(candidate.value.value, themeKeys);
      break;
    }
  }
  return value2 ? asColor(value2, candidate.modifier, theme) : null;
}
function createUtilities(theme) {
  let utilities = new Utilities;
  function suggest(classRoot, defns) {
    function* resolve(themeKeys) {
      for (let value2 of theme.keysInNamespaces(themeKeys)) {
        yield value2.replaceAll("_", ".");
      }
    }
    utilities.suggest(classRoot, () => {
      let groups = [];
      for (let defn of defns()) {
        if (typeof defn === "string") {
          groups.push({ values: [defn], modifiers: [] });
          continue;
        }
        let values = [
          ...defn.values ?? [],
          ...resolve(defn.valueThemeKeys ?? [])
        ];
        let modifiers = [...defn.modifiers ?? [], ...resolve(defn.modifierThemeKeys ?? [])];
        if (defn.hasDefaultValue) {
          values.unshift(null);
        }
        groups.push({ supportsNegative: defn.supportsNegative, values, modifiers });
      }
      return groups;
    });
  }
  function staticUtility(className, declarations) {
    utilities.static(className, () => {
      return declarations.map((node) => {
        return typeof node === "function" ? node() : decl(node[0], node[1]);
      });
    });
  }
  function functionalUtility(classRoot, desc) {
    function handleFunctionalUtility({ negative }) {
      return (candidate) => {
        let value2 = null;
        if (!candidate.value) {
          if (candidate.modifier)
            return;
          value2 = desc.defaultValue !== undefined ? desc.defaultValue : theme.resolve(null, desc.themeKeys ?? []);
        } else if (candidate.value.kind === "arbitrary") {
          if (candidate.modifier)
            return;
          value2 = candidate.value.value;
        } else {
          value2 = theme.resolve(candidate.value.fraction ?? candidate.value.value, desc.themeKeys ?? []);
          if (value2 === null && desc.supportsFractions && candidate.value.fraction) {
            let [lhs, rhs] = segment(candidate.value.fraction, "/");
            if (!isPositiveInteger(lhs) || !isPositiveInteger(rhs))
              return;
            value2 = `calc(${candidate.value.fraction} * 100%)`;
          }
          if (value2 === null && negative && desc.handleNegativeBareValue) {
            value2 = desc.handleNegativeBareValue(candidate.value);
            if (!value2?.includes("/") && candidate.modifier)
              return;
            if (value2 !== null)
              return desc.handle(value2);
          }
          if (value2 === null && desc.handleBareValue) {
            value2 = desc.handleBareValue(candidate.value);
            if (!value2?.includes("/") && candidate.modifier)
              return;
          }
        }
        if (value2 === null)
          return;
        return desc.handle(negative ? `calc(${value2} * -1)` : value2);
      };
    }
    if (desc.supportsNegative) {
      utilities.functional(`-${classRoot}`, handleFunctionalUtility({ negative: true }));
    }
    utilities.functional(classRoot, handleFunctionalUtility({ negative: false }));
    suggest(classRoot, () => [
      {
        supportsNegative: desc.supportsNegative,
        valueThemeKeys: desc.themeKeys ?? [],
        hasDefaultValue: desc.defaultValue !== undefined && desc.defaultValue !== null
      }
    ]);
  }
  function colorUtility(classRoot, desc) {
    utilities.functional(classRoot, (candidate) => {
      if (!candidate.value)
        return;
      let value2 = null;
      if (candidate.value.kind === "arbitrary") {
        value2 = candidate.value.value;
        value2 = asColor(value2, candidate.modifier, theme);
      } else {
        value2 = resolveThemeColor(candidate, theme, desc.themeKeys);
      }
      if (value2 === null)
        return;
      return desc.handle(value2);
    });
    suggest(classRoot, () => [
      {
        values: ["current", "inherit", "transparent"],
        valueThemeKeys: desc.themeKeys,
        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
      }
    ]);
  }
  function spacingUtility(name, themeKeys, handle, {
    supportsNegative = false,
    supportsFractions = false
  } = {}) {
    if (supportsNegative) {
      utilities.static(`-${name}-px`, () => handle("-1px"));
    }
    utilities.static(`${name}-px`, () => handle("1px"));
    functionalUtility(name, {
      themeKeys,
      supportsFractions,
      supportsNegative,
      defaultValue: null,
      handleBareValue: ({ value: value2 }) => {
        let multiplier = theme.resolve(null, ["--spacing"]);
        if (!multiplier)
          return null;
        if (!isValidSpacingMultiplier(value2))
          return null;
        return `calc(${multiplier} * ${value2})`;
      },
      handleNegativeBareValue: ({ value: value2 }) => {
        let multiplier = theme.resolve(null, ["--spacing"]);
        if (!multiplier)
          return null;
        if (!isValidSpacingMultiplier(value2))
          return null;
        return `calc(${multiplier} * -${value2})`;
      },
      handle
    });
    suggest(name, () => [
      {
        values: [
          "0",
          "0.5",
          "1",
          "1.5",
          "2",
          "2.5",
          "3",
          "3.5",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9",
          "10",
          "11",
          "12",
          "14",
          "16",
          "20",
          "24",
          "28",
          "32",
          "36",
          "40",
          "44",
          "48",
          "52",
          "56",
          "60",
          "64",
          "72",
          "80",
          "96"
        ],
        supportsNegative,
        valueThemeKeys: themeKeys
      }
    ]);
  }
  staticUtility("sr-only", [
    ["position", "absolute"],
    ["width", "1px"],
    ["height", "1px"],
    ["padding", "0"],
    ["margin", "-1px"],
    ["overflow", "hidden"],
    ["clip", "rect(0, 0, 0, 0)"],
    ["white-space", "nowrap"],
    ["border-width", "0"]
  ]);
  staticUtility("not-sr-only", [
    ["position", "static"],
    ["width", "auto"],
    ["height", "auto"],
    ["padding", "0"],
    ["margin", "0"],
    ["overflow", "visible"],
    ["clip", "auto"],
    ["white-space", "normal"]
  ]);
  staticUtility("pointer-events-none", [["pointer-events", "none"]]);
  staticUtility("pointer-events-auto", [["pointer-events", "auto"]]);
  staticUtility("visible", [["visibility", "visible"]]);
  staticUtility("invisible", [["visibility", "hidden"]]);
  staticUtility("collapse", [["visibility", "collapse"]]);
  staticUtility("static", [["position", "static"]]);
  staticUtility("fixed", [["position", "fixed"]]);
  staticUtility("absolute", [["position", "absolute"]]);
  staticUtility("relative", [["position", "relative"]]);
  staticUtility("sticky", [["position", "sticky"]]);
  for (let [name, property2] of [
    ["inset", "inset"],
    ["inset-x", "inset-inline"],
    ["inset-y", "inset-block"],
    ["start", "inset-inline-start"],
    ["end", "inset-inline-end"],
    ["top", "top"],
    ["right", "right"],
    ["bottom", "bottom"],
    ["left", "left"]
  ]) {
    staticUtility(`${name}-auto`, [[property2, "auto"]]);
    staticUtility(`${name}-full`, [[property2, "100%"]]);
    staticUtility(`-${name}-full`, [[property2, "-100%"]]);
    spacingUtility(name, ["--inset", "--spacing"], (value2) => [decl(property2, value2)], {
      supportsNegative: true,
      supportsFractions: true
    });
  }
  staticUtility("isolate", [["isolation", "isolate"]]);
  staticUtility("isolation-auto", [["isolation", "auto"]]);
  staticUtility("z-auto", [["z-index", "auto"]]);
  functionalUtility("z", {
    supportsNegative: true,
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    themeKeys: ["--z-index"],
    handle: (value2) => [decl("z-index", value2)]
  });
  suggest("z", () => [
    {
      supportsNegative: true,
      values: ["0", "10", "20", "30", "40", "50"],
      valueThemeKeys: ["--z-index"]
    }
  ]);
  staticUtility("order-first", [["order", "calc(-infinity)"]]);
  staticUtility("order-last", [["order", "calc(infinity)"]]);
  staticUtility("order-none", [["order", "0"]]);
  functionalUtility("order", {
    supportsNegative: true,
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    themeKeys: ["--order"],
    handle: (value2) => [decl("order", value2)]
  });
  suggest("order", () => [
    {
      supportsNegative: true,
      values: Array.from({ length: 12 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--order"]
    }
  ]);
  staticUtility("col-auto", [["grid-column", "auto"]]);
  functionalUtility("col", {
    themeKeys: ["--grid-column"],
    handle: (value2) => [decl("grid-column", value2)]
  });
  staticUtility("col-span-full", [["grid-column", "1 / -1"]]);
  functionalUtility("col-span", {
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    handle: (value2) => [decl("grid-column", `span ${value2} / span ${value2}`)]
  });
  staticUtility("col-start-auto", [["grid-column-start", "auto"]]);
  functionalUtility("col-start", {
    supportsNegative: true,
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    themeKeys: ["--grid-column-start"],
    handle: (value2) => [decl("grid-column-start", value2)]
  });
  staticUtility("col-end-auto", [["grid-column-end", "auto"]]);
  functionalUtility("col-end", {
    supportsNegative: true,
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    themeKeys: ["--grid-column-end"],
    handle: (value2) => [decl("grid-column-end", value2)]
  });
  suggest("col-span", () => [
    {
      values: Array.from({ length: 12 }, (_, i) => `${i + 1}`),
      valueThemeKeys: []
    }
  ]);
  suggest("col-start", () => [
    {
      supportsNegative: true,
      values: Array.from({ length: 13 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--grid-column-start"]
    }
  ]);
  suggest("col-end", () => [
    {
      supportsNegative: true,
      values: Array.from({ length: 13 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--grid-column-end"]
    }
  ]);
  staticUtility("row-auto", [["grid-row", "auto"]]);
  functionalUtility("row", {
    themeKeys: ["--grid-row"],
    handle: (value2) => [decl("grid-row", value2)]
  });
  staticUtility("row-span-full", [["grid-row", "1 / -1"]]);
  functionalUtility("row-span", {
    themeKeys: [],
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    handle: (value2) => [decl("grid-row", `span ${value2} / span ${value2}`)]
  });
  staticUtility("row-start-auto", [["grid-row-start", "auto"]]);
  functionalUtility("row-start", {
    supportsNegative: true,
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    themeKeys: ["--grid-row-start"],
    handle: (value2) => [decl("grid-row-start", value2)]
  });
  staticUtility("row-end-auto", [["grid-row-end", "auto"]]);
  functionalUtility("row-end", {
    supportsNegative: true,
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    themeKeys: ["--grid-row-end"],
    handle: (value2) => [decl("grid-row-end", value2)]
  });
  suggest("row-span", () => [
    {
      values: Array.from({ length: 12 }, (_, i) => `${i + 1}`),
      valueThemeKeys: []
    }
  ]);
  suggest("row-start", () => [
    {
      supportsNegative: true,
      values: Array.from({ length: 13 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--grid-row-start"]
    }
  ]);
  suggest("row-end", () => [
    {
      supportsNegative: true,
      values: Array.from({ length: 13 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--grid-row-end"]
    }
  ]);
  staticUtility("float-start", [["float", "inline-start"]]);
  staticUtility("float-end", [["float", "inline-end"]]);
  staticUtility("float-right", [["float", "right"]]);
  staticUtility("float-left", [["float", "left"]]);
  staticUtility("float-none", [["float", "none"]]);
  staticUtility("clear-start", [["clear", "inline-start"]]);
  staticUtility("clear-end", [["clear", "inline-end"]]);
  staticUtility("clear-right", [["clear", "right"]]);
  staticUtility("clear-left", [["clear", "left"]]);
  staticUtility("clear-both", [["clear", "both"]]);
  staticUtility("clear-none", [["clear", "none"]]);
  for (let [namespace, property2] of [
    ["m", "margin"],
    ["mx", "margin-inline"],
    ["my", "margin-block"],
    ["ms", "margin-inline-start"],
    ["me", "margin-inline-end"],
    ["mt", "margin-top"],
    ["mr", "margin-right"],
    ["mb", "margin-bottom"],
    ["ml", "margin-left"]
  ]) {
    staticUtility(`${namespace}-auto`, [[property2, "auto"]]);
    spacingUtility(namespace, ["--margin", "--spacing"], (value2) => [decl(property2, value2)], {
      supportsNegative: true
    });
  }
  staticUtility("box-border", [["box-sizing", "border-box"]]);
  staticUtility("box-content", [["box-sizing", "content-box"]]);
  staticUtility("line-clamp-none", [
    ["overflow", "visible"],
    ["display", "block"],
    ["-webkit-box-orient", "horizontal"],
    ["-webkit-line-clamp", "unset"]
  ]);
  functionalUtility("line-clamp", {
    themeKeys: ["--line-clamp"],
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    handle: (value2) => [
      decl("overflow", "hidden"),
      decl("display", "-webkit-box"),
      decl("-webkit-box-orient", "vertical"),
      decl("-webkit-line-clamp", value2)
    ]
  });
  suggest("line-clamp", () => [
    {
      values: ["1", "2", "3", "4", "5", "6"],
      valueThemeKeys: ["--line-clamp"]
    }
  ]);
  staticUtility("block", [["display", "block"]]);
  staticUtility("inline-block", [["display", "inline-block"]]);
  staticUtility("inline", [["display", "inline"]]);
  staticUtility("hidden", [["display", "none"]]);
  staticUtility("inline-flex", [["display", "inline-flex"]]);
  staticUtility("table", [["display", "table"]]);
  staticUtility("inline-table", [["display", "inline-table"]]);
  staticUtility("table-caption", [["display", "table-caption"]]);
  staticUtility("table-cell", [["display", "table-cell"]]);
  staticUtility("table-column", [["display", "table-column"]]);
  staticUtility("table-column-group", [["display", "table-column-group"]]);
  staticUtility("table-footer-group", [["display", "table-footer-group"]]);
  staticUtility("table-header-group", [["display", "table-header-group"]]);
  staticUtility("table-row-group", [["display", "table-row-group"]]);
  staticUtility("table-row", [["display", "table-row"]]);
  staticUtility("flow-root", [["display", "flow-root"]]);
  staticUtility("flex", [["display", "flex"]]);
  staticUtility("grid", [["display", "grid"]]);
  staticUtility("inline-grid", [["display", "inline-grid"]]);
  staticUtility("contents", [["display", "contents"]]);
  staticUtility("list-item", [["display", "list-item"]]);
  staticUtility("field-sizing-content", [["field-sizing", "content"]]);
  staticUtility("field-sizing-fixed", [["field-sizing", "fixed"]]);
  staticUtility("aspect-auto", [["aspect-ratio", "auto"]]);
  staticUtility("aspect-square", [["aspect-ratio", "1 / 1"]]);
  functionalUtility("aspect", {
    themeKeys: ["--aspect"],
    handleBareValue: ({ fraction }) => {
      if (fraction === null)
        return null;
      let [lhs, rhs] = segment(fraction, "/");
      if (!isPositiveInteger(lhs) || !isPositiveInteger(rhs))
        return null;
      return fraction;
    },
    handle: (value2) => [decl("aspect-ratio", value2)]
  });
  for (let [key, value2] of [
    ["auto", "auto"],
    ["full", "100%"],
    ["svw", "100svw"],
    ["lvw", "100lvw"],
    ["dvw", "100dvw"],
    ["svh", "100svh"],
    ["lvh", "100lvh"],
    ["dvh", "100dvh"],
    ["min", "min-content"],
    ["max", "max-content"],
    ["fit", "fit-content"]
  ]) {
    staticUtility(`size-${key}`, [
      ["--tw-sort", "size"],
      ["width", value2],
      ["height", value2]
    ]);
    staticUtility(`w-${key}`, [["width", value2]]);
    staticUtility(`min-w-${key}`, [["min-width", value2]]);
    staticUtility(`max-w-${key}`, [["max-width", value2]]);
    staticUtility(`h-${key}`, [["height", value2]]);
    staticUtility(`min-h-${key}`, [["min-height", value2]]);
    staticUtility(`max-h-${key}`, [["max-height", value2]]);
  }
  staticUtility(`w-screen`, [["width", "100vw"]]);
  staticUtility(`min-w-screen`, [["min-width", "100vw"]]);
  staticUtility(`max-w-screen`, [["max-width", "100vw"]]);
  staticUtility(`h-screen`, [["height", "100vh"]]);
  staticUtility(`min-h-screen`, [["min-height", "100vh"]]);
  staticUtility(`max-h-screen`, [["max-height", "100vh"]]);
  staticUtility(`min-w-none`, [["min-width", "none"]]);
  staticUtility(`max-w-none`, [["max-width", "none"]]);
  staticUtility(`min-h-none`, [["min-height", "none"]]);
  staticUtility(`max-h-none`, [["max-height", "none"]]);
  spacingUtility("size", ["--size", "--spacing"], (value2) => [decl("--tw-sort", "size"), decl("width", value2), decl("height", value2)], {
    supportsFractions: true
  });
  for (let [name, namespaces, property2] of [
    ["w", ["--width", "--spacing", "--container"], "width"],
    ["min-w", ["--min-width", "--spacing", "--container"], "min-width"],
    ["max-w", ["--max-width", "--spacing", "--container"], "max-width"],
    ["h", ["--height", "--spacing"], "height"],
    ["min-h", ["--min-height", "--height", "--spacing"], "min-height"],
    ["max-h", ["--max-height", "--height", "--spacing"], "max-height"]
  ]) {
    spacingUtility(name, namespaces, (value2) => [decl(property2, value2)], {
      supportsFractions: true
    });
  }
  utilities.static("container", () => {
    let breakpoints = [...theme.namespace("--breakpoint").values()];
    breakpoints.sort((a, z) => compareBreakpoints(a, z, "asc"));
    let decls = [decl("--tw-sort", "--tw-container-component"), decl("width", "100%")];
    for (let breakpoint of breakpoints) {
      decls.push(atRule("@media", `(width >= ${breakpoint})`, [decl("max-width", breakpoint)]));
    }
    return decls;
  });
  staticUtility("flex-auto", [["flex", "auto"]]);
  staticUtility("flex-initial", [["flex", "0 auto"]]);
  staticUtility("flex-none", [["flex", "none"]]);
  utilities.functional("flex", (candidate) => {
    if (!candidate.value)
      return;
    if (candidate.value.kind === "arbitrary") {
      if (candidate.modifier)
        return;
      return [decl("flex", candidate.value.value)];
    }
    if (candidate.value.fraction) {
      let [lhs, rhs] = segment(candidate.value.fraction, "/");
      if (!isPositiveInteger(lhs) || !isPositiveInteger(rhs))
        return;
      return [decl("flex", `calc(${candidate.value.fraction} * 100%)`)];
    }
    if (isPositiveInteger(candidate.value.value)) {
      if (candidate.modifier)
        return;
      return [decl("flex", candidate.value.value)];
    }
  });
  functionalUtility("shrink", {
    defaultValue: "1",
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    handle: (value2) => [decl("flex-shrink", value2)]
  });
  functionalUtility("grow", {
    defaultValue: "1",
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    handle: (value2) => [decl("flex-grow", value2)]
  });
  suggest("shrink", () => [
    {
      values: ["0"],
      valueThemeKeys: [],
      hasDefaultValue: true
    }
  ]);
  suggest("grow", () => [
    {
      values: ["0"],
      valueThemeKeys: [],
      hasDefaultValue: true
    }
  ]);
  staticUtility("basis-auto", [["flex-basis", "auto"]]);
  staticUtility("basis-full", [["flex-basis", "100%"]]);
  spacingUtility("basis", ["--flex-basis", "--spacing", "--container"], (value2) => [decl("flex-basis", value2)], {
    supportsFractions: true
  });
  staticUtility("table-auto", [["table-layout", "auto"]]);
  staticUtility("table-fixed", [["table-layout", "fixed"]]);
  staticUtility("caption-top", [["caption-side", "top"]]);
  staticUtility("caption-bottom", [["caption-side", "bottom"]]);
  staticUtility("border-collapse", [["border-collapse", "collapse"]]);
  staticUtility("border-separate", [["border-collapse", "separate"]]);
  let borderSpacingProperties = () => atRoot([
    property("--tw-border-spacing-x", "0", "<length>"),
    property("--tw-border-spacing-y", "0", "<length>")
  ]);
  spacingUtility("border-spacing", ["--border-spacing", "--spacing"], (value2) => [
    borderSpacingProperties(),
    decl("--tw-border-spacing-x", value2),
    decl("--tw-border-spacing-y", value2),
    decl("border-spacing", "var(--tw-border-spacing-x) var(--tw-border-spacing-y)")
  ]);
  spacingUtility("border-spacing-x", ["--border-spacing", "--spacing"], (value2) => [
    borderSpacingProperties(),
    decl("--tw-border-spacing-x", value2),
    decl("border-spacing", "var(--tw-border-spacing-x) var(--tw-border-spacing-y)")
  ]);
  spacingUtility("border-spacing-y", ["--border-spacing", "--spacing"], (value2) => [
    borderSpacingProperties(),
    decl("--tw-border-spacing-y", value2),
    decl("border-spacing", "var(--tw-border-spacing-x) var(--tw-border-spacing-y)")
  ]);
  staticUtility("origin-center", [["transform-origin", "center"]]);
  staticUtility("origin-top", [["transform-origin", "top"]]);
  staticUtility("origin-top-right", [["transform-origin", "top right"]]);
  staticUtility("origin-right", [["transform-origin", "right"]]);
  staticUtility("origin-bottom-right", [["transform-origin", "bottom right"]]);
  staticUtility("origin-bottom", [["transform-origin", "bottom"]]);
  staticUtility("origin-bottom-left", [["transform-origin", "bottom left"]]);
  staticUtility("origin-left", [["transform-origin", "left"]]);
  staticUtility("origin-top-left", [["transform-origin", "top left"]]);
  functionalUtility("origin", {
    themeKeys: ["--transform-origin"],
    handle: (value2) => [decl("transform-origin", value2)]
  });
  staticUtility("perspective-origin-center", [["perspective-origin", "center"]]);
  staticUtility("perspective-origin-top", [["perspective-origin", "top"]]);
  staticUtility("perspective-origin-top-right", [["perspective-origin", "top right"]]);
  staticUtility("perspective-origin-right", [["perspective-origin", "right"]]);
  staticUtility("perspective-origin-bottom-right", [["perspective-origin", "bottom right"]]);
  staticUtility("perspective-origin-bottom", [["perspective-origin", "bottom"]]);
  staticUtility("perspective-origin-bottom-left", [["perspective-origin", "bottom left"]]);
  staticUtility("perspective-origin-left", [["perspective-origin", "left"]]);
  staticUtility("perspective-origin-top-left", [["perspective-origin", "top left"]]);
  functionalUtility("perspective-origin", {
    themeKeys: ["--perspective-origin"],
    handle: (value2) => [decl("perspective-origin", value2)]
  });
  staticUtility("perspective-none", [["perspective", "none"]]);
  functionalUtility("perspective", {
    themeKeys: ["--perspective"],
    handle: (value2) => [decl("perspective", value2)]
  });
  let translateProperties = () => atRoot([
    property("--tw-translate-x", "0"),
    property("--tw-translate-y", "0"),
    property("--tw-translate-z", "0")
  ]);
  staticUtility("translate-none", [["translate", "none"]]);
  staticUtility("-translate-full", [
    translateProperties,
    ["--tw-translate-x", "-100%"],
    ["--tw-translate-y", "-100%"],
    ["translate", "var(--tw-translate-x) var(--tw-translate-y)"]
  ]);
  staticUtility("translate-full", [
    translateProperties,
    ["--tw-translate-x", "100%"],
    ["--tw-translate-y", "100%"],
    ["translate", "var(--tw-translate-x) var(--tw-translate-y)"]
  ]);
  spacingUtility("translate", ["--translate", "--spacing"], (value2) => [
    translateProperties(),
    decl("--tw-translate-x", value2),
    decl("--tw-translate-y", value2),
    decl("translate", "var(--tw-translate-x) var(--tw-translate-y)")
  ], { supportsNegative: true, supportsFractions: true });
  for (let axis of ["x", "y"]) {
    staticUtility(`-translate-${axis}-full`, [
      translateProperties,
      [`--tw-translate-${axis}`, "-100%"],
      ["translate", `var(--tw-translate-x) var(--tw-translate-y)`]
    ]);
    staticUtility(`translate-${axis}-full`, [
      translateProperties,
      [`--tw-translate-${axis}`, "100%"],
      ["translate", `var(--tw-translate-x) var(--tw-translate-y)`]
    ]);
    spacingUtility(`translate-${axis}`, ["--translate", "--spacing"], (value2) => [
      translateProperties(),
      decl(`--tw-translate-${axis}`, value2),
      decl("translate", `var(--tw-translate-x) var(--tw-translate-y)`)
    ], {
      supportsNegative: true,
      supportsFractions: true
    });
  }
  spacingUtility(`translate-z`, ["--translate", "--spacing"], (value2) => [
    translateProperties(),
    decl(`--tw-translate-z`, value2),
    decl("translate", "var(--tw-translate-x) var(--tw-translate-y) var(--tw-translate-z)")
  ], {
    supportsNegative: true
  });
  staticUtility(`-translate-z-px`, [
    translateProperties,
    [`--tw-translate-z`, "-1px"],
    ["translate", "var(--tw-translate-x) var(--tw-translate-y) var(--tw-translate-z)"]
  ]);
  staticUtility(`translate-z-px`, [
    translateProperties,
    [`--tw-translate-z`, "1px"],
    ["translate", "var(--tw-translate-x) var(--tw-translate-y) var(--tw-translate-z)"]
  ]);
  staticUtility("translate-3d", [
    translateProperties,
    ["translate", "var(--tw-translate-x) var(--tw-translate-y) var(--tw-translate-z)"]
  ]);
  let scaleProperties = () => atRoot([
    property("--tw-scale-x", "1"),
    property("--tw-scale-y", "1"),
    property("--tw-scale-z", "1")
  ]);
  staticUtility("scale-none", [["scale", "none"]]);
  function handleScale({ negative }) {
    return (candidate) => {
      if (!candidate.value || candidate.modifier)
        return;
      let value2;
      if (candidate.value.kind === "arbitrary") {
        value2 = candidate.value.value;
        return [decl("scale", value2)];
      } else {
        value2 = theme.resolve(candidate.value.value, ["--scale"]);
        if (!value2 && isPositiveInteger(candidate.value.value)) {
          value2 = `${candidate.value.value}%`;
        }
        if (!value2)
          return;
      }
      value2 = negative ? `calc(${value2} * -1)` : value2;
      return [
        scaleProperties(),
        decl("--tw-scale-x", value2),
        decl("--tw-scale-y", value2),
        decl("--tw-scale-z", value2),
        decl("scale", `var(--tw-scale-x) var(--tw-scale-y)`)
      ];
    };
  }
  utilities.functional("-scale", handleScale({ negative: true }));
  utilities.functional("scale", handleScale({ negative: false }));
  suggest("scale", () => [
    {
      supportsNegative: true,
      values: ["0", "50", "75", "90", "95", "100", "105", "110", "125", "150", "200"],
      valueThemeKeys: ["--scale"]
    }
  ]);
  for (let axis of ["x", "y", "z"]) {
    functionalUtility(`scale-${axis}`, {
      supportsNegative: true,
      themeKeys: ["--scale"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        scaleProperties(),
        decl(`--tw-scale-${axis}`, value2),
        decl("scale", `var(--tw-scale-x) var(--tw-scale-y)${axis === "z" ? " var(--tw-scale-z)" : ""}`)
      ]
    });
    suggest(`scale-${axis}`, () => [
      {
        supportsNegative: true,
        values: ["0", "50", "75", "90", "95", "100", "105", "110", "125", "150", "200"],
        valueThemeKeys: ["--scale"]
      }
    ]);
  }
  staticUtility("scale-3d", [
    scaleProperties,
    ["scale", "var(--tw-scale-x) var(--tw-scale-y) var(--tw-scale-z)"]
  ]);
  staticUtility("rotate-none", [["rotate", "none"]]);
  function handleRotate({ negative }) {
    return (candidate) => {
      if (!candidate.value || candidate.modifier)
        return;
      let value2;
      if (candidate.value.kind === "arbitrary") {
        value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["angle", "vector"]);
        if (type === "vector") {
          return [decl("rotate", `${value2} var(--tw-rotate)`)];
        } else if (type !== "angle") {
          return [decl("rotate", value2)];
        }
      } else {
        value2 = theme.resolve(candidate.value.value, ["--rotate"]);
        if (!value2 && isPositiveInteger(candidate.value.value)) {
          value2 = `${candidate.value.value}deg`;
        }
        if (!value2)
          return;
      }
      return [decl("rotate", negative ? `calc(${value2} * -1)` : value2)];
    };
  }
  utilities.functional("-rotate", handleRotate({ negative: true }));
  utilities.functional("rotate", handleRotate({ negative: false }));
  suggest("rotate", () => [
    {
      supportsNegative: true,
      values: ["0", "1", "2", "3", "6", "12", "45", "90", "180"],
      valueThemeKeys: ["--rotate"]
    }
  ]);
  {
    let transformValue = [
      "var(--tw-rotate-x)",
      "var(--tw-rotate-y)",
      "var(--tw-rotate-z)",
      "var(--tw-skew-x)",
      "var(--tw-skew-y)"
    ].join(" ");
    let transformProperties = () => atRoot([
      property("--tw-rotate-x", "rotateX(0)"),
      property("--tw-rotate-y", "rotateY(0)"),
      property("--tw-rotate-z", "rotateZ(0)"),
      property("--tw-skew-x", "skewX(0)"),
      property("--tw-skew-y", "skewY(0)")
    ]);
    for (let axis of ["x", "y", "z"]) {
      functionalUtility(`rotate-${axis}`, {
        supportsNegative: true,
        themeKeys: ["--rotate"],
        handleBareValue: ({ value: value2 }) => {
          if (!isPositiveInteger(value2))
            return null;
          return `${value2}deg`;
        },
        handle: (value2) => [
          transformProperties(),
          decl(`--tw-rotate-${axis}`, `rotate${axis.toUpperCase()}(${value2})`),
          decl("transform", transformValue)
        ]
      });
      suggest(`rotate-${axis}`, () => [
        {
          supportsNegative: true,
          values: ["0", "1", "2", "3", "6", "12", "45", "90", "180"],
          valueThemeKeys: ["--rotate"]
        }
      ]);
    }
    functionalUtility("skew", {
      supportsNegative: true,
      themeKeys: ["--skew"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}deg`;
      },
      handle: (value2) => [
        transformProperties(),
        decl("--tw-skew-x", `skewX(${value2})`),
        decl("--tw-skew-y", `skewY(${value2})`),
        decl("transform", transformValue)
      ]
    });
    functionalUtility("skew-x", {
      supportsNegative: true,
      themeKeys: ["--skew"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}deg`;
      },
      handle: (value2) => [
        transformProperties(),
        decl("--tw-skew-x", `skewX(${value2})`),
        decl("transform", transformValue)
      ]
    });
    functionalUtility("skew-y", {
      supportsNegative: true,
      themeKeys: ["--skew"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}deg`;
      },
      handle: (value2) => [
        transformProperties(),
        decl("--tw-skew-y", `skewY(${value2})`),
        decl("transform", transformValue)
      ]
    });
    suggest("skew", () => [
      {
        supportsNegative: true,
        values: ["0", "1", "2", "3", "6", "12"],
        valueThemeKeys: ["--skew"]
      }
    ]);
    suggest("skew-x", () => [
      {
        supportsNegative: true,
        values: ["0", "1", "2", "3", "6", "12"],
        valueThemeKeys: ["--skew"]
      }
    ]);
    suggest("skew-y", () => [
      {
        supportsNegative: true,
        values: ["0", "1", "2", "3", "6", "12"],
        valueThemeKeys: ["--skew"]
      }
    ]);
    utilities.functional("transform", (candidate) => {
      if (candidate.modifier)
        return;
      let value2 = null;
      if (!candidate.value) {
        value2 = transformValue;
      } else if (candidate.value.kind === "arbitrary") {
        value2 = candidate.value.value;
      }
      if (value2 === null)
        return;
      return [transformProperties(), decl("transform", value2)];
    });
    suggest("transform", () => [
      {
        hasDefaultValue: true
      }
    ]);
    staticUtility("transform-cpu", [["transform", transformValue]]);
    staticUtility("transform-gpu", [["transform", `translateZ(0) ${transformValue}`]]);
    staticUtility("transform-none", [["transform", "none"]]);
  }
  staticUtility("transform-flat", [["transform-style", "flat"]]);
  staticUtility("transform-3d", [["transform-style", "preserve-3d"]]);
  staticUtility("transform-content", [["transform-box", "content-box"]]);
  staticUtility("transform-border", [["transform-box", "border-box"]]);
  staticUtility("transform-fill", [["transform-box", "fill-box"]]);
  staticUtility("transform-stroke", [["transform-box", "stroke-box"]]);
  staticUtility("transform-view", [["transform-box", "view-box"]]);
  staticUtility("backface-visible", [["backface-visibility", "visible"]]);
  staticUtility("backface-hidden", [["backface-visibility", "hidden"]]);
  for (let value2 of [
    "auto",
    "default",
    "pointer",
    "wait",
    "text",
    "move",
    "help",
    "not-allowed",
    "none",
    "context-menu",
    "progress",
    "cell",
    "crosshair",
    "vertical-text",
    "alias",
    "copy",
    "no-drop",
    "grab",
    "grabbing",
    "all-scroll",
    "col-resize",
    "row-resize",
    "n-resize",
    "e-resize",
    "s-resize",
    "w-resize",
    "ne-resize",
    "nw-resize",
    "se-resize",
    "sw-resize",
    "ew-resize",
    "ns-resize",
    "nesw-resize",
    "nwse-resize",
    "zoom-in",
    "zoom-out"
  ]) {
    staticUtility(`cursor-${value2}`, [["cursor", value2]]);
  }
  functionalUtility("cursor", {
    themeKeys: ["--cursor"],
    handle: (value2) => [decl("cursor", value2)]
  });
  for (let value2 of ["auto", "none", "manipulation"]) {
    staticUtility(`touch-${value2}`, [["touch-action", value2]]);
  }
  let touchProperties = () => atRoot([property("--tw-pan-x"), property("--tw-pan-y"), property("--tw-pinch-zoom")]);
  for (let value2 of ["x", "left", "right"]) {
    staticUtility(`touch-pan-${value2}`, [
      touchProperties,
      ["--tw-pan-x", `pan-${value2}`],
      ["touch-action", "var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,)"]
    ]);
  }
  for (let value2 of ["y", "up", "down"]) {
    staticUtility(`touch-pan-${value2}`, [
      touchProperties,
      ["--tw-pan-y", `pan-${value2}`],
      ["touch-action", "var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,)"]
    ]);
  }
  staticUtility("touch-pinch-zoom", [
    touchProperties,
    ["--tw-pinch-zoom", `pinch-zoom`],
    ["touch-action", "var(--tw-pan-x,) var(--tw-pan-y,) var(--tw-pinch-zoom,)"]
  ]);
  for (let value2 of ["none", "text", "all", "auto"]) {
    staticUtility(`select-${value2}`, [
      ["-webkit-user-select", value2],
      ["user-select", value2]
    ]);
  }
  staticUtility("resize-none", [["resize", "none"]]);
  staticUtility("resize-x", [["resize", "horizontal"]]);
  staticUtility("resize-y", [["resize", "vertical"]]);
  staticUtility("resize", [["resize", "both"]]);
  staticUtility("snap-none", [["scroll-snap-type", "none"]]);
  let snapProperties = () => atRoot([property("--tw-scroll-snap-strictness", "proximity", "*")]);
  for (let value2 of ["x", "y", "both"]) {
    staticUtility(`snap-${value2}`, [
      snapProperties,
      ["scroll-snap-type", `${value2} var(--tw-scroll-snap-strictness)`]
    ]);
  }
  staticUtility("snap-mandatory", [snapProperties, ["--tw-scroll-snap-strictness", "mandatory"]]);
  staticUtility("snap-proximity", [snapProperties, ["--tw-scroll-snap-strictness", "proximity"]]);
  staticUtility("snap-align-none", [["scroll-snap-align", "none"]]);
  staticUtility("snap-start", [["scroll-snap-align", "start"]]);
  staticUtility("snap-end", [["scroll-snap-align", "end"]]);
  staticUtility("snap-center", [["scroll-snap-align", "center"]]);
  staticUtility("snap-normal", [["scroll-snap-stop", "normal"]]);
  staticUtility("snap-always", [["scroll-snap-stop", "always"]]);
  for (let [namespace, property2] of [
    ["scroll-m", "scroll-margin"],
    ["scroll-mx", "scroll-margin-inline"],
    ["scroll-my", "scroll-margin-block"],
    ["scroll-ms", "scroll-margin-inline-start"],
    ["scroll-me", "scroll-margin-inline-end"],
    ["scroll-mt", "scroll-margin-top"],
    ["scroll-mr", "scroll-margin-right"],
    ["scroll-mb", "scroll-margin-bottom"],
    ["scroll-ml", "scroll-margin-left"]
  ]) {
    spacingUtility(namespace, ["--scroll-margin", "--spacing"], (value2) => [decl(property2, value2)], {
      supportsNegative: true
    });
  }
  for (let [namespace, property2] of [
    ["scroll-p", "scroll-padding"],
    ["scroll-px", "scroll-padding-inline"],
    ["scroll-py", "scroll-padding-block"],
    ["scroll-ps", "scroll-padding-inline-start"],
    ["scroll-pe", "scroll-padding-inline-end"],
    ["scroll-pt", "scroll-padding-top"],
    ["scroll-pr", "scroll-padding-right"],
    ["scroll-pb", "scroll-padding-bottom"],
    ["scroll-pl", "scroll-padding-left"]
  ]) {
    spacingUtility(namespace, ["--scroll-padding", "--spacing"], (value2) => [decl(property2, value2)]);
  }
  staticUtility("list-inside", [["list-style-position", "inside"]]);
  staticUtility("list-outside", [["list-style-position", "outside"]]);
  staticUtility("list-none", [["list-style-type", "none"]]);
  staticUtility("list-disc", [["list-style-type", "disc"]]);
  staticUtility("list-decimal", [["list-style-type", "decimal"]]);
  functionalUtility("list", {
    themeKeys: ["--list-style-type"],
    handle: (value2) => [decl("list-style-type", value2)]
  });
  staticUtility("list-image-none", [["list-style-image", "none"]]);
  functionalUtility("list-image", {
    themeKeys: ["--list-style-image"],
    handle: (value2) => [decl("list-style-image", value2)]
  });
  staticUtility("appearance-none", [["appearance", "none"]]);
  staticUtility("appearance-auto", [["appearance", "auto"]]);
  staticUtility("scheme-normal", [["color-scheme", "normal"]]);
  staticUtility("scheme-dark", [["color-scheme", "dark"]]);
  staticUtility("scheme-light", [["color-scheme", "light"]]);
  staticUtility("scheme-light-dark", [["color-scheme", "light dark"]]);
  staticUtility("scheme-only-dark", [["color-scheme", "only dark"]]);
  staticUtility("scheme-only-light", [["color-scheme", "only light"]]);
  staticUtility("columns-auto", [["columns", "auto"]]);
  functionalUtility("columns", {
    themeKeys: ["--columns", "--container"],
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return value2;
    },
    handle: (value2) => [decl("columns", value2)]
  });
  suggest("columns", () => [
    {
      values: Array.from({ length: 12 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--columns", "--container"]
    }
  ]);
  for (let value2 of ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"]) {
    staticUtility(`break-before-${value2}`, [["break-before", value2]]);
  }
  for (let value2 of ["auto", "avoid", "avoid-page", "avoid-column"]) {
    staticUtility(`break-inside-${value2}`, [["break-inside", value2]]);
  }
  for (let value2 of ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"]) {
    staticUtility(`break-after-${value2}`, [["break-after", value2]]);
  }
  staticUtility("grid-flow-row", [["grid-auto-flow", "row"]]);
  staticUtility("grid-flow-col", [["grid-auto-flow", "column"]]);
  staticUtility("grid-flow-dense", [["grid-auto-flow", "dense"]]);
  staticUtility("grid-flow-row-dense", [["grid-auto-flow", "row dense"]]);
  staticUtility("grid-flow-col-dense", [["grid-auto-flow", "column dense"]]);
  staticUtility("auto-cols-auto", [["grid-auto-columns", "auto"]]);
  staticUtility("auto-cols-min", [["grid-auto-columns", "min-content"]]);
  staticUtility("auto-cols-max", [["grid-auto-columns", "max-content"]]);
  staticUtility("auto-cols-fr", [["grid-auto-columns", "minmax(0, 1fr)"]]);
  functionalUtility("auto-cols", {
    themeKeys: ["--grid-auto-columns"],
    handle: (value2) => [decl("grid-auto-columns", value2)]
  });
  staticUtility("auto-rows-auto", [["grid-auto-rows", "auto"]]);
  staticUtility("auto-rows-min", [["grid-auto-rows", "min-content"]]);
  staticUtility("auto-rows-max", [["grid-auto-rows", "max-content"]]);
  staticUtility("auto-rows-fr", [["grid-auto-rows", "minmax(0, 1fr)"]]);
  functionalUtility("auto-rows", {
    themeKeys: ["--grid-auto-rows"],
    handle: (value2) => [decl("grid-auto-rows", value2)]
  });
  staticUtility("grid-cols-none", [["grid-template-columns", "none"]]);
  staticUtility("grid-cols-subgrid", [["grid-template-columns", "subgrid"]]);
  functionalUtility("grid-cols", {
    themeKeys: ["--grid-template-columns"],
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return `repeat(${value2}, minmax(0, 1fr))`;
    },
    handle: (value2) => [decl("grid-template-columns", value2)]
  });
  staticUtility("grid-rows-none", [["grid-template-rows", "none"]]);
  staticUtility("grid-rows-subgrid", [["grid-template-rows", "subgrid"]]);
  functionalUtility("grid-rows", {
    themeKeys: ["--grid-template-rows"],
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return `repeat(${value2}, minmax(0, 1fr))`;
    },
    handle: (value2) => [decl("grid-template-rows", value2)]
  });
  suggest("grid-cols", () => [
    {
      values: Array.from({ length: 12 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--grid-template-columns"]
    }
  ]);
  suggest("grid-rows", () => [
    {
      values: Array.from({ length: 12 }, (_, i) => `${i + 1}`),
      valueThemeKeys: ["--grid-template-rows"]
    }
  ]);
  staticUtility("flex-row", [["flex-direction", "row"]]);
  staticUtility("flex-row-reverse", [["flex-direction", "row-reverse"]]);
  staticUtility("flex-col", [["flex-direction", "column"]]);
  staticUtility("flex-col-reverse", [["flex-direction", "column-reverse"]]);
  staticUtility("flex-wrap", [["flex-wrap", "wrap"]]);
  staticUtility("flex-nowrap", [["flex-wrap", "nowrap"]]);
  staticUtility("flex-wrap-reverse", [["flex-wrap", "wrap-reverse"]]);
  staticUtility("place-content-center", [["place-content", "center"]]);
  staticUtility("place-content-start", [["place-content", "start"]]);
  staticUtility("place-content-end", [["place-content", "end"]]);
  staticUtility("place-content-between", [["place-content", "space-between"]]);
  staticUtility("place-content-around", [["place-content", "space-around"]]);
  staticUtility("place-content-evenly", [["place-content", "space-evenly"]]);
  staticUtility("place-content-baseline", [["place-content", "baseline"]]);
  staticUtility("place-content-stretch", [["place-content", "stretch"]]);
  staticUtility("place-items-center", [["place-items", "center"]]);
  staticUtility("place-items-start", [["place-items", "start"]]);
  staticUtility("place-items-end", [["place-items", "end"]]);
  staticUtility("place-items-baseline", [["place-items", "baseline"]]);
  staticUtility("place-items-stretch", [["place-items", "stretch"]]);
  staticUtility("content-normal", [["align-content", "normal"]]);
  staticUtility("content-center", [["align-content", "center"]]);
  staticUtility("content-start", [["align-content", "flex-start"]]);
  staticUtility("content-end", [["align-content", "flex-end"]]);
  staticUtility("content-between", [["align-content", "space-between"]]);
  staticUtility("content-around", [["align-content", "space-around"]]);
  staticUtility("content-evenly", [["align-content", "space-evenly"]]);
  staticUtility("content-baseline", [["align-content", "baseline"]]);
  staticUtility("content-stretch", [["align-content", "stretch"]]);
  staticUtility("items-center", [["align-items", "center"]]);
  staticUtility("items-start", [["align-items", "flex-start"]]);
  staticUtility("items-end", [["align-items", "flex-end"]]);
  staticUtility("items-baseline", [["align-items", "baseline"]]);
  staticUtility("items-stretch", [["align-items", "stretch"]]);
  staticUtility("justify-normal", [["justify-content", "normal"]]);
  staticUtility("justify-center", [["justify-content", "center"]]);
  staticUtility("justify-start", [["justify-content", "flex-start"]]);
  staticUtility("justify-end", [["justify-content", "flex-end"]]);
  staticUtility("justify-between", [["justify-content", "space-between"]]);
  staticUtility("justify-around", [["justify-content", "space-around"]]);
  staticUtility("justify-evenly", [["justify-content", "space-evenly"]]);
  staticUtility("justify-baseline", [["justify-content", "baseline"]]);
  staticUtility("justify-stretch", [["justify-content", "stretch"]]);
  staticUtility("justify-items-normal", [["justify-items", "normal"]]);
  staticUtility("justify-items-center", [["justify-items", "center"]]);
  staticUtility("justify-items-start", [["justify-items", "start"]]);
  staticUtility("justify-items-end", [["justify-items", "end"]]);
  staticUtility("justify-items-stretch", [["justify-items", "stretch"]]);
  spacingUtility("gap", ["--gap", "--spacing"], (value2) => [decl("gap", value2)]);
  spacingUtility("gap-x", ["--gap", "--spacing"], (value2) => [decl("column-gap", value2)]);
  spacingUtility("gap-y", ["--gap", "--spacing"], (value2) => [decl("row-gap", value2)]);
  spacingUtility("space-x", ["--space", "--spacing"], (value2) => [
    atRoot([property("--tw-space-x-reverse", "0")]),
    styleRule(":where(& > :not(:last-child))", [
      decl("--tw-sort", "row-gap"),
      decl("--tw-space-x-reverse", "0"),
      decl("margin-inline-start", `calc(${value2} * var(--tw-space-x-reverse))`),
      decl("margin-inline-end", `calc(${value2} * calc(1 - var(--tw-space-x-reverse)))`)
    ])
  ], { supportsNegative: true });
  spacingUtility("space-y", ["--space", "--spacing"], (value2) => [
    atRoot([property("--tw-space-y-reverse", "0")]),
    styleRule(":where(& > :not(:last-child))", [
      decl("--tw-sort", "column-gap"),
      decl("--tw-space-y-reverse", "0"),
      decl("margin-block-start", `calc(${value2} * var(--tw-space-y-reverse))`),
      decl("margin-block-end", `calc(${value2} * calc(1 - var(--tw-space-y-reverse)))`)
    ])
  ], { supportsNegative: true });
  staticUtility("space-x-reverse", [
    () => atRoot([property("--tw-space-x-reverse", "0")]),
    () => styleRule(":where(& > :not(:last-child))", [
      decl("--tw-sort", "row-gap"),
      decl("--tw-space-x-reverse", "1")
    ])
  ]);
  staticUtility("space-y-reverse", [
    () => atRoot([property("--tw-space-y-reverse", "0")]),
    () => styleRule(":where(& > :not(:last-child))", [
      decl("--tw-sort", "column-gap"),
      decl("--tw-space-y-reverse", "1")
    ])
  ]);
  staticUtility("accent-auto", [["accent-color", "auto"]]);
  colorUtility("accent", {
    themeKeys: ["--accent-color", "--color"],
    handle: (value2) => [decl("accent-color", value2)]
  });
  colorUtility("caret", {
    themeKeys: ["--caret-color", "--color"],
    handle: (value2) => [decl("caret-color", value2)]
  });
  colorUtility("divide", {
    themeKeys: ["--divide-color", "--color"],
    handle: (value2) => [
      styleRule(":where(& > :not(:last-child))", [
        decl("--tw-sort", "divide-color"),
        decl("border-color", value2)
      ])
    ]
  });
  staticUtility("place-self-auto", [["place-self", "auto"]]);
  staticUtility("place-self-start", [["place-self", "start"]]);
  staticUtility("place-self-end", [["place-self", "end"]]);
  staticUtility("place-self-center", [["place-self", "center"]]);
  staticUtility("place-self-stretch", [["place-self", "stretch"]]);
  staticUtility("self-auto", [["align-self", "auto"]]);
  staticUtility("self-start", [["align-self", "flex-start"]]);
  staticUtility("self-end", [["align-self", "flex-end"]]);
  staticUtility("self-center", [["align-self", "center"]]);
  staticUtility("self-stretch", [["align-self", "stretch"]]);
  staticUtility("self-baseline", [["align-self", "baseline"]]);
  staticUtility("justify-self-auto", [["justify-self", "auto"]]);
  staticUtility("justify-self-start", [["justify-self", "flex-start"]]);
  staticUtility("justify-self-end", [["justify-self", "flex-end"]]);
  staticUtility("justify-self-center", [["justify-self", "center"]]);
  staticUtility("justify-self-stretch", [["justify-self", "stretch"]]);
  for (let value2 of ["auto", "hidden", "clip", "visible", "scroll"]) {
    staticUtility(`overflow-${value2}`, [["overflow", value2]]);
    staticUtility(`overflow-x-${value2}`, [["overflow-x", value2]]);
    staticUtility(`overflow-y-${value2}`, [["overflow-y", value2]]);
  }
  for (let value2 of ["auto", "contain", "none"]) {
    staticUtility(`overscroll-${value2}`, [["overscroll-behavior", value2]]);
    staticUtility(`overscroll-x-${value2}`, [["overscroll-behavior-x", value2]]);
    staticUtility(`overscroll-y-${value2}`, [["overscroll-behavior-y", value2]]);
  }
  staticUtility("scroll-auto", [["scroll-behavior", "auto"]]);
  staticUtility("scroll-smooth", [["scroll-behavior", "smooth"]]);
  staticUtility("truncate", [
    ["overflow", "hidden"],
    ["text-overflow", "ellipsis"],
    ["white-space", "nowrap"]
  ]);
  staticUtility("text-ellipsis", [["text-overflow", "ellipsis"]]);
  staticUtility("text-clip", [["text-overflow", "clip"]]);
  staticUtility("hyphens-none", [
    ["-webkit-hyphens", "none"],
    ["hyphens", "none"]
  ]);
  staticUtility("hyphens-manual", [
    ["-webkit-hyphens", "manual"],
    ["hyphens", "manual"]
  ]);
  staticUtility("hyphens-auto", [
    ["-webkit-hyphens", "auto"],
    ["hyphens", "auto"]
  ]);
  staticUtility("whitespace-normal", [["white-space", "normal"]]);
  staticUtility("whitespace-nowrap", [["white-space", "nowrap"]]);
  staticUtility("whitespace-pre", [["white-space", "pre"]]);
  staticUtility("whitespace-pre-line", [["white-space", "pre-line"]]);
  staticUtility("whitespace-pre-wrap", [["white-space", "pre-wrap"]]);
  staticUtility("whitespace-break-spaces", [["white-space", "break-spaces"]]);
  staticUtility("text-wrap", [["text-wrap", "wrap"]]);
  staticUtility("text-nowrap", [["text-wrap", "nowrap"]]);
  staticUtility("text-balance", [["text-wrap", "balance"]]);
  staticUtility("text-pretty", [["text-wrap", "pretty"]]);
  staticUtility("break-normal", [
    ["overflow-wrap", "normal"],
    ["word-break", "normal"]
  ]);
  staticUtility("break-words", [["overflow-wrap", "break-word"]]);
  staticUtility("break-all", [["word-break", "break-all"]]);
  staticUtility("break-keep", [["word-break", "keep-all"]]);
  {
    for (let [root, properties] of [
      ["rounded", ["border-radius"]],
      ["rounded-s", ["border-start-start-radius", "border-end-start-radius"]],
      ["rounded-e", ["border-start-end-radius", "border-end-end-radius"]],
      ["rounded-t", ["border-top-left-radius", "border-top-right-radius"]],
      ["rounded-r", ["border-top-right-radius", "border-bottom-right-radius"]],
      ["rounded-b", ["border-bottom-right-radius", "border-bottom-left-radius"]],
      ["rounded-l", ["border-top-left-radius", "border-bottom-left-radius"]],
      ["rounded-ss", ["border-start-start-radius"]],
      ["rounded-se", ["border-start-end-radius"]],
      ["rounded-ee", ["border-end-end-radius"]],
      ["rounded-es", ["border-end-start-radius"]],
      ["rounded-tl", ["border-top-left-radius"]],
      ["rounded-tr", ["border-top-right-radius"]],
      ["rounded-br", ["border-bottom-right-radius"]],
      ["rounded-bl", ["border-bottom-left-radius"]]
    ]) {
      staticUtility(`${root}-none`, properties.map((property2) => [property2, "0"]));
      staticUtility(`${root}-full`, properties.map((property2) => [property2, "calc(infinity * 1px)"]));
      functionalUtility(root, {
        themeKeys: ["--radius"],
        handle: (value2) => properties.map((property2) => decl(property2, value2))
      });
    }
  }
  staticUtility("border-solid", [
    ["--tw-border-style", "solid"],
    ["border-style", "solid"]
  ]);
  staticUtility("border-dashed", [
    ["--tw-border-style", "dashed"],
    ["border-style", "dashed"]
  ]);
  staticUtility("border-dotted", [
    ["--tw-border-style", "dotted"],
    ["border-style", "dotted"]
  ]);
  staticUtility("border-double", [
    ["--tw-border-style", "double"],
    ["border-style", "double"]
  ]);
  staticUtility("border-hidden", [
    ["--tw-border-style", "hidden"],
    ["border-style", "hidden"]
  ]);
  staticUtility("border-none", [
    ["--tw-border-style", "none"],
    ["border-style", "none"]
  ]);
  {
    let borderSideUtility = function(classRoot, desc) {
      utilities.functional(classRoot, (candidate) => {
        if (!candidate.value) {
          if (candidate.modifier)
            return;
          let value2 = theme.get(["--default-border-width"]) ?? "1px";
          let decls = desc.width(value2);
          if (!decls)
            return;
          return [borderProperties(), ...decls];
        }
        if (candidate.value.kind === "arbitrary") {
          let value2 = candidate.value.value;
          let type = candidate.value.dataType ?? inferDataType(value2, ["color", "line-width", "length"]);
          switch (type) {
            case "line-width":
            case "length": {
              if (candidate.modifier)
                return;
              let decls = desc.width(value2);
              if (!decls)
                return;
              return [borderProperties(), ...decls];
            }
            default: {
              value2 = asColor(value2, candidate.modifier, theme);
              if (value2 === null)
                return;
              return desc.color(value2);
            }
          }
        }
        {
          let value2 = resolveThemeColor(candidate, theme, ["--border-color", "--color"]);
          if (value2) {
            return desc.color(value2);
          }
        }
        {
          if (candidate.modifier)
            return;
          let value2 = theme.resolve(candidate.value.value, ["--border-width"]);
          if (value2) {
            let decls = desc.width(value2);
            if (!decls)
              return;
            return [borderProperties(), ...decls];
          }
          if (isPositiveInteger(candidate.value.value)) {
            let decls = desc.width(`${candidate.value.value}px`);
            if (!decls)
              return;
            return [borderProperties(), ...decls];
          }
        }
      });
      suggest(classRoot, () => [
        {
          values: ["current", "inherit", "transparent"],
          valueThemeKeys: ["--border-color", "--color"],
          modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`),
          hasDefaultValue: true
        },
        {
          values: ["0", "2", "4", "8"],
          valueThemeKeys: ["--border-width"]
        }
      ]);
    };
    let borderProperties = () => {
      return atRoot([property("--tw-border-style", "solid")]);
    };
    borderSideUtility("border", {
      width: (value2) => [
        decl("border-style", "var(--tw-border-style)"),
        decl("border-width", value2)
      ],
      color: (value2) => [decl("border-color", value2)]
    });
    borderSideUtility("border-x", {
      width: (value2) => [
        decl("border-inline-style", "var(--tw-border-style)"),
        decl("border-inline-width", value2)
      ],
      color: (value2) => [decl("border-inline-color", value2)]
    });
    borderSideUtility("border-y", {
      width: (value2) => [
        decl("border-block-style", "var(--tw-border-style)"),
        decl("border-block-width", value2)
      ],
      color: (value2) => [decl("border-block-color", value2)]
    });
    borderSideUtility("border-s", {
      width: (value2) => [
        decl("border-inline-start-style", "var(--tw-border-style)"),
        decl("border-inline-start-width", value2)
      ],
      color: (value2) => [decl("border-inline-start-color", value2)]
    });
    borderSideUtility("border-e", {
      width: (value2) => [
        decl("border-inline-end-style", "var(--tw-border-style)"),
        decl("border-inline-end-width", value2)
      ],
      color: (value2) => [decl("border-inline-end-color", value2)]
    });
    borderSideUtility("border-t", {
      width: (value2) => [
        decl("border-top-style", "var(--tw-border-style)"),
        decl("border-top-width", value2)
      ],
      color: (value2) => [decl("border-top-color", value2)]
    });
    borderSideUtility("border-r", {
      width: (value2) => [
        decl("border-right-style", "var(--tw-border-style)"),
        decl("border-right-width", value2)
      ],
      color: (value2) => [decl("border-right-color", value2)]
    });
    borderSideUtility("border-b", {
      width: (value2) => [
        decl("border-bottom-style", "var(--tw-border-style)"),
        decl("border-bottom-width", value2)
      ],
      color: (value2) => [decl("border-bottom-color", value2)]
    });
    borderSideUtility("border-l", {
      width: (value2) => [
        decl("border-left-style", "var(--tw-border-style)"),
        decl("border-left-width", value2)
      ],
      color: (value2) => [decl("border-left-color", value2)]
    });
    functionalUtility("divide-x", {
      defaultValue: theme.get(["--default-border-width"]) ?? "1px",
      themeKeys: ["--divide-width", "--border-width"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}px`;
      },
      handle: (value2) => [
        atRoot([property("--tw-divide-x-reverse", "0")]),
        styleRule(":where(& > :not(:last-child))", [
          decl("--tw-sort", "divide-x-width"),
          borderProperties(),
          decl("--tw-divide-x-reverse", "0"),
          decl("border-inline-style", "var(--tw-border-style)"),
          decl("border-inline-start-width", `calc(${value2} * var(--tw-divide-x-reverse))`),
          decl("border-inline-end-width", `calc(${value2} * calc(1 - var(--tw-divide-x-reverse)))`)
        ])
      ]
    });
    functionalUtility("divide-y", {
      defaultValue: theme.get(["--default-border-width"]) ?? "1px",
      themeKeys: ["--divide-width", "--border-width"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}px`;
      },
      handle: (value2) => [
        atRoot([property("--tw-divide-y-reverse", "0")]),
        styleRule(":where(& > :not(:last-child))", [
          decl("--tw-sort", "divide-y-width"),
          borderProperties(),
          decl("--tw-divide-y-reverse", "0"),
          decl("border-bottom-style", "var(--tw-border-style)"),
          decl("border-top-style", "var(--tw-border-style)"),
          decl("border-top-width", `calc(${value2} * var(--tw-divide-y-reverse))`),
          decl("border-bottom-width", `calc(${value2} * calc(1 - var(--tw-divide-y-reverse)))`)
        ])
      ]
    });
    suggest("divide-x", () => [
      {
        values: ["0", "2", "4", "8"],
        valueThemeKeys: ["--divide-width", "--border-width"],
        hasDefaultValue: true
      }
    ]);
    suggest("divide-y", () => [
      {
        values: ["0", "2", "4", "8"],
        valueThemeKeys: ["--divide-width", "--border-width"],
        hasDefaultValue: true
      }
    ]);
    staticUtility("divide-x-reverse", [
      () => atRoot([property("--tw-divide-x-reverse", "0")]),
      () => styleRule(":where(& > :not(:last-child))", [decl("--tw-divide-x-reverse", "1")])
    ]);
    staticUtility("divide-y-reverse", [
      () => atRoot([property("--tw-divide-y-reverse", "0")]),
      () => styleRule(":where(& > :not(:last-child))", [decl("--tw-divide-y-reverse", "1")])
    ]);
    for (let value2 of ["solid", "dashed", "dotted", "double", "none"]) {
      staticUtility(`divide-${value2}`, [
        () => styleRule(":where(& > :not(:last-child))", [
          decl("--tw-sort", "divide-style"),
          decl("--tw-border-style", value2),
          decl("border-style", value2)
        ])
      ]);
    }
  }
  staticUtility("bg-auto", [["background-size", "auto"]]);
  staticUtility("bg-cover", [["background-size", "cover"]]);
  staticUtility("bg-contain", [["background-size", "contain"]]);
  staticUtility("bg-fixed", [["background-attachment", "fixed"]]);
  staticUtility("bg-local", [["background-attachment", "local"]]);
  staticUtility("bg-scroll", [["background-attachment", "scroll"]]);
  staticUtility("bg-center", [["background-position", "center"]]);
  staticUtility("bg-top", [["background-position", "top"]]);
  staticUtility("bg-right-top", [["background-position", "right top"]]);
  staticUtility("bg-right", [["background-position", "right"]]);
  staticUtility("bg-right-bottom", [["background-position", "right bottom"]]);
  staticUtility("bg-bottom", [["background-position", "bottom"]]);
  staticUtility("bg-left-bottom", [["background-position", "left bottom"]]);
  staticUtility("bg-left", [["background-position", "left"]]);
  staticUtility("bg-left-top", [["background-position", "left top"]]);
  staticUtility("bg-repeat", [["background-repeat", "repeat"]]);
  staticUtility("bg-no-repeat", [["background-repeat", "no-repeat"]]);
  staticUtility("bg-repeat-x", [["background-repeat", "repeat-x"]]);
  staticUtility("bg-repeat-y", [["background-repeat", "repeat-y"]]);
  staticUtility("bg-repeat-round", [["background-repeat", "round"]]);
  staticUtility("bg-repeat-space", [["background-repeat", "space"]]);
  staticUtility("bg-none", [["background-image", "none"]]);
  {
    let resolveInterpolationModifier = function(modifier) {
      let interpolationMethod = "in oklab";
      if (modifier?.kind === "named") {
        switch (modifier.value) {
          case "longer":
          case "shorter":
          case "increasing":
          case "decreasing":
            interpolationMethod = `in oklch ${modifier.value} hue`;
            break;
          default:
            interpolationMethod = `in ${modifier.value}`;
        }
      } else if (modifier?.kind === "arbitrary") {
        interpolationMethod = modifier.value;
      }
      return interpolationMethod;
    }, handleBgLinear = function({ negative }) {
      return (candidate) => {
        if (!candidate.value)
          return;
        if (candidate.value.kind === "arbitrary") {
          if (candidate.modifier)
            return;
          let value3 = candidate.value.value;
          let type = candidate.value.dataType ?? inferDataType(value3, ["angle"]);
          switch (type) {
            case "angle": {
              value3 = negative ? `calc(${value3} * -1)` : `${value3}`;
              return [
                decl("--tw-gradient-position", `${value3},`),
                decl("background-image", `linear-gradient(var(--tw-gradient-stops,${value3}))`)
              ];
            }
            default: {
              if (negative)
                return;
              return [
                decl("--tw-gradient-position", `${value3},`),
                decl("background-image", `linear-gradient(var(--tw-gradient-stops,${value3}))`)
              ];
            }
          }
        }
        let value2 = candidate.value.value;
        if (!negative && linearGradientDirections.has(value2)) {
          value2 = linearGradientDirections.get(value2);
        } else if (isPositiveInteger(value2)) {
          value2 = negative ? `calc(${value2}deg * -1)` : `${value2}deg`;
        } else {
          return;
        }
        let interpolationMethod = resolveInterpolationModifier(candidate.modifier);
        return [
          decl("--tw-gradient-position", `${value2} ${interpolationMethod},`),
          decl("background-image", `linear-gradient(var(--tw-gradient-stops))`)
        ];
      };
    }, handleBgConic = function({ negative }) {
      return (candidate) => {
        if (candidate.value?.kind === "arbitrary") {
          if (candidate.modifier)
            return;
          let value3 = candidate.value.value;
          return [
            decl("--tw-gradient-position", `${value3},`),
            decl("background-image", `conic-gradient(var(--tw-gradient-stops,${value3}))`)
          ];
        }
        let interpolationMethod = resolveInterpolationModifier(candidate.modifier);
        if (!candidate.value) {
          return [
            decl("--tw-gradient-position", `${interpolationMethod},`),
            decl("background-image", `conic-gradient(var(--tw-gradient-stops))`)
          ];
        }
        let value2 = candidate.value.value;
        if (!isPositiveInteger(value2))
          return;
        value2 = negative ? `calc(${value2} * -1)` : `${value2}deg`;
        return [
          decl("--tw-gradient-position", `from ${value2} ${interpolationMethod},`),
          decl("background-image", `conic-gradient(var(--tw-gradient-stops))`)
        ];
      };
    };
    let suggestedModifiers = [
      "oklab",
      "oklch",
      "srgb",
      "hsl",
      "longer",
      "shorter",
      "increasing",
      "decreasing"
    ];
    let linearGradientDirections = new Map([
      ["to-t", "to top"],
      ["to-tr", "to top right"],
      ["to-r", "to right"],
      ["to-br", "to bottom right"],
      ["to-b", "to bottom"],
      ["to-bl", "to bottom left"],
      ["to-l", "to left"],
      ["to-tl", "to top left"]
    ]);
    utilities.functional("-bg-linear", handleBgLinear({ negative: true }));
    utilities.functional("bg-linear", handleBgLinear({ negative: false }));
    suggest("bg-linear", () => [
      {
        values: [...linearGradientDirections.keys()],
        modifiers: suggestedModifiers
      },
      {
        values: ["0", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330"],
        supportsNegative: true,
        modifiers: suggestedModifiers
      }
    ]);
    utilities.functional("-bg-conic", handleBgConic({ negative: true }));
    utilities.functional("bg-conic", handleBgConic({ negative: false }));
    suggest("bg-conic", () => [
      {
        hasDefaultValue: true,
        modifiers: suggestedModifiers
      },
      {
        values: ["0", "30", "60", "90", "120", "150", "180", "210", "240", "270", "300", "330"],
        supportsNegative: true,
        modifiers: suggestedModifiers
      }
    ]);
    utilities.functional("bg-radial", (candidate) => {
      if (!candidate.value) {
        let interpolationMethod = resolveInterpolationModifier(candidate.modifier);
        return [
          decl("--tw-gradient-position", `${interpolationMethod},`),
          decl("background-image", `radial-gradient(var(--tw-gradient-stops))`)
        ];
      }
      if (candidate.value.kind === "arbitrary") {
        if (candidate.modifier)
          return;
        let value2 = candidate.value.value;
        return [
          decl("--tw-gradient-position", `${value2},`),
          decl("background-image", `radial-gradient(var(--tw-gradient-stops,${value2}))`)
        ];
      }
    });
    suggest("bg-radial", () => [
      {
        hasDefaultValue: true,
        modifiers: suggestedModifiers
      }
    ]);
  }
  utilities.functional("bg", (candidate) => {
    if (!candidate.value)
      return;
    if (candidate.value.kind === "arbitrary") {
      let value2 = candidate.value.value;
      let type = candidate.value.dataType ?? inferDataType(value2, [
        "image",
        "color",
        "percentage",
        "position",
        "bg-size",
        "length",
        "url"
      ]);
      switch (type) {
        case "percentage":
        case "position": {
          if (candidate.modifier)
            return;
          return [decl("background-position", value2)];
        }
        case "bg-size":
        case "length":
        case "size": {
          if (candidate.modifier)
            return;
          return [decl("background-size", value2)];
        }
        case "image":
        case "url": {
          if (candidate.modifier)
            return;
          return [decl("background-image", value2)];
        }
        default: {
          value2 = asColor(value2, candidate.modifier, theme);
          if (value2 === null)
            return;
          return [decl("background-color", value2)];
        }
      }
    }
    {
      let value2 = resolveThemeColor(candidate, theme, ["--background-color", "--color"]);
      if (value2) {
        return [decl("background-color", value2)];
      }
    }
    {
      if (candidate.modifier)
        return;
      let value2 = theme.resolve(candidate.value.value, ["--background-image"]);
      if (value2) {
        return [decl("background-image", value2)];
      }
    }
  });
  suggest("bg", () => [
    {
      values: ["current", "inherit", "transparent"],
      valueThemeKeys: ["--background-color", "--color"],
      modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
    },
    {
      values: [],
      valueThemeKeys: ["--background-image"]
    }
  ]);
  let gradientStopProperties = () => {
    return atRoot([
      property("--tw-gradient-position"),
      property("--tw-gradient-from", "#0000", "<color>"),
      property("--tw-gradient-via", "#0000", "<color>"),
      property("--tw-gradient-to", "#0000", "<color>"),
      property("--tw-gradient-stops"),
      property("--tw-gradient-via-stops"),
      property("--tw-gradient-from-position", "0%", "<length-percentage>"),
      property("--tw-gradient-via-position", "50%", "<length-percentage>"),
      property("--tw-gradient-to-position", "100%", "<length-percentage>")
    ]);
  };
  function gradientStopUtility(classRoot, desc) {
    utilities.functional(classRoot, (candidate) => {
      if (!candidate.value)
        return;
      if (candidate.value.kind === "arbitrary") {
        let value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["color", "length", "percentage"]);
        switch (type) {
          case "length":
          case "percentage": {
            if (candidate.modifier)
              return;
            return desc.position(value2);
          }
          default: {
            value2 = asColor(value2, candidate.modifier, theme);
            if (value2 === null)
              return;
            return desc.color(value2);
          }
        }
      }
      {
        let value2 = resolveThemeColor(candidate, theme, ["--background-color", "--color"]);
        if (value2) {
          return desc.color(value2);
        }
      }
      {
        if (candidate.modifier)
          return;
        let value2 = theme.resolve(candidate.value.value, ["--gradient-color-stop-positions"]);
        if (value2) {
          return desc.position(value2);
        } else if (candidate.value.value[candidate.value.value.length - 1] === "%" && isPositiveInteger(candidate.value.value.slice(0, -1))) {
          return desc.position(candidate.value.value);
        }
      }
    });
    suggest(classRoot, () => [
      {
        values: ["current", "inherit", "transparent"],
        valueThemeKeys: ["--background-color", "--color"],
        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
      },
      {
        values: Array.from({ length: 21 }, (_, index) => `${index * 5}%`),
        valueThemeKeys: ["--gradient-color-stop-positions"]
      }
    ]);
  }
  gradientStopUtility("from", {
    color: (value2) => [
      gradientStopProperties(),
      decl("--tw-sort", "--tw-gradient-from"),
      decl("--tw-gradient-from", value2),
      decl("--tw-gradient-stops", "var(--tw-gradient-via-stops, var(--tw-gradient-position,) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position))")
    ],
    position: (value2) => [gradientStopProperties(), decl("--tw-gradient-from-position", value2)]
  });
  staticUtility("via-none", [["--tw-gradient-via-stops", "initial"]]);
  gradientStopUtility("via", {
    color: (value2) => [
      gradientStopProperties(),
      decl("--tw-sort", "--tw-gradient-via"),
      decl("--tw-gradient-via", value2),
      decl("--tw-gradient-via-stops", "var(--tw-gradient-position,) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-via) var(--tw-gradient-via-position), var(--tw-gradient-to) var(--tw-gradient-to-position)"),
      decl("--tw-gradient-stops", "var(--tw-gradient-via-stops)")
    ],
    position: (value2) => [gradientStopProperties(), decl("--tw-gradient-via-position", value2)]
  });
  gradientStopUtility("to", {
    color: (value2) => [
      gradientStopProperties(),
      decl("--tw-sort", "--tw-gradient-to"),
      decl("--tw-gradient-to", value2),
      decl("--tw-gradient-stops", "var(--tw-gradient-via-stops, var(--tw-gradient-position,) var(--tw-gradient-from) var(--tw-gradient-from-position), var(--tw-gradient-to) var(--tw-gradient-to-position))")
    ],
    position: (value2) => [gradientStopProperties(), decl("--tw-gradient-to-position", value2)]
  });
  staticUtility("box-decoration-slice", [
    ["-webkit-box-decoration-break", "slice"],
    ["box-decoration-break", "slice"]
  ]);
  staticUtility("box-decoration-clone", [
    ["-webkit-box-decoration-break", "clone"],
    ["box-decoration-break", "clone"]
  ]);
  staticUtility("bg-clip-text", [["background-clip", "text"]]);
  staticUtility("bg-clip-border", [["background-clip", "border-box"]]);
  staticUtility("bg-clip-padding", [["background-clip", "padding-box"]]);
  staticUtility("bg-clip-content", [["background-clip", "content-box"]]);
  staticUtility("bg-origin-border", [["background-origin", "border-box"]]);
  staticUtility("bg-origin-padding", [["background-origin", "padding-box"]]);
  staticUtility("bg-origin-content", [["background-origin", "content-box"]]);
  for (let value2 of [
    "normal",
    "multiply",
    "screen",
    "overlay",
    "darken",
    "lighten",
    "color-dodge",
    "color-burn",
    "hard-light",
    "soft-light",
    "difference",
    "exclusion",
    "hue",
    "saturation",
    "color",
    "luminosity"
  ]) {
    staticUtility(`bg-blend-${value2}`, [["background-blend-mode", value2]]);
    staticUtility(`mix-blend-${value2}`, [["mix-blend-mode", value2]]);
  }
  staticUtility("mix-blend-plus-darker", [["mix-blend-mode", "plus-darker"]]);
  staticUtility("mix-blend-plus-lighter", [["mix-blend-mode", "plus-lighter"]]);
  staticUtility("fill-none", [["fill", "none"]]);
  utilities.functional("fill", (candidate) => {
    if (!candidate.value)
      return;
    if (candidate.value.kind === "arbitrary") {
      let value3 = asColor(candidate.value.value, candidate.modifier, theme);
      if (value3 === null)
        return;
      return [decl("fill", value3)];
    }
    let value2 = resolveThemeColor(candidate, theme, ["--fill", "--color"]);
    if (value2) {
      return [decl("fill", value2)];
    }
  });
  suggest("fill", () => [
    {
      values: ["current", "inherit", "transparent"],
      valueThemeKeys: ["--fill", "--color"],
      modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
    }
  ]);
  staticUtility("stroke-none", [["stroke", "none"]]);
  utilities.functional("stroke", (candidate) => {
    if (!candidate.value)
      return;
    if (candidate.value.kind === "arbitrary") {
      let value2 = candidate.value.value;
      let type = candidate.value.dataType ?? inferDataType(value2, ["color", "number", "length", "percentage"]);
      switch (type) {
        case "number":
        case "length":
        case "percentage": {
          if (candidate.modifier)
            return;
          return [decl("stroke-width", value2)];
        }
        default: {
          value2 = asColor(candidate.value.value, candidate.modifier, theme);
          if (value2 === null)
            return;
          return [decl("stroke", value2)];
        }
      }
    }
    {
      let value2 = resolveThemeColor(candidate, theme, ["--stroke", "--color"]);
      if (value2) {
        return [decl("stroke", value2)];
      }
    }
    {
      let value2 = theme.resolve(candidate.value.value, ["--stroke-width"]);
      if (value2) {
        return [decl("stroke-width", value2)];
      } else if (isPositiveInteger(candidate.value.value)) {
        return [decl("stroke-width", candidate.value.value)];
      }
    }
  });
  suggest("stroke", () => [
    {
      values: ["current", "inherit", "transparent"],
      valueThemeKeys: ["--stroke", "--color"],
      modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
    },
    {
      values: ["0", "1", "2", "3"],
      valueThemeKeys: ["--stroke-width"]
    }
  ]);
  staticUtility("object-contain", [["object-fit", "contain"]]);
  staticUtility("object-cover", [["object-fit", "cover"]]);
  staticUtility("object-fill", [["object-fit", "fill"]]);
  staticUtility("object-none", [["object-fit", "none"]]);
  staticUtility("object-scale-down", [["object-fit", "scale-down"]]);
  staticUtility("object-bottom", [["object-position", "bottom"]]);
  staticUtility("object-center", [["object-position", "center"]]);
  staticUtility("object-left", [["object-position", "left"]]);
  staticUtility("object-left-bottom", [["object-position", "left bottom"]]);
  staticUtility("object-left-top", [["object-position", "left top"]]);
  staticUtility("object-right", [["object-position", "right"]]);
  staticUtility("object-right-bottom", [["object-position", "right bottom"]]);
  staticUtility("object-right-top", [["object-position", "right top"]]);
  staticUtility("object-top", [["object-position", "top"]]);
  functionalUtility("object", {
    themeKeys: ["--object-position"],
    handle: (value2) => [decl("object-position", value2)]
  });
  for (let [name, property2] of [
    ["p", "padding"],
    ["px", "padding-inline"],
    ["py", "padding-block"],
    ["ps", "padding-inline-start"],
    ["pe", "padding-inline-end"],
    ["pt", "padding-top"],
    ["pr", "padding-right"],
    ["pb", "padding-bottom"],
    ["pl", "padding-left"]
  ]) {
    spacingUtility(name, ["--padding", "--spacing"], (value2) => [decl(property2, value2)]);
  }
  staticUtility("text-left", [["text-align", "left"]]);
  staticUtility("text-center", [["text-align", "center"]]);
  staticUtility("text-right", [["text-align", "right"]]);
  staticUtility("text-justify", [["text-align", "justify"]]);
  staticUtility("text-start", [["text-align", "start"]]);
  staticUtility("text-end", [["text-align", "end"]]);
  spacingUtility("indent", ["--text-indent", "--spacing"], (value2) => [decl("text-indent", value2)], {
    supportsNegative: true
  });
  staticUtility("align-baseline", [["vertical-align", "baseline"]]);
  staticUtility("align-top", [["vertical-align", "top"]]);
  staticUtility("align-middle", [["vertical-align", "middle"]]);
  staticUtility("align-bottom", [["vertical-align", "bottom"]]);
  staticUtility("align-text-top", [["vertical-align", "text-top"]]);
  staticUtility("align-text-bottom", [["vertical-align", "text-bottom"]]);
  staticUtility("align-sub", [["vertical-align", "sub"]]);
  staticUtility("align-super", [["vertical-align", "super"]]);
  functionalUtility("align", {
    themeKeys: [],
    handle: (value2) => [decl("vertical-align", value2)]
  });
  utilities.functional("font", (candidate) => {
    if (!candidate.value || candidate.modifier)
      return;
    if (candidate.value.kind === "arbitrary") {
      let value2 = candidate.value.value;
      let type = candidate.value.dataType ?? inferDataType(value2, ["number", "generic-name", "family-name"]);
      switch (type) {
        case "generic-name":
        case "family-name": {
          return [decl("font-family", value2)];
        }
        default: {
          return [
            atRoot([property("--tw-font-weight")]),
            decl("--tw-font-weight", value2),
            decl("font-weight", value2)
          ];
        }
      }
    }
    {
      let value2 = theme.resolveWith(candidate.value.value, ["--font"], ["--font-feature-settings", "--font-variation-settings"]);
      if (value2) {
        let [families, options = {}] = value2;
        return [
          decl("font-family", families),
          decl("font-feature-settings", options["--font-feature-settings"]),
          decl("font-variation-settings", options["--font-variation-settings"])
        ];
      }
    }
    {
      let value2 = theme.resolve(candidate.value.value, ["--font-weight"]);
      if (value2) {
        return [
          atRoot([property("--tw-font-weight")]),
          decl("--tw-font-weight", value2),
          decl("font-weight", value2)
        ];
      }
    }
  });
  suggest("font", () => [
    {
      values: [],
      valueThemeKeys: ["--font"]
    },
    {
      values: [
        "thin",
        "extralight",
        "light",
        "normal",
        "medium",
        "semibold",
        "bold",
        "extrabold",
        "black"
      ],
      valueThemeKeys: ["--font-weight"]
    }
  ]);
  staticUtility("uppercase", [["text-transform", "uppercase"]]);
  staticUtility("lowercase", [["text-transform", "lowercase"]]);
  staticUtility("capitalize", [["text-transform", "capitalize"]]);
  staticUtility("normal-case", [["text-transform", "none"]]);
  staticUtility("italic", [["font-style", "italic"]]);
  staticUtility("not-italic", [["font-style", "normal"]]);
  staticUtility("underline", [["text-decoration-line", "underline"]]);
  staticUtility("overline", [["text-decoration-line", "overline"]]);
  staticUtility("line-through", [["text-decoration-line", "line-through"]]);
  staticUtility("no-underline", [["text-decoration-line", "none"]]);
  staticUtility("font-stretch-normal", [["font-stretch", "normal"]]);
  staticUtility("font-stretch-ultra-condensed", [["font-stretch", "ultra-condensed"]]);
  staticUtility("font-stretch-extra-condensed", [["font-stretch", "extra-condensed"]]);
  staticUtility("font-stretch-condensed", [["font-stretch", "condensed"]]);
  staticUtility("font-stretch-semi-condensed", [["font-stretch", "semi-condensed"]]);
  staticUtility("font-stretch-semi-expanded", [["font-stretch", "semi-expanded"]]);
  staticUtility("font-stretch-expanded", [["font-stretch", "expanded"]]);
  staticUtility("font-stretch-extra-expanded", [["font-stretch", "extra-expanded"]]);
  staticUtility("font-stretch-ultra-expanded", [["font-stretch", "ultra-expanded"]]);
  functionalUtility("font-stretch", {
    handleBareValue: ({ value: value2 }) => {
      if (!value2.endsWith("%"))
        return null;
      let num = Number(value2.slice(0, -1));
      if (!isPositiveInteger(num))
        return null;
      if (Number.isNaN(num) || num < 50 || num > 200)
        return null;
      return value2;
    },
    handle: (value2) => [decl("font-stretch", value2)]
  });
  suggest("font-stretch", () => [
    {
      values: ["50%", "75%", "90%", "95%", "100%", "105%", "110%", "125%", "150%", "200%"]
    }
  ]);
  colorUtility("placeholder", {
    themeKeys: ["--background-color", "--color"],
    handle: (value2) => [
      styleRule("&::placeholder", [decl("--tw-sort", "placeholder-color"), decl("color", value2)])
    ]
  });
  staticUtility("decoration-solid", [["text-decoration-style", "solid"]]);
  staticUtility("decoration-double", [["text-decoration-style", "double"]]);
  staticUtility("decoration-dotted", [["text-decoration-style", "dotted"]]);
  staticUtility("decoration-dashed", [["text-decoration-style", "dashed"]]);
  staticUtility("decoration-wavy", [["text-decoration-style", "wavy"]]);
  staticUtility("decoration-auto", [["text-decoration-thickness", "auto"]]);
  staticUtility("decoration-from-font", [["text-decoration-thickness", "from-font"]]);
  utilities.functional("decoration", (candidate) => {
    if (!candidate.value)
      return;
    if (candidate.value.kind === "arbitrary") {
      let value2 = candidate.value.value;
      let type = candidate.value.dataType ?? inferDataType(value2, ["color", "length", "percentage"]);
      switch (type) {
        case "length":
        case "percentage": {
          if (candidate.modifier)
            return;
          return [decl("text-decoration-thickness", value2)];
        }
        default: {
          value2 = asColor(value2, candidate.modifier, theme);
          if (value2 === null)
            return;
          return [decl("text-decoration-color", value2)];
        }
      }
    }
    {
      let value2 = theme.resolve(candidate.value.value, ["--text-decoration-thickness"]);
      if (value2) {
        if (candidate.modifier)
          return;
        return [decl("text-decoration-thickness", value2)];
      }
      if (isPositiveInteger(candidate.value.value)) {
        if (candidate.modifier)
          return;
        return [decl("text-decoration-thickness", `${candidate.value.value}px`)];
      }
    }
    {
      let value2 = resolveThemeColor(candidate, theme, ["--text-decoration-color", "--color"]);
      if (value2) {
        return [decl("text-decoration-color", value2)];
      }
    }
  });
  suggest("decoration", () => [
    {
      values: ["current", "inherit", "transparent"],
      valueThemeKeys: ["--text-decoration-color", "--color"],
      modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
    },
    {
      values: ["0", "1", "2"],
      valueThemeKeys: ["--text-decoration-thickness"]
    }
  ]);
  staticUtility("animate-none", [["animation", "none"]]);
  functionalUtility("animate", {
    themeKeys: ["--animate"],
    handle: (value2) => [decl("animation", value2)]
  });
  {
    let cssFilterValue = [
      "var(--tw-blur,)",
      "var(--tw-brightness,)",
      "var(--tw-contrast,)",
      "var(--tw-grayscale,)",
      "var(--tw-hue-rotate,)",
      "var(--tw-invert,)",
      "var(--tw-saturate,)",
      "var(--tw-sepia,)",
      "var(--tw-drop-shadow,)"
    ].join(" ");
    let cssBackdropFilterValue = [
      "var(--tw-backdrop-blur,)",
      "var(--tw-backdrop-brightness,)",
      "var(--tw-backdrop-contrast,)",
      "var(--tw-backdrop-grayscale,)",
      "var(--tw-backdrop-hue-rotate,)",
      "var(--tw-backdrop-invert,)",
      "var(--tw-backdrop-opacity,)",
      "var(--tw-backdrop-saturate,)",
      "var(--tw-backdrop-sepia,)"
    ].join(" ");
    let filterProperties = () => {
      return atRoot([
        property("--tw-blur"),
        property("--tw-brightness"),
        property("--tw-contrast"),
        property("--tw-grayscale"),
        property("--tw-hue-rotate"),
        property("--tw-invert"),
        property("--tw-opacity"),
        property("--tw-saturate"),
        property("--tw-sepia")
      ]);
    };
    let backdropFilterProperties = () => {
      return atRoot([
        property("--tw-backdrop-blur"),
        property("--tw-backdrop-brightness"),
        property("--tw-backdrop-contrast"),
        property("--tw-backdrop-grayscale"),
        property("--tw-backdrop-hue-rotate"),
        property("--tw-backdrop-invert"),
        property("--tw-backdrop-opacity"),
        property("--tw-backdrop-saturate"),
        property("--tw-backdrop-sepia")
      ]);
    };
    utilities.functional("filter", (candidate) => {
      if (candidate.modifier)
        return;
      if (candidate.value === null) {
        return [filterProperties(), decl("filter", cssFilterValue)];
      }
      if (candidate.value.kind === "arbitrary") {
        return [decl("filter", candidate.value.value)];
      }
      switch (candidate.value.value) {
        case "none":
          return [decl("filter", "none")];
      }
    });
    utilities.functional("backdrop-filter", (candidate) => {
      if (candidate.modifier)
        return;
      if (candidate.value === null) {
        return [
          backdropFilterProperties(),
          decl("-webkit-backdrop-filter", cssBackdropFilterValue),
          decl("backdrop-filter", cssBackdropFilterValue)
        ];
      }
      if (candidate.value.kind === "arbitrary") {
        return [
          decl("-webkit-backdrop-filter", candidate.value.value),
          decl("backdrop-filter", candidate.value.value)
        ];
      }
      switch (candidate.value.value) {
        case "none":
          return [decl("-webkit-backdrop-filter", "none"), decl("backdrop-filter", "none")];
      }
    });
    functionalUtility("blur", {
      themeKeys: ["--blur"],
      handle: (value2) => [
        filterProperties(),
        decl("--tw-blur", `blur(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    staticUtility("blur-none", [filterProperties, ["--tw-blur", " "], ["filter", cssFilterValue]]);
    functionalUtility("backdrop-blur", {
      themeKeys: ["--backdrop-blur", "--blur"],
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-blur", `blur(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    staticUtility("backdrop-blur-none", [
      backdropFilterProperties,
      ["--tw-backdrop-blur", " "],
      ["-webkit-backdrop-filter", cssBackdropFilterValue],
      ["backdrop-filter", cssBackdropFilterValue]
    ]);
    functionalUtility("brightness", {
      themeKeys: ["--brightness"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        filterProperties(),
        decl("--tw-brightness", `brightness(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-brightness", {
      themeKeys: ["--backdrop-brightness", "--brightness"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-brightness", `brightness(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("brightness", () => [
      {
        values: ["0", "50", "75", "90", "95", "100", "105", "110", "125", "150", "200"],
        valueThemeKeys: ["--brightness"]
      }
    ]);
    suggest("backdrop-brightness", () => [
      {
        values: ["0", "50", "75", "90", "95", "100", "105", "110", "125", "150", "200"],
        valueThemeKeys: ["--backdrop-brightness", "--brightness"]
      }
    ]);
    functionalUtility("contrast", {
      themeKeys: ["--contrast"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        filterProperties(),
        decl("--tw-contrast", `contrast(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-contrast", {
      themeKeys: ["--backdrop-contrast", "--contrast"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-contrast", `contrast(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("contrast", () => [
      {
        values: ["0", "50", "75", "100", "125", "150", "200"],
        valueThemeKeys: ["--contrast"]
      }
    ]);
    suggest("backdrop-contrast", () => [
      {
        values: ["0", "50", "75", "100", "125", "150", "200"],
        valueThemeKeys: ["--backdrop-contrast", "--contrast"]
      }
    ]);
    functionalUtility("grayscale", {
      themeKeys: ["--grayscale"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      defaultValue: "100%",
      handle: (value2) => [
        filterProperties(),
        decl("--tw-grayscale", `grayscale(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-grayscale", {
      themeKeys: ["--backdrop-grayscale", "--grayscale"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      defaultValue: "100%",
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-grayscale", `grayscale(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("grayscale", () => [
      {
        values: ["0", "25", "50", "75", "100"],
        valueThemeKeys: ["--grayscale"],
        hasDefaultValue: true
      }
    ]);
    suggest("backdrop-grayscale", () => [
      {
        values: ["0", "25", "50", "75", "100"],
        valueThemeKeys: ["--backdrop-grayscale", "--grayscale"],
        hasDefaultValue: true
      }
    ]);
    functionalUtility("hue-rotate", {
      supportsNegative: true,
      themeKeys: ["--hue-rotate"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}deg`;
      },
      handle: (value2) => [
        filterProperties(),
        decl("--tw-hue-rotate", `hue-rotate(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-hue-rotate", {
      supportsNegative: true,
      themeKeys: ["--backdrop-hue-rotate", "--hue-rotate"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}deg`;
      },
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-hue-rotate", `hue-rotate(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("hue-rotate", () => [
      {
        values: ["0", "15", "30", "60", "90", "180"],
        valueThemeKeys: ["--hue-rotate"]
      }
    ]);
    suggest("backdrop-hue-rotate", () => [
      {
        values: ["0", "15", "30", "60", "90", "180"],
        valueThemeKeys: ["--backdrop-hue-rotate", "--hue-rotate"]
      }
    ]);
    functionalUtility("invert", {
      themeKeys: ["--invert"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      defaultValue: "100%",
      handle: (value2) => [
        filterProperties(),
        decl("--tw-invert", `invert(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-invert", {
      themeKeys: ["--backdrop-invert", "--invert"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      defaultValue: "100%",
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-invert", `invert(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("invert", () => [
      {
        values: ["0", "25", "50", "75", "100"],
        valueThemeKeys: ["--invert"],
        hasDefaultValue: true
      }
    ]);
    suggest("backdrop-invert", () => [
      {
        values: ["0", "25", "50", "75", "100"],
        valueThemeKeys: ["--backdrop-invert", "--invert"],
        hasDefaultValue: true
      }
    ]);
    functionalUtility("saturate", {
      themeKeys: ["--saturate"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        filterProperties(),
        decl("--tw-saturate", `saturate(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-saturate", {
      themeKeys: ["--backdrop-saturate", "--saturate"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-saturate", `saturate(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("saturate", () => [
      {
        values: ["0", "50", "100", "150", "200"],
        valueThemeKeys: ["--saturate"]
      }
    ]);
    suggest("backdrop-saturate", () => [
      {
        values: ["0", "50", "100", "150", "200"],
        valueThemeKeys: ["--backdrop-saturate", "--saturate"]
      }
    ]);
    functionalUtility("sepia", {
      themeKeys: ["--sepia"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      defaultValue: "100%",
      handle: (value2) => [
        filterProperties(),
        decl("--tw-sepia", `sepia(${value2})`),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-sepia", {
      themeKeys: ["--backdrop-sepia", "--sepia"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}%`;
      },
      defaultValue: "100%",
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-sepia", `sepia(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("sepia", () => [
      {
        values: ["0", "50", "100"],
        valueThemeKeys: ["--sepia"],
        hasDefaultValue: true
      }
    ]);
    suggest("backdrop-sepia", () => [
      {
        values: ["0", "50", "100"],
        valueThemeKeys: ["--backdrop-sepia", "--sepia"],
        hasDefaultValue: true
      }
    ]);
    staticUtility("drop-shadow-none", [
      filterProperties,
      ["--tw-drop-shadow", " "],
      ["filter", cssFilterValue]
    ]);
    functionalUtility("drop-shadow", {
      themeKeys: ["--drop-shadow"],
      handle: (value2) => [
        filterProperties(),
        decl("--tw-drop-shadow", segment(value2, ",").map((v) => `drop-shadow(${v})`).join(" ")),
        decl("filter", cssFilterValue)
      ]
    });
    functionalUtility("backdrop-opacity", {
      themeKeys: ["--backdrop-opacity", "--opacity"],
      handleBareValue: ({ value: value2 }) => {
        if (!isValidOpacityValue(value2))
          return null;
        return `${value2}%`;
      },
      handle: (value2) => [
        backdropFilterProperties(),
        decl("--tw-backdrop-opacity", `opacity(${value2})`),
        decl("-webkit-backdrop-filter", cssBackdropFilterValue),
        decl("backdrop-filter", cssBackdropFilterValue)
      ]
    });
    suggest("backdrop-opacity", () => [
      {
        values: Array.from({ length: 21 }, (_, i) => `${i * 5}`),
        valueThemeKeys: ["--backdrop-opacity", "--opacity"]
      }
    ]);
  }
  {
    let defaultTimingFunction = `var(--tw-ease, ${theme.resolve(null, ["--default-transition-timing-function"]) ?? "ease"})`;
    let defaultDuration = `var(--tw-duration, ${theme.resolve(null, ["--default-transition-duration"]) ?? "0s"})`;
    staticUtility("transition-none", [["transition-property", "none"]]);
    staticUtility("transition-all", [
      ["transition-property", "all"],
      ["transition-timing-function", defaultTimingFunction],
      ["transition-duration", defaultDuration]
    ]);
    staticUtility("transition-colors", [
      [
        "transition-property",
        "color, background-color, border-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to"
      ],
      ["transition-timing-function", defaultTimingFunction],
      ["transition-duration", defaultDuration]
    ]);
    staticUtility("transition-opacity", [
      ["transition-property", "opacity"],
      ["transition-timing-function", defaultTimingFunction],
      ["transition-duration", defaultDuration]
    ]);
    staticUtility("transition-shadow", [
      ["transition-property", "box-shadow"],
      ["transition-timing-function", defaultTimingFunction],
      ["transition-duration", defaultDuration]
    ]);
    staticUtility("transition-transform", [
      ["transition-property", "transform, translate, scale, rotate"],
      ["transition-timing-function", defaultTimingFunction],
      ["transition-duration", defaultDuration]
    ]);
    functionalUtility("transition", {
      defaultValue: "color, background-color, border-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter",
      themeKeys: ["--transition-property"],
      handle: (value2) => [
        decl("transition-property", value2),
        decl("transition-timing-function", defaultTimingFunction),
        decl("transition-duration", defaultDuration)
      ]
    });
    staticUtility("transition-discrete", [["transition-behavior", "allow-discrete"]]);
    staticUtility("transition-normal", [["transition-behavior", "normal"]]);
    functionalUtility("delay", {
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}ms`;
      },
      themeKeys: ["--transition-delay"],
      handle: (value2) => [decl("transition-delay", value2)]
    });
    {
      let transitionDurationProperty = () => {
        return atRoot([property("--tw-duration")]);
      };
      staticUtility("duration-initial", [transitionDurationProperty, ["--tw-duration", "initial"]]);
      utilities.functional("duration", (candidate) => {
        if (candidate.modifier)
          return;
        if (!candidate.value)
          return;
        let value2 = null;
        if (candidate.value.kind === "arbitrary") {
          value2 = candidate.value.value;
        } else {
          value2 = theme.resolve(candidate.value.fraction ?? candidate.value.value, [
            "--transition-duration"
          ]);
          if (value2 === null && isPositiveInteger(candidate.value.value)) {
            value2 = `${candidate.value.value}ms`;
          }
        }
        if (value2 === null)
          return;
        return [
          transitionDurationProperty(),
          decl("--tw-duration", value2),
          decl("transition-duration", value2)
        ];
      });
    }
    suggest("delay", () => [
      {
        values: ["75", "100", "150", "200", "300", "500", "700", "1000"],
        valueThemeKeys: ["--transition-delay"]
      }
    ]);
    suggest("duration", () => [
      {
        values: ["75", "100", "150", "200", "300", "500", "700", "1000"],
        valueThemeKeys: ["--transition-duration"]
      }
    ]);
  }
  {
    let transitionTimingFunctionProperty = () => {
      return atRoot([property("--tw-ease")]);
    };
    staticUtility("ease-initial", [transitionTimingFunctionProperty, ["--tw-ease", "initial"]]);
    staticUtility("ease-linear", [
      transitionTimingFunctionProperty,
      ["--tw-ease", "linear"],
      ["transition-timing-function", "linear"]
    ]);
    functionalUtility("ease", {
      themeKeys: ["--ease"],
      handle: (value2) => [
        transitionTimingFunctionProperty(),
        decl("--tw-ease", value2),
        decl("transition-timing-function", value2)
      ]
    });
  }
  staticUtility("will-change-auto", [["will-change", "auto"]]);
  staticUtility("will-change-scroll", [["will-change", "scroll-position"]]);
  staticUtility("will-change-contents", [["will-change", "contents"]]);
  staticUtility("will-change-transform", [["will-change", "transform"]]);
  functionalUtility("will-change", {
    themeKeys: [],
    handle: (value2) => [decl("will-change", value2)]
  });
  staticUtility("content-none", [
    ["--tw-content", "none"],
    ["content", "none"]
  ]);
  functionalUtility("content", {
    themeKeys: [],
    handle: (value2) => [
      atRoot([property("--tw-content", '""')]),
      decl("--tw-content", value2),
      decl("content", "var(--tw-content)")
    ]
  });
  {
    let cssContainValue = "var(--tw-contain-size,) var(--tw-contain-layout,) var(--tw-contain-paint,) var(--tw-contain-style,)";
    let cssContainProperties = () => {
      return atRoot([
        property("--tw-contain-size"),
        property("--tw-contain-layout"),
        property("--tw-contain-paint"),
        property("--tw-contain-style")
      ]);
    };
    staticUtility("contain-none", [["contain", "none"]]);
    staticUtility("contain-content", [["contain", "content"]]);
    staticUtility("contain-strict", [["contain", "strict"]]);
    staticUtility("contain-size", [
      cssContainProperties,
      ["--tw-contain-size", "size"],
      ["contain", cssContainValue]
    ]);
    staticUtility("contain-inline-size", [
      cssContainProperties,
      ["--tw-contain-size", "inline-size"],
      ["contain", cssContainValue]
    ]);
    staticUtility("contain-layout", [
      cssContainProperties,
      ["--tw-contain-layout", "layout"],
      ["contain", cssContainValue]
    ]);
    staticUtility("contain-paint", [
      cssContainProperties,
      ["--tw-contain-paint", "paint"],
      ["contain", cssContainValue]
    ]);
    staticUtility("contain-style", [
      cssContainProperties,
      ["--tw-contain-style", "style"],
      ["contain", cssContainValue]
    ]);
    functionalUtility("contain", {
      themeKeys: [],
      handle: (value2) => [decl("contain", value2)]
    });
  }
  staticUtility("forced-color-adjust-none", [["forced-color-adjust", "none"]]);
  staticUtility("forced-color-adjust-auto", [["forced-color-adjust", "auto"]]);
  staticUtility("leading-none", [
    () => atRoot([property("--tw-leading")]),
    ["--tw-leading", "1"],
    ["line-height", "1"]
  ]);
  spacingUtility("leading", ["--leading", "--spacing"], (value2) => [
    atRoot([property("--tw-leading")]),
    decl("--tw-leading", value2),
    decl("line-height", value2)
  ]);
  functionalUtility("tracking", {
    supportsNegative: true,
    themeKeys: ["--tracking"],
    handle: (value2) => [
      atRoot([property("--tw-tracking")]),
      decl("--tw-tracking", value2),
      decl("letter-spacing", value2)
    ]
  });
  staticUtility("antialiased", [
    ["-webkit-font-smoothing", "antialiased"],
    ["-moz-osx-font-smoothing", "grayscale"]
  ]);
  staticUtility("subpixel-antialiased", [
    ["-webkit-font-smoothing", "auto"],
    ["-moz-osx-font-smoothing", "auto"]
  ]);
  {
    let cssFontVariantNumericValue = "var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,)";
    let fontVariantNumericProperties = () => {
      return atRoot([
        property("--tw-ordinal"),
        property("--tw-slashed-zero"),
        property("--tw-numeric-figure"),
        property("--tw-numeric-spacing"),
        property("--tw-numeric-fraction")
      ]);
    };
    staticUtility("normal-nums", [["font-variant-numeric", "normal"]]);
    staticUtility("ordinal", [
      fontVariantNumericProperties,
      ["--tw-ordinal", "ordinal"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
    staticUtility("slashed-zero", [
      fontVariantNumericProperties,
      ["--tw-slashed-zero", "slashed-zero"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
    staticUtility("lining-nums", [
      fontVariantNumericProperties,
      ["--tw-numeric-figure", "lining-nums"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
    staticUtility("oldstyle-nums", [
      fontVariantNumericProperties,
      ["--tw-numeric-figure", "oldstyle-nums"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
    staticUtility("proportional-nums", [
      fontVariantNumericProperties,
      ["--tw-numeric-spacing", "proportional-nums"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
    staticUtility("tabular-nums", [
      fontVariantNumericProperties,
      ["--tw-numeric-spacing", "tabular-nums"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
    staticUtility("diagonal-fractions", [
      fontVariantNumericProperties,
      ["--tw-numeric-fraction", "diagonal-fractions"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
    staticUtility("stacked-fractions", [
      fontVariantNumericProperties,
      ["--tw-numeric-fraction", "stacked-fractions"],
      ["font-variant-numeric", cssFontVariantNumericValue]
    ]);
  }
  {
    let outlineProperties = () => {
      return atRoot([property("--tw-outline-style", "solid")]);
    };
    staticUtility("outline-hidden", [
      ["outline", "2px solid transparent"],
      ["outline-offset", "2px"]
    ]);
    staticUtility("outline-none", [
      ["--tw-outline-style", "none"],
      ["outline-style", "none"]
    ]);
    staticUtility("outline-solid", [
      ["--tw-outline-style", "solid"],
      ["outline-style", "solid"]
    ]);
    staticUtility("outline-dashed", [
      ["--tw-outline-style", "dashed"],
      ["outline-style", "dashed"]
    ]);
    staticUtility("outline-dotted", [
      ["--tw-outline-style", "dotted"],
      ["outline-style", "dotted"]
    ]);
    staticUtility("outline-double", [
      ["--tw-outline-style", "double"],
      ["outline-style", "double"]
    ]);
    utilities.functional("outline", (candidate) => {
      if (candidate.value === null) {
        if (candidate.modifier)
          return;
        return [
          outlineProperties(),
          decl("outline-style", "var(--tw-outline-style)"),
          decl("outline-width", "1px")
        ];
      }
      if (candidate.value.kind === "arbitrary") {
        let value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["color", "length", "number", "percentage"]);
        switch (type) {
          case "length":
          case "number":
          case "percentage": {
            if (candidate.modifier)
              return;
            return [
              outlineProperties(),
              decl("outline-style", "var(--tw-outline-style)"),
              decl("outline-width", value2)
            ];
          }
          default: {
            value2 = asColor(value2, candidate.modifier, theme);
            if (value2 === null)
              return;
            return [decl("outline-color", value2)];
          }
        }
      }
      {
        let value2 = resolveThemeColor(candidate, theme, ["--outline-color", "--color"]);
        if (value2) {
          return [decl("outline-color", value2)];
        }
      }
      {
        if (candidate.modifier)
          return;
        let value2 = theme.resolve(candidate.value.value, ["--outline-width"]);
        if (value2) {
          return [
            outlineProperties(),
            decl("outline-style", "var(--tw-outline-style)"),
            decl("outline-width", value2)
          ];
        } else if (isPositiveInteger(candidate.value.value)) {
          return [
            outlineProperties(),
            decl("outline-style", "var(--tw-outline-style)"),
            decl("outline-width", `${candidate.value.value}px`)
          ];
        }
      }
    });
    suggest("outline", () => [
      {
        values: ["current", "inherit", "transparent"],
        valueThemeKeys: ["--outline-color", "--color"],
        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`),
        hasDefaultValue: true
      },
      {
        values: ["0", "1", "2", "4", "8"],
        valueThemeKeys: ["--outline-width"]
      }
    ]);
    functionalUtility("outline-offset", {
      supportsNegative: true,
      themeKeys: ["--outline-offset"],
      handleBareValue: ({ value: value2 }) => {
        if (!isPositiveInteger(value2))
          return null;
        return `${value2}px`;
      },
      handle: (value2) => [decl("outline-offset", value2)]
    });
    suggest("outline-offset", () => [
      {
        values: ["0", "1", "2", "4", "8"],
        valueThemeKeys: ["--outline-offset"]
      }
    ]);
  }
  functionalUtility("opacity", {
    themeKeys: ["--opacity"],
    handleBareValue: ({ value: value2 }) => {
      if (!isValidOpacityValue(value2))
        return null;
      return `${value2}%`;
    },
    handle: (value2) => [decl("opacity", value2)]
  });
  suggest("opacity", () => [
    {
      values: Array.from({ length: 21 }, (_, i) => `${i * 5}`),
      valueThemeKeys: ["--opacity"]
    }
  ]);
  staticUtility("underline-offset-auto", [["text-underline-offset", "auto"]]);
  functionalUtility("underline-offset", {
    supportsNegative: true,
    themeKeys: ["--text-underline-offset"],
    handleBareValue: ({ value: value2 }) => {
      if (!isPositiveInteger(value2))
        return null;
      return `${value2}px`;
    },
    handle: (value2) => [decl("text-underline-offset", value2)]
  });
  suggest("underline-offset", () => [
    {
      supportsNegative: true,
      values: ["0", "1", "2", "4", "8"],
      valueThemeKeys: ["--text-underline-offset"]
    }
  ]);
  utilities.functional("text", (candidate) => {
    if (!candidate.value)
      return;
    if (candidate.value.kind === "arbitrary") {
      let value2 = candidate.value.value;
      let type = candidate.value.dataType ?? inferDataType(value2, ["color", "length", "percentage", "absolute-size", "relative-size"]);
      switch (type) {
        case "size":
        case "length":
        case "percentage":
        case "absolute-size":
        case "relative-size": {
          if (candidate.modifier) {
            let modifier = candidate.modifier.kind === "arbitrary" ? candidate.modifier.value : theme.resolve(candidate.modifier.value, ["--leading"]);
            if (!modifier && isValidSpacingMultiplier(candidate.modifier.value)) {
              let multiplier = theme.resolve(null, ["--spacing"]);
              if (!multiplier)
                return null;
              modifier = `calc(${multiplier} * ${candidate.modifier.value})`;
            }
            if (modifier) {
              return [decl("font-size", value2), decl("line-height", modifier)];
            }
          }
          return [decl("font-size", value2)];
        }
        default: {
          value2 = asColor(value2, candidate.modifier, theme);
          if (value2 === null)
            return;
          return [decl("color", value2)];
        }
      }
    }
    {
      let value2 = resolveThemeColor(candidate, theme, ["--text-color", "--color"]);
      if (value2) {
        return [decl("color", value2)];
      }
    }
    {
      let value2 = theme.resolveWith(candidate.value.value, ["--text"], ["--line-height", "--letter-spacing", "--font-weight"]);
      if (value2) {
        let [fontSize, options = {}] = Array.isArray(value2) ? value2 : [value2];
        if (candidate.modifier) {
          let modifier = candidate.modifier.kind === "arbitrary" ? candidate.modifier.value : theme.resolve(candidate.modifier.value, ["--leading"]);
          if (!modifier && isValidSpacingMultiplier(candidate.modifier.value)) {
            let multiplier = theme.resolve(null, ["--spacing"]);
            if (!multiplier)
              return null;
            modifier = `calc(${multiplier} * ${candidate.modifier.value})`;
          }
          let declarations = [decl("font-size", fontSize)];
          modifier && declarations.push(decl("line-height", modifier));
          return declarations;
        }
        if (typeof options === "string") {
          return [decl("font-size", fontSize), decl("line-height", options)];
        }
        return [
          decl("font-size", fontSize),
          decl("line-height", options["--line-height"] ? `var(--tw-leading, ${options["--line-height"]})` : undefined),
          decl("letter-spacing", options["--letter-spacing"] ? `var(--tw-tracking, ${options["--letter-spacing"]})` : undefined),
          decl("font-weight", options["--font-weight"] ? `var(--tw-font-weight, ${options["--font-weight"]})` : undefined)
        ];
      }
    }
  });
  suggest("text", () => [
    {
      values: ["current", "inherit", "transparent"],
      valueThemeKeys: ["--text-color", "--color"],
      modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
    },
    {
      values: [],
      valueThemeKeys: ["--text"],
      modifiers: [],
      modifierThemeKeys: ["--leading"]
    }
  ]);
  {
    let ringShadowValue = function(value2) {
      return `var(--tw-ring-inset,) 0 0 0 calc(${value2} + var(--tw-ring-offset-width)) var(--tw-ring-color, ${defaultRingColor})`;
    }, insetRingShadowValue = function(value2) {
      return `inset 0 0 0 ${value2} var(--tw-inset-ring-color, currentColor)`;
    };
    let cssBoxShadowValue = [
      "var(--tw-inset-shadow)",
      "var(--tw-inset-ring-shadow)",
      "var(--tw-ring-offset-shadow)",
      "var(--tw-ring-shadow)",
      "var(--tw-shadow)"
    ].join(", ");
    let nullShadow = "0 0 #0000";
    let boxShadowProperties = () => {
      return atRoot([
        property("--tw-shadow", nullShadow),
        property("--tw-shadow-color"),
        property("--tw-inset-shadow", nullShadow),
        property("--tw-inset-shadow-color"),
        property("--tw-ring-color"),
        property("--tw-ring-shadow", nullShadow),
        property("--tw-inset-ring-color"),
        property("--tw-inset-ring-shadow", nullShadow),
        property("--tw-ring-inset"),
        property("--tw-ring-offset-width", "0px", "<length>"),
        property("--tw-ring-offset-color", "#fff"),
        property("--tw-ring-offset-shadow", nullShadow)
      ]);
    };
    staticUtility("shadow-initial", [boxShadowProperties, ["--tw-shadow-color", "initial"]]);
    utilities.functional("shadow", (candidate) => {
      if (!candidate.value) {
        let value2 = theme.get(["--shadow"]);
        if (value2 === null)
          return;
        return [
          boxShadowProperties(),
          decl("--tw-shadow", replaceShadowColors(value2, (color) => `var(--tw-shadow-color, ${color})`)),
          decl("box-shadow", cssBoxShadowValue)
        ];
      }
      if (candidate.value.kind === "arbitrary") {
        let value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["color"]);
        switch (type) {
          case "color": {
            value2 = asColor(value2, candidate.modifier, theme);
            if (value2 === null)
              return;
            return [boxShadowProperties(), decl("--tw-shadow-color", value2)];
          }
          default: {
            return [
              boxShadowProperties(),
              decl("--tw-shadow", replaceShadowColors(value2, (color) => `var(--tw-shadow-color, ${color})`)),
              decl("box-shadow", cssBoxShadowValue)
            ];
          }
        }
      }
      switch (candidate.value.value) {
        case "none":
          if (candidate.modifier)
            return;
          return [
            boxShadowProperties(),
            decl("--tw-shadow", nullShadow),
            decl("box-shadow", cssBoxShadowValue)
          ];
      }
      {
        let value2 = theme.get([`--shadow-${candidate.value.value}`]);
        if (value2) {
          if (candidate.modifier)
            return;
          return [
            boxShadowProperties(),
            decl("--tw-shadow", replaceShadowColors(value2, (color) => `var(--tw-shadow-color, ${color})`)),
            decl("box-shadow", cssBoxShadowValue)
          ];
        }
      }
      {
        let value2 = resolveThemeColor(candidate, theme, ["--box-shadow-color", "--color"]);
        if (value2) {
          return [boxShadowProperties(), decl("--tw-shadow-color", value2)];
        }
      }
    });
    suggest("shadow", () => [
      {
        values: ["current", "inherit", "transparent"],
        valueThemeKeys: ["--box-shadow-color", "--color"],
        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
      },
      {
        values: ["none"],
        valueThemeKeys: ["--shadow"],
        hasDefaultValue: true
      }
    ]);
    staticUtility("inset-shadow-initial", [
      boxShadowProperties,
      ["--tw-inset-shadow-color", "initial"]
    ]);
    utilities.functional("inset-shadow", (candidate) => {
      if (!candidate.value) {
        let value2 = theme.get(["--inset-shadow"]);
        if (value2 === null)
          return;
        return [
          boxShadowProperties(),
          decl("--tw-inset-shadow", replaceShadowColors(value2, (color) => `var(--tw-inset-shadow-color, ${color})`)),
          decl("box-shadow", cssBoxShadowValue)
        ];
      }
      if (candidate.value.kind === "arbitrary") {
        let value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["color"]);
        switch (type) {
          case "color": {
            value2 = asColor(value2, candidate.modifier, theme);
            if (value2 === null)
              return;
            return [boxShadowProperties(), decl("--tw-inset-shadow-color", value2)];
          }
          default: {
            return [
              boxShadowProperties(),
              decl("--tw-inset-shadow", `inset ${replaceShadowColors(value2, (color) => `var(--tw-inset-shadow-color, ${color})`)}`),
              decl("box-shadow", cssBoxShadowValue)
            ];
          }
        }
      }
      switch (candidate.value.value) {
        case "none":
          if (candidate.modifier)
            return;
          return [
            boxShadowProperties(),
            decl("--tw-inset-shadow", nullShadow),
            decl("box-shadow", cssBoxShadowValue)
          ];
      }
      {
        let value2 = theme.get([`--inset-shadow-${candidate.value.value}`]);
        if (value2) {
          if (candidate.modifier)
            return;
          return [
            boxShadowProperties(),
            decl("--tw-inset-shadow", replaceShadowColors(value2, (color) => `var(--tw-inset-shadow-color, ${color})`)),
            decl("box-shadow", cssBoxShadowValue)
          ];
        }
      }
      {
        let value2 = resolveThemeColor(candidate, theme, ["--box-shadow-color", "--color"]);
        if (value2) {
          return [boxShadowProperties(), decl("--tw-inset-shadow-color", value2)];
        }
      }
    });
    suggest("inset-shadow", () => [
      {
        values: ["current", "inherit", "transparent"],
        valueThemeKeys: ["--box-shadow-color", "--color"],
        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
      },
      {
        values: [],
        valueThemeKeys: ["--inset-shadow"],
        hasDefaultValue: true
      }
    ]);
    staticUtility("ring-inset", [boxShadowProperties, ["--tw-ring-inset", "inset"]]);
    let defaultRingColor = theme.get(["--default-ring-color"]) ?? "currentColor";
    utilities.functional("ring", (candidate) => {
      if (!candidate.value) {
        if (candidate.modifier)
          return;
        let value2 = theme.get(["--default-ring-width"]) ?? "1px";
        return [
          boxShadowProperties(),
          decl("--tw-ring-shadow", ringShadowValue(value2)),
          decl("box-shadow", cssBoxShadowValue)
        ];
      }
      if (candidate.value.kind === "arbitrary") {
        let value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["color", "length"]);
        switch (type) {
          case "length": {
            if (candidate.modifier)
              return;
            return [
              boxShadowProperties(),
              decl("--tw-ring-shadow", ringShadowValue(value2)),
              decl("box-shadow", cssBoxShadowValue)
            ];
          }
          default: {
            value2 = asColor(value2, candidate.modifier, theme);
            if (value2 === null)
              return;
            return [decl("--tw-ring-color", value2)];
          }
        }
      }
      {
        let value2 = resolveThemeColor(candidate, theme, ["--ring-color", "--color"]);
        if (value2) {
          return [decl("--tw-ring-color", value2)];
        }
      }
      {
        if (candidate.modifier)
          return;
        let value2 = theme.resolve(candidate.value.value, ["--ring-width"]);
        if (value2 === null && isPositiveInteger(candidate.value.value)) {
          value2 = `${candidate.value.value}px`;
        }
        if (value2) {
          return [
            boxShadowProperties(),
            decl("--tw-ring-shadow", ringShadowValue(value2)),
            decl("box-shadow", cssBoxShadowValue)
          ];
        }
      }
    });
    suggest("ring", () => [
      {
        values: ["current", "inherit", "transparent"],
        valueThemeKeys: ["--ring-color", "--color"],
        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
      },
      {
        values: ["0", "1", "2", "4", "8"],
        valueThemeKeys: ["--ring-width"],
        hasDefaultValue: true
      }
    ]);
    utilities.functional("inset-ring", (candidate) => {
      if (!candidate.value) {
        if (candidate.modifier)
          return;
        return [
          boxShadowProperties(),
          decl("--tw-inset-ring-shadow", insetRingShadowValue("1px")),
          decl("box-shadow", cssBoxShadowValue)
        ];
      }
      if (candidate.value.kind === "arbitrary") {
        let value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["color", "length"]);
        switch (type) {
          case "length": {
            if (candidate.modifier)
              return;
            return [
              boxShadowProperties(),
              decl("--tw-inset-ring-shadow", insetRingShadowValue(value2)),
              decl("box-shadow", cssBoxShadowValue)
            ];
          }
          default: {
            value2 = asColor(value2, candidate.modifier, theme);
            if (value2 === null)
              return;
            return [decl("--tw-inset-ring-color", value2)];
          }
        }
      }
      {
        let value2 = resolveThemeColor(candidate, theme, ["--ring-color", "--color"]);
        if (value2) {
          return [decl("--tw-inset-ring-color", value2)];
        }
      }
      {
        if (candidate.modifier)
          return;
        let value2 = theme.resolve(candidate.value.value, ["--ring-width"]);
        if (value2 === null && isPositiveInteger(candidate.value.value)) {
          value2 = `${candidate.value.value}px`;
        }
        if (value2) {
          return [
            boxShadowProperties(),
            decl("--tw-inset-ring-shadow", insetRingShadowValue(value2)),
            decl("box-shadow", cssBoxShadowValue)
          ];
        }
      }
    });
    suggest("inset-ring", () => [
      {
        values: ["current", "inherit", "transparent"],
        valueThemeKeys: ["--ring-color", "--color"],
        modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
      },
      {
        values: ["0", "1", "2", "4", "8"],
        valueThemeKeys: ["--ring-width"],
        hasDefaultValue: true
      }
    ]);
    let ringOffsetShadowValue = "var(--tw-ring-inset,) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)";
    utilities.functional("ring-offset", (candidate) => {
      if (!candidate.value)
        return;
      if (candidate.value.kind === "arbitrary") {
        let value2 = candidate.value.value;
        let type = candidate.value.dataType ?? inferDataType(value2, ["color", "length"]);
        switch (type) {
          case "length": {
            if (candidate.modifier)
              return;
            return [
              decl("--tw-ring-offset-width", value2),
              decl("--tw-ring-offset-shadow", ringOffsetShadowValue)
            ];
          }
          default: {
            value2 = asColor(value2, candidate.modifier, theme);
            if (value2 === null)
              return;
            return [decl("--tw-ring-offset-color", value2)];
          }
        }
      }
      {
        let value2 = theme.resolve(candidate.value.value, ["--ring-offset-width"]);
        if (value2) {
          if (candidate.modifier)
            return;
          return [
            decl("--tw-ring-offset-width", value2),
            decl("--tw-ring-offset-shadow", ringOffsetShadowValue)
          ];
        } else if (isPositiveInteger(candidate.value.value)) {
          if (candidate.modifier)
            return;
          return [
            decl("--tw-ring-offset-width", `${candidate.value.value}px`),
            decl("--tw-ring-offset-shadow", ringOffsetShadowValue)
          ];
        }
      }
      {
        let value2 = resolveThemeColor(candidate, theme, ["--ring-offset-color", "--color"]);
        if (value2) {
          return [decl("--tw-ring-offset-color", value2)];
        }
      }
    });
  }
  suggest("ring-offset", () => [
    {
      values: ["current", "inherit", "transparent"],
      valueThemeKeys: ["--ring-offset-color", "--color"],
      modifiers: Array.from({ length: 21 }, (_, index) => `${index * 5}`)
    },
    {
      values: ["0", "1", "2", "4", "8"],
      valueThemeKeys: ["--ring-offset-width"]
    }
  ]);
  utilities.functional("@container", (candidate) => {
    let value2 = null;
    if (candidate.value === null) {
      value2 = "inline-size";
    } else if (candidate.value.kind === "arbitrary") {
      value2 = candidate.value.value;
    } else if (candidate.value.kind === "named" && candidate.value.value === "normal") {
      value2 = "normal";
    }
    if (value2 === null)
      return;
    if (candidate.modifier) {
      return [decl("container-type", value2), decl("container-name", candidate.modifier.value)];
    }
    return [decl("container-type", value2)];
  });
  suggest("@container", () => [
    {
      values: ["normal"],
      valueThemeKeys: [],
      hasDefaultValue: true
    }
  ]);
  return utilities;
}
function createCssUtility(node) {
  let name = node.params;
  if (IS_VALID_FUNCTIONAL_UTILITY_NAME.test(name)) {
    return (designSystem) => {
      let valueThemeKeys = new Set;
      let modifierThemeKeys = new Set;
      walk(node.nodes, (child) => {
        if (child.kind !== "declaration")
          return;
        if (!child.value)
          return;
        if (!child.value.includes("--value(") && !child.value.includes("--modifier("))
          return;
        let declarationValueAst = parse2(child.value);
        walk2(declarationValueAst, (fn) => {
          if (fn.kind !== "function")
            return;
          if (fn.value !== "--value" && fn.value !== "--modifier")
            return;
          let args = segment(toCss2(fn.nodes), ",");
          for (let [idx, arg] of args.entries()) {
            arg = arg.replace(/\\\*/g, "*");
            arg = arg.replace(/--(.*?)\s--(.*?)/g, "--$1-*--$2");
            arg = arg.replace(/\s+/g, "");
            arg = arg.replace(/(-\*){2,}/g, "-*");
            if (arg[0] === "-" && arg[1] === "-" && !arg.includes("-*")) {
              arg += "-*";
            }
            args[idx] = arg;
          }
          fn.nodes = parse2(args.join(","));
          for (let node2 of fn.nodes) {
            if (node2.kind === "word" && node2.value[0] === "-" && node2.value[1] === "-") {
              let value2 = node2.value.replace(/-\*.*$/g, "");
              if (fn.value === "--value") {
                valueThemeKeys.add(value2);
              } else if (fn.value === "--modifier") {
                modifierThemeKeys.add(value2);
              }
            }
          }
        });
        child.value = toCss2(declarationValueAst);
      });
      designSystem.utilities.functional(name.slice(0, -2), (candidate) => {
        let atRule2 = structuredClone(node);
        let value2 = candidate.value;
        let modifier = candidate.modifier;
        if (value2 === null)
          return;
        let usedValueFn = false;
        let resolvedValueFn = false;
        let usedModifierFn = false;
        let resolvedModifierFn = false;
        let resolvedDeclarations = new Map;
        let resolvedRatioValue = false;
        walk([atRule2], (node2, { parent, replaceWith: replaceDeclarationWith }) => {
          if (parent?.kind !== "rule" && parent?.kind !== "at-rule")
            return;
          if (node2.kind !== "declaration")
            return;
          if (!node2.value)
            return;
          let valueAst = parse2(node2.value);
          let result = walk2(valueAst, (valueNode, { replaceWith }) => {
            if (valueNode.kind !== "function")
              return;
            if (valueNode.value === "--value") {
              usedValueFn = true;
              let resolved = resolveValueFunction(value2, valueNode, designSystem);
              if (resolved) {
                resolvedValueFn = true;
                if (resolved.ratio) {
                  resolvedRatioValue = true;
                } else {
                  resolvedDeclarations.set(node2, parent);
                }
                replaceWith(resolved.nodes);
                return 1;
              }
              usedValueFn ||= false;
              replaceDeclarationWith([]);
              return 2;
            } else if (valueNode.value === "--modifier") {
              if (modifier === null) {
                replaceDeclarationWith([]);
                return 1;
              }
              usedModifierFn = true;
              let replacement = resolveValueFunction(modifier, valueNode, designSystem);
              if (replacement) {
                resolvedModifierFn = true;
                replaceWith(replacement.nodes);
                return 1;
              }
              usedModifierFn ||= false;
              replaceDeclarationWith([]);
              return 2;
            }
          }) ?? 0;
          if (result === 0) {
            node2.value = toCss2(valueAst);
          }
        });
        if (usedValueFn && !resolvedValueFn)
          return null;
        if (usedModifierFn && !resolvedModifierFn)
          return null;
        if (resolvedRatioValue && resolvedModifierFn)
          return null;
        if (modifier && !resolvedRatioValue && !resolvedModifierFn)
          return null;
        if (resolvedRatioValue) {
          for (let [declaration, parent] of resolvedDeclarations) {
            let idx = parent.nodes.indexOf(declaration);
            if (idx !== -1)
              parent.nodes.splice(idx, 1);
          }
        }
        return atRule2.nodes;
      });
      designSystem.utilities.suggest(name.slice(0, -2), () => {
        return [
          {
            values: designSystem.theme.keysInNamespaces(valueThemeKeys).map((x) => x.replaceAll("_", ".")),
            modifiers: designSystem.theme.keysInNamespaces(modifierThemeKeys).map((x) => x.replaceAll("_", "."))
          }
        ];
      });
    };
  }
  if (IS_VALID_STATIC_UTILITY_NAME.test(name)) {
    return (designSystem) => {
      designSystem.utilities.static(name, () => structuredClone(node.nodes));
    };
  }
  return null;
}
function resolveValueFunction(value2, fn, designSystem) {
  for (let arg of fn.nodes) {
    if (value2.kind === "named" && arg.kind === "word" && arg.value[0] === "-" && arg.value[1] === "-") {
      let themeKey = arg.value;
      if (themeKey.endsWith("-*")) {
        themeKey = themeKey.slice(0, -2);
        let resolved = designSystem.theme.resolve(value2.value, [themeKey]);
        if (resolved)
          return { nodes: parse2(resolved) };
      } else {
        let nestedKeys = themeKey.split("-*");
        if (nestedKeys.length <= 1)
          continue;
        let themeKeys = [nestedKeys.shift()];
        let resolved = designSystem.theme.resolveWith(value2.value, themeKeys, nestedKeys);
        if (resolved) {
          let [, options = {}] = resolved;
          {
            let resolved2 = options[nestedKeys.pop()];
            if (resolved2)
              return { nodes: parse2(resolved2) };
          }
        }
      }
    } else if (value2.kind === "named" && arg.kind === "word") {
      if (arg.value !== "number" && arg.value !== "integer" && arg.value !== "ratio" && arg.value !== "percentage") {
        continue;
      }
      let resolved = arg.value === "ratio" && "fraction" in value2 ? value2.fraction : value2.value;
      if (!resolved)
        continue;
      let type = inferDataType(resolved, [arg.value]);
      if (type === null)
        continue;
      if (type === "ratio") {
        let [lhs, rhs] = segment(resolved, "/");
        if (!isPositiveInteger(lhs) || !isPositiveInteger(rhs))
          continue;
      } else if (type === "number" && !isValidSpacingMultiplier(resolved)) {
        continue;
      } else if (type === "percentage" && !isPositiveInteger(resolved.slice(0, -1))) {
        continue;
      }
      return { nodes: parse2(resolved), ratio: type === "ratio" };
    } else if (value2.kind === "arbitrary" && arg.kind === "word" && arg.value[0] === "[" && arg.value[arg.value.length - 1] === "]") {
      let dataType = arg.value.slice(1, -1);
      if (dataType === "*") {
        return { nodes: parse2(value2.value) };
      }
      if ("dataType" in value2 && value2.dataType && value2.dataType !== dataType) {
        continue;
      }
      if ("dataType" in value2 && value2.dataType) {
        return { nodes: parse2(value2.value) };
      }
      let type = inferDataType(value2.value, [dataType]);
      if (type !== null) {
        return { nodes: parse2(value2.value) };
      }
    }
  }
}
var functions = {
  "--alpha": alpha,
  "--spacing": spacing,
  "--theme": theme,
  theme: legacyTheme
};
function alpha(_designSystem, value2, alpha2, ...rest) {
  if (!value2 || !alpha2) {
    throw new Error(`The --alpha(\u2026) function requires two arguments, e.g.: \`--alpha(${value2 || "var(--my-color)"}, ${alpha2 || "50%"})\``);
  }
  if (rest.length > 0) {
    throw new Error(`The --alpha(\u2026) function only accepts two arguments, e.g.: \`--alpha(${value2 || "var(--my-color)"}, ${alpha2 || "50%"})\``);
  }
  return withAlpha(value2, alpha2);
}
function spacing(designSystem, value2, ...rest) {
  if (!value2) {
    throw new Error(`The --spacing(\u2026) function requires an argument, but received none.`);
  }
  if (rest.length > 0) {
    throw new Error(`The --spacing(\u2026) function only accepts a single argument, but received ${rest.length + 1}.`);
  }
  let multiplier = designSystem.theme.resolve(null, ["--spacing"]);
  if (!multiplier) {
    throw new Error("The --spacing(\u2026) function requires that the `--spacing` theme variable exists, but it was not found.");
  }
  return `calc(${multiplier} * ${value2})`;
}
function theme(designSystem, path4, ...fallback) {
  if (!path4.startsWith("--")) {
    throw new Error(`The --theme(\u2026) function can only be used with CSS variables from your theme.`);
  }
  return legacyTheme(designSystem, path4, ...fallback);
}
function legacyTheme(designSystem, path4, ...fallback) {
  path4 = eventuallyUnquote(path4);
  let resolvedValue = designSystem.resolveThemeValue(path4);
  if (!resolvedValue && fallback.length > 0) {
    return fallback.join(", ");
  }
  if (!resolvedValue) {
    throw new Error(`Could not resolve value for theme function: \`theme(${path4})\`. Consider checking if the path is correct or provide a fallback value to silence this error.`);
  }
  return resolvedValue;
}
var THEME_FUNCTION_INVOCATION = new RegExp(Object.keys(functions).map((x) => `${x}\\(`).join("|"));
function substituteFunctions(ast, designSystem) {
  let features = 0;
  walk(ast, (node) => {
    if (node.kind === "declaration" && node.value && THEME_FUNCTION_INVOCATION.test(node.value)) {
      features |= 8;
      node.value = substituteFunctionsInValue(node.value, designSystem);
      return;
    }
    if (node.kind === "at-rule") {
      if ((node.name === "@media" || node.name === "@custom-media" || node.name === "@container" || node.name === "@supports") && THEME_FUNCTION_INVOCATION.test(node.params)) {
        features |= 8;
        node.params = substituteFunctionsInValue(node.params, designSystem);
      }
    }
  });
  return features;
}
function substituteFunctionsInValue(value2, designSystem) {
  let ast = parse2(value2);
  walk2(ast, (node, { replaceWith }) => {
    if (node.kind === "function" && node.value in functions) {
      let args = segment(toCss2(node.nodes).trim(), ",").map((x) => x.trim());
      let result = functions[node.value](designSystem, ...args);
      return replaceWith(parse2(result));
    }
  });
  return toCss2(ast);
}
function eventuallyUnquote(value2) {
  if (value2[0] !== "'" && value2[0] !== '"')
    return value2;
  let unquoted = "";
  let quoteChar = value2[0];
  for (let i = 1;i < value2.length - 1; i++) {
    let currentChar = value2[i];
    let nextChar = value2[i + 1];
    if (currentChar === "\\" && (nextChar === quoteChar || nextChar === "\\")) {
      unquoted += nextChar;
      i++;
    } else {
      unquoted += currentChar;
    }
  }
  return unquoted;
}
var property_order_default = [
  "container-type",
  "pointer-events",
  "visibility",
  "position",
  "inset",
  "inset-inline",
  "inset-block",
  "inset-inline-start",
  "inset-inline-end",
  "top",
  "right",
  "bottom",
  "left",
  "isolation",
  "z-index",
  "order",
  "grid-column",
  "grid-column-start",
  "grid-column-end",
  "grid-row",
  "grid-row-start",
  "grid-row-end",
  "float",
  "clear",
  "--tw-container-component",
  "margin",
  "margin-inline",
  "margin-block",
  "margin-inline-start",
  "margin-inline-end",
  "margin-top",
  "margin-right",
  "margin-bottom",
  "margin-left",
  "box-sizing",
  "display",
  "field-sizing",
  "aspect-ratio",
  "height",
  "max-height",
  "min-height",
  "width",
  "max-width",
  "min-width",
  "flex",
  "flex-shrink",
  "flex-grow",
  "flex-basis",
  "table-layout",
  "caption-side",
  "border-collapse",
  "border-spacing",
  "transform-origin",
  "translate",
  "--tw-translate-x",
  "--tw-translate-y",
  "scale",
  "--tw-scale-x",
  "--tw-scale-y",
  "--tw-scale-z",
  "rotate",
  "--tw-rotate-x",
  "--tw-rotate-y",
  "--tw-rotate-z",
  "--tw-skew-x",
  "--tw-skew-y",
  "transform",
  "animation",
  "cursor",
  "touch-action",
  "--tw-pan-x",
  "--tw-pan-y",
  "--tw-pinch-zoom",
  "resize",
  "scroll-snap-type",
  "--tw-scroll-snap-strictness",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-margin",
  "scroll-margin-inline",
  "scroll-margin-block",
  "scroll-margin-inline-start",
  "scroll-margin-inline-end",
  "scroll-margin-top",
  "scroll-margin-right",
  "scroll-margin-bottom",
  "scroll-margin-left",
  "scroll-padding",
  "scroll-padding-inline",
  "scroll-padding-block",
  "scroll-padding-inline-start",
  "scroll-padding-inline-end",
  "scroll-padding-top",
  "scroll-padding-right",
  "scroll-padding-bottom",
  "scroll-padding-left",
  "list-style-position",
  "list-style-type",
  "list-style-image",
  "appearance",
  "columns",
  "break-before",
  "break-inside",
  "break-after",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-template-columns",
  "grid-template-rows",
  "flex-direction",
  "flex-wrap",
  "place-content",
  "place-items",
  "align-content",
  "align-items",
  "justify-content",
  "justify-items",
  "gap",
  "column-gap",
  "row-gap",
  "--tw-space-x-reverse",
  "--tw-space-y-reverse",
  "divide-x-width",
  "divide-y-width",
  "--tw-divide-y-reverse",
  "divide-style",
  "divide-color",
  "place-self",
  "align-self",
  "justify-self",
  "overflow",
  "overflow-x",
  "overflow-y",
  "overscroll-behavior",
  "overscroll-behavior-x",
  "overscroll-behavior-y",
  "scroll-behavior",
  "border-radius",
  "border-start-radius",
  "border-end-radius",
  "border-top-radius",
  "border-right-radius",
  "border-bottom-radius",
  "border-left-radius",
  "border-start-start-radius",
  "border-start-end-radius",
  "border-end-end-radius",
  "border-end-start-radius",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-bottom-right-radius",
  "border-bottom-left-radius",
  "border-width",
  "border-inline-width",
  "border-block-width",
  "border-inline-start-width",
  "border-inline-end-width",
  "border-top-width",
  "border-right-width",
  "border-bottom-width",
  "border-left-width",
  "border-style",
  "border-inline-style",
  "border-block-style",
  "border-inline-start-style",
  "border-inline-end-style",
  "border-top-style",
  "border-right-style",
  "border-bottom-style",
  "border-left-style",
  "border-color",
  "border-inline-color",
  "border-block-color",
  "border-inline-start-color",
  "border-inline-end-color",
  "border-top-color",
  "border-right-color",
  "border-bottom-color",
  "border-left-color",
  "background-color",
  "background-image",
  "--tw-gradient-position",
  "--tw-gradient-stops",
  "--tw-gradient-via-stops",
  "--tw-gradient-from",
  "--tw-gradient-from-position",
  "--tw-gradient-via",
  "--tw-gradient-via-position",
  "--tw-gradient-to",
  "--tw-gradient-to-position",
  "box-decoration-break",
  "background-size",
  "background-attachment",
  "background-clip",
  "background-position",
  "background-repeat",
  "background-origin",
  "fill",
  "stroke",
  "stroke-width",
  "object-fit",
  "object-position",
  "padding",
  "padding-inline",
  "padding-block",
  "padding-inline-start",
  "padding-inline-end",
  "padding-top",
  "padding-right",
  "padding-bottom",
  "padding-left",
  "text-align",
  "text-indent",
  "vertical-align",
  "font-family",
  "font-size",
  "line-height",
  "font-weight",
  "letter-spacing",
  "text-wrap",
  "overflow-wrap",
  "word-break",
  "text-overflow",
  "hyphens",
  "white-space",
  "color",
  "text-transform",
  "font-style",
  "font-stretch",
  "font-variant-numeric",
  "text-decoration-line",
  "text-decoration-color",
  "text-decoration-style",
  "text-decoration-thickness",
  "text-underline-offset",
  "-webkit-font-smoothing",
  "placeholder-color",
  "caret-color",
  "accent-color",
  "color-scheme",
  "opacity",
  "background-blend-mode",
  "mix-blend-mode",
  "box-shadow",
  "--tw-shadow",
  "--tw-shadow-color",
  "--tw-ring-shadow",
  "--tw-ring-color",
  "--tw-inset-shadow",
  "--tw-inset-shadow-color",
  "--tw-inset-ring-shadow",
  "--tw-inset-ring-color",
  "--tw-ring-offset-width",
  "--tw-ring-offset-color",
  "outline",
  "outline-width",
  "outline-offset",
  "outline-color",
  "--tw-blur",
  "--tw-brightness",
  "--tw-contrast",
  "--tw-drop-shadow",
  "--tw-grayscale",
  "--tw-hue-rotate",
  "--tw-invert",
  "--tw-saturate",
  "--tw-sepia",
  "filter",
  "--tw-backdrop-blur",
  "--tw-backdrop-brightness",
  "--tw-backdrop-contrast",
  "--tw-backdrop-grayscale",
  "--tw-backdrop-hue-rotate",
  "--tw-backdrop-invert",
  "--tw-backdrop-opacity",
  "--tw-backdrop-saturate",
  "--tw-backdrop-sepia",
  "backdrop-filter",
  "transition-property",
  "transition-behavior",
  "transition-delay",
  "transition-duration",
  "transition-timing-function",
  "will-change",
  "contain",
  "content",
  "forced-color-adjust"
];
var ZERO = 48;
var NINE = 57;
function compare(a, z) {
  let aLen = a.length;
  let zLen = z.length;
  let minLen = aLen < zLen ? aLen : zLen;
  for (let i = 0;i < minLen; i++) {
    let aCode = a.charCodeAt(i);
    let zCode = z.charCodeAt(i);
    if (aCode === zCode)
      continue;
    if (aCode >= ZERO && aCode <= NINE && zCode >= ZERO && zCode <= NINE) {
      let aStart = i;
      let aEnd = i + 1;
      let zStart = i;
      let zEnd = i + 1;
      aCode = a.charCodeAt(aEnd);
      while (aCode >= ZERO && aCode <= NINE)
        aCode = a.charCodeAt(++aEnd);
      zCode = z.charCodeAt(zEnd);
      while (zCode >= ZERO && zCode <= NINE)
        zCode = z.charCodeAt(++zEnd);
      let aNumber = a.slice(aStart, aEnd);
      let zNumber = z.slice(zStart, zEnd);
      return Number(aNumber) - Number(zNumber) || (aNumber < zNumber ? -1 : 1);
    }
    return aCode - zCode;
  }
  return a.length - z.length;
}
function escape2(value2) {
  if (arguments.length == 0) {
    throw new TypeError("`CSS.escape` requires an argument.");
  }
  var string = String(value2);
  var length = string.length;
  var index = -1;
  var codeUnit;
  var result = "";
  var firstCodeUnit = string.charCodeAt(0);
  if (length == 1 && firstCodeUnit == 45) {
    return "\\" + string;
  }
  while (++index < length) {
    codeUnit = string.charCodeAt(index);
    if (codeUnit == 0) {
      result += "\uFFFD";
      continue;
    }
    if (codeUnit >= 1 && codeUnit <= 31 || codeUnit == 127 || index == 0 && codeUnit >= 48 && codeUnit <= 57 || index == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45) {
      result += "\\" + codeUnit.toString(16) + " ";
      continue;
    }
    if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
      result += string.charAt(index);
      continue;
    }
    result += "\\" + string.charAt(index);
  }
  return result;
}
function unescape2(escaped) {
  return escaped.replace(/\\([\dA-Fa-f]{1,6}[\t\n\f\r ]?|[\S\s])/g, (match) => {
    return match.length > 2 ? String.fromCodePoint(Number.parseInt(match.slice(1).trim(), 16)) : match[1];
  });
}
function compileCandidates(rawCandidates, designSystem, { onInvalidCandidate } = {}) {
  let nodeSorting = new Map;
  let astNodes = [];
  let matches = new Map;
  for (let rawCandidate of rawCandidates) {
    if (designSystem.invalidCandidates.has(rawCandidate)) {
      onInvalidCandidate?.(rawCandidate);
      continue;
    }
    let candidates = designSystem.parseCandidate(rawCandidate);
    if (candidates.length === 0) {
      onInvalidCandidate?.(rawCandidate);
      continue;
    }
    matches.set(rawCandidate, candidates);
  }
  let variantOrderMap = designSystem.getVariantOrder();
  for (let [rawCandidate, candidates] of matches) {
    let found = false;
    for (let candidate of candidates) {
      let rules = designSystem.compileAstNodes(candidate);
      if (rules.length === 0)
        continue;
      try {
        substituteFunctions(rules.map(({ node }) => node), designSystem);
      } catch (err) {
        continue;
      }
      found = true;
      for (let { node, propertySort } of rules) {
        let variantOrder = 0n;
        for (let variant of candidate.variants) {
          variantOrder |= 1n << BigInt(variantOrderMap.get(variant));
        }
        nodeSorting.set(node, {
          properties: propertySort,
          variants: variantOrder,
          candidate: rawCandidate
        });
        astNodes.push(node);
      }
    }
    if (!found) {
      onInvalidCandidate?.(rawCandidate);
    }
  }
  astNodes.sort((a, z) => {
    let aSorting = nodeSorting.get(a);
    let zSorting = nodeSorting.get(z);
    if (aSorting.variants - zSorting.variants !== 0n) {
      return Number(aSorting.variants - zSorting.variants);
    }
    let offset = 0;
    while (aSorting.properties.length < offset && zSorting.properties.length < offset && aSorting.properties[offset] === zSorting.properties[offset]) {
      offset += 1;
    }
    return (aSorting.properties[offset] ?? Infinity) - (zSorting.properties[offset] ?? Infinity) || zSorting.properties.length - aSorting.properties.length || compare(aSorting.candidate, zSorting.candidate);
  });
  return {
    astNodes,
    nodeSorting
  };
}
function compileAstNodes(candidate, designSystem) {
  let asts = compileBaseUtility(candidate, designSystem);
  if (asts.length === 0)
    return [];
  let rules = [];
  let selector = `.${escape2(candidate.raw)}`;
  for (let nodes of asts) {
    let propertySort = getPropertySort(nodes);
    if (candidate.important || designSystem.important) {
      applyImportant(nodes);
    }
    let node = {
      kind: "rule",
      selector,
      nodes
    };
    for (let variant of candidate.variants) {
      let result = applyVariant(node, variant, designSystem.variants);
      if (result === null)
        return [];
    }
    rules.push({
      node,
      propertySort
    });
  }
  return rules;
}
function applyVariant(node, variant, variants, depth = 0) {
  if (variant.kind === "arbitrary") {
    if (variant.relative && depth === 0)
      return null;
    node.nodes = [rule(variant.selector, node.nodes)];
    return;
  }
  let { applyFn } = variants.get(variant.root);
  if (variant.kind === "compound") {
    let isolatedNode = atRule("@slot");
    let result2 = applyVariant(isolatedNode, variant.variant, variants, depth + 1);
    if (result2 === null)
      return null;
    for (let child of isolatedNode.nodes) {
      if (child.kind !== "rule" && child.kind !== "at-rule")
        return null;
      let result3 = applyFn(child, variant);
      if (result3 === null)
        return null;
    }
    {
      walk(isolatedNode.nodes, (child) => {
        if ((child.kind === "rule" || child.kind === "at-rule") && child.nodes.length <= 0) {
          child.nodes = node.nodes;
          return 1;
        }
      });
      node.nodes = isolatedNode.nodes;
    }
    return;
  }
  let result = applyFn(node, variant);
  if (result === null)
    return null;
}
function isFallbackUtility(utility) {
  let types = utility.options?.types ?? [];
  return types.length > 1 && types.includes("any");
}
function compileBaseUtility(candidate, designSystem) {
  if (candidate.kind === "arbitrary") {
    let value2 = candidate.value;
    if (candidate.modifier) {
      value2 = asColor(value2, candidate.modifier, designSystem.theme);
    }
    if (value2 === null)
      return [];
    return [[decl(candidate.property, value2)]];
  }
  let utilities = designSystem.utilities.get(candidate.root) ?? [];
  let asts = [];
  let normalUtilities = utilities.filter((u) => !isFallbackUtility(u));
  for (let utility of normalUtilities) {
    if (utility.kind !== candidate.kind)
      continue;
    let compiledNodes = utility.compileFn(candidate);
    if (compiledNodes === undefined)
      continue;
    if (compiledNodes === null)
      return asts;
    asts.push(compiledNodes);
  }
  if (asts.length > 0)
    return asts;
  let fallbackUtilities = utilities.filter((u) => isFallbackUtility(u));
  for (let utility of fallbackUtilities) {
    if (utility.kind !== candidate.kind)
      continue;
    let compiledNodes = utility.compileFn(candidate);
    if (compiledNodes === undefined)
      continue;
    if (compiledNodes === null)
      return asts;
    asts.push(compiledNodes);
  }
  return asts;
}
function applyImportant(ast) {
  for (let node of ast) {
    if (node.kind === "at-root") {
      continue;
    }
    if (node.kind === "declaration") {
      node.important = true;
    } else if (node.kind === "rule" || node.kind === "at-rule") {
      applyImportant(node.nodes);
    }
  }
}
function getPropertySort(nodes) {
  let propertySort = new Set;
  let q = nodes.slice();
  while (q.length > 0) {
    let node = q.shift();
    if (node.kind === "declaration") {
      if (node.property === "--tw-sort") {
        let idx2 = property_order_default.indexOf(node.value ?? "");
        if (idx2 !== -1) {
          propertySort.add(idx2);
          break;
        }
      }
      let idx = property_order_default.indexOf(node.property);
      if (idx !== -1)
        propertySort.add(idx);
    } else if (node.kind === "rule" || node.kind === "at-rule") {
      for (let child of node.nodes) {
        q.push(child);
      }
    }
  }
  return Array.from(propertySort).sort((a, z) => a - z);
}
function substituteAtApply(ast, designSystem) {
  let features = 0;
  let root = rule("&", ast);
  let parents = new Set;
  let dependencies = new DefaultMap(() => new Set);
  let definitions = new DefaultMap(() => new Set);
  walk([root], (node, { parent }) => {
    if (node.kind !== "at-rule")
      return;
    if (node.name === "@keyframes") {
      walk(node.nodes, (child) => {
        if (child.kind === "at-rule" && child.name === "@apply") {
          throw new Error(`You cannot use \`@apply\` inside \`@keyframes\`.`);
        }
      });
      return 1;
    }
    if (node.name === "@utility") {
      let name = node.params.replace(/-\*$/, "");
      definitions.get(name).add(node);
      walk(node.nodes, (child) => {
        if (child.kind !== "at-rule" || child.name !== "@apply")
          return;
        parents.add(node);
        for (let dependency of resolveApplyDependencies(child, designSystem)) {
          dependencies.get(node).add(dependency);
        }
      });
      return;
    }
    if (node.name === "@apply") {
      if (parent === null)
        return;
      features |= 1;
      parents.add(parent);
      for (let dependency of resolveApplyDependencies(node, designSystem)) {
        dependencies.get(parent).add(dependency);
      }
    }
  });
  let seen = new Set;
  let sorted = [];
  let wip = new Set;
  function visit(node, path4 = []) {
    if (seen.has(node)) {
      return;
    }
    if (wip.has(node)) {
      let next = path4[(path4.indexOf(node) + 1) % path4.length];
      if (node.kind === "at-rule" && node.name === "@utility" && next.kind === "at-rule" && next.name === "@utility") {
        walk(node.nodes, (child) => {
          if (child.kind !== "at-rule" || child.name !== "@apply")
            return;
          let candidates = child.params.split(/\s+/g);
          for (let candidate of candidates) {
            for (let candidateAstNode of designSystem.parseCandidate(candidate)) {
              switch (candidateAstNode.kind) {
                case "arbitrary":
                  break;
                case "static":
                case "functional":
                  if (next.params.replace(/-\*$/, "") === candidateAstNode.root) {
                    throw new Error(`You cannot \`@apply\` the \`${candidate}\` utility here because it creates a circular dependency.`);
                  }
                  break;
                default:
              }
            }
          }
        });
      }
      throw new Error(`Circular dependency detected:

${toCss([node])}
Relies on:

${toCss([next])}`);
    }
    wip.add(node);
    for (let dependencyId of dependencies.get(node)) {
      for (let dependency of definitions.get(dependencyId)) {
        path4.push(node);
        visit(dependency, path4);
        path4.pop();
      }
    }
    seen.add(node);
    wip.delete(node);
    sorted.push(node);
  }
  for (let node of parents) {
    visit(node);
  }
  walk(sorted, (node, { replaceWith }) => {
    if (node.kind !== "at-rule" || node.name !== "@apply")
      return;
    let candidates = node.params.split(/\s+/g);
    {
      let candidateAst = compileCandidates(candidates, designSystem, {
        onInvalidCandidate: (candidate) => {
          throw new Error(`Cannot apply unknown utility class: ${candidate}`);
        }
      }).astNodes;
      let newNodes = [];
      for (let candidateNode of candidateAst) {
        if (candidateNode.kind === "rule") {
          for (let child of candidateNode.nodes) {
            newNodes.push(child);
          }
        } else {
          newNodes.push(candidateNode);
        }
      }
      replaceWith(newNodes);
    }
  });
  return features;
}
function* resolveApplyDependencies(node, designSystem) {
  for (let candidate of node.params.split(/\s+/g)) {
    for (let node2 of designSystem.parseCandidate(candidate)) {
      switch (node2.kind) {
        case "arbitrary":
          break;
        case "static":
        case "functional":
          yield node2.root;
          break;
        default:
      }
    }
  }
}
async function substituteAtImports(ast, base, loadStylesheet, recurseCount = 0) {
  let features = 0;
  let promises = [];
  walk(ast, (node, { replaceWith }) => {
    if (node.kind === "at-rule" && (node.name === "@import" || node.name === "@reference")) {
      let parsed = parseImportParams(parse2(node.params));
      if (parsed === null)
        return;
      if (node.name === "@reference") {
        parsed.media = "reference";
      }
      features |= 2;
      let { uri, layer, media, supports } = parsed;
      if (uri.startsWith("data:"))
        return;
      if (uri.startsWith("http://") || uri.startsWith("https://"))
        return;
      let contextNode = context({}, []);
      promises.push((async () => {
        if (recurseCount > 100) {
          throw new Error(`Exceeded maximum recursion depth while resolving \`${uri}\` in \`${base}\`)`);
        }
        let loaded = await loadStylesheet(uri, base);
        let ast2 = parse(loaded.content);
        await substituteAtImports(ast2, loaded.base, loadStylesheet, recurseCount + 1);
        contextNode.nodes = buildImportNodes([context({ base: loaded.base }, ast2)], layer, media, supports);
      })());
      replaceWith(contextNode);
      return 1;
    }
  });
  if (promises.length > 0) {
    await Promise.all(promises);
  }
  return features;
}
function parseImportParams(params) {
  let uri;
  let layer = null;
  let media = null;
  let supports = null;
  for (let i = 0;i < params.length; i++) {
    let node = params[i];
    if (node.kind === "separator")
      continue;
    if (node.kind === "word" && !uri) {
      if (!node.value)
        return null;
      if (node.value[0] !== '"' && node.value[0] !== "'")
        return null;
      uri = node.value.slice(1, -1);
      continue;
    }
    if (node.kind === "function" && node.value.toLowerCase() === "url") {
      return null;
    }
    if (!uri)
      return null;
    if ((node.kind === "word" || node.kind === "function") && node.value.toLowerCase() === "layer") {
      if (layer)
        return null;
      if (supports) {
        throw new Error("`layer(\u2026)` in an `@import` should come before any other functions or conditions");
      }
      if ("nodes" in node) {
        layer = toCss2(node.nodes);
      } else {
        layer = "";
      }
      continue;
    }
    if (node.kind === "function" && node.value.toLowerCase() === "supports") {
      if (supports)
        return null;
      supports = toCss2(node.nodes);
      continue;
    }
    media = toCss2(params.slice(i));
    break;
  }
  if (!uri)
    return null;
  return { uri, layer, media, supports };
}
function buildImportNodes(importedAst, layer, media, supports) {
  let root = importedAst;
  if (layer !== null) {
    root = [atRule("@layer", layer, root)];
  }
  if (media !== null) {
    root = [atRule("@media", media, root)];
  }
  if (supports !== null) {
    root = [atRule("@supports", supports[0] === "(" ? supports : `(${supports})`, root)];
  }
  return root;
}
var ignoredThemeKeyMap = new Map([
  ["--font", ["--font-weight", "--font-size"]],
  ["--inset", ["--inset-shadow", "--inset-ring"]],
  [
    "--text",
    [
      "--text-color",
      "--text-underline-offset",
      "--text-indent",
      "--text-decoration-thickness",
      "--text-decoration-color"
    ]
  ]
]);
function isIgnoredThemeKey(themeKey, namespace) {
  return (ignoredThemeKeyMap.get(namespace) ?? []).some((ignoredThemeKey) => themeKey === ignoredThemeKey || themeKey.startsWith(`${ignoredThemeKey}-`));
}

class Theme {
  values;
  keyframes;
  prefix = null;
  constructor(values = new Map, keyframes = new Set([])) {
    this.values = values;
    this.keyframes = keyframes;
  }
  add(key, value2, options = 0) {
    if (key.endsWith("\\*")) {
      key = key.slice(0, -2) + "*";
    }
    if (key.endsWith("-*")) {
      if (value2 !== "initial") {
        throw new Error(`Invalid theme value \`${value2}\` for namespace \`${key}\``);
      }
      if (key === "--*") {
        this.values.clear();
      } else {
        this.clearNamespace(key.slice(0, -2), 0);
      }
    }
    if (options & 4) {
      let existing = this.values.get(key);
      if (existing && !(existing.options & 4))
        return;
    }
    if (value2 === "initial") {
      this.values.delete(key);
    } else {
      this.values.set(key, { value: value2, options });
    }
  }
  keysInNamespaces(themeKeys) {
    let keys = [];
    for (let namespace of themeKeys) {
      let prefix = `${namespace}-`;
      for (let key of this.values.keys()) {
        if (!key.startsWith(prefix))
          continue;
        if (key.indexOf("--", 2) !== -1)
          continue;
        if (isIgnoredThemeKey(key, namespace)) {
          continue;
        }
        keys.push(key.slice(prefix.length));
      }
    }
    return keys;
  }
  get(themeKeys) {
    for (let key of themeKeys) {
      let value2 = this.values.get(key);
      if (value2) {
        return value2.value;
      }
    }
    return null;
  }
  hasDefault(key) {
    return (this.getOptions(key) & 4) === 4;
  }
  getOptions(key) {
    return this.values.get(key)?.options ?? 0;
  }
  entries() {
    if (!this.prefix)
      return this.values.entries();
    return Array.from(this.values, (entry) => {
      entry[0] = this.#prefixKey(entry[0]);
      return entry;
    });
  }
  #prefixKey(key) {
    if (!this.prefix)
      return key;
    return `--${this.prefix}-${key.slice(2)}`;
  }
  clearNamespace(namespace, clearOptions) {
    let ignored = ignoredThemeKeyMap.get(namespace) ?? [];
    outer:
      for (let key of this.values.keys()) {
        if (key.startsWith(namespace)) {
          if (clearOptions !== 0) {
            let options = this.getOptions(key);
            if ((options & clearOptions) !== clearOptions) {
              continue;
            }
          }
          for (let ignoredNamespace of ignored) {
            if (key.startsWith(ignoredNamespace))
              continue outer;
          }
          this.values.delete(key);
        }
      }
  }
  #resolveKey(candidateValue, themeKeys) {
    for (let namespace of themeKeys) {
      let themeKey = candidateValue !== null ? escape2(`${namespace}-${candidateValue.replaceAll(".", "_")}`) : namespace;
      if (!this.values.has(themeKey))
        continue;
      if (isIgnoredThemeKey(themeKey, namespace))
        continue;
      return themeKey;
    }
    return null;
  }
  #var(themeKey) {
    if (!this.values.has(themeKey)) {
      return null;
    }
    return `var(${this.#prefixKey(themeKey)})`;
  }
  resolve(candidateValue, themeKeys) {
    let themeKey = this.#resolveKey(candidateValue, themeKeys);
    if (!themeKey)
      return null;
    let value2 = this.values.get(themeKey);
    if (value2.options & 1) {
      return value2.value;
    }
    return this.#var(themeKey);
  }
  resolveValue(candidateValue, themeKeys) {
    let themeKey = this.#resolveKey(candidateValue, themeKeys);
    if (!themeKey)
      return null;
    return this.values.get(themeKey).value;
  }
  resolveWith(candidateValue, themeKeys, nestedKeys = []) {
    let themeKey = this.#resolveKey(candidateValue, themeKeys);
    if (!themeKey)
      return null;
    let extra = {};
    for (let name of nestedKeys) {
      let nestedKey = `${themeKey}${name}`;
      let nestedValue = this.values.get(nestedKey);
      if (!nestedValue)
        continue;
      if (nestedValue.options & 1) {
        extra[name] = nestedValue.value;
      } else {
        extra[name] = this.#var(nestedKey);
      }
    }
    let value2 = this.values.get(themeKey);
    if (value2.options & 1) {
      return [value2.value, extra];
    }
    return [this.#var(themeKey), extra];
  }
  namespace(namespace) {
    let values = new Map;
    let prefix = `${namespace}-`;
    for (let [key, value2] of this.values) {
      if (key === namespace) {
        values.set(null, value2.value);
      } else if (key.startsWith(`${prefix}-`)) {
        values.set(key.slice(namespace.length), value2.value);
      } else if (key.startsWith(prefix)) {
        values.set(key.slice(prefix.length), value2.value);
      }
    }
    return values;
  }
  addKeyframes(value2) {
    this.keyframes.add(value2);
  }
  getKeyframes() {
    return Array.from(this.keyframes);
  }
}
function resolveThemeValue(value2, subValue = null) {
  if (Array.isArray(value2) && value2.length === 2 && typeof value2[1] === "object" && typeof value2[1] !== null) {
    return subValue ? value2[1][subValue] ?? null : value2[0];
  } else if (Array.isArray(value2) && subValue === null) {
    return value2.join(", ");
  } else if (typeof value2 === "string" && subValue === null) {
    return value2;
  }
  return null;
}
function applyConfigToTheme(designSystem, { theme: theme2 }, replacedThemeKeys) {
  for (let replacedThemeKey of replacedThemeKeys) {
    let name = keyPathToCssProperty([replacedThemeKey]);
    if (!name)
      continue;
    designSystem.theme.clearNamespace(`--${name}`, 4);
  }
  for (let [path4, value2] of themeableValues(theme2)) {
    if (typeof value2 !== "string" && typeof value2 !== "number") {
      continue;
    }
    if (typeof value2 === "string") {
      value2 = value2.replace(/<alpha-value>/g, "1");
    }
    if (path4[0] === "opacity" && (typeof value2 === "number" || typeof value2 === "string")) {
      let numValue = typeof value2 === "string" ? parseFloat(value2) : value2;
      if (numValue >= 0 && numValue <= 1) {
        value2 = numValue * 100 + "%";
      }
    }
    let name = keyPathToCssProperty(path4);
    if (!name)
      continue;
    designSystem.theme.add(`--${escape2(name)}`, "" + value2, 7);
  }
  if (Object.hasOwn(theme2, "fontFamily")) {
    let options = 5;
    {
      let fontFamily = resolveThemeValue(theme2.fontFamily.sans);
      if (fontFamily && designSystem.theme.hasDefault("--font-sans")) {
        designSystem.theme.add("--default-font-family", fontFamily, options);
        designSystem.theme.add("--default-font-feature-settings", resolveThemeValue(theme2.fontFamily.sans, "fontFeatureSettings") ?? "normal", options);
        designSystem.theme.add("--default-font-variation-settings", resolveThemeValue(theme2.fontFamily.sans, "fontVariationSettings") ?? "normal", options);
      }
    }
    {
      let fontFamily = resolveThemeValue(theme2.fontFamily.mono);
      if (fontFamily && designSystem.theme.hasDefault("--font-mono")) {
        designSystem.theme.add("--default-mono-font-family", fontFamily, options);
        designSystem.theme.add("--default-mono-font-feature-settings", resolveThemeValue(theme2.fontFamily.mono, "fontFeatureSettings") ?? "normal", options);
        designSystem.theme.add("--default-mono-font-variation-settings", resolveThemeValue(theme2.fontFamily.mono, "fontVariationSettings") ?? "normal", options);
      }
    }
  }
  return theme2;
}
function themeableValues(config) {
  let toAdd = [];
  walk3(config, [], (value2, path4) => {
    if (isValidThemePrimitive(value2)) {
      toAdd.push([path4, value2]);
      return 1;
    }
    if (isValidThemeTuple(value2)) {
      toAdd.push([path4, value2[0]]);
      for (let key of Reflect.ownKeys(value2[1])) {
        toAdd.push([[...path4, `-${key}`], value2[1][key]]);
      }
      return 1;
    }
    if (Array.isArray(value2) && value2.every((v) => typeof v === "string")) {
      toAdd.push([path4, value2.join(", ")]);
      return 1;
    }
  });
  return toAdd;
}
var IS_VALID_KEY = /^[a-zA-Z0-9-_%/\.]+$/;
function keyPathToCssProperty(path4) {
  if (path4[0] === "container")
    return null;
  path4 = structuredClone(path4);
  if (path4[0] === "animation")
    path4[0] = "animate";
  if (path4[0] === "aspectRatio")
    path4[0] = "aspect";
  if (path4[0] === "borderRadius")
    path4[0] = "radius";
  if (path4[0] === "boxShadow")
    path4[0] = "shadow";
  if (path4[0] === "colors")
    path4[0] = "color";
  if (path4[0] === "fontFamily")
    path4[0] = "font";
  if (path4[0] === "fontSize")
    path4[0] = "text";
  if (path4[0] === "letterSpacing")
    path4[0] = "tracking";
  if (path4[0] === "lineHeight")
    path4[0] = "leading";
  if (path4[0] === "maxWidth")
    path4[0] = "container";
  if (path4[0] === "screens")
    path4[0] = "breakpoint";
  if (path4[0] === "transitionTimingFunction")
    path4[0] = "ease";
  for (let part of path4) {
    if (!IS_VALID_KEY.test(part))
      return null;
  }
  return path4.map((path22, idx, all) => path22 === "1" && idx !== all.length - 1 ? "" : path22).map((part) => part.replaceAll(".", "_").replace(/([a-z])([A-Z])/g, (_, a, b) => `${a}-${b.toLowerCase()}`)).filter((part, index) => part !== "DEFAULT" || index !== path4.length - 1).join("-");
}
function isValidThemePrimitive(value2) {
  return typeof value2 === "number" || typeof value2 === "string";
}
function isValidThemeTuple(value2) {
  if (!Array.isArray(value2))
    return false;
  if (value2.length !== 2)
    return false;
  if (typeof value2[0] !== "string" && typeof value2[0] !== "number")
    return false;
  if (value2[1] === undefined || value2[1] === null)
    return false;
  if (typeof value2[1] !== "object")
    return false;
  for (let key of Reflect.ownKeys(value2[1])) {
    if (typeof key !== "string")
      return false;
    if (typeof value2[1][key] !== "string" && typeof value2[1][key] !== "number")
      return false;
  }
  return true;
}
function walk3(obj, path4 = [], callback) {
  for (let key of Reflect.ownKeys(obj)) {
    let value2 = obj[key];
    if (value2 === undefined || value2 === null) {
      continue;
    }
    let keyPath = [...path4, key];
    let result = callback(value2, keyPath) ?? 0;
    if (result === 1)
      continue;
    if (result === 2)
      return 2;
    if (!Array.isArray(value2) && typeof value2 !== "object")
      continue;
    if (walk3(value2, keyPath, callback) === 2) {
      return 2;
    }
  }
}
function toKeyPath(path4) {
  let keypath = [];
  for (let part of segment(path4, ".")) {
    if (!part.includes("[")) {
      keypath.push(part);
      continue;
    }
    let currentIndex = 0;
    while (true) {
      let bracketL = part.indexOf("[", currentIndex);
      let bracketR = part.indexOf("]", bracketL);
      if (bracketL === -1 || bracketR === -1) {
        break;
      }
      if (bracketL > currentIndex) {
        keypath.push(part.slice(currentIndex, bracketL));
      }
      keypath.push(part.slice(bracketL + 1, bracketR));
      currentIndex = bracketR + 1;
    }
    if (currentIndex <= part.length - 1) {
      keypath.push(part.slice(currentIndex));
    }
  }
  return keypath;
}

class Variants {
  compareFns = new Map;
  variants = new Map;
  completions = new Map;
  groupOrder = null;
  lastOrder = 0;
  static(name, applyFn, { compounds, order } = {}) {
    this.set(name, {
      kind: "static",
      applyFn,
      compoundsWith: 0,
      compounds: compounds ?? 2,
      order
    });
  }
  fromAst(name, ast) {
    let selectors = [];
    walk(ast, (node) => {
      if (node.kind === "rule") {
        selectors.push(node.selector);
      } else if (node.kind === "at-rule" && node.name !== "@slot") {
        selectors.push(`${node.name} ${node.params}`);
      }
    });
    this.static(name, (r) => {
      let body = structuredClone(ast);
      substituteAtSlot(body, r.nodes);
      r.nodes = body;
    }, {
      compounds: compoundsForSelectors(selectors)
    });
  }
  functional(name, applyFn, { compounds, order } = {}) {
    this.set(name, {
      kind: "functional",
      applyFn,
      compoundsWith: 0,
      compounds: compounds ?? 2,
      order
    });
  }
  compound(name, compoundsWith, applyFn, { compounds, order } = {}) {
    this.set(name, {
      kind: "compound",
      applyFn,
      compoundsWith,
      compounds: compounds ?? 2,
      order
    });
  }
  group(fn, compareFn) {
    this.groupOrder = this.nextOrder();
    if (compareFn)
      this.compareFns.set(this.groupOrder, compareFn);
    fn();
    this.groupOrder = null;
  }
  has(name) {
    return this.variants.has(name);
  }
  get(name) {
    return this.variants.get(name);
  }
  kind(name) {
    return this.variants.get(name)?.kind;
  }
  compoundsWith(parent, child) {
    let parentInfo = this.variants.get(parent);
    let childInfo = typeof child === "string" ? this.variants.get(child) : child.kind === "arbitrary" ? { compounds: compoundsForSelectors([child.selector]) } : this.variants.get(child.root);
    if (!parentInfo || !childInfo)
      return false;
    if (parentInfo.kind !== "compound")
      return false;
    if (childInfo.compounds === 0)
      return false;
    if (parentInfo.compoundsWith === 0)
      return false;
    if ((parentInfo.compoundsWith & childInfo.compounds) === 0)
      return false;
    return true;
  }
  suggest(name, suggestions) {
    this.completions.set(name, suggestions);
  }
  getCompletions(name) {
    return this.completions.get(name)?.() ?? [];
  }
  compare(a, z) {
    if (a === z)
      return 0;
    if (a === null)
      return -1;
    if (z === null)
      return 1;
    if (a.kind === "arbitrary" && z.kind === "arbitrary") {
      return a.selector < z.selector ? -1 : 1;
    } else if (a.kind === "arbitrary") {
      return 1;
    } else if (z.kind === "arbitrary") {
      return -1;
    }
    let aOrder = this.variants.get(a.root).order;
    let zOrder = this.variants.get(z.root).order;
    let orderedByVariant = aOrder - zOrder;
    if (orderedByVariant !== 0)
      return orderedByVariant;
    if (a.kind === "compound" && z.kind === "compound") {
      let order = this.compare(a.variant, z.variant);
      if (order !== 0)
        return order;
      if (a.modifier && z.modifier) {
        return a.modifier.value < z.modifier.value ? -1 : 1;
      } else if (a.modifier) {
        return 1;
      } else if (z.modifier) {
        return -1;
      } else {
        return 0;
      }
    }
    let compareFn = this.compareFns.get(aOrder);
    if (compareFn !== undefined)
      return compareFn(a, z);
    if (a.root !== z.root)
      return a.root < z.root ? -1 : 1;
    let aValue = a.value;
    let zValue = z.value;
    if (aValue === null)
      return -1;
    if (zValue === null)
      return 1;
    if (aValue.kind === "arbitrary" && zValue.kind !== "arbitrary")
      return 1;
    if (aValue.kind !== "arbitrary" && zValue.kind === "arbitrary")
      return -1;
    return aValue.value < zValue.value ? -1 : 1;
  }
  keys() {
    return this.variants.keys();
  }
  entries() {
    return this.variants.entries();
  }
  set(name, {
    kind,
    applyFn,
    compounds,
    compoundsWith,
    order
  }) {
    let existing = this.variants.get(name);
    if (existing) {
      Object.assign(existing, { kind, applyFn, compounds });
    } else {
      if (order === undefined) {
        this.lastOrder = this.nextOrder();
        order = this.lastOrder;
      }
      this.variants.set(name, {
        kind,
        applyFn,
        order,
        compoundsWith,
        compounds
      });
    }
  }
  nextOrder() {
    return this.groupOrder ?? this.lastOrder + 1;
  }
}
function compoundsForSelectors(selectors) {
  let compounds = 0;
  for (let sel of selectors) {
    if (sel[0] === "@") {
      if (!sel.startsWith("@media") && !sel.startsWith("@supports") && !sel.startsWith("@container")) {
        return 0;
      }
      compounds |= 1;
      continue;
    }
    if (sel.includes("::")) {
      return 0;
    }
    compounds |= 2;
  }
  return compounds;
}
function createVariants(theme2) {
  let variants = new Variants;
  function staticVariant(name, selectors, { compounds } = {}) {
    compounds = compounds ?? compoundsForSelectors(selectors);
    variants.static(name, (r) => {
      r.nodes = selectors.map((selector) => rule(selector, r.nodes));
    }, { compounds });
  }
  variants.static("force", () => {
  }, { compounds: 0 });
  staticVariant("*", [":is(& > *)"], { compounds: 0 });
  staticVariant("**", [":is(& *)"], { compounds: 0 });
  function negateConditions(ruleName, conditions) {
    return conditions.map((condition) => {
      condition = condition.trim();
      let parts = segment(condition, " ");
      if (parts[0] === "not") {
        return parts.slice(1).join(" ");
      }
      if (ruleName === "@container") {
        if (parts[0][0] === "(") {
          return `not ${condition}`;
        } else if (parts[1] === "not") {
          return `${parts[0]} ${parts.slice(2).join(" ")}`;
        } else {
          return `${parts[0]} not ${parts.slice(1).join(" ")}`;
        }
      }
      return `not ${condition}`;
    });
  }
  let conditionalRules = ["@media", "@supports", "@container"];
  function negateAtRule(rule2) {
    for (let ruleName of conditionalRules) {
      if (ruleName !== rule2.name)
        continue;
      let conditions = segment(rule2.params, ",");
      if (conditions.length > 1)
        return null;
      conditions = negateConditions(rule2.name, conditions);
      return atRule(rule2.name, conditions.join(", "));
    }
    return null;
  }
  function negateSelector(selector) {
    if (selector.includes("::"))
      return null;
    let selectors = segment(selector, ",").map((sel) => {
      if (sel.startsWith("&:is(") && sel.endsWith(")")) {
        sel = sel.slice(5, -1);
      }
      sel = sel.replaceAll("&", "*");
      return sel;
    });
    return `&:not(${selectors.join(", ")})`;
  }
  variants.compound("not", 3, (ruleNode, variant) => {
    if (variant.variant.kind === "arbitrary" && variant.variant.relative)
      return null;
    if (variant.modifier)
      return null;
    let didApply = false;
    walk([ruleNode], (node, { path: path4 }) => {
      if (node.kind !== "rule" && node.kind !== "at-rule")
        return 0;
      if (node.nodes.length > 0)
        return 0;
      let atRules = [];
      let styleRules = [];
      for (let parent of path4) {
        if (parent.kind === "at-rule") {
          atRules.push(parent);
        } else if (parent.kind === "rule") {
          styleRules.push(parent);
        }
      }
      if (atRules.length > 1)
        return 2;
      if (styleRules.length > 1)
        return 2;
      let rules = [];
      for (let node2 of styleRules) {
        let selector = negateSelector(node2.selector);
        if (!selector) {
          didApply = false;
          return 2;
        }
        rules.push(styleRule(selector, []));
      }
      for (let node2 of atRules) {
        let negatedAtRule = negateAtRule(node2);
        if (!negatedAtRule) {
          didApply = false;
          return 2;
        }
        rules.push(negatedAtRule);
      }
      Object.assign(ruleNode, styleRule("&", rules));
      didApply = true;
      return 1;
    });
    if (ruleNode.kind === "rule" && ruleNode.selector === "&" && ruleNode.nodes.length === 1) {
      Object.assign(ruleNode, ruleNode.nodes[0]);
    }
    if (!didApply)
      return null;
  });
  variants.suggest("not", () => {
    return Array.from(variants.keys()).filter((name) => {
      return variants.compoundsWith("not", name);
    });
  });
  variants.compound("group", 2, (ruleNode, variant) => {
    if (variant.variant.kind === "arbitrary" && variant.variant.relative)
      return null;
    let variantSelector = variant.modifier ? `:where(.${theme2.prefix ? `${theme2.prefix}\\:` : ""}group\\/${variant.modifier.value})` : `:where(.${theme2.prefix ? `${theme2.prefix}\\:` : ""}group)`;
    let didApply = false;
    walk([ruleNode], (node, { path: path4 }) => {
      if (node.kind !== "rule")
        return 0;
      for (let parent of path4.slice(0, -1)) {
        if (parent.kind !== "rule")
          continue;
        didApply = false;
        return 2;
      }
      let selector = node.selector.replaceAll("&", variantSelector);
      if (segment(selector, ",").length > 1) {
        selector = `:is(${selector})`;
      }
      node.selector = `&:is(${selector} *)`;
      didApply = true;
    });
    if (!didApply)
      return null;
  });
  variants.suggest("group", () => {
    return Array.from(variants.keys()).filter((name) => {
      return variants.compoundsWith("group", name);
    });
  });
  variants.compound("peer", 2, (ruleNode, variant) => {
    if (variant.variant.kind === "arbitrary" && variant.variant.relative)
      return null;
    let variantSelector = variant.modifier ? `:where(.${theme2.prefix ? `${theme2.prefix}\\:` : ""}peer\\/${variant.modifier.value})` : `:where(.${theme2.prefix ? `${theme2.prefix}\\:` : ""}peer)`;
    let didApply = false;
    walk([ruleNode], (node, { path: path4 }) => {
      if (node.kind !== "rule")
        return 0;
      for (let parent of path4.slice(0, -1)) {
        if (parent.kind !== "rule")
          continue;
        didApply = false;
        return 2;
      }
      let selector = node.selector.replaceAll("&", variantSelector);
      if (segment(selector, ",").length > 1) {
        selector = `:is(${selector})`;
      }
      node.selector = `&:is(${selector} ~ *)`;
      didApply = true;
    });
    if (!didApply)
      return null;
  });
  variants.suggest("peer", () => {
    return Array.from(variants.keys()).filter((name) => {
      return variants.compoundsWith("peer", name);
    });
  });
  staticVariant("first-letter", ["&::first-letter"]);
  staticVariant("first-line", ["&::first-line"]);
  staticVariant("marker", ["& *::marker", "&::marker"]);
  staticVariant("selection", ["& *::selection", "&::selection"]);
  staticVariant("file", ["&::file-selector-button"]);
  staticVariant("placeholder", ["&::placeholder"]);
  staticVariant("backdrop", ["&::backdrop"]);
  {
    let contentProperties = function() {
      return atRoot([
        atRule("@property", "--tw-content", [
          decl("syntax", '"*"'),
          decl("initial-value", '""'),
          decl("inherits", "false")
        ])
      ]);
    };
    variants.static("before", (v) => {
      v.nodes = [
        styleRule("&::before", [
          contentProperties(),
          decl("content", "var(--tw-content)"),
          ...v.nodes
        ])
      ];
    }, { compounds: 0 });
    variants.static("after", (v) => {
      v.nodes = [
        styleRule("&::after", [
          contentProperties(),
          decl("content", "var(--tw-content)"),
          ...v.nodes
        ])
      ];
    }, { compounds: 0 });
  }
  staticVariant("first", ["&:first-child"]);
  staticVariant("last", ["&:last-child"]);
  staticVariant("only", ["&:only-child"]);
  staticVariant("odd", ["&:nth-child(odd)"]);
  staticVariant("even", ["&:nth-child(even)"]);
  staticVariant("first-of-type", ["&:first-of-type"]);
  staticVariant("last-of-type", ["&:last-of-type"]);
  staticVariant("only-of-type", ["&:only-of-type"]);
  staticVariant("visited", ["&:visited"]);
  staticVariant("target", ["&:target"]);
  staticVariant("open", ["&:is([open], :popover-open)"]);
  staticVariant("default", ["&:default"]);
  staticVariant("checked", ["&:checked"]);
  staticVariant("indeterminate", ["&:indeterminate"]);
  staticVariant("placeholder-shown", ["&:placeholder-shown"]);
  staticVariant("autofill", ["&:autofill"]);
  staticVariant("optional", ["&:optional"]);
  staticVariant("required", ["&:required"]);
  staticVariant("valid", ["&:valid"]);
  staticVariant("invalid", ["&:invalid"]);
  staticVariant("in-range", ["&:in-range"]);
  staticVariant("out-of-range", ["&:out-of-range"]);
  staticVariant("read-only", ["&:read-only"]);
  staticVariant("empty", ["&:empty"]);
  staticVariant("focus-within", ["&:focus-within"]);
  variants.static("hover", (r) => {
    r.nodes = [styleRule("&:hover", [atRule("@media", "(hover: hover)", r.nodes)])];
  });
  staticVariant("focus", ["&:focus"]);
  staticVariant("focus-visible", ["&:focus-visible"]);
  staticVariant("active", ["&:active"]);
  staticVariant("enabled", ["&:enabled"]);
  staticVariant("disabled", ["&:disabled"]);
  staticVariant("inert", ["&:is([inert], [inert] *)"]);
  variants.compound("in", 2, (ruleNode, variant) => {
    if (variant.modifier)
      return null;
    let didApply = false;
    walk([ruleNode], (node, { path: path4 }) => {
      if (node.kind !== "rule")
        return 0;
      for (let parent of path4.slice(0, -1)) {
        if (parent.kind !== "rule")
          continue;
        didApply = false;
        return 2;
      }
      node.selector = `:where(${node.selector.replaceAll("&", "*")}) &`;
      didApply = true;
    });
    if (!didApply)
      return null;
  });
  variants.suggest("in", () => {
    return Array.from(variants.keys()).filter((name) => {
      return variants.compoundsWith("in", name);
    });
  });
  variants.compound("has", 2, (ruleNode, variant) => {
    if (variant.modifier)
      return null;
    let didApply = false;
    walk([ruleNode], (node, { path: path4 }) => {
      if (node.kind !== "rule")
        return 0;
      for (let parent of path4.slice(0, -1)) {
        if (parent.kind !== "rule")
          continue;
        didApply = false;
        return 2;
      }
      node.selector = `&:has(${node.selector.replaceAll("&", "*")})`;
      didApply = true;
    });
    if (!didApply)
      return null;
  });
  variants.suggest("has", () => {
    return Array.from(variants.keys()).filter((name) => {
      return variants.compoundsWith("has", name);
    });
  });
  variants.functional("aria", (ruleNode, variant) => {
    if (!variant.value || variant.modifier)
      return null;
    if (variant.value.kind === "arbitrary") {
      ruleNode.nodes = [
        styleRule(`&[aria-${quoteAttributeValue(variant.value.value)}]`, ruleNode.nodes)
      ];
    } else {
      ruleNode.nodes = [styleRule(`&[aria-${variant.value.value}="true"]`, ruleNode.nodes)];
    }
  });
  variants.suggest("aria", () => [
    "busy",
    "checked",
    "disabled",
    "expanded",
    "hidden",
    "pressed",
    "readonly",
    "required",
    "selected"
  ]);
  variants.functional("data", (ruleNode, variant) => {
    if (!variant.value || variant.modifier)
      return null;
    ruleNode.nodes = [
      styleRule(`&[data-${quoteAttributeValue(variant.value.value)}]`, ruleNode.nodes)
    ];
  });
  variants.functional("nth", (ruleNode, variant) => {
    if (!variant.value || variant.modifier)
      return null;
    if (variant.value.kind === "named" && !isPositiveInteger(variant.value.value))
      return null;
    ruleNode.nodes = [styleRule(`&:nth-child(${variant.value.value})`, ruleNode.nodes)];
  });
  variants.functional("nth-last", (ruleNode, variant) => {
    if (!variant.value || variant.modifier)
      return null;
    if (variant.value.kind === "named" && !isPositiveInteger(variant.value.value))
      return null;
    ruleNode.nodes = [styleRule(`&:nth-last-child(${variant.value.value})`, ruleNode.nodes)];
  });
  variants.functional("nth-of-type", (ruleNode, variant) => {
    if (!variant.value || variant.modifier)
      return null;
    if (variant.value.kind === "named" && !isPositiveInteger(variant.value.value))
      return null;
    ruleNode.nodes = [styleRule(`&:nth-of-type(${variant.value.value})`, ruleNode.nodes)];
  });
  variants.functional("nth-last-of-type", (ruleNode, variant) => {
    if (!variant.value || variant.modifier)
      return null;
    if (variant.value.kind === "named" && !isPositiveInteger(variant.value.value))
      return null;
    ruleNode.nodes = [styleRule(`&:nth-last-of-type(${variant.value.value})`, ruleNode.nodes)];
  });
  variants.functional("supports", (ruleNode, variant) => {
    if (!variant.value || variant.modifier)
      return null;
    let value2 = variant.value.value;
    if (value2 === null)
      return null;
    if (/^[\w-]*\s*\(/.test(value2)) {
      let query = value2.replace(/\b(and|or|not)\b/g, " $1 ");
      ruleNode.nodes = [atRule("@supports", query, ruleNode.nodes)];
      return;
    }
    if (!value2.includes(":")) {
      value2 = `${value2}: var(--tw)`;
    }
    if (value2[0] !== "(" || value2[value2.length - 1] !== ")") {
      value2 = `(${value2})`;
    }
    ruleNode.nodes = [atRule("@supports", value2, ruleNode.nodes)];
  }, { compounds: 1 });
  staticVariant("motion-safe", ["@media (prefers-reduced-motion: no-preference)"]);
  staticVariant("motion-reduce", ["@media (prefers-reduced-motion: reduce)"]);
  staticVariant("contrast-more", ["@media (prefers-contrast: more)"]);
  staticVariant("contrast-less", ["@media (prefers-contrast: less)"]);
  {
    let compareBreakpointVariants = function(a, z, direction, lookup) {
      if (a === z)
        return 0;
      let aValue = lookup.get(a);
      if (aValue === null)
        return direction === "asc" ? -1 : 1;
      let zValue = lookup.get(z);
      if (zValue === null)
        return direction === "asc" ? 1 : -1;
      return compareBreakpoints(aValue, zValue, direction);
    };
    {
      let breakpoints = theme2.namespace("--breakpoint");
      let resolvedBreakpoints = new DefaultMap((variant) => {
        switch (variant.kind) {
          case "static": {
            return theme2.resolveValue(variant.root, ["--breakpoint"]) ?? null;
          }
          case "functional": {
            if (!variant.value || variant.modifier)
              return null;
            let value2 = null;
            if (variant.value.kind === "arbitrary") {
              value2 = variant.value.value;
            } else if (variant.value.kind === "named") {
              value2 = theme2.resolveValue(variant.value.value, ["--breakpoint"]);
            }
            if (!value2)
              return null;
            if (value2.includes("var("))
              return null;
            return value2;
          }
          case "arbitrary":
          case "compound":
            return null;
        }
      });
      variants.group(() => {
        variants.functional("max", (ruleNode, variant) => {
          if (variant.modifier)
            return null;
          let value2 = resolvedBreakpoints.get(variant);
          if (value2 === null)
            return null;
          ruleNode.nodes = [atRule("@media", `(width < ${value2})`, ruleNode.nodes)];
        }, { compounds: 1 });
      }, (a, z) => compareBreakpointVariants(a, z, "desc", resolvedBreakpoints));
      variants.suggest("max", () => Array.from(breakpoints.keys()).filter((key) => key !== null));
      variants.group(() => {
        for (let [key, value2] of theme2.namespace("--breakpoint")) {
          if (key === null)
            continue;
          variants.static(key, (ruleNode) => {
            ruleNode.nodes = [atRule("@media", `(width >= ${value2})`, ruleNode.nodes)];
          }, { compounds: 1 });
        }
        variants.functional("min", (ruleNode, variant) => {
          if (variant.modifier)
            return null;
          let value2 = resolvedBreakpoints.get(variant);
          if (value2 === null)
            return null;
          ruleNode.nodes = [atRule("@media", `(width >= ${value2})`, ruleNode.nodes)];
        }, { compounds: 1 });
      }, (a, z) => compareBreakpointVariants(a, z, "asc", resolvedBreakpoints));
      variants.suggest("min", () => Array.from(breakpoints.keys()).filter((key) => key !== null));
    }
    {
      let widths = theme2.namespace("--container");
      let resolvedWidths = new DefaultMap((variant) => {
        switch (variant.kind) {
          case "functional": {
            if (variant.value === null)
              return null;
            let value2 = null;
            if (variant.value.kind === "arbitrary") {
              value2 = variant.value.value;
            } else if (variant.value.kind === "named") {
              value2 = theme2.resolveValue(variant.value.value, ["--container"]);
            }
            if (!value2)
              return null;
            if (value2.includes("var("))
              return null;
            return value2;
          }
          case "static":
          case "arbitrary":
          case "compound":
            return null;
        }
      });
      variants.group(() => {
        variants.functional("@max", (ruleNode, variant) => {
          let value2 = resolvedWidths.get(variant);
          if (value2 === null)
            return null;
          ruleNode.nodes = [
            atRule("@container", variant.modifier ? `${variant.modifier.value} (width < ${value2})` : `(width < ${value2})`, ruleNode.nodes)
          ];
        }, { compounds: 1 });
      }, (a, z) => compareBreakpointVariants(a, z, "desc", resolvedWidths));
      variants.suggest("@max", () => Array.from(widths.keys()).filter((key) => key !== null));
      variants.group(() => {
        variants.functional("@", (ruleNode, variant) => {
          let value2 = resolvedWidths.get(variant);
          if (value2 === null)
            return null;
          ruleNode.nodes = [
            atRule("@container", variant.modifier ? `${variant.modifier.value} (width >= ${value2})` : `(width >= ${value2})`, ruleNode.nodes)
          ];
        }, { compounds: 1 });
        variants.functional("@min", (ruleNode, variant) => {
          let value2 = resolvedWidths.get(variant);
          if (value2 === null)
            return null;
          ruleNode.nodes = [
            atRule("@container", variant.modifier ? `${variant.modifier.value} (width >= ${value2})` : `(width >= ${value2})`, ruleNode.nodes)
          ];
        }, { compounds: 1 });
      }, (a, z) => compareBreakpointVariants(a, z, "asc", resolvedWidths));
      variants.suggest("@min", () => Array.from(widths.keys()).filter((key) => key !== null));
    }
  }
  staticVariant("portrait", ["@media (orientation: portrait)"]);
  staticVariant("landscape", ["@media (orientation: landscape)"]);
  staticVariant("ltr", ['&:where(:dir(ltr), [dir="ltr"], [dir="ltr"] *)']);
  staticVariant("rtl", ['&:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *)']);
  staticVariant("dark", ["@media (prefers-color-scheme: dark)"]);
  staticVariant("starting", ["@starting-style"]);
  staticVariant("print", ["@media print"]);
  staticVariant("forced-colors", ["@media (forced-colors: active)"]);
  return variants;
}
function quoteAttributeValue(input) {
  if (input.includes("=")) {
    let [attribute, ...after] = segment(input, "=");
    let value2 = after.join("=").trim();
    if (value2[0] === "'" || value2[0] === '"') {
      return input;
    }
    if (value2.length > 1) {
      let trailingCharacter = value2[value2.length - 1];
      if (value2[value2.length - 2] === " " && (trailingCharacter === "i" || trailingCharacter === "I" || trailingCharacter === "s" || trailingCharacter === "S")) {
        return `${attribute}="${value2.slice(0, -2)}" ${trailingCharacter}`;
      }
    }
    return `${attribute}="${value2}"`;
  }
  return input;
}
function substituteAtSlot(ast, nodes) {
  walk(ast, (node, { replaceWith }) => {
    if (node.kind === "at-rule" && node.name === "@slot") {
      replaceWith(nodes);
    } else if (node.kind === "at-rule" && (node.name === "@keyframes" || node.name === "@property")) {
      Object.assign(node, atRoot([atRule(node.name, node.params, node.nodes)]));
      return 1;
    }
  });
}
function isPlainObject(value2) {
  if (Object.prototype.toString.call(value2) !== "[object Object]") {
    return false;
  }
  const prototype = Object.getPrototypeOf(value2);
  return prototype === null || Object.getPrototypeOf(prototype) === null;
}
function deepMerge(target, sources, customizer, path4 = []) {
  for (let source of sources) {
    if (source === null || source === undefined) {
      continue;
    }
    for (let k of Reflect.ownKeys(source)) {
      path4.push(k);
      let merged = customizer(target[k], source[k], path4);
      if (merged !== undefined) {
        target[k] = merged;
      } else if (!isPlainObject(target[k]) || !isPlainObject(source[k])) {
        target[k] = source[k];
      } else {
        target[k] = deepMerge({}, [target[k], source[k]], customizer, path4);
      }
      path4.pop();
    }
  }
  return target;
}
function createThemeFn(designSystem, configTheme, resolveValue) {
  return function theme(path4, defaultValue) {
    let lastSlash = path4.lastIndexOf("/");
    let modifier = null;
    if (lastSlash !== -1) {
      modifier = path4.slice(lastSlash + 1).trim();
      path4 = path4.slice(0, lastSlash).trim();
    }
    let resolvedValue = (() => {
      let keypath = toKeyPath(path4);
      let [cssValue, options] = readFromCss(designSystem.theme, keypath);
      let configValue = resolveValue(get(configTheme() ?? {}, keypath) ?? null);
      if (typeof configValue === "string") {
        configValue = configValue.replace("<alpha-value>", "1");
      }
      if (typeof cssValue !== "object") {
        if (typeof options !== "object" && options & 4) {
          return configValue ?? cssValue;
        }
        return cssValue;
      }
      if (configValue !== null && typeof configValue === "object" && !Array.isArray(configValue)) {
        let configValueCopy = deepMerge({}, [configValue], (_, b) => b);
        if (cssValue === null && Object.hasOwn(configValue, "__CSS_VALUES__")) {
          let localCssValue = {};
          for (let key in configValue.__CSS_VALUES__) {
            localCssValue[key] = configValue[key];
            delete configValueCopy[key];
          }
          cssValue = localCssValue;
        }
        for (let key in cssValue) {
          if (key === "__CSS_VALUES__")
            continue;
          if (configValue?.__CSS_VALUES__?.[key] & 4 && get(configValueCopy, key.split("-")) !== undefined) {
            continue;
          }
          configValueCopy[unescape2(key)] = cssValue[key];
        }
        return configValueCopy;
      }
      if (Array.isArray(cssValue) && Array.isArray(options) && Array.isArray(configValue)) {
        let base = cssValue[0];
        let extra = cssValue[1];
        if (options[0] & 4) {
          base = configValue[0] ?? base;
        }
        for (let key of Object.keys(extra)) {
          if (options[1][key] & 4) {
            extra[key] = configValue[1][key] ?? extra[key];
          }
        }
        return [base, extra];
      }
      return cssValue ?? configValue;
    })();
    if (modifier && typeof resolvedValue === "string") {
      resolvedValue = withAlpha(resolvedValue, modifier);
    }
    return resolvedValue ?? defaultValue;
  };
}
function readFromCss(theme2, path4) {
  if (path4.length === 1 && path4[0].startsWith("--")) {
    return [theme2.get([path4[0]]), theme2.getOptions(path4[0])];
  }
  let themeKey = keyPathToCssProperty(path4);
  let map = new Map;
  let nested = new DefaultMap(() => new Map);
  let ns = theme2.namespace(`--${themeKey}`);
  if (ns.size === 0) {
    return [null, 0];
  }
  let options = new Map;
  for (let [key, value2] of ns) {
    if (!key || !key.includes("--")) {
      map.set(key, value2);
      options.set(key, theme2.getOptions(!key ? `--${themeKey}` : `--${themeKey}-${key}`));
      continue;
    }
    let nestedIndex = key.indexOf("--");
    let mainKey = key.slice(0, nestedIndex);
    let nestedKey = key.slice(nestedIndex + 2);
    nestedKey = nestedKey.replace(/-([a-z])/g, (_, a) => a.toUpperCase());
    nested.get(mainKey === "" ? null : mainKey).set(nestedKey, [value2, theme2.getOptions(`--${themeKey}${key}`)]);
  }
  let baseOptions = theme2.getOptions(`--${themeKey}`);
  for (let [key, extra] of nested) {
    let value2 = map.get(key);
    if (typeof value2 !== "string")
      continue;
    let extraObj = {};
    let extraOptionsObj = {};
    for (let [nestedKey, [nestedValue, nestedOptions]] of extra) {
      extraObj[nestedKey] = nestedValue;
      extraOptionsObj[nestedKey] = nestedOptions;
    }
    map.set(key, [value2, extraObj]);
    options.set(key, [baseOptions, extraOptionsObj]);
  }
  let obj = {};
  let optionsObj = {};
  for (let [key, value2] of map) {
    set(obj, [key ?? "DEFAULT"], value2);
  }
  for (let [key, value2] of options) {
    set(optionsObj, [key ?? "DEFAULT"], value2);
  }
  if (path4[path4.length - 1] === "DEFAULT") {
    return [obj?.DEFAULT ?? null, optionsObj.DEFAULT ?? 0];
  }
  if ("DEFAULT" in obj && Object.keys(obj).length === 1) {
    return [obj.DEFAULT, optionsObj.DEFAULT ?? 0];
  }
  obj.__CSS_VALUES__ = optionsObj;
  return [obj, optionsObj];
}
function get(obj, path4) {
  for (let i = 0;i < path4.length; ++i) {
    let key = path4[i];
    if (obj[key] === undefined) {
      if (path4[i + 1] === undefined) {
        return;
      }
      path4[i + 1] = `${key}-${path4[i + 1]}`;
      continue;
    }
    obj = obj[key];
  }
  return obj;
}
function set(obj, path4, value2) {
  for (let key of path4.slice(0, -1)) {
    if (obj[key] === undefined) {
      obj[key] = {};
    }
    obj = obj[key];
  }
  obj[path4[path4.length - 1]] = value2;
}
function combinator(value2) {
  return {
    kind: "combinator",
    value: value2
  };
}
function fun2(value2, nodes) {
  return {
    kind: "function",
    value: value2,
    nodes
  };
}
function selector(value2) {
  return {
    kind: "selector",
    value: value2
  };
}
function separator2(value2) {
  return {
    kind: "separator",
    value: value2
  };
}
function value2(value3) {
  return {
    kind: "value",
    value: value3
  };
}
function walk4(ast, visit, parent = null) {
  for (let i = 0;i < ast.length; i++) {
    let node = ast[i];
    let status = visit(node, {
      parent,
      replaceWith(newNode) {
        if (Array.isArray(newNode)) {
          if (newNode.length === 0) {
            ast.splice(i, 1);
          } else if (newNode.length === 1) {
            ast[i] = newNode[0];
          } else {
            ast.splice(i, 1, ...newNode);
          }
        } else {
          ast[i] = newNode;
        }
        i--;
      }
    }) ?? 0;
    if (status === 2)
      return 2;
    if (status === 1)
      continue;
    if (node.kind === "function") {
      if (walk4(node.nodes, visit, node) === 2) {
        return 2;
      }
    }
  }
}
function toCss3(ast) {
  let css = "";
  for (const node of ast) {
    switch (node.kind) {
      case "combinator":
      case "selector":
      case "separator":
      case "value": {
        css += node.value;
        break;
      }
      case "function": {
        css += node.value + "(" + toCss3(node.nodes) + ")";
      }
    }
  }
  return css;
}
var BACKSLASH4 = 92;
var CLOSE_BRACKET3 = 93;
var CLOSE_PAREN4 = 41;
var COLON3 = 58;
var COMMA2 = 44;
var DOUBLE_QUOTE4 = 34;
var FULL_STOP = 46;
var GREATER_THAN2 = 62;
var NEWLINE2 = 10;
var NUMBER_SIGN = 35;
var OPEN_BRACKET3 = 91;
var OPEN_PAREN4 = 40;
var PLUS = 43;
var SINGLE_QUOTE4 = 39;
var SPACE3 = 32;
var TAB3 = 9;
var TILDE = 126;
function parse3(input) {
  input = input.replaceAll(`\r
`, `
`);
  let ast = [];
  let stack = [];
  let parent = null;
  let buffer = "";
  let peekChar;
  for (let i = 0;i < input.length; i++) {
    let currentChar = input.charCodeAt(i);
    switch (currentChar) {
      case COMMA2:
      case GREATER_THAN2:
      case NEWLINE2:
      case SPACE3:
      case PLUS:
      case TAB3:
      case TILDE: {
        if (buffer.length > 0) {
          let node2 = selector(buffer);
          if (parent) {
            parent.nodes.push(node2);
          } else {
            ast.push(node2);
          }
          buffer = "";
        }
        let start = i;
        let end = i + 1;
        for (;end < input.length; end++) {
          peekChar = input.charCodeAt(end);
          if (peekChar !== COMMA2 && peekChar !== GREATER_THAN2 && peekChar !== NEWLINE2 && peekChar !== SPACE3 && peekChar !== PLUS && peekChar !== TAB3 && peekChar !== TILDE) {
            break;
          }
        }
        i = end - 1;
        let contents = input.slice(start, end);
        let node = contents.trim() === "," ? separator2(contents) : combinator(contents);
        if (parent) {
          parent.nodes.push(node);
        } else {
          ast.push(node);
        }
        break;
      }
      case OPEN_PAREN4: {
        let node = fun2(buffer, []);
        buffer = "";
        if (node.value !== ":not" && node.value !== ":where" && node.value !== ":has" && node.value !== ":is") {
          let start = i + 1;
          let nesting = 0;
          for (let j = i + 1;j < input.length; j++) {
            peekChar = input.charCodeAt(j);
            if (peekChar === OPEN_PAREN4) {
              nesting++;
              continue;
            }
            if (peekChar === CLOSE_PAREN4) {
              if (nesting === 0) {
                i = j;
                break;
              }
              nesting--;
            }
          }
          let end = i;
          node.nodes.push(value2(input.slice(start, end)));
          buffer = "";
          i = end;
          ast.push(node);
          break;
        }
        if (parent) {
          parent.nodes.push(node);
        } else {
          ast.push(node);
        }
        stack.push(node);
        parent = node;
        break;
      }
      case CLOSE_PAREN4: {
        let tail = stack.pop();
        if (buffer.length > 0) {
          let node = selector(buffer);
          tail.nodes.push(node);
          buffer = "";
        }
        if (stack.length > 0) {
          parent = stack[stack.length - 1];
        } else {
          parent = null;
        }
        break;
      }
      case FULL_STOP:
      case COLON3:
      case NUMBER_SIGN: {
        if (buffer.length > 0) {
          let node = selector(buffer);
          if (parent) {
            parent.nodes.push(node);
          } else {
            ast.push(node);
          }
        }
        buffer = String.fromCharCode(currentChar);
        break;
      }
      case OPEN_BRACKET3: {
        if (buffer.length > 0) {
          let node = selector(buffer);
          if (parent) {
            parent.nodes.push(node);
          } else {
            ast.push(node);
          }
        }
        buffer = "";
        let start = i;
        let nesting = 0;
        for (let j = i + 1;j < input.length; j++) {
          peekChar = input.charCodeAt(j);
          if (peekChar === OPEN_BRACKET3) {
            nesting++;
            continue;
          }
          if (peekChar === CLOSE_BRACKET3) {
            if (nesting === 0) {
              i = j;
              break;
            }
            nesting--;
          }
        }
        buffer += input.slice(start, i + 1);
        break;
      }
      case SINGLE_QUOTE4:
      case DOUBLE_QUOTE4: {
        let start = i;
        for (let j = i + 1;j < input.length; j++) {
          peekChar = input.charCodeAt(j);
          if (peekChar === BACKSLASH4) {
            j += 1;
          } else if (peekChar === currentChar) {
            i = j;
            break;
          }
        }
        buffer += input.slice(start, i + 1);
        break;
      }
      case BACKSLASH4: {
        let nextChar = input.charCodeAt(i + 1);
        buffer += String.fromCharCode(currentChar) + String.fromCharCode(nextChar);
        i += 1;
        break;
      }
      default: {
        buffer += String.fromCharCode(currentChar);
      }
    }
  }
  if (buffer.length > 0) {
    ast.push(selector(buffer));
  }
  return ast;
}
var IS_VALID_UTILITY_NAME = /^[a-z@][a-zA-Z0-9/%._-]*$/;
function buildPluginApi({
  designSystem,
  ast,
  resolvedConfig,
  featuresRef,
  referenceMode
}) {
  let api = {
    addBase(css) {
      if (referenceMode)
        return;
      let baseNodes = objectToAst(css);
      featuresRef.current |= substituteFunctions(baseNodes, designSystem);
      ast.push(atRule("@layer", "base", baseNodes));
    },
    addVariant(name, variant) {
      if (typeof variant === "string" || Array.isArray(variant)) {
        designSystem.variants.static(name, (r) => {
          r.nodes = parseVariantValue(variant, r.nodes);
        }, {
          compounds: compoundsForSelectors(typeof variant === "string" ? [variant] : variant)
        });
      } else if (typeof variant === "object") {
        designSystem.variants.fromAst(name, objectToAst(variant));
      }
    },
    matchVariant(name, fn, options) {
      function resolveVariantValue(value3, modifier, nodes) {
        let resolved = fn(value3, { modifier: modifier?.value ?? null });
        return parseVariantValue(resolved, nodes);
      }
      let defaultOptionKeys = Object.keys(options?.values ?? {});
      designSystem.variants.group(() => {
        designSystem.variants.functional(name, (ruleNodes, variant) => {
          if (!variant.value) {
            if (options?.values && "DEFAULT" in options.values) {
              ruleNodes.nodes = resolveVariantValue(options.values.DEFAULT, variant.modifier, ruleNodes.nodes);
              return;
            }
            return null;
          }
          if (variant.value.kind === "arbitrary") {
            ruleNodes.nodes = resolveVariantValue(variant.value.value, variant.modifier, ruleNodes.nodes);
          } else if (variant.value.kind === "named" && options?.values) {
            let defaultValue = options.values[variant.value.value];
            if (typeof defaultValue !== "string") {
              return;
            }
            ruleNodes.nodes = resolveVariantValue(defaultValue, variant.modifier, ruleNodes.nodes);
          }
        });
      }, (a, z) => {
        if (a.kind !== "functional" || z.kind !== "functional") {
          return 0;
        }
        let aValueKey = a.value ? a.value.value : "DEFAULT";
        let zValueKey = z.value ? z.value.value : "DEFAULT";
        let aValue = options?.values?.[aValueKey] ?? aValueKey;
        let zValue = options?.values?.[zValueKey] ?? zValueKey;
        if (options && typeof options.sort === "function") {
          return options.sort({ value: aValue, modifier: a.modifier?.value ?? null }, { value: zValue, modifier: z.modifier?.value ?? null });
        }
        let aOrder = defaultOptionKeys.indexOf(aValueKey);
        let zOrder = defaultOptionKeys.indexOf(zValueKey);
        aOrder = aOrder === -1 ? defaultOptionKeys.length : aOrder;
        zOrder = zOrder === -1 ? defaultOptionKeys.length : zOrder;
        if (aOrder !== zOrder)
          return aOrder - zOrder;
        return aValue < zValue ? -1 : 1;
      });
    },
    addUtilities(utilities) {
      utilities = Array.isArray(utilities) ? utilities : [utilities];
      let entries = utilities.flatMap((u) => Object.entries(u));
      entries = entries.flatMap(([name, css]) => segment(name, ",").map((selector2) => [selector2.trim(), css]));
      let utils = new DefaultMap(() => []);
      for (let [name, css] of entries) {
        if (name.startsWith("@keyframes ")) {
          if (!referenceMode) {
            ast.push(rule(name, objectToAst(css)));
          }
          continue;
        }
        let selectorAst = parse3(name);
        let foundValidUtility = false;
        walk4(selectorAst, (node) => {
          if (node.kind === "selector" && node.value[0] === "." && IS_VALID_UTILITY_NAME.test(node.value.slice(1))) {
            let value3 = node.value;
            node.value = "&";
            let selector2 = toCss3(selectorAst);
            let className = value3.slice(1);
            let contents = selector2 === "&" ? objectToAst(css) : [rule(selector2, objectToAst(css))];
            utils.get(className).push(...contents);
            foundValidUtility = true;
            node.value = value3;
            return;
          }
          if (node.kind === "function" && node.value === ":not") {
            return 1;
          }
        });
        if (!foundValidUtility) {
          throw new Error(`\`addUtilities({ '${name}' : \u2026 })\` defines an invalid utility selector. Utilities must be a single class name and start with a lowercase letter, eg. \`.scrollbar-none\`.`);
        }
      }
      for (let [className, ast2] of utils) {
        if (designSystem.theme.prefix) {
          walk(ast2, (node) => {
            if (node.kind === "rule") {
              let selectorAst = parse3(node.selector);
              walk4(selectorAst, (node2) => {
                if (node2.kind === "selector" && node2.value[0] === ".") {
                  node2.value = `.${designSystem.theme.prefix}\\:${node2.value.slice(1)}`;
                }
              });
              node.selector = toCss3(selectorAst);
            }
          });
        }
        designSystem.utilities.static(className, () => {
          let clonedAst = structuredClone(ast2);
          featuresRef.current |= substituteAtApply(clonedAst, designSystem);
          return clonedAst;
        });
      }
    },
    matchUtilities(utilities, options) {
      let types = options?.type ? Array.isArray(options?.type) ? options.type : [options.type] : ["any"];
      for (let [name, fn] of Object.entries(utilities)) {
        let compileFn = function({ negative }) {
          return (candidate) => {
            if (candidate.value?.kind === "arbitrary" && types.length > 0 && !types.includes("any")) {
              if (candidate.value.dataType && !types.includes(candidate.value.dataType)) {
                return;
              }
              if (!candidate.value.dataType && !inferDataType(candidate.value.value, types)) {
                return;
              }
            }
            let isColor2 = types.includes("color");
            let value3 = null;
            let ignoreModifier = false;
            {
              let values = options?.values ?? {};
              if (isColor2) {
                values = Object.assign({
                  inherit: "inherit",
                  transparent: "transparent",
                  current: "currentColor"
                }, values);
              }
              if (!candidate.value) {
                value3 = values.DEFAULT ?? null;
              } else if (candidate.value.kind === "arbitrary") {
                value3 = candidate.value.value;
              } else if (candidate.value.fraction && values[candidate.value.fraction]) {
                value3 = values[candidate.value.fraction];
                ignoreModifier = true;
              } else if (values[candidate.value.value]) {
                value3 = values[candidate.value.value];
              } else if (values.__BARE_VALUE__) {
                value3 = values.__BARE_VALUE__(candidate.value) ?? null;
                ignoreModifier = (candidate.value.fraction !== null && value3?.includes("/")) ?? false;
              }
            }
            if (value3 === null)
              return;
            let modifier;
            {
              let modifiers = options?.modifiers ?? null;
              if (!candidate.modifier) {
                modifier = null;
              } else if (modifiers === "any" || candidate.modifier.kind === "arbitrary") {
                modifier = candidate.modifier.value;
              } else if (modifiers?.[candidate.modifier.value]) {
                modifier = modifiers[candidate.modifier.value];
              } else if (isColor2 && !Number.isNaN(Number(candidate.modifier.value))) {
                modifier = `${candidate.modifier.value}%`;
              } else {
                modifier = null;
              }
            }
            if (candidate.modifier && modifier === null && !ignoreModifier) {
              return candidate.value?.kind === "arbitrary" ? null : undefined;
            }
            if (isColor2 && modifier !== null) {
              value3 = withAlpha(value3, modifier);
            }
            if (negative) {
              value3 = `calc(${value3} * -1)`;
            }
            let ast2 = objectToAst(fn(value3, { modifier }));
            featuresRef.current |= substituteAtApply(ast2, designSystem);
            return ast2;
          };
        };
        if (!IS_VALID_UTILITY_NAME.test(name)) {
          throw new Error(`\`matchUtilities({ '${name}' : \u2026 })\` defines an invalid utility name. Utilities should be alphanumeric and start with a lowercase letter, eg. \`scrollbar\`.`);
        }
        if (options?.supportsNegativeValues) {
          designSystem.utilities.functional(`-${name}`, compileFn({ negative: true }), { types });
        }
        designSystem.utilities.functional(name, compileFn({ negative: false }), { types });
        designSystem.utilities.suggest(name, () => {
          let values = options?.values ?? {};
          let valueKeys = new Set(Object.keys(values));
          valueKeys.delete("__BARE_VALUE__");
          if (valueKeys.has("DEFAULT")) {
            valueKeys.delete("DEFAULT");
            valueKeys.add(null);
          }
          let modifiers = options?.modifiers ?? {};
          let modifierKeys = modifiers === "any" ? [] : Object.keys(modifiers);
          return [
            {
              supportsNegative: options?.supportsNegativeValues ?? false,
              values: Array.from(valueKeys),
              modifiers: modifierKeys
            }
          ];
        });
      }
    },
    addComponents(components, options) {
      this.addUtilities(components, options);
    },
    matchComponents(components, options) {
      this.matchUtilities(components, options);
    },
    theme: createThemeFn(designSystem, () => resolvedConfig.theme ?? {}, (value3) => value3),
    prefix(className) {
      return className;
    },
    config(path4, defaultValue) {
      let obj = resolvedConfig;
      if (!path4)
        return obj;
      let keypath = toKeyPath(path4);
      for (let i = 0;i < keypath.length; ++i) {
        let key = keypath[i];
        if (obj[key] === undefined)
          return defaultValue;
        obj = obj[key];
      }
      return obj ?? defaultValue;
    }
  };
  api.addComponents = api.addComponents.bind(api);
  api.matchComponents = api.matchComponents.bind(api);
  return api;
}
function objectToAst(rules) {
  let ast = [];
  rules = Array.isArray(rules) ? rules : [rules];
  let entries = rules.flatMap((rule2) => Object.entries(rule2));
  for (let [name, value3] of entries) {
    if (typeof value3 !== "object") {
      if (!name.startsWith("--") && value3 === "@slot") {
        ast.push(rule(name, [atRule("@slot")]));
      } else {
        name = name.replace(/([A-Z])/g, "-$1").toLowerCase();
        ast.push(decl(name, String(value3)));
      }
    } else if (Array.isArray(value3)) {
      for (let item of value3) {
        if (typeof item === "string") {
          ast.push(decl(name, item));
        } else {
          ast.push(rule(name, objectToAst(item)));
        }
      }
    } else if (value3 !== null) {
      ast.push(rule(name, objectToAst(value3)));
    }
  }
  return ast;
}
function parseVariantValue(resolved, nodes) {
  let resolvedArray = typeof resolved === "string" ? [resolved] : resolved;
  return resolvedArray.flatMap((r) => {
    if (r.trim().endsWith("}")) {
      let updatedCSS = r.replace("}", "{@slot}}");
      let ast = parse(updatedCSS);
      substituteAtSlot(ast, nodes);
      return ast;
    } else {
      return rule(r, nodes);
    }
  });
}
function applyKeyframesToTheme(designSystem, resolvedConfig, replacedThemeKeys) {
  for (let rule2 of keyframesToRules(resolvedConfig)) {
    designSystem.theme.addKeyframes(rule2);
  }
}
function keyframesToRules(resolvedConfig) {
  let rules = [];
  if ("keyframes" in resolvedConfig.theme) {
    for (let [name, keyframe] of Object.entries(resolvedConfig.theme.keyframes)) {
      rules.push(atRule("@keyframes", name, objectToAst(keyframe)));
    }
  }
  return rules;
}
var colors_default = {
  inherit: "inherit",
  current: "currentColor",
  transparent: "transparent",
  black: "#000",
  white: "#fff",
  slate: {
    "50": "oklch(0.984 0.003 247.858)",
    "100": "oklch(0.968 0.007 247.896)",
    "200": "oklch(0.929 0.013 255.508)",
    "300": "oklch(0.869 0.022 252.894)",
    "400": "oklch(0.704 0.04 256.788)",
    "500": "oklch(0.554 0.046 257.417)",
    "600": "oklch(0.446 0.043 257.281)",
    "700": "oklch(0.372 0.044 257.287)",
    "800": "oklch(0.279 0.041 260.031)",
    "900": "oklch(0.208 0.042 265.755)",
    "950": "oklch(0.129 0.042 264.695)"
  },
  gray: {
    "50": "oklch(0.985 0.002 247.839)",
    "100": "oklch(0.967 0.003 264.542)",
    "200": "oklch(0.928 0.006 264.531)",
    "300": "oklch(0.872 0.01 258.338)",
    "400": "oklch(0.707 0.022 261.325)",
    "500": "oklch(0.551 0.027 264.364)",
    "600": "oklch(0.446 0.03 256.802)",
    "700": "oklch(0.373 0.034 259.733)",
    "800": "oklch(0.278 0.033 256.848)",
    "900": "oklch(0.21 0.034 264.665)",
    "950": "oklch(0.13 0.028 261.692)"
  },
  zinc: {
    "50": "oklch(0.985 0 0)",
    "100": "oklch(0.967 0.001 286.375)",
    "200": "oklch(0.92 0.004 286.32)",
    "300": "oklch(0.871 0.006 286.286)",
    "400": "oklch(0.705 0.015 286.067)",
    "500": "oklch(0.552 0.016 285.938)",
    "600": "oklch(0.442 0.017 285.786)",
    "700": "oklch(0.37 0.013 285.805)",
    "800": "oklch(0.274 0.006 286.033)",
    "900": "oklch(0.21 0.006 285.885)",
    "950": "oklch(0.141 0.005 285.823)"
  },
  neutral: {
    "50": "oklch(0.985 0 0)",
    "100": "oklch(0.97 0 0)",
    "200": "oklch(0.922 0 0)",
    "300": "oklch(0.87 0 0)",
    "400": "oklch(0.708 0 0)",
    "500": "oklch(0.556 0 0)",
    "600": "oklch(0.439 0 0)",
    "700": "oklch(0.371 0 0)",
    "800": "oklch(0.269 0 0)",
    "900": "oklch(0.205 0 0)",
    "950": "oklch(0.145 0 0)"
  },
  stone: {
    "50": "oklch(0.985 0.001 106.423)",
    "100": "oklch(0.97 0.001 106.424)",
    "200": "oklch(0.923 0.003 48.717)",
    "300": "oklch(0.869 0.005 56.366)",
    "400": "oklch(0.709 0.01 56.259)",
    "500": "oklch(0.553 0.013 58.071)",
    "600": "oklch(0.444 0.011 73.639)",
    "700": "oklch(0.374 0.01 67.558)",
    "800": "oklch(0.268 0.007 34.298)",
    "900": "oklch(0.216 0.006 56.043)",
    "950": "oklch(0.147 0.004 49.25)"
  },
  red: {
    "50": "oklch(0.971 0.013 17.38)",
    "100": "oklch(0.936 0.032 17.717)",
    "200": "oklch(0.885 0.062 18.334)",
    "300": "oklch(0.808 0.114 19.571)",
    "400": "oklch(0.704 0.191 22.216)",
    "500": "oklch(0.637 0.237 25.331)",
    "600": "oklch(0.577 0.245 27.325)",
    "700": "oklch(0.505 0.213 27.518)",
    "800": "oklch(0.444 0.177 26.899)",
    "900": "oklch(0.396 0.141 25.723)",
    "950": "oklch(0.258 0.092 26.042)"
  },
  orange: {
    "50": "oklch(0.98 0.016 73.684)",
    "100": "oklch(0.954 0.038 75.164)",
    "200": "oklch(0.901 0.076 70.697)",
    "300": "oklch(0.837 0.128 66.29)",
    "400": "oklch(0.75 0.183 55.934)",
    "500": "oklch(0.705 0.213 47.604)",
    "600": "oklch(0.646 0.222 41.116)",
    "700": "oklch(0.553 0.195 38.402)",
    "800": "oklch(0.47 0.157 37.304)",
    "900": "oklch(0.408 0.123 38.172)",
    "950": "oklch(0.266 0.079 36.259)"
  },
  amber: {
    "50": "oklch(0.987 0.022 95.277)",
    "100": "oklch(0.962 0.059 95.617)",
    "200": "oklch(0.924 0.12 95.746)",
    "300": "oklch(0.879 0.169 91.605)",
    "400": "oklch(0.828 0.189 84.429)",
    "500": "oklch(0.769 0.188 70.08)",
    "600": "oklch(0.666 0.179 58.318)",
    "700": "oklch(0.555 0.163 48.998)",
    "800": "oklch(0.473 0.137 46.201)",
    "900": "oklch(0.414 0.112 45.904)",
    "950": "oklch(0.279 0.077 45.635)"
  },
  yellow: {
    "50": "oklch(0.987 0.026 102.212)",
    "100": "oklch(0.973 0.071 103.193)",
    "200": "oklch(0.945 0.129 101.54)",
    "300": "oklch(0.905 0.182 98.111)",
    "400": "oklch(0.852 0.199 91.936)",
    "500": "oklch(0.795 0.184 86.047)",
    "600": "oklch(0.681 0.162 75.834)",
    "700": "oklch(0.554 0.135 66.442)",
    "800": "oklch(0.476 0.114 61.907)",
    "900": "oklch(0.421 0.095 57.708)",
    "950": "oklch(0.286 0.066 53.813)"
  },
  lime: {
    "50": "oklch(0.986 0.031 120.757)",
    "100": "oklch(0.967 0.067 122.328)",
    "200": "oklch(0.938 0.127 124.321)",
    "300": "oklch(0.897 0.196 126.665)",
    "400": "oklch(0.841 0.238 128.85)",
    "500": "oklch(0.768 0.233 130.85)",
    "600": "oklch(0.648 0.2 131.684)",
    "700": "oklch(0.532 0.157 131.589)",
    "800": "oklch(0.453 0.124 130.933)",
    "900": "oklch(0.405 0.101 131.063)",
    "950": "oklch(0.274 0.072 132.109)"
  },
  green: {
    "50": "oklch(0.982 0.018 155.826)",
    "100": "oklch(0.962 0.044 156.743)",
    "200": "oklch(0.925 0.084 155.995)",
    "300": "oklch(0.871 0.15 154.449)",
    "400": "oklch(0.792 0.209 151.711)",
    "500": "oklch(0.723 0.219 149.579)",
    "600": "oklch(0.627 0.194 149.214)",
    "700": "oklch(0.527 0.154 150.069)",
    "800": "oklch(0.448 0.119 151.328)",
    "900": "oklch(0.393 0.095 152.535)",
    "950": "oklch(0.266 0.065 152.934)"
  },
  emerald: {
    "50": "oklch(0.979 0.021 166.113)",
    "100": "oklch(0.95 0.052 163.051)",
    "200": "oklch(0.905 0.093 164.15)",
    "300": "oklch(0.845 0.143 164.978)",
    "400": "oklch(0.765 0.177 163.223)",
    "500": "oklch(0.696 0.17 162.48)",
    "600": "oklch(0.596 0.145 163.225)",
    "700": "oklch(0.508 0.118 165.612)",
    "800": "oklch(0.432 0.095 166.913)",
    "900": "oklch(0.378 0.077 168.94)",
    "950": "oklch(0.262 0.051 172.552)"
  },
  teal: {
    "50": "oklch(0.984 0.014 180.72)",
    "100": "oklch(0.953 0.051 180.801)",
    "200": "oklch(0.91 0.096 180.426)",
    "300": "oklch(0.855 0.138 181.071)",
    "400": "oklch(0.777 0.152 181.912)",
    "500": "oklch(0.704 0.14 182.503)",
    "600": "oklch(0.6 0.118 184.704)",
    "700": "oklch(0.511 0.096 186.391)",
    "800": "oklch(0.437 0.078 188.216)",
    "900": "oklch(0.386 0.063 188.416)",
    "950": "oklch(0.277 0.046 192.524)"
  },
  cyan: {
    "50": "oklch(0.984 0.019 200.873)",
    "100": "oklch(0.956 0.045 203.388)",
    "200": "oklch(0.917 0.08 205.041)",
    "300": "oklch(0.865 0.127 207.078)",
    "400": "oklch(0.789 0.154 211.53)",
    "500": "oklch(0.715 0.143 215.221)",
    "600": "oklch(0.609 0.126 221.723)",
    "700": "oklch(0.52 0.105 223.128)",
    "800": "oklch(0.45 0.085 224.283)",
    "900": "oklch(0.398 0.07 227.392)",
    "950": "oklch(0.302 0.056 229.695)"
  },
  sky: {
    "50": "oklch(0.977 0.013 236.62)",
    "100": "oklch(0.951 0.026 236.824)",
    "200": "oklch(0.901 0.058 230.902)",
    "300": "oklch(0.828 0.111 230.318)",
    "400": "oklch(0.746 0.16 232.661)",
    "500": "oklch(0.685 0.169 237.323)",
    "600": "oklch(0.588 0.158 241.966)",
    "700": "oklch(0.5 0.134 242.749)",
    "800": "oklch(0.443 0.11 240.79)",
    "900": "oklch(0.391 0.09 240.876)",
    "950": "oklch(0.293 0.066 243.157)"
  },
  blue: {
    "50": "oklch(0.97 0.014 254.604)",
    "100": "oklch(0.932 0.032 255.585)",
    "200": "oklch(0.882 0.059 254.128)",
    "300": "oklch(0.809 0.105 251.813)",
    "400": "oklch(0.707 0.165 254.624)",
    "500": "oklch(0.623 0.214 259.815)",
    "600": "oklch(0.546 0.245 262.881)",
    "700": "oklch(0.488 0.243 264.376)",
    "800": "oklch(0.424 0.199 265.638)",
    "900": "oklch(0.379 0.146 265.522)",
    "950": "oklch(0.282 0.091 267.935)"
  },
  indigo: {
    "50": "oklch(0.962 0.018 272.314)",
    "100": "oklch(0.93 0.034 272.788)",
    "200": "oklch(0.87 0.065 274.039)",
    "300": "oklch(0.785 0.115 274.713)",
    "400": "oklch(0.673 0.182 276.935)",
    "500": "oklch(0.585 0.233 277.117)",
    "600": "oklch(0.511 0.262 276.966)",
    "700": "oklch(0.457 0.24 277.023)",
    "800": "oklch(0.398 0.195 277.366)",
    "900": "oklch(0.359 0.144 278.697)",
    "950": "oklch(0.257 0.09 281.288)"
  },
  violet: {
    "50": "oklch(0.969 0.016 293.756)",
    "100": "oklch(0.943 0.029 294.588)",
    "200": "oklch(0.894 0.057 293.283)",
    "300": "oklch(0.811 0.111 293.571)",
    "400": "oklch(0.702 0.183 293.541)",
    "500": "oklch(0.606 0.25 292.717)",
    "600": "oklch(0.541 0.281 293.009)",
    "700": "oklch(0.491 0.27 292.581)",
    "800": "oklch(0.432 0.232 292.759)",
    "900": "oklch(0.38 0.189 293.745)",
    "950": "oklch(0.283 0.141 291.089)"
  },
  purple: {
    "50": "oklch(0.977 0.014 308.299)",
    "100": "oklch(0.946 0.033 307.174)",
    "200": "oklch(0.902 0.063 306.703)",
    "300": "oklch(0.827 0.119 306.383)",
    "400": "oklch(0.714 0.203 305.504)",
    "500": "oklch(0.627 0.265 303.9)",
    "600": "oklch(0.558 0.288 302.321)",
    "700": "oklch(0.496 0.265 301.924)",
    "800": "oklch(0.438 0.218 303.724)",
    "900": "oklch(0.381 0.176 304.987)",
    "950": "oklch(0.291 0.149 302.717)"
  },
  fuchsia: {
    "50": "oklch(0.977 0.017 320.058)",
    "100": "oklch(0.952 0.037 318.852)",
    "200": "oklch(0.903 0.076 319.62)",
    "300": "oklch(0.833 0.145 321.434)",
    "400": "oklch(0.74 0.238 322.16)",
    "500": "oklch(0.667 0.295 322.15)",
    "600": "oklch(0.591 0.293 322.896)",
    "700": "oklch(0.518 0.253 323.949)",
    "800": "oklch(0.452 0.211 324.591)",
    "900": "oklch(0.401 0.17 325.612)",
    "950": "oklch(0.293 0.136 325.661)"
  },
  pink: {
    "50": "oklch(0.971 0.014 343.198)",
    "100": "oklch(0.948 0.028 342.258)",
    "200": "oklch(0.899 0.061 343.231)",
    "300": "oklch(0.823 0.12 346.018)",
    "400": "oklch(0.718 0.202 349.761)",
    "500": "oklch(0.656 0.241 354.308)",
    "600": "oklch(0.592 0.249 0.584)",
    "700": "oklch(0.525 0.223 3.958)",
    "800": "oklch(0.459 0.187 3.815)",
    "900": "oklch(0.408 0.153 2.432)",
    "950": "oklch(0.284 0.109 3.907)"
  },
  rose: {
    "50": "oklch(0.969 0.015 12.422)",
    "100": "oklch(0.941 0.03 12.58)",
    "200": "oklch(0.892 0.058 10.001)",
    "300": "oklch(0.81 0.117 11.638)",
    "400": "oklch(0.712 0.194 13.428)",
    "500": "oklch(0.645 0.246 16.439)",
    "600": "oklch(0.586 0.253 17.585)",
    "700": "oklch(0.514 0.222 16.935)",
    "800": "oklch(0.455 0.188 13.697)",
    "900": "oklch(0.41 0.159 10.272)",
    "950": "oklch(0.271 0.105 12.094)"
  }
};
function bareValues(fn) {
  return {
    __BARE_VALUE__: fn
  };
}
var bareIntegers = bareValues((value3) => {
  if (isPositiveInteger(value3.value)) {
    return value3.value;
  }
});
var barePercentages = bareValues((value3) => {
  if (isPositiveInteger(value3.value)) {
    return `${value3.value}%`;
  }
});
var barePixels = bareValues((value3) => {
  if (isPositiveInteger(value3.value)) {
    return `${value3.value}px`;
  }
});
var bareMilliseconds = bareValues((value3) => {
  if (isPositiveInteger(value3.value)) {
    return `${value3.value}ms`;
  }
});
var bareDegrees = bareValues((value3) => {
  if (isPositiveInteger(value3.value)) {
    return `${value3.value}deg`;
  }
});
var bareAspectRatio = bareValues((value3) => {
  if (value3.fraction === null)
    return;
  let [lhs, rhs] = segment(value3.fraction, "/");
  if (!isPositiveInteger(lhs) || !isPositiveInteger(rhs))
    return;
  return value3.fraction;
});
var bareRepeatValues = bareValues((value3) => {
  if (isPositiveInteger(Number(value3.value))) {
    return `repeat(${value3.value}, minmax(0, 1fr))`;
  }
});
var default_theme_default = {
  accentColor: ({ theme: theme2 }) => theme2("colors"),
  animation: {
    none: "none",
    spin: "spin 1s linear infinite",
    ping: "ping 1s cubic-bezier(0, 0, 0.2, 1) infinite",
    pulse: "pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",
    bounce: "bounce 1s infinite"
  },
  aria: {
    busy: 'busy="true"',
    checked: 'checked="true"',
    disabled: 'disabled="true"',
    expanded: 'expanded="true"',
    hidden: 'hidden="true"',
    pressed: 'pressed="true"',
    readonly: 'readonly="true"',
    required: 'required="true"',
    selected: 'selected="true"'
  },
  aspectRatio: {
    auto: "auto",
    square: "1 / 1",
    video: "16 / 9",
    ...bareAspectRatio
  },
  backdropBlur: ({ theme: theme2 }) => theme2("blur"),
  backdropBrightness: ({ theme: theme2 }) => ({
    ...theme2("brightness"),
    ...barePercentages
  }),
  backdropContrast: ({ theme: theme2 }) => ({
    ...theme2("contrast"),
    ...barePercentages
  }),
  backdropGrayscale: ({ theme: theme2 }) => ({
    ...theme2("grayscale"),
    ...barePercentages
  }),
  backdropHueRotate: ({ theme: theme2 }) => ({
    ...theme2("hueRotate"),
    ...bareDegrees
  }),
  backdropInvert: ({ theme: theme2 }) => ({
    ...theme2("invert"),
    ...barePercentages
  }),
  backdropOpacity: ({ theme: theme2 }) => ({
    ...theme2("opacity"),
    ...barePercentages
  }),
  backdropSaturate: ({ theme: theme2 }) => ({
    ...theme2("saturate"),
    ...barePercentages
  }),
  backdropSepia: ({ theme: theme2 }) => ({
    ...theme2("sepia"),
    ...barePercentages
  }),
  backgroundColor: ({ theme: theme2 }) => theme2("colors"),
  backgroundImage: {
    none: "none",
    "gradient-to-t": "linear-gradient(to top, var(--tw-gradient-stops))",
    "gradient-to-tr": "linear-gradient(to top right, var(--tw-gradient-stops))",
    "gradient-to-r": "linear-gradient(to right, var(--tw-gradient-stops))",
    "gradient-to-br": "linear-gradient(to bottom right, var(--tw-gradient-stops))",
    "gradient-to-b": "linear-gradient(to bottom, var(--tw-gradient-stops))",
    "gradient-to-bl": "linear-gradient(to bottom left, var(--tw-gradient-stops))",
    "gradient-to-l": "linear-gradient(to left, var(--tw-gradient-stops))",
    "gradient-to-tl": "linear-gradient(to top left, var(--tw-gradient-stops))"
  },
  backgroundOpacity: ({ theme: theme2 }) => theme2("opacity"),
  backgroundPosition: {
    bottom: "bottom",
    center: "center",
    left: "left",
    "left-bottom": "left bottom",
    "left-top": "left top",
    right: "right",
    "right-bottom": "right bottom",
    "right-top": "right top",
    top: "top"
  },
  backgroundSize: {
    auto: "auto",
    cover: "cover",
    contain: "contain"
  },
  blur: {
    0: "0",
    none: "",
    sm: "4px",
    DEFAULT: "8px",
    md: "12px",
    lg: "16px",
    xl: "24px",
    "2xl": "40px",
    "3xl": "64px"
  },
  borderColor: ({ theme: theme2 }) => ({
    DEFAULT: "currentColor",
    ...theme2("colors")
  }),
  borderOpacity: ({ theme: theme2 }) => theme2("opacity"),
  borderRadius: {
    none: "0px",
    sm: "0.125rem",
    DEFAULT: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    "2xl": "1rem",
    "3xl": "1.5rem",
    full: "9999px"
  },
  borderSpacing: ({ theme: theme2 }) => theme2("spacing"),
  borderWidth: {
    DEFAULT: "1px",
    0: "0px",
    2: "2px",
    4: "4px",
    8: "8px",
    ...barePixels
  },
  boxShadow: {
    sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
    DEFAULT: "0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",
    md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
    lg: "0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
    xl: "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)",
    "2xl": "0 25px 50px -12px rgb(0 0 0 / 0.25)",
    inner: "inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",
    none: "none"
  },
  boxShadowColor: ({ theme: theme2 }) => theme2("colors"),
  brightness: {
    0: "0",
    50: ".5",
    75: ".75",
    90: ".9",
    95: ".95",
    100: "1",
    105: "1.05",
    110: "1.1",
    125: "1.25",
    150: "1.5",
    200: "2",
    ...barePercentages
  },
  caretColor: ({ theme: theme2 }) => theme2("colors"),
  colors: () => ({ ...colors_default }),
  columns: {
    auto: "auto",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    10: "10",
    11: "11",
    12: "12",
    "3xs": "16rem",
    "2xs": "18rem",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem",
    ...bareIntegers
  },
  container: {},
  content: {
    none: "none"
  },
  contrast: {
    0: "0",
    50: ".5",
    75: ".75",
    100: "1",
    125: "1.25",
    150: "1.5",
    200: "2",
    ...barePercentages
  },
  cursor: {
    auto: "auto",
    default: "default",
    pointer: "pointer",
    wait: "wait",
    text: "text",
    move: "move",
    help: "help",
    "not-allowed": "not-allowed",
    none: "none",
    "context-menu": "context-menu",
    progress: "progress",
    cell: "cell",
    crosshair: "crosshair",
    "vertical-text": "vertical-text",
    alias: "alias",
    copy: "copy",
    "no-drop": "no-drop",
    grab: "grab",
    grabbing: "grabbing",
    "all-scroll": "all-scroll",
    "col-resize": "col-resize",
    "row-resize": "row-resize",
    "n-resize": "n-resize",
    "e-resize": "e-resize",
    "s-resize": "s-resize",
    "w-resize": "w-resize",
    "ne-resize": "ne-resize",
    "nw-resize": "nw-resize",
    "se-resize": "se-resize",
    "sw-resize": "sw-resize",
    "ew-resize": "ew-resize",
    "ns-resize": "ns-resize",
    "nesw-resize": "nesw-resize",
    "nwse-resize": "nwse-resize",
    "zoom-in": "zoom-in",
    "zoom-out": "zoom-out"
  },
  divideColor: ({ theme: theme2 }) => theme2("borderColor"),
  divideOpacity: ({ theme: theme2 }) => theme2("borderOpacity"),
  divideWidth: ({ theme: theme2 }) => ({
    ...theme2("borderWidth"),
    ...barePixels
  }),
  dropShadow: {
    sm: "0 1px 1px rgb(0 0 0 / 0.05)",
    DEFAULT: ["0 1px 2px rgb(0 0 0 / 0.1)", "0 1px 1px rgb(0 0 0 / 0.06)"],
    md: ["0 4px 3px rgb(0 0 0 / 0.07)", "0 2px 2px rgb(0 0 0 / 0.06)"],
    lg: ["0 10px 8px rgb(0 0 0 / 0.04)", "0 4px 3px rgb(0 0 0 / 0.1)"],
    xl: ["0 20px 13px rgb(0 0 0 / 0.03)", "0 8px 5px rgb(0 0 0 / 0.08)"],
    "2xl": "0 25px 25px rgb(0 0 0 / 0.15)",
    none: "0 0 #0000"
  },
  fill: ({ theme: theme2 }) => theme2("colors"),
  flex: {
    1: "1 1 0%",
    auto: "1 1 auto",
    initial: "0 1 auto",
    none: "none"
  },
  flexBasis: ({ theme: theme2 }) => ({
    auto: "auto",
    "1/2": "50%",
    "1/3": "33.333333%",
    "2/3": "66.666667%",
    "1/4": "25%",
    "2/4": "50%",
    "3/4": "75%",
    "1/5": "20%",
    "2/5": "40%",
    "3/5": "60%",
    "4/5": "80%",
    "1/6": "16.666667%",
    "2/6": "33.333333%",
    "3/6": "50%",
    "4/6": "66.666667%",
    "5/6": "83.333333%",
    "1/12": "8.333333%",
    "2/12": "16.666667%",
    "3/12": "25%",
    "4/12": "33.333333%",
    "5/12": "41.666667%",
    "6/12": "50%",
    "7/12": "58.333333%",
    "8/12": "66.666667%",
    "9/12": "75%",
    "10/12": "83.333333%",
    "11/12": "91.666667%",
    full: "100%",
    ...theme2("spacing")
  }),
  flexGrow: {
    0: "0",
    DEFAULT: "1",
    ...bareIntegers
  },
  flexShrink: {
    0: "0",
    DEFAULT: "1",
    ...bareIntegers
  },
  fontFamily: {
    sans: [
      "ui-sans-serif",
      "system-ui",
      "sans-serif",
      '"Apple Color Emoji"',
      '"Segoe UI Emoji"',
      '"Segoe UI Symbol"',
      '"Noto Color Emoji"'
    ],
    serif: ["ui-serif", "Georgia", "Cambria", '"Times New Roman"', "Times", "serif"],
    mono: [
      "ui-monospace",
      "SFMono-Regular",
      "Menlo",
      "Monaco",
      "Consolas",
      '"Liberation Mono"',
      '"Courier New"',
      "monospace"
    ]
  },
  fontSize: {
    xs: ["0.75rem", { lineHeight: "1rem" }],
    sm: ["0.875rem", { lineHeight: "1.25rem" }],
    base: ["1rem", { lineHeight: "1.5rem" }],
    lg: ["1.125rem", { lineHeight: "1.75rem" }],
    xl: ["1.25rem", { lineHeight: "1.75rem" }],
    "2xl": ["1.5rem", { lineHeight: "2rem" }],
    "3xl": ["1.875rem", { lineHeight: "2.25rem" }],
    "4xl": ["2.25rem", { lineHeight: "2.5rem" }],
    "5xl": ["3rem", { lineHeight: "1" }],
    "6xl": ["3.75rem", { lineHeight: "1" }],
    "7xl": ["4.5rem", { lineHeight: "1" }],
    "8xl": ["6rem", { lineHeight: "1" }],
    "9xl": ["8rem", { lineHeight: "1" }]
  },
  fontWeight: {
    thin: "100",
    extralight: "200",
    light: "300",
    normal: "400",
    medium: "500",
    semibold: "600",
    bold: "700",
    extrabold: "800",
    black: "900"
  },
  gap: ({ theme: theme2 }) => theme2("spacing"),
  gradientColorStops: ({ theme: theme2 }) => theme2("colors"),
  gradientColorStopPositions: {
    "0%": "0%",
    "5%": "5%",
    "10%": "10%",
    "15%": "15%",
    "20%": "20%",
    "25%": "25%",
    "30%": "30%",
    "35%": "35%",
    "40%": "40%",
    "45%": "45%",
    "50%": "50%",
    "55%": "55%",
    "60%": "60%",
    "65%": "65%",
    "70%": "70%",
    "75%": "75%",
    "80%": "80%",
    "85%": "85%",
    "90%": "90%",
    "95%": "95%",
    "100%": "100%",
    ...barePercentages
  },
  grayscale: {
    0: "0",
    DEFAULT: "100%",
    ...barePercentages
  },
  gridAutoColumns: {
    auto: "auto",
    min: "min-content",
    max: "max-content",
    fr: "minmax(0, 1fr)"
  },
  gridAutoRows: {
    auto: "auto",
    min: "min-content",
    max: "max-content",
    fr: "minmax(0, 1fr)"
  },
  gridColumn: {
    auto: "auto",
    "span-1": "span 1 / span 1",
    "span-2": "span 2 / span 2",
    "span-3": "span 3 / span 3",
    "span-4": "span 4 / span 4",
    "span-5": "span 5 / span 5",
    "span-6": "span 6 / span 6",
    "span-7": "span 7 / span 7",
    "span-8": "span 8 / span 8",
    "span-9": "span 9 / span 9",
    "span-10": "span 10 / span 10",
    "span-11": "span 11 / span 11",
    "span-12": "span 12 / span 12",
    "span-full": "1 / -1"
  },
  gridColumnEnd: {
    auto: "auto",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    10: "10",
    11: "11",
    12: "12",
    13: "13",
    ...bareIntegers
  },
  gridColumnStart: {
    auto: "auto",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    10: "10",
    11: "11",
    12: "12",
    13: "13",
    ...bareIntegers
  },
  gridRow: {
    auto: "auto",
    "span-1": "span 1 / span 1",
    "span-2": "span 2 / span 2",
    "span-3": "span 3 / span 3",
    "span-4": "span 4 / span 4",
    "span-5": "span 5 / span 5",
    "span-6": "span 6 / span 6",
    "span-7": "span 7 / span 7",
    "span-8": "span 8 / span 8",
    "span-9": "span 9 / span 9",
    "span-10": "span 10 / span 10",
    "span-11": "span 11 / span 11",
    "span-12": "span 12 / span 12",
    "span-full": "1 / -1"
  },
  gridRowEnd: {
    auto: "auto",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    10: "10",
    11: "11",
    12: "12",
    13: "13",
    ...bareIntegers
  },
  gridRowStart: {
    auto: "auto",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    10: "10",
    11: "11",
    12: "12",
    13: "13",
    ...bareIntegers
  },
  gridTemplateColumns: {
    none: "none",
    subgrid: "subgrid",
    1: "repeat(1, minmax(0, 1fr))",
    2: "repeat(2, minmax(0, 1fr))",
    3: "repeat(3, minmax(0, 1fr))",
    4: "repeat(4, minmax(0, 1fr))",
    5: "repeat(5, minmax(0, 1fr))",
    6: "repeat(6, minmax(0, 1fr))",
    7: "repeat(7, minmax(0, 1fr))",
    8: "repeat(8, minmax(0, 1fr))",
    9: "repeat(9, minmax(0, 1fr))",
    10: "repeat(10, minmax(0, 1fr))",
    11: "repeat(11, minmax(0, 1fr))",
    12: "repeat(12, minmax(0, 1fr))",
    ...bareRepeatValues
  },
  gridTemplateRows: {
    none: "none",
    subgrid: "subgrid",
    1: "repeat(1, minmax(0, 1fr))",
    2: "repeat(2, minmax(0, 1fr))",
    3: "repeat(3, minmax(0, 1fr))",
    4: "repeat(4, minmax(0, 1fr))",
    5: "repeat(5, minmax(0, 1fr))",
    6: "repeat(6, minmax(0, 1fr))",
    7: "repeat(7, minmax(0, 1fr))",
    8: "repeat(8, minmax(0, 1fr))",
    9: "repeat(9, minmax(0, 1fr))",
    10: "repeat(10, minmax(0, 1fr))",
    11: "repeat(11, minmax(0, 1fr))",
    12: "repeat(12, minmax(0, 1fr))",
    ...bareRepeatValues
  },
  height: ({ theme: theme2 }) => ({
    auto: "auto",
    "1/2": "50%",
    "1/3": "33.333333%",
    "2/3": "66.666667%",
    "1/4": "25%",
    "2/4": "50%",
    "3/4": "75%",
    "1/5": "20%",
    "2/5": "40%",
    "3/5": "60%",
    "4/5": "80%",
    "1/6": "16.666667%",
    "2/6": "33.333333%",
    "3/6": "50%",
    "4/6": "66.666667%",
    "5/6": "83.333333%",
    full: "100%",
    screen: "100vh",
    svh: "100svh",
    lvh: "100lvh",
    dvh: "100dvh",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    ...theme2("spacing")
  }),
  hueRotate: {
    0: "0deg",
    15: "15deg",
    30: "30deg",
    60: "60deg",
    90: "90deg",
    180: "180deg",
    ...bareDegrees
  },
  inset: ({ theme: theme2 }) => ({
    auto: "auto",
    "1/2": "50%",
    "1/3": "33.333333%",
    "2/3": "66.666667%",
    "1/4": "25%",
    "2/4": "50%",
    "3/4": "75%",
    full: "100%",
    ...theme2("spacing")
  }),
  invert: {
    0: "0",
    DEFAULT: "100%",
    ...barePercentages
  },
  keyframes: {
    spin: {
      to: {
        transform: "rotate(360deg)"
      }
    },
    ping: {
      "75%, 100%": {
        transform: "scale(2)",
        opacity: "0"
      }
    },
    pulse: {
      "50%": {
        opacity: ".5"
      }
    },
    bounce: {
      "0%, 100%": {
        transform: "translateY(-25%)",
        animationTimingFunction: "cubic-bezier(0.8,0,1,1)"
      },
      "50%": {
        transform: "none",
        animationTimingFunction: "cubic-bezier(0,0,0.2,1)"
      }
    }
  },
  letterSpacing: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0em",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeight: {
    none: "1",
    tight: "1.25",
    snug: "1.375",
    normal: "1.5",
    relaxed: "1.625",
    loose: "2",
    3: ".75rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem"
  },
  listStyleType: {
    none: "none",
    disc: "disc",
    decimal: "decimal"
  },
  listStyleImage: {
    none: "none"
  },
  margin: ({ theme: theme2 }) => ({
    auto: "auto",
    ...theme2("spacing")
  }),
  lineClamp: {
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    ...bareIntegers
  },
  maxHeight: ({ theme: theme2 }) => ({
    none: "none",
    full: "100%",
    screen: "100vh",
    svh: "100svh",
    lvh: "100lvh",
    dvh: "100dvh",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    ...theme2("spacing")
  }),
  maxWidth: ({ theme: theme2 }) => ({
    none: "none",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem",
    full: "100%",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    prose: "65ch",
    ...theme2("spacing")
  }),
  minHeight: ({ theme: theme2 }) => ({
    full: "100%",
    screen: "100vh",
    svh: "100svh",
    lvh: "100lvh",
    dvh: "100dvh",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    ...theme2("spacing")
  }),
  minWidth: ({ theme: theme2 }) => ({
    full: "100%",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    ...theme2("spacing")
  }),
  objectPosition: {
    bottom: "bottom",
    center: "center",
    left: "left",
    "left-bottom": "left bottom",
    "left-top": "left top",
    right: "right",
    "right-bottom": "right bottom",
    "right-top": "right top",
    top: "top"
  },
  opacity: {
    0: "0",
    5: "0.05",
    10: "0.1",
    15: "0.15",
    20: "0.2",
    25: "0.25",
    30: "0.3",
    35: "0.35",
    40: "0.4",
    45: "0.45",
    50: "0.5",
    55: "0.55",
    60: "0.6",
    65: "0.65",
    70: "0.7",
    75: "0.75",
    80: "0.8",
    85: "0.85",
    90: "0.9",
    95: "0.95",
    100: "1",
    ...barePercentages
  },
  order: {
    first: "-9999",
    last: "9999",
    none: "0",
    1: "1",
    2: "2",
    3: "3",
    4: "4",
    5: "5",
    6: "6",
    7: "7",
    8: "8",
    9: "9",
    10: "10",
    11: "11",
    12: "12",
    ...bareIntegers
  },
  outlineColor: ({ theme: theme2 }) => theme2("colors"),
  outlineOffset: {
    0: "0px",
    1: "1px",
    2: "2px",
    4: "4px",
    8: "8px",
    ...barePixels
  },
  outlineWidth: {
    0: "0px",
    1: "1px",
    2: "2px",
    4: "4px",
    8: "8px",
    ...barePixels
  },
  padding: ({ theme: theme2 }) => theme2("spacing"),
  placeholderColor: ({ theme: theme2 }) => theme2("colors"),
  placeholderOpacity: ({ theme: theme2 }) => theme2("opacity"),
  ringColor: ({ theme: theme2 }) => ({
    DEFAULT: "currentColor",
    ...theme2("colors")
  }),
  ringOffsetColor: ({ theme: theme2 }) => theme2("colors"),
  ringOffsetWidth: {
    0: "0px",
    1: "1px",
    2: "2px",
    4: "4px",
    8: "8px",
    ...barePixels
  },
  ringOpacity: ({ theme: theme2 }) => ({
    DEFAULT: "0.5",
    ...theme2("opacity")
  }),
  ringWidth: {
    DEFAULT: "3px",
    0: "0px",
    1: "1px",
    2: "2px",
    4: "4px",
    8: "8px",
    ...barePixels
  },
  rotate: {
    0: "0deg",
    1: "1deg",
    2: "2deg",
    3: "3deg",
    6: "6deg",
    12: "12deg",
    45: "45deg",
    90: "90deg",
    180: "180deg",
    ...bareDegrees
  },
  saturate: {
    0: "0",
    50: ".5",
    100: "1",
    150: "1.5",
    200: "2",
    ...barePercentages
  },
  scale: {
    0: "0",
    50: ".5",
    75: ".75",
    90: ".9",
    95: ".95",
    100: "1",
    105: "1.05",
    110: "1.1",
    125: "1.25",
    150: "1.5",
    ...barePercentages
  },
  screens: {
    sm: "40rem",
    md: "48rem",
    lg: "64rem",
    xl: "80rem",
    "2xl": "96rem"
  },
  scrollMargin: ({ theme: theme2 }) => theme2("spacing"),
  scrollPadding: ({ theme: theme2 }) => theme2("spacing"),
  sepia: {
    0: "0",
    DEFAULT: "100%",
    ...barePercentages
  },
  skew: {
    0: "0deg",
    1: "1deg",
    2: "2deg",
    3: "3deg",
    6: "6deg",
    12: "12deg",
    ...bareDegrees
  },
  space: ({ theme: theme2 }) => theme2("spacing"),
  spacing: {
    px: "1px",
    0: "0px",
    0.5: "0.125rem",
    1: "0.25rem",
    1.5: "0.375rem",
    2: "0.5rem",
    2.5: "0.625rem",
    3: "0.75rem",
    3.5: "0.875rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem",
    11: "2.75rem",
    12: "3rem",
    14: "3.5rem",
    16: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
  },
  stroke: ({ theme: theme2 }) => ({
    none: "none",
    ...theme2("colors")
  }),
  strokeWidth: {
    0: "0",
    1: "1",
    2: "2",
    ...bareIntegers
  },
  supports: {},
  data: {},
  textColor: ({ theme: theme2 }) => theme2("colors"),
  textDecorationColor: ({ theme: theme2 }) => theme2("colors"),
  textDecorationThickness: {
    auto: "auto",
    "from-font": "from-font",
    0: "0px",
    1: "1px",
    2: "2px",
    4: "4px",
    8: "8px",
    ...barePixels
  },
  textIndent: ({ theme: theme2 }) => theme2("spacing"),
  textOpacity: ({ theme: theme2 }) => theme2("opacity"),
  textUnderlineOffset: {
    auto: "auto",
    0: "0px",
    1: "1px",
    2: "2px",
    4: "4px",
    8: "8px",
    ...barePixels
  },
  transformOrigin: {
    center: "center",
    top: "top",
    "top-right": "top right",
    right: "right",
    "bottom-right": "bottom right",
    bottom: "bottom",
    "bottom-left": "bottom left",
    left: "left",
    "top-left": "top left"
  },
  transitionDelay: {
    0: "0s",
    75: "75ms",
    100: "100ms",
    150: "150ms",
    200: "200ms",
    300: "300ms",
    500: "500ms",
    700: "700ms",
    1000: "1000ms",
    ...bareMilliseconds
  },
  transitionDuration: {
    DEFAULT: "150ms",
    0: "0s",
    75: "75ms",
    100: "100ms",
    150: "150ms",
    200: "200ms",
    300: "300ms",
    500: "500ms",
    700: "700ms",
    1000: "1000ms",
    ...bareMilliseconds
  },
  transitionProperty: {
    none: "none",
    all: "all",
    DEFAULT: "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",
    colors: "color, background-color, border-color, text-decoration-color, fill, stroke",
    opacity: "opacity",
    shadow: "box-shadow",
    transform: "transform"
  },
  transitionTimingFunction: {
    DEFAULT: "cubic-bezier(0.4, 0, 0.2, 1)",
    linear: "linear",
    in: "cubic-bezier(0.4, 0, 1, 1)",
    out: "cubic-bezier(0, 0, 0.2, 1)",
    "in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
  },
  translate: ({ theme: theme2 }) => ({
    "1/2": "50%",
    "1/3": "33.333333%",
    "2/3": "66.666667%",
    "1/4": "25%",
    "2/4": "50%",
    "3/4": "75%",
    full: "100%",
    ...theme2("spacing")
  }),
  size: ({ theme: theme2 }) => ({
    auto: "auto",
    "1/2": "50%",
    "1/3": "33.333333%",
    "2/3": "66.666667%",
    "1/4": "25%",
    "2/4": "50%",
    "3/4": "75%",
    "1/5": "20%",
    "2/5": "40%",
    "3/5": "60%",
    "4/5": "80%",
    "1/6": "16.666667%",
    "2/6": "33.333333%",
    "3/6": "50%",
    "4/6": "66.666667%",
    "5/6": "83.333333%",
    "1/12": "8.333333%",
    "2/12": "16.666667%",
    "3/12": "25%",
    "4/12": "33.333333%",
    "5/12": "41.666667%",
    "6/12": "50%",
    "7/12": "58.333333%",
    "8/12": "66.666667%",
    "9/12": "75%",
    "10/12": "83.333333%",
    "11/12": "91.666667%",
    full: "100%",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    ...theme2("spacing")
  }),
  width: ({ theme: theme2 }) => ({
    auto: "auto",
    "1/2": "50%",
    "1/3": "33.333333%",
    "2/3": "66.666667%",
    "1/4": "25%",
    "2/4": "50%",
    "3/4": "75%",
    "1/5": "20%",
    "2/5": "40%",
    "3/5": "60%",
    "4/5": "80%",
    "1/6": "16.666667%",
    "2/6": "33.333333%",
    "3/6": "50%",
    "4/6": "66.666667%",
    "5/6": "83.333333%",
    "1/12": "8.333333%",
    "2/12": "16.666667%",
    "3/12": "25%",
    "4/12": "33.333333%",
    "5/12": "41.666667%",
    "6/12": "50%",
    "7/12": "58.333333%",
    "8/12": "66.666667%",
    "9/12": "75%",
    "10/12": "83.333333%",
    "11/12": "91.666667%",
    full: "100%",
    screen: "100vw",
    svw: "100svw",
    lvw: "100lvw",
    dvw: "100dvw",
    min: "min-content",
    max: "max-content",
    fit: "fit-content",
    ...theme2("spacing")
  }),
  willChange: {
    auto: "auto",
    scroll: "scroll-position",
    contents: "contents",
    transform: "transform"
  },
  zIndex: {
    auto: "auto",
    0: "0",
    10: "10",
    20: "20",
    30: "30",
    40: "40",
    50: "50",
    ...bareIntegers
  }
};
function createCompatConfig(cssTheme) {
  return {
    theme: {
      ...default_theme_default,
      colors: ({ theme: theme2 }) => theme2("color", {}),
      extend: {
        fontSize: ({ theme: theme2 }) => ({
          ...theme2("text", {})
        }),
        boxShadow: ({ theme: theme2 }) => ({
          ...theme2("shadow", {})
        }),
        animation: ({ theme: theme2 }) => ({
          ...theme2("animate", {})
        }),
        aspectRatio: ({ theme: theme2 }) => ({
          ...theme2("aspect", {})
        }),
        borderRadius: ({ theme: theme2 }) => ({
          ...theme2("radius", {})
        }),
        screens: ({ theme: theme2 }) => ({
          ...theme2("breakpoint", {})
        }),
        letterSpacing: ({ theme: theme2 }) => ({
          ...theme2("tracking", {})
        }),
        lineHeight: ({ theme: theme2 }) => ({
          ...theme2("leading", {})
        }),
        transitionDuration: {
          DEFAULT: cssTheme.get(["--default-transition-duration"]) ?? null
        },
        transitionTimingFunction: {
          DEFAULT: cssTheme.get(["--default-transition-timing-function"]) ?? null
        },
        maxWidth: ({ theme: theme2 }) => ({
          ...theme2("container", {})
        })
      }
    }
  };
}
var minimal = {
  blocklist: [],
  future: {},
  prefix: "",
  important: false,
  darkMode: null,
  theme: {},
  plugins: [],
  content: {
    files: []
  }
};
function resolveConfig(design, files) {
  let ctx = {
    design,
    configs: [],
    plugins: [],
    content: {
      files: []
    },
    theme: {},
    extend: {},
    result: structuredClone(minimal)
  };
  for (let file of files) {
    extractConfigs(ctx, file);
  }
  for (let config of ctx.configs) {
    if ("darkMode" in config && config.darkMode !== undefined) {
      ctx.result.darkMode = config.darkMode ?? null;
    }
    if ("prefix" in config && config.prefix !== undefined) {
      ctx.result.prefix = config.prefix ?? "";
    }
    if ("blocklist" in config && config.blocklist !== undefined) {
      ctx.result.blocklist = config.blocklist ?? [];
    }
    if ("important" in config && config.important !== undefined) {
      ctx.result.important = config.important ?? false;
    }
  }
  let replacedThemeKeys = mergeTheme(ctx);
  return {
    resolvedConfig: {
      ...ctx.result,
      content: ctx.content,
      theme: ctx.theme,
      plugins: ctx.plugins
    },
    replacedThemeKeys
  };
}
function mergeThemeExtension(themeValue, extensionValue) {
  if (Array.isArray(themeValue) && isPlainObject(themeValue[0])) {
    return themeValue.concat(extensionValue);
  }
  if (Array.isArray(extensionValue) && isPlainObject(extensionValue[0]) && isPlainObject(themeValue)) {
    return [themeValue, ...extensionValue];
  }
  if (Array.isArray(extensionValue)) {
    return extensionValue;
  }
  return;
}
function extractConfigs(ctx, { config, base, path: path4, reference }) {
  let plugins = [];
  for (let plugin of config.plugins ?? []) {
    if ("__isOptionsFunction" in plugin) {
      plugins.push({ ...plugin(), reference });
    } else if ("handler" in plugin) {
      plugins.push({ ...plugin, reference });
    } else {
      plugins.push({ handler: plugin, reference });
    }
  }
  if (Array.isArray(config.presets) && config.presets.length === 0) {
    throw new Error("Error in the config file/plugin/preset. An empty preset (`preset: []`) is not currently supported.");
  }
  for (let preset of config.presets ?? []) {
    extractConfigs(ctx, { path: path4, base, config: preset, reference });
  }
  for (let plugin of plugins) {
    ctx.plugins.push(plugin);
    if (plugin.config) {
      extractConfigs(ctx, { path: path4, base, config: plugin.config, reference: !!plugin.reference });
    }
  }
  let content = config.content ?? [];
  let files = Array.isArray(content) ? content : content.files;
  for (let file of files) {
    ctx.content.files.push(typeof file === "object" ? file : { base, pattern: file });
  }
  ctx.configs.push(config);
}
function mergeTheme(ctx) {
  let replacedThemeKeys = new Set;
  let themeFn = createThemeFn(ctx.design, () => ctx.theme, resolveValue);
  let theme2 = Object.assign(themeFn, {
    theme: themeFn,
    colors: colors_default
  });
  function resolveValue(value3) {
    if (typeof value3 === "function") {
      return value3(theme2) ?? null;
    }
    return value3 ?? null;
  }
  for (let config of ctx.configs) {
    let theme3 = config.theme ?? {};
    let extend = theme3.extend ?? {};
    for (let key in theme3) {
      if (key === "extend") {
        continue;
      }
      replacedThemeKeys.add(key);
    }
    Object.assign(ctx.theme, theme3);
    for (let key in extend) {
      ctx.extend[key] ??= [];
      ctx.extend[key].push(extend[key]);
    }
  }
  delete ctx.theme.extend;
  for (let key in ctx.extend) {
    let values = [ctx.theme[key], ...ctx.extend[key]];
    ctx.theme[key] = () => {
      let v = values.map(resolveValue);
      let result = deepMerge({}, v, mergeThemeExtension);
      return result;
    };
  }
  for (let key in ctx.theme) {
    ctx.theme[key] = resolveValue(ctx.theme[key]);
  }
  if (ctx.theme.screens && typeof ctx.theme.screens === "object") {
    for (let key of Object.keys(ctx.theme.screens)) {
      let screen = ctx.theme.screens[key];
      if (!screen)
        continue;
      if (typeof screen !== "object")
        continue;
      if ("raw" in screen)
        continue;
      if ("max" in screen)
        continue;
      if (!("min" in screen))
        continue;
      ctx.theme.screens[key] = screen.min;
    }
  }
  return replacedThemeKeys;
}
function registerContainerCompat(userConfig, designSystem) {
  let container = userConfig.theme.container || {};
  if (typeof container !== "object" || container === null) {
    return;
  }
  let rules = buildCustomContainerUtilityRules(container, designSystem);
  if (rules.length === 0) {
    return;
  }
  designSystem.utilities.static("container", () => structuredClone(rules));
}
function buildCustomContainerUtilityRules({
  center,
  padding,
  screens
}, designSystem) {
  let rules = [];
  let breakpointOverwrites = null;
  if (center) {
    rules.push(decl("margin-inline", "auto"));
  }
  if (typeof padding === "string" || typeof padding === "object" && padding !== null && "DEFAULT" in padding) {
    rules.push(decl("padding-inline", typeof padding === "string" ? padding : padding.DEFAULT));
  }
  if (typeof screens === "object" && screens !== null) {
    breakpointOverwrites = new Map;
    let breakpoints = Array.from(designSystem.theme.namespace("--breakpoint").entries());
    breakpoints.sort((a, z) => compareBreakpoints(a[1], z[1], "asc"));
    if (breakpoints.length > 0) {
      let [key] = breakpoints[0];
      rules.push(atRule("@media", `(width >= --theme(--breakpoint-${key}))`, [decl("max-width", "none")]));
    }
    for (let [key, value3] of Object.entries(screens)) {
      if (typeof value3 === "object") {
        if ("min" in value3) {
          value3 = value3.min;
        } else {
          continue;
        }
      }
      breakpointOverwrites.set(key, atRule("@media", `(width >= ${value3})`, [decl("max-width", value3)]));
    }
  }
  if (typeof padding === "object" && padding !== null) {
    let breakpoints = Object.entries(padding).filter(([key]) => key !== "DEFAULT").map(([key, value3]) => {
      return [key, designSystem.theme.resolveValue(key, ["--breakpoint"]), value3];
    }).filter(Boolean);
    breakpoints.sort((a, z) => compareBreakpoints(a[1], z[1], "asc"));
    for (let [key, , value3] of breakpoints) {
      if (breakpointOverwrites && breakpointOverwrites.has(key)) {
        let overwrite = breakpointOverwrites.get(key);
        overwrite.nodes.push(decl("padding-inline", value3));
      } else if (breakpointOverwrites) {
        continue;
      } else {
        rules.push(atRule("@media", `(width >= theme(--breakpoint-${key}))`, [
          decl("padding-inline", value3)
        ]));
      }
    }
  }
  if (breakpointOverwrites) {
    for (let [, rule2] of breakpointOverwrites) {
      rules.push(rule2);
    }
  }
  return rules;
}
function darkModePlugin({ addVariant, config }) {
  let darkMode = config("darkMode", null);
  let [mode, selector2 = ".dark"] = Array.isArray(darkMode) ? darkMode : [darkMode];
  if (mode === "variant") {
    let formats;
    if (Array.isArray(selector2)) {
      formats = selector2;
    } else if (typeof selector2 === "function") {
      formats = selector2;
    } else if (typeof selector2 === "string") {
      formats = [selector2];
    }
    if (Array.isArray(formats)) {
      for (let format of formats) {
        if (format === ".dark") {
          mode = false;
          console.warn('When using `variant` for `darkMode`, you must provide a selector.\nExample: `darkMode: ["variant", ".your-selector &"]`');
        } else if (!format.includes("&")) {
          mode = false;
          console.warn('When using `variant` for `darkMode`, your selector must contain `&`.\nExample `darkMode: ["variant", ".your-selector &"]`');
        }
      }
    }
    selector2 = formats;
  }
  if (mode === null) {
  } else if (mode === "selector") {
    addVariant("dark", `&:where(${selector2}, ${selector2} *)`);
  } else if (mode === "media") {
    addVariant("dark", "@media (prefers-color-scheme: dark)");
  } else if (mode === "variant") {
    addVariant("dark", selector2);
  } else if (mode === "class") {
    addVariant("dark", `&:is(${selector2} *)`);
  }
}
function registerLegacyUtilities(designSystem) {
  for (let [value3, direction] of [
    ["t", "top"],
    ["tr", "top right"],
    ["r", "right"],
    ["br", "bottom right"],
    ["b", "bottom"],
    ["bl", "bottom left"],
    ["l", "left"],
    ["tl", "top left"]
  ]) {
    designSystem.utilities.static(`bg-gradient-to-${value3}`, () => [
      decl("--tw-gradient-position", `to ${direction} in oklab,`),
      decl("background-image", `linear-gradient(var(--tw-gradient-stops))`)
    ]);
  }
  designSystem.utilities.functional("max-w-screen", (candidate) => {
    if (!candidate.value)
      return;
    if (candidate.value.kind === "arbitrary")
      return;
    let value3 = designSystem.theme.resolve(candidate.value.value, ["--breakpoint"]);
    if (!value3)
      return;
    return [decl("max-width", value3)];
  });
  designSystem.utilities.static(`overflow-ellipsis`, () => [decl("text-overflow", `ellipsis`)]);
  designSystem.utilities.static(`decoration-slice`, () => [
    decl("-webkit-box-decoration-break", `slice`),
    decl("box-decoration-break", `slice`)
  ]);
  designSystem.utilities.static(`decoration-clone`, () => [
    decl("-webkit-box-decoration-break", `clone`),
    decl("box-decoration-break", `clone`)
  ]);
  designSystem.utilities.functional("flex-shrink", (candidate) => {
    if (candidate.modifier)
      return;
    if (!candidate.value) {
      return [decl("flex-shrink", "1")];
    }
    if (candidate.value.kind === "arbitrary") {
      return [decl("flex-shrink", candidate.value.value)];
    }
    if (isPositiveInteger(candidate.value.value)) {
      return [decl("flex-shrink", candidate.value.value)];
    }
  });
  designSystem.utilities.functional("flex-grow", (candidate) => {
    if (candidate.modifier)
      return;
    if (!candidate.value) {
      return [decl("flex-grow", "1")];
    }
    if (candidate.value.kind === "arbitrary") {
      return [decl("flex-grow", candidate.value.value)];
    }
    if (isPositiveInteger(candidate.value.value)) {
      return [decl("flex-grow", candidate.value.value)];
    }
  });
}
function registerScreensConfig(userConfig, designSystem) {
  let screens = userConfig.theme.screens || {};
  let coreOrder = designSystem.variants.get("min")?.order ?? 0;
  let additionalVariants = [];
  for (let [name, value3] of Object.entries(screens)) {
    let insert = function(order) {
      designSystem.variants.static(name, (ruleNode) => {
        ruleNode.nodes = [atRule("@media", query, ruleNode.nodes)];
      }, { order });
    };
    let coreVariant = designSystem.variants.get(name);
    let cssValue = designSystem.theme.resolveValue(name, ["--breakpoint"]);
    if (coreVariant && cssValue && !designSystem.theme.hasDefault(`--breakpoint-${name}`)) {
      continue;
    }
    let deferInsert = true;
    if (typeof value3 === "string") {
      deferInsert = false;
    }
    let query = buildMediaQuery(value3);
    if (deferInsert) {
      additionalVariants.push(insert);
    } else {
      insert(coreOrder);
    }
  }
  if (additionalVariants.length === 0)
    return;
  for (let [, variant] of designSystem.variants.variants) {
    if (variant.order > coreOrder)
      variant.order += additionalVariants.length;
  }
  designSystem.variants.compareFns = new Map(Array.from(designSystem.variants.compareFns).map(([key, value3]) => {
    if (key > coreOrder)
      key += additionalVariants.length;
    return [key, value3];
  }));
  for (let [index, callback] of additionalVariants.entries()) {
    callback(coreOrder + index + 1);
  }
}
function buildMediaQuery(values) {
  let list = Array.isArray(values) ? values : [values];
  return list.map((value3) => {
    if (typeof value3 === "string") {
      return { min: value3 };
    }
    if (value3 && typeof value3 === "object") {
      return value3;
    }
    return null;
  }).map((screen) => {
    if (screen === null)
      return null;
    if ("raw" in screen) {
      return screen.raw;
    }
    let query = "";
    if (screen.max !== undefined) {
      query += `${screen.max} >= `;
    }
    query += "width";
    if (screen.min !== undefined) {
      query += ` >= ${screen.min}`;
    }
    return `(${query})`;
  }).filter(Boolean).join(", ");
}
function registerThemeVariantOverrides(config, designSystem) {
  let ariaVariants = config.theme.aria || {};
  let supportsVariants = config.theme.supports || {};
  let dataVariants = config.theme.data || {};
  if (Object.keys(ariaVariants).length > 0) {
    let coreAria = designSystem.variants.get("aria");
    let applyFn = coreAria?.applyFn;
    let compounds = coreAria?.compounds;
    designSystem.variants.functional("aria", (ruleNode, variant) => {
      let value3 = variant.value;
      if (value3 && value3.kind === "named" && value3.value in ariaVariants) {
        return applyFn?.(ruleNode, {
          ...variant,
          value: { kind: "arbitrary", value: ariaVariants[value3.value] }
        });
      }
      return applyFn?.(ruleNode, variant);
    }, { compounds });
  }
  if (Object.keys(supportsVariants).length > 0) {
    let coreSupports = designSystem.variants.get("supports");
    let applyFn = coreSupports?.applyFn;
    let compounds = coreSupports?.compounds;
    designSystem.variants.functional("supports", (ruleNode, variant) => {
      let value3 = variant.value;
      if (value3 && value3.kind === "named" && value3.value in supportsVariants) {
        return applyFn?.(ruleNode, {
          ...variant,
          value: { kind: "arbitrary", value: supportsVariants[value3.value] }
        });
      }
      return applyFn?.(ruleNode, variant);
    }, { compounds });
  }
  if (Object.keys(dataVariants).length > 0) {
    let coreData = designSystem.variants.get("data");
    let applyFn = coreData?.applyFn;
    let compounds = coreData?.compounds;
    designSystem.variants.functional("data", (ruleNode, variant) => {
      let value3 = variant.value;
      if (value3 && value3.kind === "named" && value3.value in dataVariants) {
        return applyFn?.(ruleNode, {
          ...variant,
          value: { kind: "arbitrary", value: dataVariants[value3.value] }
        });
      }
      return applyFn?.(ruleNode, variant);
    }, { compounds });
  }
}
var IS_VALID_PREFIX = /^[a-z]+$/;
async function applyCompatibilityHooks({
  designSystem,
  base,
  ast,
  loadModule,
  globs
}) {
  let features = 0;
  let pluginPaths = [];
  let configPaths = [];
  walk(ast, (node, { parent, replaceWith, context: context2 }) => {
    if (node.kind !== "at-rule")
      return;
    if (node.name === "@plugin") {
      if (parent !== null) {
        throw new Error("`@plugin` cannot be nested.");
      }
      let pluginPath = node.params.slice(1, -1);
      if (pluginPath.length === 0) {
        throw new Error("`@plugin` must have a path.");
      }
      let options = {};
      for (let decl2 of node.nodes ?? []) {
        if (decl2.kind !== "declaration") {
          throw new Error(`Unexpected \`@plugin\` option:

${toCss([decl2])}

\`@plugin\` options must be a flat list of declarations.`);
        }
        if (decl2.value === undefined)
          continue;
        let value3 = decl2.value;
        let parts = segment(value3, ",").map((part) => {
          part = part.trim();
          if (part === "null") {
            return null;
          } else if (part === "true") {
            return true;
          } else if (part === "false") {
            return false;
          } else if (!Number.isNaN(Number(part))) {
            return Number(part);
          } else if (part[0] === '"' && part[part.length - 1] === '"' || part[0] === "'" && part[part.length - 1] === "'") {
            return part.slice(1, -1);
          } else if (part[0] === "{" && part[part.length - 1] === "}") {
            throw new Error(`Unexpected \`@plugin\` option: Value of declaration \`${toCss([decl2]).trim()}\` is not supported.

Using an object as a plugin option is currently only supported in JavaScript configuration files.`);
          }
          return part;
        });
        options[decl2.property] = parts.length === 1 ? parts[0] : parts;
      }
      pluginPaths.push([
        { id: pluginPath, base: context2.base, reference: !!context2.reference },
        Object.keys(options).length > 0 ? options : null
      ]);
      replaceWith([]);
      features |= 4;
      return;
    }
    if (node.name === "@config") {
      if (node.nodes.length > 0) {
        throw new Error("`@config` cannot have a body.");
      }
      if (parent !== null) {
        throw new Error("`@config` cannot be nested.");
      }
      configPaths.push({
        id: node.params.slice(1, -1),
        base: context2.base,
        reference: !!context2.reference
      });
      replaceWith([]);
      features |= 4;
      return;
    }
  });
  registerLegacyUtilities(designSystem);
  let resolveThemeVariableValue = designSystem.resolveThemeValue;
  designSystem.resolveThemeValue = function resolveThemeValue(path4) {
    if (path4.startsWith("--")) {
      return resolveThemeVariableValue(path4);
    }
    features |= upgradeToFullPluginSupport({
      designSystem,
      base,
      ast,
      globs,
      configs: [],
      pluginDetails: []
    });
    return designSystem.resolveThemeValue(path4);
  };
  if (!pluginPaths.length && !configPaths.length)
    return 0;
  let [configs, pluginDetails] = await Promise.all([
    Promise.all(configPaths.map(async ({ id, base: base2, reference }) => {
      let loaded = await loadModule(id, base2, "config");
      return {
        path: id,
        base: loaded.base,
        config: loaded.module,
        reference
      };
    })),
    Promise.all(pluginPaths.map(async ([{ id, base: base2, reference }, pluginOptions]) => {
      let loaded = await loadModule(id, base2, "plugin");
      return {
        path: id,
        base: loaded.base,
        plugin: loaded.module,
        options: pluginOptions,
        reference
      };
    }))
  ]);
  features |= upgradeToFullPluginSupport({
    designSystem,
    base,
    ast,
    globs,
    configs,
    pluginDetails
  });
  return features;
}
function upgradeToFullPluginSupport({
  designSystem,
  base,
  ast,
  globs,
  configs,
  pluginDetails
}) {
  let features = 0;
  let pluginConfigs = pluginDetails.map((detail) => {
    if (!detail.options) {
      return {
        config: { plugins: [detail.plugin] },
        base: detail.base,
        reference: detail.reference
      };
    }
    if ("__isOptionsFunction" in detail.plugin) {
      return {
        config: { plugins: [detail.plugin(detail.options)] },
        base: detail.base,
        reference: detail.reference
      };
    }
    throw new Error(`The plugin "${detail.path}" does not accept options`);
  });
  let userConfig = [...pluginConfigs, ...configs];
  let { resolvedConfig } = resolveConfig(designSystem, [
    { config: createCompatConfig(designSystem.theme), base, reference: true },
    ...userConfig,
    { config: { plugins: [darkModePlugin] }, base, reference: true }
  ]);
  let { resolvedConfig: resolvedUserConfig, replacedThemeKeys } = resolveConfig(designSystem, userConfig);
  designSystem.resolveThemeValue = function resolveThemeValue(path4, defaultValue) {
    let resolvedValue = pluginApi.theme(path4, defaultValue);
    if (Array.isArray(resolvedValue) && resolvedValue.length === 2) {
      return resolvedValue[0];
    } else if (Array.isArray(resolvedValue)) {
      return resolvedValue.join(", ");
    } else if (typeof resolvedValue === "string") {
      return resolvedValue;
    }
  };
  let pluginApiConfig = {
    designSystem,
    ast,
    resolvedConfig,
    featuresRef: {
      set current(value3) {
        features |= value3;
      }
    }
  };
  let pluginApi = buildPluginApi({ ...pluginApiConfig, referenceMode: false });
  let referenceModePluginApi = undefined;
  for (let { handler, reference } of resolvedConfig.plugins) {
    if (reference) {
      referenceModePluginApi ||= buildPluginApi({ ...pluginApiConfig, referenceMode: true });
      handler(referenceModePluginApi);
    } else {
      handler(pluginApi);
    }
  }
  applyConfigToTheme(designSystem, resolvedUserConfig, replacedThemeKeys);
  applyKeyframesToTheme(designSystem, resolvedUserConfig, replacedThemeKeys);
  registerThemeVariantOverrides(resolvedUserConfig, designSystem);
  registerScreensConfig(resolvedUserConfig, designSystem);
  registerContainerCompat(resolvedUserConfig, designSystem);
  if (!designSystem.theme.prefix && resolvedConfig.prefix) {
    if (resolvedConfig.prefix.endsWith("-")) {
      resolvedConfig.prefix = resolvedConfig.prefix.slice(0, -1);
      console.warn(`The prefix "${resolvedConfig.prefix}" is invalid. Prefixes must be lowercase ASCII letters (a-z) only and is written as a variant before all utilities. We have fixed up the prefix for you. Remove the trailing \`-\` to silence this warning.`);
    }
    if (!IS_VALID_PREFIX.test(resolvedConfig.prefix)) {
      throw new Error(`The prefix "${resolvedConfig.prefix}" is invalid. Prefixes must be lowercase ASCII letters (a-z) only.`);
    }
    designSystem.theme.prefix = resolvedConfig.prefix;
  }
  if (!designSystem.important && resolvedConfig.important === true) {
    designSystem.important = true;
  }
  if (typeof resolvedConfig.important === "string") {
    let wrappingSelector = resolvedConfig.important;
    walk(ast, (node, { replaceWith, parent }) => {
      if (node.kind !== "at-rule")
        return;
      if (node.name !== "@tailwind" || node.params !== "utilities")
        return;
      if (parent?.kind === "rule" && parent.selector === wrappingSelector) {
        return 2;
      }
      replaceWith(styleRule(wrappingSelector, [node]));
      return 2;
    });
  }
  for (let candidate of resolvedConfig.blocklist) {
    designSystem.invalidCandidates.add(candidate);
  }
  for (let file of resolvedConfig.content.files) {
    if ("raw" in file) {
      throw new Error(`Error in the config file/plugin/preset. The \`content\` key contains a \`raw\` entry:

${JSON.stringify(file, null, 2)}

This feature is not currently supported.`);
    }
    globs.push(file);
  }
  return features;
}
function decodeArbitraryValue(input) {
  if (input.indexOf("(") === -1) {
    return convertUnderscoresToWhitespace(input);
  }
  let ast = parse2(input);
  recursivelyDecodeArbitraryValues(ast);
  input = toCss2(ast);
  input = addWhitespaceAroundMathOperators(input);
  return input;
}
function convertUnderscoresToWhitespace(input) {
  let output = "";
  for (let i = 0;i < input.length; i++) {
    let char = input[i];
    if (char === "\\" && input[i + 1] === "_") {
      output += "_";
      i += 1;
    } else if (char === "_") {
      output += " ";
    } else {
      output += char;
    }
  }
  return output;
}
function recursivelyDecodeArbitraryValues(ast) {
  for (let node of ast) {
    switch (node.kind) {
      case "function": {
        if (node.value === "url" || node.value.endsWith("_url")) {
          node.value = convertUnderscoresToWhitespace(node.value);
          break;
        }
        if (node.value === "var" || node.value.endsWith("_var") || node.value === "theme" || node.value.endsWith("_theme")) {
          node.value = convertUnderscoresToWhitespace(node.value);
          for (let i = 0;i < node.nodes.length; i++) {
            if (i == 0 && node.nodes[i].kind === "word") {
              continue;
            }
            recursivelyDecodeArbitraryValues([node.nodes[i]]);
          }
          break;
        }
        node.value = convertUnderscoresToWhitespace(node.value);
        recursivelyDecodeArbitraryValues(node.nodes);
        break;
      }
      case "separator":
      case "word": {
        node.value = convertUnderscoresToWhitespace(node.value);
        break;
      }
      default:
        never(node);
    }
  }
}
function never(value3) {
  throw new Error(`Unexpected value: ${value3}`);
}
var COLON4 = 58;
var DASH2 = 45;
var LOWER_A = 97;
var LOWER_Z = 122;
function* parseCandidate(input, designSystem) {
  let rawVariants = segment(input, ":");
  if (designSystem.theme.prefix) {
    if (rawVariants.length === 1)
      return null;
    if (rawVariants[0] !== designSystem.theme.prefix)
      return null;
    rawVariants.shift();
  }
  let base = rawVariants.pop();
  let parsedCandidateVariants = [];
  for (let i = rawVariants.length - 1;i >= 0; --i) {
    let parsedVariant = designSystem.parseVariant(rawVariants[i]);
    if (parsedVariant === null)
      return;
    parsedCandidateVariants.push(parsedVariant);
  }
  let important = false;
  if (base[base.length - 1] === "!") {
    important = true;
    base = base.slice(0, -1);
  } else if (base[0] === "!") {
    important = true;
    base = base.slice(1);
  }
  if (designSystem.utilities.has(base, "static") && !base.includes("[")) {
    yield {
      kind: "static",
      root: base,
      variants: parsedCandidateVariants,
      important,
      raw: input
    };
  }
  let [baseWithoutModifier, modifierSegment = null, additionalModifier] = segment(base, "/");
  if (additionalModifier)
    return;
  let parsedModifier = modifierSegment === null ? null : parseModifier(modifierSegment);
  if (modifierSegment !== null && parsedModifier === null)
    return;
  if (baseWithoutModifier[0] === "[") {
    if (baseWithoutModifier[baseWithoutModifier.length - 1] !== "]")
      return;
    let charCode = baseWithoutModifier.charCodeAt(1);
    if (charCode !== DASH2 && !(charCode >= LOWER_A && charCode <= LOWER_Z)) {
      return;
    }
    baseWithoutModifier = baseWithoutModifier.slice(1, -1);
    let idx = baseWithoutModifier.indexOf(":");
    if (idx === -1 || idx === 0 || idx === baseWithoutModifier.length - 1)
      return;
    let property2 = baseWithoutModifier.slice(0, idx);
    let value3 = decodeArbitraryValue(baseWithoutModifier.slice(idx + 1));
    yield {
      kind: "arbitrary",
      property: property2,
      value: value3,
      modifier: parsedModifier,
      variants: parsedCandidateVariants,
      important,
      raw: input
    };
    return;
  }
  let roots;
  if (baseWithoutModifier[baseWithoutModifier.length - 1] === "]") {
    let idx = baseWithoutModifier.indexOf("-[");
    if (idx === -1)
      return;
    let root = baseWithoutModifier.slice(0, idx);
    if (!designSystem.utilities.has(root, "functional"))
      return;
    let value3 = baseWithoutModifier.slice(idx + 1);
    roots = [[root, value3]];
  } else if (baseWithoutModifier[baseWithoutModifier.length - 1] === ")") {
    let idx = baseWithoutModifier.indexOf("-(");
    if (idx === -1)
      return;
    let root = baseWithoutModifier.slice(0, idx);
    if (!designSystem.utilities.has(root, "functional"))
      return;
    let value3 = baseWithoutModifier.slice(idx + 2, -1);
    let parts = segment(value3, ":");
    let dataType = null;
    if (parts.length === 2) {
      dataType = parts[0];
      value3 = parts[1];
    }
    if (value3[0] !== "-" && value3[1] !== "-")
      return;
    roots = [[root, dataType === null ? `[var(${value3})]` : `[${dataType}:var(${value3})]`]];
  } else {
    roots = findRoots(baseWithoutModifier, (root) => {
      return designSystem.utilities.has(root, "functional");
    });
  }
  for (let [root, value3] of roots) {
    let candidate = {
      kind: "functional",
      root,
      modifier: parsedModifier,
      value: null,
      variants: parsedCandidateVariants,
      important,
      raw: input
    };
    if (value3 === null) {
      yield candidate;
      continue;
    }
    {
      let startArbitraryIdx = value3.indexOf("[");
      let valueIsArbitrary = startArbitraryIdx !== -1;
      if (valueIsArbitrary) {
        if (value3[value3.length - 1] !== "]")
          return;
        let arbitraryValue = decodeArbitraryValue(value3.slice(startArbitraryIdx + 1, -1));
        let typehint = "";
        for (let i = 0;i < arbitraryValue.length; i++) {
          let code = arbitraryValue.charCodeAt(i);
          if (code === COLON4) {
            typehint = arbitraryValue.slice(0, i);
            arbitraryValue = arbitraryValue.slice(i + 1);
            break;
          }
          if (code === DASH2 || code >= LOWER_A && code <= LOWER_Z) {
            continue;
          }
          break;
        }
        if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0) {
          continue;
        }
        candidate.value = {
          kind: "arbitrary",
          dataType: typehint || null,
          value: arbitraryValue
        };
      } else {
        let fraction = modifierSegment === null || candidate.modifier?.kind === "arbitrary" ? null : `${value3}/${modifierSegment}`;
        candidate.value = {
          kind: "named",
          value: value3,
          fraction
        };
      }
    }
    yield candidate;
  }
}
function parseModifier(modifier) {
  if (modifier[0] === "[" && modifier[modifier.length - 1] === "]") {
    let arbitraryValue = decodeArbitraryValue(modifier.slice(1, -1));
    if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0)
      return null;
    return {
      kind: "arbitrary",
      value: arbitraryValue
    };
  }
  if (modifier[0] === "(" && modifier[modifier.length - 1] === ")") {
    let arbitraryValue = decodeArbitraryValue(modifier.slice(1, -1));
    if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0)
      return null;
    return {
      kind: "arbitrary",
      value: `var(${arbitraryValue})`
    };
  }
  return {
    kind: "named",
    value: modifier
  };
}
function parseVariant(variant, designSystem) {
  if (variant[0] === "[" && variant[variant.length - 1] === "]") {
    if (variant[1] === "@" && variant.includes("&"))
      return null;
    let selector2 = decodeArbitraryValue(variant.slice(1, -1));
    if (selector2.length === 0 || selector2.trim().length === 0)
      return null;
    let relative = selector2[0] === ">" || selector2[0] === "+" || selector2[0] === "~";
    if (!relative && selector2[0] !== "@" && !selector2.includes("&")) {
      selector2 = `&:is(${selector2})`;
    }
    return {
      kind: "arbitrary",
      selector: selector2,
      relative
    };
  }
  {
    let [variantWithoutModifier, modifier = null, additionalModifier] = segment(variant, "/");
    if (additionalModifier)
      return null;
    let roots = findRoots(variantWithoutModifier, (root) => {
      return designSystem.variants.has(root);
    });
    for (let [root, value3] of roots) {
      switch (designSystem.variants.kind(root)) {
        case "static": {
          if (value3 !== null)
            return null;
          if (modifier !== null)
            return null;
          return {
            kind: "static",
            root
          };
        }
        case "functional": {
          let parsedModifier = modifier === null ? null : parseModifier(modifier);
          if (modifier !== null && parsedModifier === null)
            return null;
          if (value3 === null) {
            return {
              kind: "functional",
              root,
              modifier: parsedModifier,
              value: null
            };
          }
          if (value3[value3.length - 1] === "]") {
            if (value3[0] !== "[")
              continue;
            let arbitraryValue = decodeArbitraryValue(value3.slice(1, -1));
            if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0)
              return null;
            return {
              kind: "functional",
              root,
              modifier: parsedModifier,
              value: {
                kind: "arbitrary",
                value: arbitraryValue
              }
            };
          }
          if (value3[value3.length - 1] === ")") {
            if (value3[0] !== "(")
              continue;
            let arbitraryValue = decodeArbitraryValue(value3.slice(1, -1));
            if (arbitraryValue.length === 0 || arbitraryValue.trim().length === 0)
              return null;
            return {
              kind: "functional",
              root,
              modifier: parsedModifier,
              value: {
                kind: "arbitrary",
                value: `var(${arbitraryValue})`
              }
            };
          }
          return {
            kind: "functional",
            root,
            modifier: parsedModifier,
            value: { kind: "named", value: value3 }
          };
        }
        case "compound": {
          if (value3 === null)
            return null;
          let subVariant = designSystem.parseVariant(value3);
          if (subVariant === null)
            return null;
          if (!designSystem.variants.compoundsWith(root, subVariant))
            return null;
          let parsedModifier = modifier === null ? null : parseModifier(modifier);
          if (modifier !== null && parsedModifier === null)
            return null;
          return {
            kind: "compound",
            root,
            modifier: parsedModifier,
            variant: subVariant
          };
        }
      }
    }
  }
  return null;
}
function* findRoots(input, exists) {
  if (exists(input)) {
    yield [input, null];
  }
  let idx = input.lastIndexOf("-");
  if (idx === -1) {
    if (input[0] === "@" && exists("@")) {
      yield ["@", input.slice(1)];
    }
    return;
  }
  do {
    let maybeRoot = input.slice(0, idx);
    if (exists(maybeRoot)) {
      let root = [maybeRoot, input.slice(idx + 1)];
      if (root[1] === "")
        break;
      yield root;
    }
    idx = input.lastIndexOf("-", idx - 1);
  } while (idx > 0);
}
function getClassList(design) {
  let list = [];
  for (let utility of design.utilities.keys("static")) {
    list.push([utility, { modifiers: [] }]);
  }
  for (let utility of design.utilities.keys("functional")) {
    let completions = design.utilities.getCompletions(utility);
    for (let group of completions) {
      for (let value3 of group.values) {
        let name = value3 === null ? utility : `${utility}-${value3}`;
        list.push([name, { modifiers: group.modifiers }]);
        if (group.supportsNegative) {
          list.push([`-${name}`, { modifiers: group.modifiers }]);
        }
      }
    }
  }
  list.sort((a, b) => a[0] === b[0] ? 0 : a[0] < b[0] ? -1 : 1);
  return list;
}
function getVariants(design) {
  let list = [];
  for (let [root, variant] of design.variants.entries()) {
    let selectors = function({ value: value3, modifier } = {}) {
      let name = root;
      if (value3)
        name += `-${value3}`;
      if (modifier)
        name += `/${modifier}`;
      let variant2 = design.parseVariant(name);
      if (!variant2)
        return [];
      let node = styleRule(".__placeholder__", []);
      if (applyVariant(node, variant2, design.variants) === null) {
        return [];
      }
      let selectors2 = [];
      walkDepth(node.nodes, (node2, { path: path4 }) => {
        if (node2.kind !== "rule" && node2.kind !== "at-rule")
          return;
        if (node2.nodes.length > 0)
          return;
        path4.sort((a, b) => {
          let aIsAtRule = a.kind === "at-rule";
          let bIsAtRule = b.kind === "at-rule";
          if (aIsAtRule && !bIsAtRule)
            return -1;
          if (!aIsAtRule && bIsAtRule)
            return 1;
          return 0;
        });
        let group = path4.flatMap((node3) => {
          if (node3.kind === "rule") {
            return node3.selector === "&" ? [] : [node3.selector];
          }
          if (node3.kind === "at-rule") {
            return [`${node3.name} ${node3.params}`];
          }
          return [];
        });
        let selector2 = "";
        for (let i = group.length - 1;i >= 0; i--) {
          selector2 = selector2 === "" ? group[i] : `${group[i]} { ${selector2} }`;
        }
        selectors2.push(selector2);
      });
      return selectors2;
    };
    if (variant.kind === "arbitrary")
      continue;
    let values = design.variants.getCompletions(root);
    switch (variant.kind) {
      case "static": {
        list.push({
          name: root,
          values,
          isArbitrary: false,
          hasDash: true,
          selectors
        });
        break;
      }
      case "functional": {
        list.push({
          name: root,
          values,
          isArbitrary: true,
          hasDash: true,
          selectors
        });
        break;
      }
      case "compound": {
        list.push({
          name: root,
          values,
          isArbitrary: true,
          hasDash: true,
          selectors
        });
        break;
      }
    }
  }
  return list;
}
function getClassOrder(design, classes) {
  let { astNodes, nodeSorting } = compileCandidates(Array.from(classes), design);
  let sorted = new Map(classes.map((className) => [className, null]));
  let idx = 0n;
  for (let node of astNodes) {
    let candidate = nodeSorting.get(node)?.candidate;
    if (!candidate)
      continue;
    sorted.set(candidate, sorted.get(candidate) ?? idx++);
  }
  return classes.map((className) => [
    className,
    sorted.get(className) ?? null
  ]);
}
function buildDesignSystem(theme2) {
  let utilities = createUtilities(theme2);
  let variants = createVariants(theme2);
  let parsedVariants = new DefaultMap((variant) => parseVariant(variant, designSystem));
  let parsedCandidates = new DefaultMap((candidate) => Array.from(parseCandidate(candidate, designSystem)));
  let compiledAstNodes = new DefaultMap((candidate) => compileAstNodes(candidate, designSystem));
  let designSystem = {
    theme: theme2,
    utilities,
    variants,
    invalidCandidates: new Set,
    important: false,
    candidatesToCss(classes) {
      let result = [];
      for (let className of classes) {
        let wasInvalid = false;
        let { astNodes } = compileCandidates([className], this, {
          onInvalidCandidate() {
            wasInvalid = true;
          }
        });
        astNodes = optimizeAst(astNodes);
        if (astNodes.length === 0 || wasInvalid) {
          result.push(null);
        } else {
          result.push(toCss(astNodes));
        }
      }
      return result;
    },
    getClassOrder(classes) {
      return getClassOrder(this, classes);
    },
    getClassList() {
      return getClassList(this);
    },
    getVariants() {
      return getVariants(this);
    },
    parseCandidate(candidate) {
      return parsedCandidates.get(candidate);
    },
    parseVariant(variant) {
      return parsedVariants.get(variant);
    },
    compileAstNodes(candidate) {
      return compiledAstNodes.get(candidate);
    },
    getVariantOrder() {
      let variants2 = Array.from(parsedVariants.values());
      variants2.sort((a, z) => this.variants.compare(a, z));
      let order = new Map;
      let prevVariant = undefined;
      let index = 0;
      for (let variant of variants2) {
        if (variant === null) {
          continue;
        }
        if (prevVariant !== undefined && this.variants.compare(prevVariant, variant) !== 0) {
          index++;
        }
        order.set(variant, index);
        prevVariant = variant;
      }
      return order;
    },
    resolveThemeValue(path4) {
      let lastSlash = path4.lastIndexOf("/");
      let modifier = null;
      if (lastSlash !== -1) {
        modifier = path4.slice(lastSlash + 1).trim();
        path4 = path4.slice(0, lastSlash).trim();
      }
      let themeValue = theme2.get([path4]) ?? undefined;
      if (modifier && themeValue) {
        return withAlpha(themeValue, modifier);
      }
      return themeValue;
    }
  };
  return designSystem;
}
var IS_VALID_PREFIX2 = /^[a-z]+$/;
function throwOnLoadModule() {
  throw new Error("No `loadModule` function provided to `compile`");
}
function throwOnLoadStylesheet() {
  throw new Error("No `loadStylesheet` function provided to `compile`");
}
function parseThemeOptions(params) {
  let options = 0;
  let prefix = null;
  for (let option of segment(params, " ")) {
    if (option === "reference") {
      options |= 2;
    } else if (option === "inline") {
      options |= 1;
    } else if (option === "default") {
      options |= 4;
    } else if (option.startsWith("prefix(") && option.endsWith(")")) {
      prefix = option.slice(7, -1);
    }
  }
  return [options, prefix];
}
var Features;
((Features2) => {
  Features2[Features2["None"] = 0] = "None";
  Features2[Features2["AtApply"] = 1] = "AtApply";
  Features2[Features2["AtImport"] = 2] = "AtImport";
  Features2[Features2["JsPluginCompat"] = 4] = "JsPluginCompat";
  Features2[Features2["ThemeFunction"] = 8] = "ThemeFunction";
  Features2[Features2["Utilities"] = 16] = "Utilities";
})(Features ||= {});
async function parseCss(ast, {
  base = "",
  loadModule = throwOnLoadModule,
  loadStylesheet = throwOnLoadStylesheet
} = {}) {
  let features = 0;
  ast = [context({ base }, ast)];
  features |= await substituteAtImports(ast, base, loadStylesheet);
  let important = null;
  let theme2 = new Theme;
  let customVariants = [];
  let customUtilities = [];
  let firstThemeRule = null;
  let utilitiesNode = null;
  let globs = [];
  let root = null;
  walk(ast, (node, { parent, replaceWith, context: context2 }) => {
    if (node.kind !== "at-rule")
      return;
    if (node.name === "@tailwind" && (node.params === "utilities" || node.params.startsWith("utilities"))) {
      if (utilitiesNode !== null) {
        replaceWith([]);
        return;
      }
      let params = segment(node.params, " ");
      for (let param of params) {
        if (param.startsWith("source(")) {
          let path4 = param.slice(7, -1);
          if (path4 === "none") {
            root = path4;
            continue;
          }
          if (path4[0] === '"' && path4[path4.length - 1] !== '"' || path4[0] === "'" && path4[path4.length - 1] !== "'" || path4[0] !== "'" && path4[0] !== '"') {
            throw new Error("`source(\u2026)` paths must be quoted.");
          }
          root = {
            base: context2.sourceBase ?? context2.base,
            pattern: path4.slice(1, -1)
          };
        }
      }
      utilitiesNode = node;
      features |= 16;
    }
    if (node.name === "@utility") {
      if (parent !== null) {
        throw new Error("`@utility` cannot be nested.");
      }
      if (node.nodes.length === 0) {
        throw new Error(`\`@utility ${node.params}\` is empty. Utilities should include at least one property.`);
      }
      let utility = createCssUtility(node);
      if (utility === null) {
        throw new Error(`\`@utility ${node.params}\` defines an invalid utility name. Utilities should be alphanumeric and start with a lowercase letter.`);
      }
      customUtilities.push(utility);
    }
    if (node.name === "@source") {
      if (node.nodes.length > 0) {
        throw new Error("`@source` cannot have a body.");
      }
      if (parent !== null) {
        throw new Error("`@source` cannot be nested.");
      }
      let path4 = node.params;
      if (path4[0] === '"' && path4[path4.length - 1] !== '"' || path4[0] === "'" && path4[path4.length - 1] !== "'" || path4[0] !== "'" && path4[0] !== '"') {
        throw new Error("`@source` paths must be quoted.");
      }
      globs.push({ base: context2.base, pattern: path4.slice(1, -1) });
      replaceWith([]);
      return;
    }
    if (node.name === "@variant") {
      if (parent !== null) {
        throw new Error("`@variant` cannot be nested.");
      }
      replaceWith([]);
      let [name, selector2] = segment(node.params, " ");
      if (node.nodes.length > 0 && selector2) {
        throw new Error(`\`@variant ${name}\` cannot have both a selector and a body.`);
      }
      if (node.nodes.length === 0) {
        if (!selector2) {
          throw new Error(`\`@variant ${name}\` has no selector or body.`);
        }
        let selectors = segment(selector2.slice(1, -1), ",");
        let atRuleParams = [];
        let styleRuleSelectors = [];
        for (let selector3 of selectors) {
          selector3 = selector3.trim();
          if (selector3[0] === "@") {
            atRuleParams.push(selector3);
          } else {
            styleRuleSelectors.push(selector3);
          }
        }
        customVariants.push((designSystem2) => {
          designSystem2.variants.static(name, (r) => {
            let nodes = [];
            if (styleRuleSelectors.length > 0) {
              nodes.push(styleRule(styleRuleSelectors.join(", "), r.nodes));
            }
            for (let selector3 of atRuleParams) {
              nodes.push(rule(selector3, r.nodes));
            }
            r.nodes = nodes;
          }, {
            compounds: compoundsForSelectors([...styleRuleSelectors, ...atRuleParams])
          });
        });
        return;
      } else {
        customVariants.push((designSystem2) => {
          designSystem2.variants.fromAst(name, node.nodes);
        });
        return;
      }
    }
    if (node.name === "@media") {
      let params = segment(node.params, " ");
      let unknownParams = [];
      for (let param of params) {
        if (param.startsWith("source(")) {
          let path4 = param.slice(7, -1);
          walk(node.nodes, (child, { replaceWith: replaceWith2 }) => {
            if (child.kind !== "at-rule")
              return;
            if (child.name === "@tailwind" && child.params === "utilities") {
              child.params += ` source(${path4})`;
              replaceWith2([context({ sourceBase: context2.base }, [child])]);
              return 2;
            }
          });
        } else if (param.startsWith("theme(")) {
          let themeParams = param.slice(6, -1);
          walk(node.nodes, (child) => {
            if (child.kind !== "at-rule") {
              throw new Error('Files imported with `@import "\u2026" theme(\u2026)` must only contain `@theme` blocks.');
            }
            if (child.name === "@theme") {
              child.params += " " + themeParams;
              return 1;
            }
          });
        } else if (param.startsWith("prefix(")) {
          let prefix = param.slice(7, -1);
          walk(node.nodes, (child) => {
            if (child.kind !== "at-rule")
              return;
            if (child.name === "@theme") {
              child.params += ` prefix(${prefix})`;
              return 1;
            }
          });
        } else if (param === "important") {
          important = true;
        } else if (param === "reference") {
          node.nodes = [context({ reference: true }, node.nodes)];
        } else {
          unknownParams.push(param);
        }
      }
      if (unknownParams.length > 0) {
        node.params = unknownParams.join(" ");
      } else if (params.length > 0) {
        replaceWith(node.nodes);
      }
      return 1;
    }
    if (node.name === "@theme") {
      let [themeOptions, themePrefix] = parseThemeOptions(node.params);
      if (context2.reference) {
        themeOptions |= 2;
      }
      if (themePrefix) {
        if (!IS_VALID_PREFIX2.test(themePrefix)) {
          throw new Error(`The prefix "${themePrefix}" is invalid. Prefixes must be lowercase ASCII letters (a-z) only.`);
        }
        theme2.prefix = themePrefix;
      }
      walk(node.nodes, (child, { replaceWith: replaceWith2 }) => {
        if (child.kind === "at-rule" && child.name === "@keyframes") {
          theme2.addKeyframes(child);
          replaceWith2([]);
          return 1;
        }
        if (child.kind === "comment")
          return;
        if (child.kind === "declaration" && child.property.startsWith("--")) {
          theme2.add(child.property, child.value ?? "", themeOptions);
          return;
        }
        let snippet = toCss([atRule(node.name, node.params, [child])]).split(`
`).map((line, idx, all) => `${idx === 0 || idx >= all.length - 2 ? " " : ">"} ${line}`).join(`
`);
        throw new Error(`\`@theme\` blocks must only contain custom properties or \`@keyframes\`.

${snippet}`);
      });
      if (!firstThemeRule && !(themeOptions & 2)) {
        firstThemeRule = styleRule(":root", node.nodes);
        replaceWith([firstThemeRule]);
      } else {
        replaceWith([]);
      }
      return 1;
    }
  });
  let designSystem = buildDesignSystem(theme2);
  if (important) {
    designSystem.important = important;
  }
  features |= await applyCompatibilityHooks({
    designSystem,
    base,
    ast,
    loadModule,
    globs
  });
  for (let customVariant of customVariants) {
    customVariant(designSystem);
  }
  for (let customUtility of customUtilities) {
    customUtility(designSystem);
  }
  if (firstThemeRule) {
    let nodes = [];
    for (let [key, value3] of theme2.entries()) {
      if (value3.options & 2)
        continue;
      nodes.push(decl(key, value3.value));
    }
    let keyframesRules = theme2.getKeyframes();
    if (keyframesRules.length > 0) {
      let animationParts = [...theme2.namespace("--animate").values()].flatMap((animation) => animation.split(" "));
      for (let keyframesRule of keyframesRules) {
        let keyframesName = keyframesRule.params;
        if (!animationParts.includes(keyframesName)) {
          continue;
        }
        nodes.push(atRoot([keyframesRule]));
      }
    }
    firstThemeRule.nodes = nodes;
  }
  if (utilitiesNode) {
    let node = utilitiesNode;
    node.kind = "context";
    node.context = {};
  }
  features |= substituteFunctions(ast, designSystem);
  features |= substituteAtApply(ast, designSystem);
  walk(ast, (node, { replaceWith }) => {
    if (node.kind !== "at-rule")
      return;
    if (node.name === "@utility") {
      replaceWith([]);
    }
    return 1;
  });
  return {
    designSystem,
    ast,
    globs,
    root,
    utilitiesNode,
    features
  };
}
async function compileAst(input, opts = {}) {
  let { designSystem, ast, globs, root, utilitiesNode, features } = await parseCss(input, opts);
  if (true) {
    ast.unshift(comment(`! tailwindcss v${version} | MIT License | https://tailwindcss.com `));
  }
  function onInvalidCandidate(candidate) {
    designSystem.invalidCandidates.add(candidate);
  }
  let allValidCandidates = new Set;
  let compiled = null;
  let previousAstNodeCount = 0;
  return {
    globs,
    root,
    features,
    build(newRawCandidates) {
      if (features === 0) {
        return input;
      }
      if (!utilitiesNode) {
        compiled ??= optimizeAst(ast);
        return compiled;
      }
      let didChange = false;
      let prevSize = allValidCandidates.size;
      for (let candidate of newRawCandidates) {
        if (!designSystem.invalidCandidates.has(candidate)) {
          allValidCandidates.add(candidate);
          didChange ||= allValidCandidates.size !== prevSize;
        }
      }
      if (!didChange) {
        compiled ??= optimizeAst(ast);
        return compiled;
      }
      let newNodes = compileCandidates(allValidCandidates, designSystem, {
        onInvalidCandidate
      }).astNodes;
      if (previousAstNodeCount === newNodes.length) {
        compiled ??= optimizeAst(ast);
        return compiled;
      }
      previousAstNodeCount = newNodes.length;
      utilitiesNode.nodes = newNodes;
      compiled = optimizeAst(ast);
      return compiled;
    }
  };
}
async function compile(css, opts = {}) {
  let ast = parse(css);
  let api = await compileAst(ast, opts);
  let compiledAst = ast;
  let compiledCss = css;
  return {
    ...api,
    build(newCandidates) {
      let newAst = api.build(newCandidates);
      if (newAst === compiledAst) {
        return compiledCss;
      }
      compiledCss = toCss(newAst);
      compiledAst = newAst;
      return compiledCss;
    }
  };
}
var DEPENDENCY_PATTERNS = [
  /import[\s\S]*?['"](.{3,}?)['"]/gi,
  /import[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi,
  /export[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi,
  /require\(['"`](.+)['"`]\)/gi
];
var JS_EXTENSIONS = [".js", ".cjs", ".mjs"];
var JS_RESOLUTION_ORDER = ["", ".js", ".cjs", ".mjs", ".ts", ".cts", ".mts", ".jsx", ".tsx"];
var TS_RESOLUTION_ORDER = ["", ".ts", ".cts", ".mts", ".tsx", ".js", ".cjs", ".mjs", ".jsx"];
async function resolveWithExtension(file, extensions) {
  for (let ext of extensions) {
    let full = `${file}${ext}`;
    let stats = await fs.stat(full).catch(() => null);
    if (stats?.isFile())
      return full;
  }
  for (let ext of extensions) {
    let full = `${file}/index${ext}`;
    let exists = await fs.access(full).then(() => true, () => false);
    if (exists) {
      return full;
    }
  }
  return null;
}
async function traceDependencies(seen, filename, base, ext) {
  let extensions = JS_EXTENSIONS.includes(ext) ? JS_RESOLUTION_ORDER : TS_RESOLUTION_ORDER;
  let absoluteFile = await resolveWithExtension(path.resolve(base, filename), extensions);
  if (absoluteFile === null)
    return;
  if (seen.has(absoluteFile))
    return;
  seen.add(absoluteFile);
  base = path.dirname(absoluteFile);
  ext = path.extname(absoluteFile);
  let contents = await fs.readFile(absoluteFile, "utf-8");
  let promises = [];
  for (let pattern of DEPENDENCY_PATTERNS) {
    for (let match of contents.matchAll(pattern)) {
      if (!match[1].startsWith("."))
        continue;
      promises.push(traceDependencies(seen, match[1], base, ext));
    }
  }
  await Promise.all(promises);
}
async function getModuleDependencies(absoluteFilePath) {
  let seen = new Set;
  await traceDependencies(seen, absoluteFilePath, path.dirname(absoluteFilePath), path.extname(absoluteFilePath));
  return Array.from(seen);
}
function normalizePathBase(path22, stripTrailing) {
  if (typeof path22 !== "string") {
    throw new TypeError("expected path to be a string");
  }
  if (path22 === "\\" || path22 === "/")
    return "/";
  var len = path22.length;
  if (len <= 1)
    return path22;
  var prefix = "";
  if (len > 4 && path22[3] === "\\") {
    var ch = path22[2];
    if ((ch === "?" || ch === ".") && path22.slice(0, 2) === "\\\\") {
      path22 = path22.slice(2);
      prefix = "//";
    }
  }
  var segs = path22.split(/[/\\]+/);
  if (stripTrailing !== false && segs[segs.length - 1] === "") {
    segs.pop();
  }
  return prefix + segs.join("/");
}
function normalizePath(originalPath) {
  let normalized = normalizePathBase(originalPath);
  if (originalPath.startsWith("\\\\") && normalized.startsWith("/") && !normalized.startsWith("//")) {
    return `/${normalized}`;
  }
  return normalized;
}
var cssUrlRE = /(?<!@import\s+)(?<=^|[^\w\-\u0080-\uffff])url\((\s*('[^']+'|"[^"]+")\s*|[^'")]+)\)/;
var cssImageSetRE = /(?<=image-set\()((?:[\w-]{1,256}\([^)]*\)|[^)])*)(?=\))/;
var cssNotProcessedRE = /(?:gradient|element|cross-fade|image)\(/;
var dataUrlRE = /^\s*data:/i;
var externalRE = /^([a-z]+:)?\/\//;
var functionCallRE = /^[A-Z_][.\w-]*\(/i;
var imageCandidateRE = /(?:^|\s)(?<url>[\w-]+\([^)]*\)|"[^"]*"|'[^']*'|[^,]\S*[^,])\s*(?:\s(?<descriptor>\w[^,]+))?(?:,|$)/g;
var nonEscapedDoubleQuoteRE = /(?<!\\)"/g;
var escapedSpaceCharactersRE = /(?: |\\t|\\n|\\f|\\r)+/g;
var isDataUrl = (url) => dataUrlRE.test(url);
var isExternalUrl = (url) => externalRE.test(url);
async function rewriteUrls({
  css,
  base,
  root
}) {
  if (!css.includes("url(") && !css.includes("image-set(")) {
    return css;
  }
  let ast = parse(css);
  let promises = [];
  function replacerForDeclaration(url) {
    if (url[0] === "/")
      return url;
    let absoluteUrl = path2.posix.join(normalizePath(base), url);
    let relativeUrl = path2.posix.relative(normalizePath(root), absoluteUrl);
    if (!relativeUrl.startsWith(".")) {
      relativeUrl = "./" + relativeUrl;
    }
    return relativeUrl;
  }
  walk(ast, (node) => {
    if (node.kind !== "declaration")
      return;
    if (!node.value)
      return;
    let isCssUrl = cssUrlRE.test(node.value);
    let isCssImageSet = cssImageSetRE.test(node.value);
    if (isCssUrl || isCssImageSet) {
      let rewriterToUse = isCssImageSet ? rewriteCssImageSet : rewriteCssUrls;
      promises.push(rewriterToUse(node.value, replacerForDeclaration).then((url) => {
        node.value = url;
      }));
    }
  });
  if (promises.length) {
    await Promise.all(promises);
  }
  return toCss(ast);
}
function rewriteCssUrls(css, replacer) {
  return asyncReplace(css, cssUrlRE, async (match) => {
    const [matched, rawUrl] = match;
    return await doUrlReplace(rawUrl.trim(), matched, replacer);
  });
}
async function rewriteCssImageSet(css, replacer) {
  return await asyncReplace(css, cssImageSetRE, async (match) => {
    const [, rawUrl] = match;
    const url = await processSrcSet(rawUrl, async ({ url: url2 }) => {
      if (cssUrlRE.test(url2)) {
        return await rewriteCssUrls(url2, replacer);
      }
      if (!cssNotProcessedRE.test(url2)) {
        return await doUrlReplace(url2, url2, replacer);
      }
      return url2;
    });
    return url;
  });
}
async function doUrlReplace(rawUrl, matched, replacer, funcName = "url") {
  let wrap = "";
  const first = rawUrl[0];
  if (first === `"` || first === `'`) {
    wrap = first;
    rawUrl = rawUrl.slice(1, -1);
  }
  if (skipUrlReplacer(rawUrl)) {
    return matched;
  }
  let newUrl = await replacer(rawUrl);
  if (wrap === "" && newUrl !== encodeURI(newUrl)) {
    wrap = '"';
  }
  if (wrap === "'" && newUrl.includes("'")) {
    wrap = '"';
  }
  if (wrap === '"' && newUrl.includes('"')) {
    newUrl = newUrl.replace(nonEscapedDoubleQuoteRE, "\\\"");
  }
  return `${funcName}(${wrap}${newUrl}${wrap})`;
}
function skipUrlReplacer(rawUrl) {
  return isExternalUrl(rawUrl) || isDataUrl(rawUrl) || rawUrl[0] === "#" || functionCallRE.test(rawUrl);
}
function processSrcSet(srcs, replacer) {
  return Promise.all(parseSrcset(srcs).map(async ({ url, descriptor }) => ({
    url: await replacer({ url, descriptor }),
    descriptor
  }))).then(joinSrcset);
}
function parseSrcset(string) {
  const matches = string.trim().replace(escapedSpaceCharactersRE, " ").replace(/\r?\n/, "").replace(/,\s+/, ", ").replaceAll(/\s+/g, " ").matchAll(imageCandidateRE);
  return Array.from(matches, ({ groups }) => ({
    url: groups?.url?.trim() ?? "",
    descriptor: groups?.descriptor?.trim() ?? ""
  })).filter(({ url }) => !!url);
}
function joinSrcset(ret) {
  return ret.map(({ url, descriptor }) => url + (descriptor ? ` ${descriptor}` : "")).join(", ");
}
async function asyncReplace(input, re, replacer) {
  let match;
  let remaining = input;
  let rewritten = "";
  while (match = re.exec(remaining)) {
    rewritten += remaining.slice(0, match.index);
    rewritten += await replacer(match);
    remaining = remaining.slice(match.index + match[0].length);
  }
  rewritten += remaining;
  return rewritten;
}
function createCompileOptions({
  base,
  onDependency,
  shouldRewriteUrls,
  customCssResolver,
  customJsResolver
}) {
  return {
    base,
    async loadModule(id, base2) {
      return loadModule(id, base2, onDependency, customJsResolver);
    },
    async loadStylesheet(id, base2) {
      let sheet = await loadStylesheet(id, base2, onDependency, customCssResolver);
      if (shouldRewriteUrls) {
        sheet.content = await rewriteUrls({
          css: sheet.content,
          root: base2,
          base: sheet.base
        });
      }
      return sheet;
    }
  };
}
async function ensureSourceDetectionRootExists(compiler, base) {
  if (compiler.root && compiler.root !== "none") {
    let globSymbols = /[*{]/;
    let basePath = [];
    for (let segment2 of compiler.root.pattern.split("/")) {
      if (globSymbols.test(segment2)) {
        break;
      }
      basePath.push(segment2);
    }
    let exists = await fsPromises.stat(path3.resolve(base, basePath.join("/"))).then((stat) => stat.isDirectory()).catch(() => false);
    if (!exists) {
      throw new Error(`The \`source(${compiler.root.pattern})\` does not exist`);
    }
  }
}
async function compile2(css, options) {
  let compiler = await compile(css, createCompileOptions(options));
  await ensureSourceDetectionRootExists(compiler, options.base);
  return compiler;
}
async function loadModule(id, base, onDependency, customJsResolver) {
  if (id[0] !== ".") {
    let resolvedPath2 = await resolveJsId(id, base, customJsResolver);
    if (!resolvedPath2) {
      throw new Error(`Could not resolve '${id}' from '${base}'`);
    }
    let module2 = await importModule(pathToFileURL(resolvedPath2).href);
    return {
      base: dirname(resolvedPath2),
      module: module2.default ?? module2
    };
  }
  let resolvedPath = await resolveJsId(id, base, customJsResolver);
  if (!resolvedPath) {
    throw new Error(`Could not resolve '${id}' from '${base}'`);
  }
  let [module, moduleDependencies] = await Promise.all([
    importModule(pathToFileURL(resolvedPath).href + "?id=" + Date.now()),
    getModuleDependencies(resolvedPath)
  ]);
  for (let file of moduleDependencies) {
    onDependency(file);
  }
  return {
    base: dirname(resolvedPath),
    module: module.default ?? module
  };
}
async function loadStylesheet(id, base, onDependency, cssResolver) {
  let resolvedPath = await resolveCssId(id, base, cssResolver);
  if (!resolvedPath)
    throw new Error(`Could not resolve '${id}' from '${base}'`);
  onDependency(resolvedPath);
  if (typeof globalThis.__tw_readFile === "function") {
    let file2 = await globalThis.__tw_readFile(resolvedPath, "utf-8");
    if (file2) {
      return {
        base: path3.dirname(resolvedPath),
        content: file2
      };
    }
  }
  let file = await fsPromises.readFile(resolvedPath, "utf-8");
  return {
    base: path3.dirname(resolvedPath),
    content: file
  };
}
var jiti = null;
async function importModule(path4) {
  if (typeof globalThis.__tw_load === "function") {
    let module = await globalThis.__tw_load(path4);
    if (module) {
      return module;
    }
  }
  try {
    return await import(path4);
  } catch (error) {
    jiti ??= createJiti(import.meta.url, { moduleCache: false, fsCache: false });
    return await jiti.import(path4);
  }
}
var cssResolver = import_enhanced_resolve.default.ResolverFactory.createResolver({
  fileSystem: new import_enhanced_resolve.default.CachedInputFileSystem(fs2, 4000),
  useSyncFileSystemCalls: true,
  extensions: [".css"],
  mainFields: ["style"],
  conditionNames: ["style"]
});
async function resolveCssId(id, base, customCssResolver) {
  if (typeof globalThis.__tw_resolve === "function") {
    let resolved = globalThis.__tw_resolve(id, base);
    if (resolved) {
      return Promise.resolve(resolved);
    }
  }
  if (customCssResolver) {
    let customResolution = await customCssResolver(id, base);
    if (customResolution) {
      return customResolution;
    }
  }
  return runResolver(cssResolver, id, base);
}
var esmResolver = import_enhanced_resolve.default.ResolverFactory.createResolver({
  fileSystem: new import_enhanced_resolve.default.CachedInputFileSystem(fs2, 4000),
  useSyncFileSystemCalls: true,
  extensions: [".js", ".json", ".node", ".ts"],
  conditionNames: ["node", "import"]
});
var cjsResolver = import_enhanced_resolve.default.ResolverFactory.createResolver({
  fileSystem: new import_enhanced_resolve.default.CachedInputFileSystem(fs2, 4000),
  useSyncFileSystemCalls: true,
  extensions: [".js", ".json", ".node", ".ts"],
  conditionNames: ["node", "require"]
});
async function resolveJsId(id, base, customJsResolver) {
  if (typeof globalThis.__tw_resolve === "function") {
    let resolved = globalThis.__tw_resolve(id, base);
    if (resolved) {
      return Promise.resolve(resolved);
    }
  }
  if (customJsResolver) {
    let customResolution = await customJsResolver(id, base);
    if (customResolution) {
      return customResolution;
    }
  }
  return runResolver(esmResolver, id, base).catch(() => runResolver(cjsResolver, id, base));
}
function runResolver(resolver, id, base) {
  return new Promise((resolve, reject) => resolver.resolve({}, base, id, {}, (err, result) => {
    if (err)
      return reject(err);
    resolve(result);
  }));
}
Symbol.dispose ??= Symbol("Symbol.dispose");
Symbol.asyncDispose ??= Symbol("Symbol.asyncDispose");

class Instrumentation {
  defaultFlush;
  #hits = new DefaultMap(() => ({ value: 0 }));
  #timers = new DefaultMap(() => ({ value: 0n }));
  #timerStack = [];
  constructor(defaultFlush = (message) => void process.stderr.write(`${message}
`)) {
    this.defaultFlush = defaultFlush;
  }
  hit(label) {
    this.#hits.get(label).value++;
  }
  start(label) {
    let namespace = this.#timerStack.map((t) => t.label).join("//");
    let id = `${namespace}${namespace.length === 0 ? "" : "//"}${label}`;
    this.#hits.get(id).value++;
    this.#timers.get(id);
    this.#timerStack.push({ id, label, namespace, value: process.hrtime.bigint() });
  }
  end(label) {
    let end = process.hrtime.bigint();
    if (this.#timerStack[this.#timerStack.length - 1].label !== label) {
      throw new Error(`Mismatched timer label: \`${label}\`, expected \`${this.#timerStack[this.#timerStack.length - 1].label}\``);
    }
    let parent = this.#timerStack.pop();
    let elapsed = end - parent.value;
    this.#timers.get(parent.id).value += elapsed;
  }
  reset() {
    this.#hits.clear();
    this.#timers.clear();
    this.#timerStack.splice(0);
  }
  report(flush = this.defaultFlush) {
    let output = [];
    let hasHits = false;
    for (let i = this.#timerStack.length - 1;i >= 0; i--) {
      this.end(this.#timerStack[i].label);
    }
    for (let [label, { value: count }] of this.#hits.entries()) {
      if (this.#timers.has(label))
        continue;
      if (output.length === 0) {
        hasHits = true;
        output.push("Hits:");
      }
      let depth = label.split("//").length;
      output.push(`${"  ".repeat(depth)}${label} ${dim(blue(`\xD7 ${count}`))}`);
    }
    if (this.#timers.size > 0 && hasHits) {
      output.push(`
Timers:`);
    }
    let max = -Infinity;
    let computed = new Map;
    for (let [label, { value: value3 }] of this.#timers) {
      let x = `${(Number(value3) / 1e6).toFixed(2)}ms`;
      computed.set(label, x);
      max = Math.max(max, x.length);
    }
    for (let label of this.#timers.keys()) {
      let depth = label.split("//").length;
      output.push(`${dim(`[${computed.get(label).padStart(max, " ")}]`)}${"  ".repeat(depth - 1)}${depth === 1 ? " " : dim(" \u21B3 ")}${label.split("//").pop()} ${this.#hits.get(label).value === 1 ? "" : dim(blue(`\xD7 ${this.#hits.get(label).value}`))}`.trimEnd());
    }
    flush(`
${output.join(`
`)}
`);
    this.reset();
  }
  [Symbol.dispose]() {
    DEBUG && this.report();
  }
}
function dim(input) {
  return `\x1B[2m${input}\x1B[22m`;
}
function blue(input) {
  return `\x1B[34m${input}\x1B[39m`;
}
if (!process.versions.bun) {
  let localRequire = Module.createRequire(import.meta.url);
  Module.register?.(pathToFileURL2(localRequire.resolve("@tailwindcss/node/esm-cache-loader")));
}

// ../../crates/node/index.js
var __dirname = "/Users/zackradisic/Code/tailwindcss/crates/node";
var { existsSync, readFileSync } = __require("fs");
var { join } = __require("path");
var { platform, arch } = process;
var nativeBinding = null;
var localFileExisted = false;
var loadError = null;
function isMusl() {
  if (!process.report || typeof process.report.getReport !== "function") {
    try {
      const lddPath = __require("child_process").execSync("which ldd").toString().trim();
      return readFileSync(lddPath, "utf8").includes("musl");
    } catch (e) {
      return true;
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header;
    return !glibcVersionRuntime;
  }
}
switch (platform) {
  case "android":
    switch (arch) {
      case "arm64":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.android-arm64.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.android-arm64.node");})();
          } else {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-android-arm64");})();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.android-arm-eabi.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.android-arm-eabi.node");})();
          } else {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-android-arm-eabi");})();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`);
    }
    break;
  case "win32":
    switch (arch) {
      case "x64":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.win32-x64-msvc.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.win32-x64-msvc.node");})();
          } else {
            nativeBinding = require_tailwindcss_oxide_win32_x64_msvc();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "ia32":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.win32-ia32-msvc.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.win32-ia32-msvc.node");})();
          } else {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-win32-ia32-msvc");})();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm64":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.win32-arm64-msvc.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.win32-arm64-msvc.node");})();
          } else {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-win32-arm64-msvc");})();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`);
    }
    break;
  case "darwin":
    localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.darwin-universal.node"));
    try {
      if (localFileExisted) {
        nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.darwin-universal.node");})();
      } else {
        nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-darwin-universal");})();
      }
      break;
    } catch {
    }
    switch (arch) {
      case "x64":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.darwin-x64.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.darwin-x64.node");})();
          } else {
            nativeBinding = require_tailwindcss_oxide_darwin_x64();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case "arm64":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.darwin-arm64.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.darwin-arm64.node");})();
          } else {
            nativeBinding = require_tailwindcss_oxide_darwin_arm64();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`);
    }
    break;
  case "freebsd":
    if (arch !== "x64") {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);
    }
    localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.freebsd-x64.node"));
    try {
      if (localFileExisted) {
        nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.freebsd-x64.node");})();
      } else {
        nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-freebsd-x64");})();
      }
    } catch (e) {
      loadError = e;
    }
    break;
  case "linux":
    switch (arch) {
      case "x64":
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-x64-musl.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-x64-musl.node");})();
            } else {
              nativeBinding = require_tailwindcss_oxide_linux_x64_musl();
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-x64-gnu.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-x64-gnu.node");})();
            } else {
              nativeBinding = require_tailwindcss_oxide_linux_x64_gnu();
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "arm64":
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-arm64-musl.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-arm64-musl.node");})();
            } else {
              nativeBinding = require_tailwindcss_oxide_linux_arm64_musl();
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-arm64-gnu.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-arm64-gnu.node");})();
            } else {
              nativeBinding = require_tailwindcss_oxide_linux_arm64_gnu();
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "arm":
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-arm-musleabihf.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-arm-musleabihf.node");})();
            } else {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-linux-arm-musleabihf");})();
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-arm-gnueabihf.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-arm-gnueabihf.node");})();
            } else {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-linux-arm-gnueabihf");})();
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "riscv64":
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-riscv64-musl.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-riscv64-musl.node");})();
            } else {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-linux-riscv64-musl");})();
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-riscv64-gnu.node"));
          try {
            if (localFileExisted) {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-riscv64-gnu.node");})();
            } else {
              nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-linux-riscv64-gnu");})();
            }
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case "s390x":
        localFileExisted = existsSync(join(__dirname, "tailwindcss-oxide.linux-s390x-gnu.node"));
        try {
          if (localFileExisted) {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"./tailwindcss-oxide.linux-s390x-gnu.node");})();
          } else {
            nativeBinding = (()=>{throw new Error("Cannot require module "+"@tailwindcss/oxide-linux-s390x-gnu");})();
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}
if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}
var { Scanner, bunPluginRegister, twctxCreate, twctxToJs, twctxIsDirty } = nativeBinding;
var $Scanner = Scanner;
var $twctxCreate = twctxCreate;
var $twctxToJs = twctxToJs;
var $twctxIsDirty = twctxIsDirty;
var $nativeBinding = nativeBinding;

// src/index.ts
import * as path4 from "path";
var addon = $nativeBinding;
var SPECIAL_QUERY_RE = /[?&](raw|url)\b/;
var NON_CSS_ROOT_FILE_RE = /(?:\/\.vite\/|(?!\.css$|\.vue\?.*&lang\.css|\.astro\?.*&lang\.css|\.svelte\?.*&lang\.css).*|\?(?:raw|url)\b)/;
var plugin = {
  name: "tailwindcss",
  setup(build) {
    const external = $twctxCreate();
    let maybeInputBase = undefined;
    if (build.config.outdir) {
      maybeInputBase = path4.dirname(path4.resolve(build.config.outdir));
    }
    if (build.config.root) {
      maybeInputBase = path4.resolve(build.config.root);
    }
    let moduleGraphCandidates = new Map;
    function getSharedCandidates() {
      if ($twctxIsDirty(external)) {
        let rawCandidates = $twctxToJs(external);
        for (let { id, candidates } of rawCandidates) {
          moduleGraphCandidates.set(id, new Set(candidates));
        }
      }
      return moduleGraphCandidates;
    }
    build.onBeforeParse({ filter: NON_CSS_ROOT_FILE_RE }, { napiModule: addon, symbol: "tw_on_before_parse", external });
    build.onLoad({ filter: /\.css/ }, async ({ defer, path: inputPath }) => {
      if (!isPotentialCssRootFile(inputPath))
        return;
      let inputBaseForRoot = path4.dirname(path4.resolve(inputPath));
      let sourceContents = await Bun.file(inputPath).text();
      let compiler = await compile2(sourceContents, {
        base: inputBaseForRoot,
        onDependency() {
        }
      });
      await defer();
      let candidates = new Set;
      let sources = (() => {
        if (compiler.root === "none") {
          return [];
        }
        if (compiler.root === null) {
          return [];
        }
        return [compiler.root];
      })().concat(compiler.globs);
      let scanner = new $Scanner({ sources });
      if (!(compiler.features & (Features.AtApply | Features.JsPluginCompat | Features.ThemeFunction | Features.Utilities))) {
        return;
      }
      if (compiler.features & Features.Utilities) {
        for (let candidate of scanner.scan()) {
          candidates.add(candidate);
        }
      }
      if (compiler.features & Features.Utilities) {
      }
      let inputBase = maybeInputBase || inputBaseForRoot;
      let contents = compiler.build([
        ...sharedCandidates(compiler, inputBase, getSharedCandidates),
        ...candidates
      ]);
      return {
        contents,
        loader: "css"
      };
    });
  }
};
var src_default = plugin;
function sharedCandidates(compiler, basePath, getSharedCandidates) {
  if (compiler.root === "none")
    return new Set;
  const HAS_DRIVE_LETTER = /^[A-Z]:/;
  let shouldIncludeCandidatesFrom = (id) => {
    if (basePath === null)
      return true;
    if (id.startsWith(basePath))
      return true;
    if (HAS_DRIVE_LETTER.test(id))
      return false;
    if (!id.startsWith("/"))
      return true;
    return false;
  };
  let shared = new Set;
  for (let [id, candidates] of getSharedCandidates()) {
    if (!shouldIncludeCandidatesFrom(id))
      continue;
    for (let candidate of candidates) {
      shared.add(candidate);
    }
  }
  return shared;
}
function isPotentialCssRootFile(id) {
  if (id.includes("/.vite/"))
    return;
  let extension = getExtension(id);
  let isCssFile = (extension === "css" || extension === "vue" && id.includes("&lang.css") || extension === "astro" && id.includes("&lang.css") || isSvelteStyle(id)) && !SPECIAL_QUERY_RE.test(id);
  return isCssFile;
}
function getExtension(id) {
  let [filename] = id.split("?", 2);
  return path4.extname(filename).slice(1);
}
function isSvelteStyle(id) {
  let extension = getExtension(id);
  return extension === "svelte" && id.includes("&lang.css");
}
export {
  src_default as default
};
